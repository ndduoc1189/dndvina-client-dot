import base64
exec(base64.b64decode('import time
import subprocess
import json
import requests
from typing import Dict, Any, Optional, List
import config
import utils
from utils import LogLevel, Logger

# Tạo logger riêng cho GoLikeService
logger = utils.get_logger("GoLikeService")

# Kiểm tra và import các thư viện cần thiết
try:
    import pychrome
    PYCHROME_AVAILABLE = True
except ImportError:
    logger.warning("Thư viện pychrome không khả dụng. Hãy cài đặt bằng lệnh: pip install pychrome")
    PYCHROME_AVAILABLE = False

try:
    import cloudscraper
    CLOUDSCRAPER_AVAILABLE = True
except ImportError:
    logger.warning("Thư viện cloudscraper không khả dụng. Hãy cài đặt bằng lệnh: pip install cloudscraper")
    CLOUDSCRAPER_AVAILABLE = False

try:
    import curl_cffi
    from curl_cffi import requests as curl_requests
    CURL_CFFI_AVAILABLE = True
except ImportError:
    logger.warning("Thư viện curl_cffi không khả dụng. Hãy cài đặt bằng lệnh: pip install curl-cffi")
    CURL_CFFI_AVAILABLE = False

class Browser:
    """
    Lớp giả lập Browser của pychrome nếu thư viện không khả dụng
    """
    def __init__(self, url):
        self.url = url
        
    def list_tab(self):
        return []
        
    def new_tab(self):
        return None

class GoLikeService:
    def __init__(self, db_service, helper_service):
        """
        Khởi tạo GoLike Service
        
        Args:
            db_service: Database service để lưu thông tin
            helper_service: Helper service để tương tác với thiết bị
        """
        self.db = db_service
        self.helper = helper_service
        
        # Cấu hình cho API requests
        self.user_agent = "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36"
        
        # Quyết định sử dụng curl_cffi hay cloudscraper
        # Trên Termux thường sử dụng cloudscraper do curl_cffi có thể không tương thích
        is_termux = self._check_is_termux()
        self.use_curl_cffi = not is_termux and CURL_CFFI_AVAILABLE
        
        # Khởi tạo client
        if not self.use_curl_cffi and CLOUDSCRAPER_AVAILABLE:
            self.client = cloudscraper.create_scraper(
                browser={
                    'browser': 'chrome',
                    'platform': 'android',
                    'desktop': False
                }
            )
        else:
            # Fallback to regular requests if neither is available
            self.client = requests.Session()
            
        # Cấu hình tùy chọn cho curl_cffi
        self.impersonate = "chrome110"
        
        # Biến theo dõi thread report
        self.report_thread = None
        
        # Khởi động thread report
        self.start_report_thread()

    def _check_is_termux(self) -> bool:
        """
        Kiểm tra xem ứng dụng có đang chạy trên Termux không
        
        Returns:
            bool: True nếu đang chạy trên Termux
        """
        try:
            # Kiểm tra biến môi trường TERMUX_VERSION hoặc đường dẫn Termux trong PATH
            import os
            return 'TERMUX_VERSION' in os.environ or '/data/data/com.termux' in os.environ.get('PATH', '')
        except:
            return False

    def fetch_golike_headers(self) -> bool:
        """
        Lấy headers từ Chrome và lưu vào database
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        if not PYCHROME_AVAILABLE:
            logger.error("Không thể lấy GoLike headers: thư viện pychrome không khả dụng")
            return False
        
        from pychrome import Browser
        
        try:
            # Kiểm tra Chrome đã cài đặt chưa
            if not self.helper.is_app_installed("com.android.chrome"):
                logger.error("Chrome chưa được cài đặt trên thiết bị")
                return False
                
            # Mở Chrome
            logger.info("Mở ứng dụng Chrome...")
            result = self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
            if result["status"] != "success":
                logger.error("Không thể mở Chrome")
                return False
                
            time.sleep(3)
            
            # Mở Chrome debug port bằng ADB
            try:
                # Sử dụng ADB đã kết nối
                if self.helper.is_adb_connected:
                    # Lấy tham số thiết bị từ helper
                    device_params = self.helper._get_adb_device_param()
                    
                    # Thực hiện lệnh forward với tham số thiết bị
                    cmd = ["adb"] + device_params + ["forward", "tcp:9222", "localabstract:chrome_devtools_remote"]
                    subprocess.run(
                        cmd,
                        check=True,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE
                    )
                else:
                    logger.error("ADB không được kết nối, không thể mở Chrome debug port")
                    return False
            except subprocess.SubprocessError as e:
                logger.error(f"Lỗi khi mở Chrome debug port: {e}")
                return False
                
            # Kết nối đến Chrome bằng pychrome
            browser = Browser("http://localhost:9222")
            
            # Kiểm tra các tab đang mở
            golike_tab = None
            
            # Kiểm tra xem có search box không
            search_box = self.helper.find_element(resource_id="com.android.chrome:id/search_box")
            if search_box:
                logger.info("Tạo tab mới...")
                try:
                    # Thử tạo tab mới với xử lý lỗi JSONDecodeError
                    try:
                        golike_tab = browser.new_tab()
                        golike_tab.start()
                    except (json.JSONDecodeError, requests.exceptions.JSONDecodeError) as e:
                        logger.error(f"Lỗi JSON khi tạo tab mới: {e}. Thử khởi động lại Chrome.")
                        self.helper.close_app("com.android.chrome")
                        time.sleep(2)
                        self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                        time.sleep(3)
                        
                        # Thực hiện lại lệnh forward
                        device_params = self.helper._get_adb_device_param()
                        cmd = ["adb"] + device_params + ["forward", "tcp:9222", "localabstract:chrome_devtools_remote"]
                        subprocess.run(
                            cmd,
                            check=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE
                        )
                        
                        # Thử kết nối lại
                        browser = Browser("http://localhost:9222")
                        golike_tab = browser.new_tab()
                        golike_tab.start()
                except Exception as e:
                    if "WebSocketConnectionClosedException" in str(e):
                        logger.error("Kết nối WebSocket đã đóng khi tạo tab mới. Thử đóng và mở lại Chrome.")
                        self.helper.close_app("com.android.chrome")
                        time.sleep(2)
                        self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                        time.sleep(3)
                        return False
                    else:
                        logger.exception(e, "Lỗi khi tạo tab mới")
                        return False
            else:
                # Kiểm tra các tab đang mở
                try:
                    try:
                        tabs = browser.list_tab()
                    except (json.JSONDecodeError, requests.exceptions.JSONDecodeError) as e:
                        logger.error(f"Lỗi JSON khi liệt kê tab: {e}. Thử khởi động lại Chrome.")
                        self.helper.close_app("com.android.chrome")
                        time.sleep(2)
                        self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                        time.sleep(3)
                        
                        # Thực hiện lại lệnh forward
                        device_params = self.helper._get_adb_device_param()
                        cmd = ["adb"] + device_params + ["forward", "tcp:9222", "localabstract:chrome_devtools_remote"]
                        subprocess.run(
                            cmd,
                            check=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE
                        )
                        
                        # Thử kết nối lại
                        browser = Browser("http://localhost:9222")
                        tabs = browser.list_tab()
                    
                    # Tìm tab golike
                    for tab in tabs:
                        try:
                            tab.start()
                            tab_info = tab.call_method("Runtime.evaluate", 
                                expression="window.location.href",
                                timeout=10)
                            if tab_info and "result" in tab_info and "value" in tab_info["result"]:
                                current_url = tab_info["result"]["value"]
                                if "app.golike.net" in current_url:
                                    logger.info("Đã tìm thấy tab GoLike")
                                    golike_tab = tab
                                    break
                        except Exception as e:
                            if "WebSocketConnectionClosedException" in str(e):
                                logger.warning(f"Kết nối WebSocket đã đóng khi kiểm tra tab: {str(e)}")
                                continue
                            else:
                                logger.error(f"Lỗi khi kiểm tra tab: {str(e)}")
                                continue
                    
                    if not golike_tab:
                        logger.info("Không tìm thấy tab GoLike, tạo tab mới...")
                        try:
                            try:
                                golike_tab = browser.new_tab()
                                golike_tab.start()
                            except (json.JSONDecodeError, requests.exceptions.JSONDecodeError) as e:
                                logger.error(f"Lỗi JSON khi tạo tab mới: {e}. Thử khởi động lại Chrome.")
                                self.helper.close_app("com.android.chrome")
                                time.sleep(2)
                                self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                                time.sleep(3)
                                
                                # Thực hiện lại lệnh forward
                                device_params = self.helper._get_adb_device_param()
                                cmd = ["adb"] + device_params + ["forward", "tcp:9222", "localabstract:chrome_devtools_remote"]
                                subprocess.run(
                                    cmd,
                                    check=True,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE
                                )
                                
                                # Thử kết nối lại
                                browser = Browser("http://localhost:9222")
                                golike_tab = browser.new_tab()
                                golike_tab.start()
                        except Exception as e:
                            if "WebSocketConnectionClosedException" in str(e):
                                logger.error("Kết nối WebSocket đã đóng khi tạo tab mới. Thử đóng và mở lại Chrome.")
                                self.helper.close_app("com.android.chrome")
                                time.sleep(2)
                                self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                                time.sleep(3)
                                return False
                            else:
                                logger.exception(e, "Lỗi khi tạo tab mới")
                                return False
                except Exception as e:
                    if "WebSocketConnectionClosedException" in str(e):
                        logger.error("Kết nối WebSocket đã đóng khi liệt kê tab. Thử đóng và mở lại Chrome.")
                        self.helper.close_app("com.android.chrome")
                        time.sleep(2)
                        self.helper.open_app("com.android.chrome", "com.google.android.apps.chrome.Main")
                        time.sleep(3)
                        return False
                    else:
                        logger.exception(e, "Lỗi khi kiểm tra các tab")
                        return False
            
            # Bật theo dõi mạng
            try:
                golike_tab.Network.enable()
            except Exception as e:
                if "WebSocketConnectionClosedException" in str(e):
                    logger.error("Kết nối WebSocket đã đóng khi bật theo dõi mạng. Thử đóng và mở lại Chrome.")
                    self.helper.close_app("com.android.chrome")
                    time.sleep(2)
                    return False
                else:
                    logger.exception(e, "Lỗi khi bật theo dõi mạng")
                    return False
            
            # Biến để kiểm tra xem request đã được ghi nhận chưa
            request_captured = False
            headers = None
            
            # Đăng ký sự kiện requestWillBeSent
            def request_callback(**kwargs):
                nonlocal request_captured, headers
                if request_captured:
                    return
                
                request = kwargs.get("request", {})
                url = request.get("url", "")
                method = request.get("method", "")
                if "https://gateway.golike.net/api/statistics/report" in url and method == "GET":
                    headers = request.get("headers", {})
                    logger.info("Đã ghi nhận headers GoLike thành công")
                    request_captured = True
            
            golike_tab.Network.requestWillBeSent = request_callback
            
            # Tải lại trang để ghi nhận request
            try:
                golike_tab.call_method("Page.navigate", url="https://app.golike.net")
            except Exception as e:
                if "WebSocketConnectionClosedException" in str(e):
                    logger.error("Kết nối WebSocket đã đóng khi tải lại trang. Thử đóng và mở lại Chrome.")
                    self.helper.close_app("com.android.chrome")
                    time.sleep(2)
                    return False
                else:
                    logger.exception(e, "Lỗi khi tải lại trang")
                    return False
            
            # Đợi 10 giây để ghi nhận request
            time.sleep(10)
            
            # Tắt theo dõi mạng và xóa listener
            try:
                golike_tab.Network.disable()
                golike_tab.Network.requestWillBeSent = None
            except Exception as e:
                if "WebSocketConnectionClosedException" in str(e):
                    logger.warning("Kết nối WebSocket đã đóng khi tắt theo dõi mạng. Tiếp tục xử lý.")
                    # Không return vì đã có thể lấy được headers
                else:
                    logger.warning(f"Lỗi khi tắt theo dõi mạng: {str(e)}")
            
            if headers:
                # Lưu headers vào database
                self.save_golike_headers(headers)
                logger.info("Đã lưu headers vào database")
                return True
            else:
                logger.warning("Không thể lấy thông tin xác thực GoLike, vui lòng kiểm tra lại")
                return False
                
        except Exception as e:
            if "WebSocketConnectionClosedException" in str(e):
                logger.error("Kết nối WebSocket đã đóng. Thử đóng và mở lại Chrome.")
                self.helper.close_app("com.android.chrome")
                time.sleep(2)
                return False
            else:
                logger.exception(e, "Lỗi khi mở Chrome và kết nối")
                return False
    
    def save_golike_headers(self, headers: Dict[str, Any]) -> bool:
        """
        Lưu GoLike headers vào database
        
        Args:
            headers: Headers từ request GoLike
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Chỉ lưu vào cấu hình thiết bị để đồng bộ với server
            self.db.set_device_config("golike_headers", headers)
            self.db.set_device_config("golike_headers_updated", int(time.time()))
            
            return True
        except Exception as e:
            logger.error(f"Lỗi khi lưu GoLike headers: {e}")
            return False
    
    def get_golike_headers(self) -> Dict[str, Any]:
        """
        Lấy GoLike headers từ database
        
        Returns:
            Dict[str, Any]: Headers hoặc dictionary rỗng nếu không có
        """
        # Chỉ lấy từ cấu hình thiết bị
        return self.db.get_device_config("golike_headers", {})
        
    def is_golike_authenticated(self) -> bool:
        """~
        Kiểm tra xem đã có thông tin xác thực GoLike chưa
        
        Returns:
            bool: True nếu đã xác thực, False nếu chưa
        """
        headers = self.get_golike_headers()
        # Kiểm tra có authorization trong headers
        return bool(headers)
    
    def fetch_golike_headers_with_retry(self, force_refresh: bool = False) -> bool:
        """
        Lấy GoLike headers với cơ chế thử lại. Thử lại tối đa 5 lần nếu thất bại.
        Chỉ lấy lại headers 1 lần mỗi ngày dựa vào thời gian cập nhật cuối cùng.
        
        Args:
            force_refresh: Nếu True, sẽ luôn lấy lại headers bất kể thời gian cập nhật cuối
            
        Returns:
            bool: True nếu đã có headers hợp lệ hoặc lấy được headers mới, False nếu không lấy được
        """
        # Kiểm tra xem đã có thông tin xác thực GoLike chưa
        if self.is_golike_authenticated() and not force_refresh:
            # Kiểm tra thời gian cập nhật cuối
            last_update = self.db.get("golike_headers_updated", 0)
            current_time = int(time.time())
            
            # Nếu đã cập nhật trong vòng 24 giờ qua, không cần lấy lại
            if current_time - last_update < 86400:  # 24 giờ = 86400 giây
                logger.info("Đã có thông tin xác thực GoLike và chưa quá 24 giờ từ lần cập nhật cuối")
                return True
            else:
                logger.info("Đã quá 24 giờ từ lần cập nhật cuối, sẽ làm mới headers GoLike")
        else:
            if force_refresh:
                logger.info("Bắt buộc làm mới headers GoLike")
            else:
                logger.info("Chưa có thông tin xác thực GoLike, sẽ lấy headers mới")
        
        # Thực hiện lấy headers với cơ chế thử lại
        max_attempts = 5  # Tăng số lần thử từ 3 lên 5
        for attempt in range(1, max_attempts + 1):
            logger.info(f"Đang lấy GoLike headers (lần thử {attempt}/{max_attempts})...")
            
            try:
                # Thử lấy headers
                success = self.fetch_golike_headers()
                if success:
                    logger.info("Đã lấy và lưu headers GoLike thành công")
                    return True
                else:
                    logger.warning(f"Không thể lấy headers GoLike lần {attempt}, sẽ thử lại...")
                    # Đóng Chrome nếu còn mở
                    self.helper.close_app("com.android.chrome")
                    if attempt < max_attempts:
                        # Tăng thời gian chờ theo số lần thử (10s, 20s, 30s, 40s)
                        wait_time = attempt * 10
                        logger.info(f"Đợi {wait_time} giây trước khi thử lại...")
                        time.sleep(wait_time)
                    
            except Exception as e:
                logger.error(f"Lỗi khi lấy headers GoLike: {e}")
                # Đảm bảo Chrome được đóng
                self.helper.close_app("com.android.chrome")
                if attempt < max_attempts:
                    # Tăng thời gian chờ theo số lần thử (10s, 20s, 30s, 40s)
                    wait_time = attempt * 10
                    logger.info(f"Đợi {wait_time} giây trước khi thử lại...")
                    time.sleep(wait_time)
        
        logger.error(f"Đã thử lấy GoLike headers {max_attempts} lần nhưng không thành công")
        return False

    def api_request(self, url, method="GET", payload=None):
        """
        Gọi API của GoLike với headers đã lưu
        
        Args:
            url: URL của API
            method: Phương thức HTTP (GET hoặc POST)
            payload: Dữ liệu gửi đi (cho POST request)
            
        Returns:
            Dict hoặc None: Kết quả API nếu thành công, None nếu thất bại
        """
        try:
            # Lấy headers từ database
            headers = self.get_golike_headers()
            if not headers:
                logger.error("Không tìm thấy GoLike headers")
                return None

            # Đảm bảo headers có user-agent
            if "user-agent" not in headers and "User-Agent" not in headers:
                headers["user-agent"] = self.user_agent
                
            # Lấy API base URL từ cấu hình thiết bị hoặc sử dụng mặc định từ config
            api_base = self.db.get_device_config("golike_api_base", config.GOLIKE_API_BASE)
            
            # Nếu URL không bắt đầu bằng http, thêm api_base vào trước
            if not url.startswith("http"):
                url = f"{api_base}/{url.lstrip('/')}"

            # Sử dụng curl_cffi hoặc cloudscraper tùy theo môi trường
            if self.use_curl_cffi and CURL_CFFI_AVAILABLE:
                if method == "GET":
                    response = curl_requests.get(
                        url,
                        headers=headers,
                        impersonate=self.impersonate
                    )
                elif method == "POST":
                    response = curl_requests.post(
                        url,
                        json=payload,
                        headers=headers,
                        impersonate=self.impersonate
                    )
                else:
                    logger.error(f"Method không hợp lệ: {method}")
                    return None
            else:
                # Sử dụng cloudscraper hoặc fallback to requests
                if method == "GET":
                    response = self.client.get(
                        url,
                        headers=headers
                    )
                elif method == "POST":
                    response = self.client.post(
                        url,
                        json=payload,
                        headers=headers
                    )
                else:
                    logger.error(f"Method không hợp lệ: {method}")
                    return None

            if response.status_code == 200:
                return response.json()
            else:
                # Xử lý hiển thị lỗi dễ đọc hơn
                error_msg = response.text
                try:
                    # Parse response là JSON
                    error_json = response.json()
                    # Format log thành 1 dòng
                    status = error_json.get('status', response.status_code)
                    success = error_json.get('success', False)
                    message = error_json.get('message', 'Không có thông báo lỗi')
                    
                    # Gộp thành 1 dòng
                    logger.error(f"API trả về lỗi [{status}] [success: {success}] {message}")
                except:
                    # Nếu không phải JSON, hiển thị text thô
                    logger.error(f"API trả về lỗi {response.status_code}: {error_msg}")
                    
                return None

        except Exception as e:
            logger.error(f"Lỗi khi gọi API: {str(e)}")
            return None

    def _curl_cffi_request(self, url: str, method: str = "get", headers: Dict[str, str] = None,
                        data: Dict[str, Any] = None, timeout: int = 30) -> Optional[Dict[str, Any]]:
        """
        Thực hiện request sử dụng curl_cffi (hiệu quả cho Cloudflare)
        """
        try:
            if method.lower() == "get":
                response = curl_requests.get(
                    url,
                    headers=headers,
                    data=data,
                    timeout=timeout,
                    impersonate="chrome110"
                )
            else:  # POST
                response = curl_requests.post(
                    url,
                    headers=headers,
                    data=data,
                    timeout=timeout,
                    impersonate="chrome110"
                )

            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Lỗi status code: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"Lỗi khi gọi API: {str(e)}")
            return None
            
    def fetch_golike_report(self) -> Dict[str, Any]:
        """
        Lấy thông tin report từ GoLike và tổng hợp lại
        
        Returns:
            Dict[str, Any]: Thông tin report đã tổng hợp hoặc dict rỗng nếu thất bại
        """
        try:
            # Gọi API report
            report_data = self.api_request("statistics/report")
            
            if not report_data or "success" not in report_data or not report_data["success"]:
                logger.error("Không thể lấy thông tin report từ GoLike")
                return {}
                
            # Tổng hợp thông tin
            current_coin = report_data.get("current_coin", 0)
            message = report_data.get("message", "")
            
            # Tính tổng pending_coin và hold_coin từ các app quan tâm
            apps = ["instagram", "tiktok", "snapchat"]
            total_pending_coin = 0
            total_hold_coin = 0
            
            for app in apps:
                if app in report_data:
                    app_data = report_data[app]
                    total_pending_coin += app_data.get("pending_coin", 0)
                    total_hold_coin += app_data.get("hold_coin", 0)
            
            # Tạo dict kết quả tổng hợp
            summary = {
                "current_coin": current_coin,
                "total_pending_coin": total_pending_coin,
                "total_hold_coin": total_hold_coin,
                "golike_report_message": message,
                "golike_report_updated_at": int(time.time())
            }
            
            # Lưu vào database
            self.db.set("golike_report", summary)
            logger.info(f"Đã cập nhật thông tin GoLike report: xu hiện tại={current_coin}, xu đang chờ={total_pending_coin}, xu giữ={total_hold_coin}")
            
            return summary
        except Exception as e:
            logger.error(f"Lỗi khi lấy thông tin report từ GoLike: {e}")
            return {}
            
    def start_report_thread(self):
        """
        Khởi động thread định kỳ lấy thông tin report từ GoLike
        """
        # Kiểm tra thread đã chạy chưa
        if self.report_thread is not None and self.report_thread.is_alive():
            logger.info("Thread report GoLike đã đang chạy")
            return
            
        import threading
        
        def report_loop():
            logger.info("Bắt đầu thread lấy thông tin report GoLike định kỳ")
            
            while True:
                try:
                    # Kiểm tra xem đã có headers chưa
                    if self.is_golike_authenticated():
                        # Lấy thông tin report
                        self.fetch_golike_report()
                    else:
                        logger.warning("Chưa có headers GoLike, không thể lấy thông tin report")
                        
                except Exception as e:
                    logger.error(f"Lỗi trong thread report GoLike: {e}")
                    
                # Ngủ 10 phút
                time.sleep(600)
        
        # Tạo và khởi động thread
        self.report_thread = threading.Thread(target=report_loop, daemon=True)
        self.report_thread.start()
        logger.info("Đã khởi động thread lấy thông tin report GoLike định kỳ")

    def get_golike_report(self) -> Dict[str, Any]:
        """
        Lấy thông tin report GoLike đã lưu trong database
        
        Returns:
            Dict[str, Any]: Thông tin report hoặc dict rỗng nếu không có
        """
        return self.db.get("golike_report", {})
').decode('utf-8'))
