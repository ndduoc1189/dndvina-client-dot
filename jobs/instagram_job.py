import base64
exec(base64.b64decode('import datetime
import time
import random
import os
from typing import Dict, Any, List, Optional
from jobs.job_base import BaseJob

class InstagramJob(BaseJob):
    def __init__(self, db_service, helper_service, golike_service=None):
        super().__init__(db_service, helper_service, golike_service)
        self.app_package = "com.instagram.android"
        self.app_name = "instagram"
        
        # Override default config cho Instagram
        self._default_config.update({
            "action_weights": {
                "newsfeed": 18,      # 18% vuốt feed (cao hơn vì Instagram có nhiều posts)
                "reels": 22,         # 22% xem reels
                "notification": 10,   # 10% xem thông báo
                "profile": 15,       # 15% xem profile  
                "job": 20,           # 20% làm job (giữ nguyên)
                "explore": 8,        # 8% khám phá (thấp hơn TikTok)
                "post": 5,           # 5% đăng bài (ít dùng trong Instagram)
                "story": 5           # 5% xem stories (action riêng của Instagram)
            },
            "max_actions_per_session": 25,  # Instagram ít actions hơn TikTok và YouTube (25)
            "delay_post_video_minute": 1440,  # Thời gian chờ giữa các lần đăng ảnh (phút) - mặc định 24 giờ
        })
    
    def get_supported_actions(self) -> List[str]:
        """
        Override danh sách actions được Instagram hỗ trợ
        
        Returns:
            List[str]: Danh sách actions Instagram hỗ trợ
        """
        return list(self.get_action_weights().keys())
        
    def dump_screen_with_retry(self, max_retries=3, wait_between_retries=0.5):
        """
        Dump màn hình XML với cơ chế thử lại nếu gặp lỗi
        
        Args:
            max_retries: Số lần thử tối đa
            wait_between_retries: Thời gian chờ giữa các lần thử (giây)
            
        Returns:
            str: XML của màn hình hoặc None nếu thất bại
        """
        for attempt in range(max_retries):
            try:
                # Đợi UI ổn định
                self.safe_sleep(wait_between_retries)
                screen_xml = self.helper.dump_screen_xml()
                return screen_xml
            except Exception as e:
                self.logger.warning(f"Lỗi khi dump XML (lần {attempt+1}/{max_retries}): {str(e)}")
                # Tăng thời gian chờ cho lần thử tiếp theo
                wait_between_retries += 0.5
                
        self.logger.error(f"Không thể dump XML sau {max_retries} lần thử")
        return None
        
    def is_home_screen(self) -> bool:
        """
        Kiểm tra xem có đang ở màn hình trang chủ Instagram hay không
        
        Returns:
            bool: True nếu đang ở trang chủ, False nếu không
        """
        try:
            # Kiểm tra package hiện tại trước tiên
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                return False

            # Kiểm tra 1: Có nút "Trang chủ" được chọn (selected=true) trong thanh tab không
            home_tab = self.helper.wait_for_element(content_desc="Trang chủ", timeout=20)
            if home_tab:
                # Lấy XML màn hình hiện tại với cơ chế thử lại
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    return False
                if self.helper.is_element_selected(home_tab):
                    logo_button = self.helper.find_element_in_xml(
                        screen_xml, 
                        resource_id="com.instagram.android:id/title_logo_chevron_container"
                    )

                    if logo_button:
                        if logo_button.get("visible-to-user") == "true":
                            return True
                    # Nếu tìm thấy tab "Trang chủ" nhưng chưa được chọn, click vào đó
                    self.helper.tap_element_center(home_tab)
                    self.safe_sleep(1.5)  # Tăng thời gian chờ lên 1.5s
                    return True
                else:
                    # Nếu tìm thấy tab "Trang chủ" nhưng chưa được chọn, click vào đó
                    self.helper.tap_element_center(home_tab)
                    self.safe_sleep(1.5)  # Tăng thời gian chờ lên 1.5s
                    return True
            # Không tìm thấy các yếu tố của trang chủ
            return False
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi kiểm tra màn hình trang chủ Instagram")
            return False
            
    def ensure_home_screen(self, max_retries: int = 3) -> bool:
        """
        Đảm bảo đang ở màn hình trang chủ Instagram, nếu không thì khởi động lại app
        
        Args:
            max_retries: Số lần thử tối đa
            
        Returns:
            bool: True nếu thành công, False nếu không
        """


        retry_count = 0
        
        while retry_count < max_retries:
            # Kiểm tra xem có đang ở trang chủ không
            if self.is_home_screen():
                return True
                
            # Nếu không ở trang chủ, đóng và mở lại app
            self.logger.info("Không phải trang chủ Instagram, khởi động lại app...")
            self.helper.close_app(self.app_package)

            # Kiểm tra safe_sleep return value để có thể thoát sớm khi cần restart session
            if not self.safe_sleep(2):
                self.logger.info("Nhận được yêu cầu dừng trong quá trình ensure_home_screen")
                return False
                
            self.helper.open_app(self.app_package)
            
            # Kiểm tra safe_sleep return value để có thể thoát sớm khi cần restart session  
            if not self.safe_sleep(10):
                self.logger.info("Nhận được yêu cầu dừng trong quá trình ensure_home_screen")
                return False
            if self.is_home_screen():
                return True
            elif not self.validate_app_not_banned():
                return False
            retry_count += 1
            
        self.logger.error(f"Không thể mở trang chủ Instagram sau {max_retries} lần thử")
        return False
    
    def validate_app_not_banned(self):
        """
        Đảm bảo không có tài khoản nào bị banned
        """
        # Kiểm tra xem có text "Trang này hiện không hiển thị"
        screen_xml = self.helper.dump_screen_xml()
        page_not_available = self.helper.find_element_in_xml(
            screen_xml,
            text="Trang này hiện không hiển thị"
        )

        if page_not_available:
            self.logger.warning("Phát hiện trang không hiển thị, đang reset proxy và làm mới")
            # Gọi reset_current_proxy thông qua proxy_service
            if self.proxy_service:
                reset_success = self.proxy_service.force_reset_current_ip()
                if reset_success:
                    # Kiểm tra safe_sleep return value để có thể thoát sớm
                    if not self.safe_sleep(2):
                        self.logger.info("Nhận được yêu cầu dừng trong validate_app_not_banned")
                        return False
                    
                    # Tìm và bấm vào nút "Làm mới"
                    refresh_button = self.helper.find_element_in_xml(
                        screen_xml,
                        text="Làm mới"
                    )
                    
                    if refresh_button:
                        self.helper.tap_element_center(refresh_button)
                        # Kiểm tra safe_sleep return value để có thể thoát sớm
                        if not self.safe_sleep(3):
                            self.logger.info("Nhận được yêu cầu dừng trong validate_app_not_banned")
                            return False
                        self.logger.info("Đã bấm nút làm mới sau khi reset proxy")
                    else:
                        self.logger.warning("Không tìm thấy nút 'Làm mới'")
                else:
                    self.logger.error("Reset proxy thất bại")
            else:
                self.logger.warning("Proxy service chưa được thiết lập")

        # Kiểm tra dialog cảnh báo
        screen_xml = self.helper.dump_screen_xml()
        alert_container = self.helper.find_element_in_xml(
            screen_xml,
            resource_id="com.instagram.android:id/igds_alert_dialog_text_container"
        )
        
        #Kiểm tra có thông báo thứ lại sau.
        if alert_container:
            # Kiểm tra tiêu đề dialog
            headline = self.helper.find_element_in_xml(
                screen_xml,
                resource_id="com.instagram.android:id/igds_alert_dialog_headline"
            )
            
            if headline and self.helper.get_element_text(headline) == "Thử lại sau":
                # Lấy nội dung cảnh báo
                subtext = self.helper.find_element_in_xml(
                    screen_xml,
                    resource_id="com.instagram.android:id/igds_alert_dialog_subtext"
                )
                
                if subtext:
                    warning_message = self.helper.get_element_text(subtext)
                    
                    # Lấy danh sách cảnh báo hiện tại từ db
                    current_warnings = self.db.get("logs-warning-message", [])
                    
                    # Thêm cảnh báo mới
                    current_warnings.append({
                        "time": datetime.datetime.now().isoformat(),
                        "mess": warning_message
                    })
                    
                    # Chỉ giữ lại tối đa 20 log gần nhất
                    if len(current_warnings) > 20:
                        current_warnings = current_warnings[-20:]
                    
                    # Lưu lại vào db
                    self.db.set("logs-warning-message", current_warnings)
                    
                    self.logger.warning(f"Đã lưu cảnh báo: {warning_message}")
                    
                    # Bấm nút OK liên tục cho đến khi không còn dialog
                    self._dismiss_all_dialogs()
                    
        
        #Kiểm tra xem có thông báo phải đăng nhập không
        # Kiểm tra container bloks
        bloks_container = self.helper.find_element_in_xml(
            screen_xml,
            resource_id="com.instagram.android:id/bloks_container"
        )
        
        if bloks_container:
            # Tìm tất cả các view trong container
            views = self.helper.find_all_elements_in_xml(
                screen_xml,
                class_name="android.view.View"
            )
            
            # Lấy view đầu tiên có text khác null
            warning_text = None
            for view in views:
                text = self.helper.get_element_text(view)
                if text and text.strip() and text != "null" and text != " " and len(text.strip()) > 10:
                    warning_text = text
                    break
            
            if warning_text: 
                # Thực hiện logout và cập nhật trạng thái tài khoản
                try:
                    # Bước 1: Bấm vào menu
                    menu_button = self.helper.find_element_in_xml(screen_xml, content_desc="Menu")
                    if menu_button:
                        self.helper.tap_element_center(menu_button)
                        self.safe_sleep(2)
                        
                        # Bước 2: Đọc lại XML và tìm text "Đăng xuất khỏi"
                        menu_xml = self.helper.dump_screen_xml()
                        if menu_xml:
                            views = self.helper.find_all_elements_in_xml(menu_xml, class_name="android.view.View")
                            
                            logout_view = None
                            username = None
                            
                            for view in views:
                                view_text = self.helper.get_element_text(view)
                                if view_text and view_text.startswith("Đăng xuất khỏi"):
                                    logout_view = view
                                    # Cắt bỏ "Đăng xuất khỏi" và trim để lấy username
                                    username = view_text.replace("Đăng xuất khỏi", "").strip()
                                    break
                            
                            if logout_view and username:
                                # Bước 3: Cập nhật trạng thái account trong database
                                current_time = datetime.datetime.now().strftime("%d/%m/%y %H:%M")
                                inactive_reason = f"Phát hiện yêu cầu xác minh lúc: {current_time}"
                                
                                # Tìm tài khoản theo unique_username và cập nhật
                                accounts = self.db.get_accounts(app="instagram")
                                for account in accounts:
                                    if account.get("unique_username") == username:
                                        update_data = {
                                            "status": "logout",
                                            "inactive_reason": inactive_reason,
                                            "is_sync": False
                                        }
                                        self.db.update_account(account["id"], update_data)
                                        self.logger.warning(f"Đã cập nhật trạng thái tài khoản {username}: {inactive_reason}")
                                        break
                                
                                # Bước 4: Bấm vào "Đăng xuất khỏi"
                                self.helper.tap_element_center(logout_view)
                                self.safe_sleep(2)
                                # Bước 5: Xác nhận đăng xuất
                                confirm_xml = self.helper.dump_screen_xml()
                                if confirm_xml:
                                    confirm_button = self.helper.find_element_in_xml(
                                        confirm_xml,
                                        text="Đăng xuất"
                                    )
                                    if confirm_button:
                                        self.helper.tap_element_center(confirm_button)
                                self.safe_sleep(5)  # Chờ 5 giây hoàn tất logout
                                
                                self.logger.info(f"Đã đăng xuất khỏi tài khoản {username}")
                            else:
                                self.logger.warning("Không tìm thấy menu đăng xuất")
                        else:
                            self.logger.error("Không thể đọc XML menu")
                    else:
                        self.logger.error("Không tìm thấy nút Menu")
                        
                except Exception as e:
                    self.logger.error(f"Lỗi khi thực hiện logout: {str(e)}")
                    # Fallback: đóng app nếu không logout được
                    self.helper.close_app(self.app_package)

                return False
        
        return True
    
    def _handle_dialogs_and_navigate_home(self):
        """
        Override để xử lý dialog specific của Instagram và navigate về home
        """
        self.logger.debug("Đang xử lý Instagram dialogs và navigate về home...")
        
        # Xử lý các dialog Instagram specific
        screen_xml = self.helper.dump_screen_xml()
        
        # Kiểm tra dialog "Thử lại sau"
        alert_container = self.helper.find_element_in_xml(
            screen_xml,
            resource_id="com.instagram.android:id/igds_alert_dialog_text_container"
        )
        
        if alert_container:
            self.logger.info("Đóng dialog Instagram alert")
            self._dismiss_all_dialogs()
            self.safe_sleep(1)
        
        # Kiểm tra container bloks (cảnh báo khác)
        bloks_container = self.helper.find_element_in_xml(
            screen_xml,
            resource_id="com.instagram.android:id/bloks_container"
        )
        
        if bloks_container:
            self.logger.info("Đóng Instagram bloks dialog")
            self.helper.press_back()
            self.safe_sleep(1)
        
        # Sau khi xử lý dialog, thử navigate về home
        if not self.is_home_screen():
            # Tìm nút "Trang chủ"
            home_button = self.helper.find_element(content_desc="Trang chủ")
            
            if home_button:
                self.logger.info("Bấm nút Trang chủ")
                self.helper.tap_element_center(home_button)
                self.safe_sleep(2)
            else:
                # Fallback: nhấn back một vài lần
                for _ in range(3):
                    if self.is_home_screen():
                        break
                    self.helper.press_back()
                    self.safe_sleep(1)
    
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản Instagram từ thiết bị"""
        accounts = []
        
        try:
            # Đảm bảo đang ở trang chủ Instagram
            if not self.ensure_home_screen():
                return []
                
            # Nhấn vào tab "Trang cá nhân"
            screen_xml = self.helper.dump_screen_xml()
            profile_tab = self.helper.find_element_in_xml(screen_xml, content_desc="Trang cá nhân")
            
            if not profile_tab:
                self.logger.error("Không tìm thấy tab Trang cá nhân")
                return []
                
            # Nhấp vào tab Trang cá nhân
            self.helper.tap_element_center(profile_tab)
            self.safe_sleep(2)
            
            # Lấy thông tin tài khoản hiện tại từ trang cá nhân
            screen_xml = self.helper.dump_screen_xml()
            
            # Tìm username từ tiêu đề lớn trong action bar
            username_title = self.helper.find_element_in_xml(
                screen_xml, 
                resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
            )
            if not username_title:
                username_title = self.helper.find_element_in_xml(
                    screen_xml,
                    resource_id="com.instagram.android:id/action_bar_title"
            )
            if not username_title:
                self.helper.swipe_up()
                self.safe_sleep(1)
                self.helper.swipe_down()
                self.safe_sleep(0.5)
                self.helper.swipe_down()
                self.safe_sleep(1)
                screen_xml = self.helper.dump_screen_xml()
                username_title = self.helper.find_element_in_xml(
                    screen_xml, 
                    resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
                )
            
            if username_title:
                current_username = self.helper.get_element_text(username_title)
                self.logger.info(f"Tìm thấy username hiện tại từ tiêu đề: {current_username}")
                
                # Nhấp vào tiêu đề username để mở danh sách tài khoản
                self.helper.tap_element_center(username_title)
                self.safe_sleep(1)
                
                # Lấy danh sách tài khoản - đọc lần 1
                accounts_xml = self.helper.dump_screen_xml()
                
                # Tìm tất cả các phần tử ViewGroup có content-desc (là username)
                account_items = self.helper.find_all_elements_in_xml(
                    accounts_xml,
                    class_name="android.view.ViewGroup"
                )
                
                # Xử lý tài khoản lần 1
                self._process_account_items(account_items, accounts_xml, accounts)

                # Nếu có nhiều hơn 6 tài khoản, vuốt lên và đọc tiếp
                if len(accounts) > 6:
                    self.logger.info(f"Tìm thấy {len(accounts)} tài khoản, vuốt lên để tìm thêm")
                    self.helper.swipe_up()
                    self.safe_sleep(2)
                    # Lấy danh sách tài khoản lần 2 sau khi vuốt
                    accounts_xml_2 = self.helper.dump_screen_xml()
                    account_items_2 = self.helper.find_all_elements_in_xml(
                        accounts_xml_2,
                        class_name="android.view.ViewGroup"
                    )
                    
                    # Xử lý tài khoản lần 2
                    accounts_before_2nd = len(accounts)
                    self._process_account_items(account_items_2, accounts_xml_2, accounts)
                    accounts_added = len(accounts) - accounts_before_2nd
                    self.logger.info(f"Lần đọc thứ 2 tìm thêm {accounts_added} tài khoản")
                else:
                    self.logger.info(f"Chỉ có {len(accounts)} tài khoản, không cần vuốt thêm")
                
                # Nhấn back để đóng danh sách tài khoản
                self.helper.press_back()
                self.safe_sleep(1)
            
            # Quay lại trang chủ bằng phương thức back_to_home
            self.back_to_home()
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản Instagram")
            
        return accounts
    
    def _process_account_items(self, account_items: List, accounts_xml: str, accounts: List[Dict[str, Any]]) -> None:
        """
        Xử lý danh sách account items và thêm vào accounts list
        
        Args:
            account_items: Danh sách ViewGroup elements
            accounts_xml: XML của màn hình chứa danh sách tài khoản
            accounts: List để thêm tài khoản vào
        """
        # Tạo set để tránh duplicate username
        existing_usernames = {acc.get("unique_username", "").lower() for acc in accounts}
        
        # Lọc và xử lý các mục tài khoản
        for item in account_items:
            # Lấy content-desc của item
            content_desc = item.get("content-desc", "")
            if not content_desc or content_desc == "null":
                continue
                
            # Kiểm tra xem đây có phải là nút "Đi đến Trung tâm tài khoản" không
            if "Trung tâm tài khoản" in content_desc:
                continue
                
            # Bỏ qua nút "Thêm tài khoản" 
            if "Thêm tài khoản" in content_desc:
                continue
            
            # Xử lý trường hợp có thông báo trong content-desc (vd: "username, 10 thông báo")
            username = content_desc
            if "," in content_desc:
                username = content_desc.split(",")[0].strip()
            
            # Phương pháp 2: Tìm trực tiếp trong các view con
            child_views = self.helper.find_all_elements_in_xml(
                accounts_xml,
                class_name="android.view.View"
            )
            
            # Lấy bounds của item hiện tại để tìm view con thuộc về nó
            item_bounds = self.helper.get_element_bounds(item)
            
            for view in child_views:
                view_bounds = self.helper.get_element_bounds(view)
                # Kiểm tra xem view có nằm trong item không
                if (view_bounds[0] >= item_bounds[0] and 
                    view_bounds[1] >= item_bounds[1] and 
                    view_bounds[2] <= item_bounds[2] and 
                    view_bounds[3] <= item_bounds[3]):
                    
                    view_text = self.helper.get_element_text(view)
                    if view_text and "thông báo" not in view_text.lower():
                        # Tìm thấy view con chứa tên tài khoản
                        username = view_text
                        break
            
            # Kiểm tra duplicate username
            if username.lower() in existing_usernames:
                continue
                
            # Kiểm tra xem tài khoản này có đang được chọn không
            is_selected = item.get("selected") == "true"
            
            # Tạo thông tin tài khoản
            account = {
                "nickname": "",
                "unique_username": username,
                "unique_id": "",
                "status": "active",
                "is_login": is_selected,
                "avatar_thumb": "",
                "job_enable": True,
                "level": 3,
                "last_update": int(time.time())
            }
            
            accounts.append(account)
            existing_usernames.add(username.lower())
            self.logger.info(f"Đã tìm thấy tài khoản Instagram: {username} (selected: {is_selected})")
    
    def _dismiss_all_dialogs(self, max_attempts: int = 5) -> None:
        """
        Bấm nút OK liên tục cho đến khi không còn dialog nào
        
        Args:
            max_attempts: Số lần thử tối đa
        """
        for attempt in range(max_attempts):
            # Lấy lại XML để tìm nút OK
            current_xml = self.helper.dump_screen_xml()
            if not current_xml:
                break
                
            ok_button = self.helper.find_element_in_xml(
                current_xml,
                resource_id="com.instagram.android:id/igds_alert_dialog_primary_button"
            )
            
            if ok_button:
                self.helper.tap_element_center(ok_button)
                self.safe_sleep(1)
                self.logger.info(f"Đã bấm OK lần {attempt + 1}")
            else:
                # Không còn nút OK, thoát vòng lặp
                self.logger.info("Đã đóng hết dialog")
                break
    
    def back_to_home(self, max_back_count: int = 5, max_retries: int = 1) -> bool:
        """
        Quay lại màn hình trang chủ Instagram
        
        Args:
            max_back_count: Số lần nhấn Back tối đa trước khi thử khởi động lại app
            max_retries: Số lần thử khởi động lại app tối đa
            
        Returns:
            bool: True nếu thành công, False nếu không
        """
        # Kiểm tra xem đã ở trang chủ chưa
        if self.is_home_screen():
            return True
            
        self.logger.info("Đang tìm cách quay về trang chủ Instagram...")
        
        # Thử lại toàn bộ quá trình tối đa max_retries lần
        for retry in range(max_retries):
            # Thử bấm nút back tối đa max_back_count lần
            for i in range(max_back_count):
                self.helper.press_back()
                
                # Kiểm tra safe_sleep return value để có thể thoát sớm
                if not self.safe_sleep(1):
                    self.logger.info("Nhận được yêu cầu dừng trong quá trình back_to_home")
                    return False
                
                # Kiểm tra xem đã về trang chủ chưa
                if self.is_home_screen():
                    self.logger.info(f"Đã quay về trang chủ sau {i+1} lần bấm back (lần thử {retry+1})")
                    return True
            
            # Nếu vẫn không về được trang chủ, kill app và mở lại
            if retry < max_retries - 1:  # Chỉ log cảnh báo nếu còn lần thử tiếp theo
                self.logger.warning(f"Không thể về trang chủ sau {max_back_count} lần bấm back, thử khởi động lại app (lần thử {retry+1}/{max_retries})...")
            else:
                self.logger.error(f"Không thể về trang chủ sau {max_back_count} lần bấm back (lần thử cuối {retry+1}/{max_retries})...")
                
            self.helper.close_app(self.app_package)
            
            # Kiểm tra safe_sleep return value để có thể thoát sớm
            if not self.safe_sleep(2):
                self.logger.info("Nhận được yêu cầu dừng trong quá trình back_to_home")
                return False
                
            self.helper.open_app(self.app_package)
            
            # Kiểm tra safe_sleep return value để có thể thoát sớm  
            if not self.safe_sleep(5):
                self.logger.info("Nhận được yêu cầu dừng trong quá trình back_to_home")
                return False

            if not self.validate_app_not_banned():
                return False
            
            # Kiểm tra lại xem có ở trang chủ không
            if self.is_home_screen():
                self.logger.info(f"Đã quay về trang chủ sau khi khởi động lại app (lần thử {retry+1})")
                return True
        
        self.logger.error(f"Không thể về trang chủ ngay cả sau {max_retries} lần thử khởi động lại app")
        return False
    
    

    
    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Ánh xạ tài khoản từ GoLike vào tài khoản trên thiết bị
        
        Args:
            golike_accounts: Danh sách tài khoản từ GoLike API
            device_accounts: Danh sách tài khoản trên thiết bị
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã ánh xạ
        """
        mapped_accounts = []
        
        try:
            # Chuẩn hóa dữ liệu từ GoLike
            golike_data = {}
            for acc in golike_accounts:
                # Trích xuất thông tin từ tài khoản GoLike
                golike_account = {
                    "golike_id": acc.get("id"),
                    "nickname": acc.get("instagram_full_name") or acc.get("instagram_username"),
                    "unique_id": acc.get("instagram_id"),
                    "unique_username": acc.get("instagram_username"),
                    "avatar_thumb": acc.get("profile_pic_url")
                }
                
                # Sử dụng unique_username làm khóa để dễ ánh xạ
                username = golike_account["unique_username"]
                if username:
                    golike_data[username.lower()] = golike_account
            
            # Ánh xạ với tài khoản trên thiết bị
            for device_account in device_accounts:
                username = device_account.get("unique_username", "").lower()
                
                if username in golike_data:
                    # Đã tìm thấy tài khoản trong danh sách GoLike
                    # Cập nhật thông tin từ GoLike vào tài khoản thiết bị
                    golike_info = golike_data[username]
                    
                    # Cập nhật thông tin
                    update_data = {
                        "golike_id": golike_info["golike_id"],
                        "is_golike_linked": True,
                        "avatar_thumb": golike_info["avatar_thumb"] or device_account.get("avatar_thumb", ""),
                        "unique_id": golike_info["unique_id"] or device_account.get("unique_id", ""),
                        "nickname": golike_info["nickname"] or device_account.get("nickname", ""),
                        "is_sync": False
                    }
                    
                    # Tìm ID tài khoản trong DB
                    account_id = device_account.get("id")
                    if account_id:
                        # Cập nhật vào DB
                        self.db.update_account(account_id, update_data)
                        
                        # Cập nhật thông tin vào device_account
                        device_account.update(update_data)
                        mapped_accounts.append(device_account)
                        
                        self.logger.info(f"Đã ánh xạ tài khoản Instagram: {username}")
            
            return mapped_accounts
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi ánh xạ tài khoản Instagram")
            return []
    def get_report_payload(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tạo payload cho việc báo cáo hoàn thành job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Payload cho API báo cáo
        """
        golike_id = account.get("golike_id")
        job_id = job.get("id")
        
        if not golike_id or not job_id:
            self.logger.error("Thiếu thông tin tài khoản hoặc job để tạo payload báo cáo")
            return {}
        
        return {
            "instagram_users_advertising_id": job_id,
            "instagram_account_id": golike_id,
            "async": True,
            "data": None
        }    
          
    
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện job, bao gồm:
                - status (int): Mã trạng thái job
                    0: Chưa thực hiện
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                    4: Thất bại, yêu cầu đang chờ
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
        """
        try:
            job_type = job.get("type", "").lower()
            job_link = job.get("link", "")
            job_id = job.get("id")
            
            self.logger.info(f"Đang thực hiện job {job_id} loại {job_type} với link {job_link}")
            
            # Kiểm tra loại job được hỗ trợ
            if job_type not in ["follow", "like"]:
                message = f"Loại job {job_type} không được hỗ trợ"
                self.logger.warning(message)
                return {
                    "status": 2,
                    "message": message,
                    "success": False
                }

            # Thực hiện job theo loại
            job_status = 0  # Mặc định là chưa làm
            
            if job_type == "follow":
                job_status = self._perform_follow_job(job_link)
            elif job_type == "like":
                job_status = self._perform_like_job(job_link)
            
            self.back_to_home()
            
            # Tạo kết quả trả về dựa trên job_status
            return self._create_job_result_from_status(job_status, job_type)
                
        except Exception as e:
            message = f"Lỗi khi thực hiện job: {str(e)}"
            self.logger.exception(e, message)
            return self._create_job_result(2, message, False)
    
    def _create_job_result_from_status(self, job_status: int, job_type: str) -> Dict[str, Any]:
        """
        Tạo kết quả job từ status code
        
        Args:
            job_status: Mã trạng thái job từ _perform_xxx_job
            job_type: Loại job (follow, like)
            
        Returns:
            Dict[str, Any]: Kết quả job
        """
        if job_status == 1:  # Thành công
            message = f"Đã hoàn thành job {job_type} thành công"
            self.logger.info(message)
            return self._create_job_result(1, message, True)
        elif job_status == 2:  # Không tìm thấy đối tượng
            message = f"Không thể tìm thấy đối tượng để thực hiện job {job_type}"
            self.logger.warning(message)
            return self._create_job_result(2, message, False)
        elif job_status == 3:  # Bị unfollow/unlike
            message = f"Đã bị unfollow/unlike trong job {job_type}"
            self.logger.warning(message)
            # Đánh dấu unfollow để JobService xử lý
            return self._create_job_result(3, message, False, unfollow=True)
        elif job_status == 4:  # Yêu cầu đang chờ
            message = f"Yêu cầu đang chờ trong job {job_type}"
            self.logger.warning(message)
            return self._create_job_result(4, message, False)
        elif job_status == 5:  # Gửi yêu cầu chờ duyệt
            message = f"Gửi yêu cầu chờ duyệt {job_type}"
            self.logger.warning(message)
            return self._create_job_result(5, message, False)
        elif job_status == 6:  # Đạt giới hạn hoặc bị khóa
            message = f"Job {job_type} bị hủy do đạt giới hạn hoặc tài khoản bị khóa"
            self.logger.info(message)
            return self._create_job_result(6, message, False)
        else:  # Trạng thái không xác định
            message = f"Trạng thái không xác định khi thực hiện job {job_type} (status: {job_status})"
            self.logger.error(message)
            return self._create_job_result(0, message, False)
    
    def _perform_follow_job(self, profile_link: str) -> int:
        """
        Thực hiện job follow trên Instagram
        
        Args:
            profile_link: Link đến trang cá nhân cần follow
            
        Returns:
            int: Trạng thái job (0: chưa làm, 1: hoàn thành, 2: lỗi, 3: bị unfollow)
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return 2
                
            # Trích xuất username từ URL
            import re
            import random
            username_match = re.search(r'instagram\.com/([^/]+)', profile_link)
            if not username_match:
                self.logger.error(f"Không thể trích xuất username từ link: {profile_link}")
                return 2
                
            username = username_match.group(1)
            
            # Random chọn 1 trong 2 cách: tìm kiếm hoặc mở trực tiếp link
            if random.choice([True, False]):
                self.logger.info(f"Mở trang cá nhân bằng cách tìm kiếm: {username}")
                # Cách 1: Tìm kiếm username (cách cũ)
                try:
                    # Đóng các dialog nếu có
                    dialog = self.helper.find_element(content_desc="Dialog")
                    if dialog:
                        # Tap vào khu vực trống để đóng dialog
                        width, height = self.helper.get_screen_size()
                        self.helper.tap(int(width*0.2), int(height*0.2))
                        self.safe_sleep(1.5)  # Tăng thời gian chờ lên 1.5s
                    
                    # Mở trang tìm kiếm 
                    screen_xml = self.dump_screen_with_retry()
                    if not screen_xml:
                        self.logger.error("Không thể dump màn hình, thử mở bằng link trực tiếp")
                        self.helper.open_url(profile_link,self.app_package)
                        self.safe_sleep(4)  # Tăng thời gian chờ lên 4s
                        return 2
                        
                    search_tab = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/search_tab")
                        
                    if not search_tab:
                        self.logger.error("Không tìm thấy tab Tìm kiếm, thử mở bằng link trực tiếp")
                        self.helper.open_url(profile_link,self.app_package)
                        self.safe_sleep(4)  # Tăng thời gian chờ lên 4s
                        return 2
                        
                    self.helper.tap_element_center(search_tab)
                    self.safe_sleep(1)  # Tăng thời gian chờ lên 2s
                    search_tab = self.helper.find_element(resource_id="com.instagram.android:id/search_tab")
                    if not search_tab or not self.helper.is_element_selected(search_tab):
                        self.helper.tap_element_center(search_tab)
                    self.safe_sleep(1) 

                    # Nhấn vào thanh tìm kiếm
                    screen_xml = self.dump_screen_with_retry()
                    if not screen_xml:
                        self.logger.error("Không thể dump màn hình khi tìm ô nhập, thử mở bằng link trực tiếp")
                        self.helper.open_url(profile_link,self.app_package)
                        self.safe_sleep(4)
                        
                    search_input = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/action_bar_search_edit_text")
                    
                    if not search_input:
                        self.helper.tap_element_center(search_tab)
                        self.safe_sleep(1) 
                        search_input = self.helper.find_element(resource_id="com.instagram.android:id/action_bar_search_edit_text")
                    
                    if not search_input:
                        self.logger.error("Không tìm thấy ô nhập tìm kiếm, thử mở bằng link trực tiếp")
                        self.helper.open_url(profile_link,self.app_package)
                        self.safe_sleep(4)
                    
                    # Xóa nội dung tìm kiếm hiện tại nếu có
                    self.helper.tap_element_center(search_input)
                    self.safe_sleep(1.5)
                    
                    # Nhập username cần tìm với ký tự @ phía trước
                    self.helper.input_text(f"{username}")
                    self.safe_sleep(5)  # Tăng thời gian chờ lên 5s để kết quả tìm kiếm hiện đầy đủ
                    
                    # Tìm kết quả theo resource-id cụ thể
                    screen_xml = self.dump_screen_with_retry()
                    if not screen_xml:
                        self.helper.press_back()  # Thoát tìm kiếm
                        self.safe_sleep(1)
                        self.logger.error("Không thể dump màn hình kết quả tìm kiếm, thử mở bằng link trực tiếp")
                        self.helper.open_url(profile_link,self.app_package)
                        self.safe_sleep(4)
                        return 2
                        
                    user_result = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/row_search_user_username")
                    if user_result:
                        self.helper.tap_element_center(user_result)
                        self.safe_sleep(3)
                    else:
                        # Nếu không tìm thấy theo resource-id, thử tìm theo kết quả thông thường
                        results = self.helper.find_all_elements_in_xml(screen_xml, class_name="android.widget.LinearLayout")
                        result_found = False
                        
                        for result in results:
                            result_text = self.helper.get_element_text(result)
                            if username.lower() in result_text.lower():
                                self.helper.tap_element_center(result)
                                result_found = True
                                self.safe_sleep(3)
                                break
                                
                        if not result_found:
                            self.logger.error(f"Không tìm thấy tài khoản {username} trong kết quả tìm kiếm")
                            self.helper.press_back()
                            self.safe_sleep(1)
                            self.helper.open_url(profile_link,self.app_package)
                            self.safe_sleep(4)
                
                except Exception as e:
                    self.logger.error(f"Lỗi khi tìm kiếm tài khoản: {str(e)}")
                    # Nếu có lỗi, sử dụng phương thức mở link
                    self.helper.open_url(profile_link,self.app_package)
                    self.safe_sleep(4)  # Tăng thời gian chờ lên 4s
            else:
                # Cách 2: Mở trực tiếp URL thông qua helper.open_url()
                self.logger.info(f"Mở trang cá nhân bằng link trực tiếp: {profile_link}")
                self.helper.open_url(profile_link,self.app_package)
                self.safe_sleep(4)  # Tăng thời gian chờ lên 4s
            
            # Chờ thêm cho trang hồ sơ tải xong
            
            # Tìm nút Follow theo resource-id chính xác
            screen_xml = self.dump_screen_with_retry()
            if not screen_xml:
                self.logger.error("Không thể dump màn hình khi tìm nút follow")
                return 2
                
            follow_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/profile_header_follow_button")
            
            # Nếu không tìm thấy theo resource-id, thử tìm theo text
            if not follow_button:
                self.logger.info("Không tìm thấy nút theo dõi theo resource-id, thử tìm theo text")
                # Tìm nút theo text
                follow_texts = ["Theo dõi", "Follow", "Đang theo dõi", "Following", "Đã yêu cầu", "Requested"]
                
                for text in follow_texts:
                    follow_button = self.helper.find_element_in_xml(screen_xml, text=text)
                    if follow_button:
                        break
            
            # Thử lại lần nữa nếu không tìm thấy nút follow
            if not follow_button:
                self.logger.warning("Không tìm thấy nút theo dõi ở lần đầu, thử vuốt màn hình và tìm lại")
                self.helper.swipe_up()
                self.safe_sleep(1.5)
                
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    self.logger.error("Không thể dump màn hình khi tìm lại nút follow")
                    return 2
                    
                follow_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/profile_header_follow_button")
                
                if not follow_button:
                    # Tìm nút theo text
                    follow_texts = ["Theo dõi", "Follow", "Đang theo dõi", "Following", "Đã yêu cầu", "Requested"]
                    for text in follow_texts:
                        follow_button = self.helper.find_element_in_xml(screen_xml, text=text)
                        if follow_button:
                            break
            
            if not follow_button:
                self.logger.error("Không tìm thấy nút theo dõi sau nhiều lần thử")
                return 2
            
            # Lấy text của nút
            button_text = self.helper.get_element_text(follow_button)
            self.logger.info(f"Text của nút follow: {button_text}")
            
            # Nếu là "Đang theo dõi" hoặc "Following" thì đã follow rồi
            if button_text in ["Đang theo dõi", "Following"]:
                self.logger.info(f"Đã theo dõi tài khoản {username} từ trước")
                return 1
            
            # Nếu là "Đã yêu cầu" hoặc "Requested" thì đã yêu cầu follow rồi
            if button_text in ["Đã yêu cầu", "Requested"]:
                self.logger.info(f"Đã yêu cầu theo dõi tài khoản {username} từ trước")
                return 5
            
            # Nếu là "Theo dõi" hoặc "Follow" thì click vào nút
            if button_text in ["Theo dõi", "Follow"]:
                self.logger.info("Thực hiện click vào nút theo dõi")
                self.helper.tap_element_center(follow_button)
                self.safe_sleep(3)  # Tăng thời gian chờ lên 2s
                
                # Kiểm tra xem có dialog hiện lên không
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    # Không thể kiểm tra dialog, nhưng có thể đã theo dõi thành công
                    # Kiểm tra lại trạng thái nút
                    self.safe_sleep(1)
                    return 1
                    
                dialog_container = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/dialog_container")
                if dialog_container:
                    # Kiểm tra xem có thông báo "Thử lại sau" không
                    retry_text = self.helper.find_element_in_xml(screen_xml, text="Thử lại sau")
                    if retry_text:
                        # Bấm nút OK liên tục cho đến khi không còn dialog
                        self._dismiss_all_dialogs()
                        self.logger.warning("Job không hoàn thành, bị giới hạn theo dõi (thử lại sau)")
                        return 3
                        
                    # Kiểm tra xem có thông báo "Yêu cầu của bạn đang chờ" không
                    waiting_text = self.helper.find_element_in_xml(screen_xml, text="Yêu cầu của bạn đang chờ")
                    if waiting_text:
                        # Bấm nút OK liên tục cho đến khi không còn dialog
                        self._dismiss_all_dialogs()
                        self.logger.info("Hoàn thành, yêu cầu theo dõi đang chờ duyệt")
                        return 3
                    
                    # Nếu là dialog khác, bấm OK liên tục
                    self._dismiss_all_dialogs()
                
                # Kiểm tra xem có cần xác nhận theo dõi không (tài khoản riêng tư)
                confirm_container = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/layout_container_bottom_sheet")
                if confirm_container:
                    # Tìm nút "Theo dõi" trong container
                    confirm_follow_button = self.helper.find_element_in_xml(screen_xml, text="Theo dõi",class_name="android.view.View")
                    if not confirm_follow_button:
                        confirm_follow_button = self.helper.find_element_in_xml(screen_xml, text="Follow",class_name="android.view.View")
                        
                    if confirm_follow_button:
                        self.helper.tap_element_center(confirm_follow_button)
                        self.safe_sleep(2)
                
                # Kiểm tra lại text sau khi nhấn theo dõi
                self.safe_sleep(2)
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    # Không thể kiểm tra trạng thái nút, nhưng có thể đã theo dõi thành công
                    return 2
                
                    
                updated_follow_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/profile_header_follow_button")
                if not updated_follow_button:
                    # Thử tìm lại theo text
                    follow_texts = ["Đang theo dõi", "Following", "Đã yêu cầu", "Requested", "Theo dõi", "Follow"]
                    
                    for text in follow_texts:
                        updated_follow_button = self.helper.find_element_in_xml(screen_xml, text=text)
                        if updated_follow_button:
                            break
                            
                if updated_follow_button:
                    updated_text = self.helper.get_element_text(updated_follow_button)
                    
                    # Kiểm tra các trường hợp khác nhau
                    if updated_text in ["Đang theo dõi", "Following"]:
                        self.logger.info("Follow thành công!")
                        return 1
                    elif updated_text in ["Đã yêu cầu", "Requested"]:
                        self.logger.info("Đã gửi yêu cầu theo dõi thành công!")
                        return 5
                    elif updated_text in ["Theo dõi", "Follow"]:
                        
                        # Kiểm tra xem có thông báo "Yêu cầu của bạn đang chờ" không
                        self.helper.press_back()
                        self.safe_sleep(1.5)
                        
                        screen_xml = self.dump_screen_with_retry()
                        if not screen_xml:
                            # Không thể kiểm tra tiếp, giả định là đã gửi yêu cầu theo dõi
                            return 1
                            
                        waiting_text = self.helper.find_element_in_xml(screen_xml, text="Yêu cầu của bạn đang chờ")
                        if waiting_text:
                            # Bấm nút OK liên tục cho đến khi không còn dialog
                            self._dismiss_all_dialogs()
                            self.logger.info("Hoàn thành, yêu cầu theo dõi đang chờ duyệt")
                            return 4
                        
                        

 

                    else:
                        self.logger.error(f"Follow không thành công, text của nút là: {updated_text}")
                        return 2
                else:
                    # Không tìm thấy nút, có thể đã follow thành công
                    self.logger.info("Không tìm thấy nút follow sau khi nhấn, giả định đã thành công")
                    return 1
            else:
                self.logger.error(f"Text của nút không khớp với 'Theo dõi' hoặc 'Follow': {button_text}")
                return 2
                
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi thực hiện job follow: {str(e)}")
            return 2
    
    def _perform_like_job(self, post_link: str) -> int:
        """
        Thực hiện job like bài đăng trên Instagram
        
        Args:
            post_link: Link đến bài đăng cần like
            
        Returns:
            int: Trạng thái job (0: chưa làm, 1: hoàn thành, 2: lỗi, 3: bị unlike)
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return 2
                
            self.logger.info(f"Mở bài đăng bằng link trực tiếp: {post_link}")
            
            # Mở trực tiếp URL thông qua helper.open_url()
            self.helper.open_url(post_link,self.app_package)
            
            # Chờ trang bài đăng tải xong với thời gian ngẫu nhiên
            wait_time = random.randint(4, 6)  # Tăng thời gian chờ lên 4-6s
            self.logger.info(f"Đang chờ {wait_time}s để trang tải xong...")
            self.safe_sleep(wait_time)
            
            # Vuốt nhẹ lên trên khoảng 1 nửa màn hình để hiển thị nút like
            self.logger.info("Vuốt nhẹ để hiển thị nút like")
            self.helper.swipe_up()
            self.safe_sleep(1.5)  # Tăng thời gian chờ lên 1.5s
            
            # Tìm nút like theo resource-id
            screen_xml = self.dump_screen_with_retry()
            if not screen_xml:
                self.logger.error("Không thể dump màn hình khi tìm nút like")
                return 2
                
            like_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/row_feed_button_like")
            
            # Nếu không tìm thấy, thử vuốt lần nữa
            if not like_button:
                self.logger.info("Không tìm thấy nút like, thử vuốt lần nữa")
                self.helper.swipe_up()
                self.safe_sleep(1.5)
                
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    self.logger.error("Không thể dump màn hình khi tìm lại nút like")
                    return 2
                    
                like_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/row_feed_button_like")
                
            # Nếu vẫn không tìm thấy theo resource-id, thử tìm theo content-desc
            if not like_button:
                self.logger.info("Thử tìm nút like theo content-desc")
                like_button = self.helper.find_element_in_xml(screen_xml, content_desc="Thích")
                
                if not like_button:
                    # Thử tìm với text tiếng Anh
                    like_button = self.helper.find_element_in_xml(screen_xml, content_desc="Like")
            
            # Nếu vẫn không tìm thấy, báo lỗi
            if not like_button:
                self.logger.error("Không tìm thấy nút like sau nhiều lần thử")
                return 2
                
            # Kiểm tra xem đã like chưa bằng thuộc tính selected
            is_selected = self.helper.is_element_selected(like_button)
            
            # Nếu selected không có giá trị, thử tìm nút "Bỏ thích" hoặc "Unlike"
            if not is_selected:
                unlike_button = self.helper.find_element_in_xml(screen_xml, content_desc="Bỏ thích")
                if not unlike_button:
                    unlike_button = self.helper.find_element_in_xml(screen_xml, content_desc="Unlike")
                
                is_selected = bool(unlike_button)
                
            # Nếu đã like rồi thì hoàn thành
            if is_selected:
                self.logger.info("Đã like bài viết này từ trước")
                return 1
                
            # Like bài viết
            self.logger.info("Nhấn nút like")
            self.helper.tap_element_center(like_button)
            self.safe_sleep(2)  # Tăng thời gian chờ lên 2s
            
            # Kiểm tra lại xem đã like thành công chưa
            screen_xml = self.dump_screen_with_retry()
            if not screen_xml:
                # Không thể kiểm tra, giả định đã like thành công
                self.logger.info("Không thể kiểm tra lại trạng thái like, giả định thành công")
                return 1
                
            check_unlike = self.helper.find_element_in_xml(screen_xml, content_desc="Bỏ thích")
            if not check_unlike:
                check_unlike = self.helper.find_element_in_xml(screen_xml, content_desc="Unlike")
                
            # Kiểm tra lại bằng resource-id và selected
            if not check_unlike:
                like_button_after = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/row_feed_button_like")
                if like_button_after and self.helper.is_element_selected(like_button_after):
                    check_unlike = True
                
            if check_unlike:
                self.logger.info("Đã like bài viết thành công")
                return 1
            else:
                self.logger.error("Không thể xác nhận đã like bài viết")
                return 2
                
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi thực hiện job like: {str(e)}")
            return 2
            
    def _care_swipe_feed(self, account: Dict[str, Any]) -> bool:
        """Vuốt bảng tin Instagram với thời gian 2-5 phút, có thể like bài nếu dừng lâu"""
        try:
            if not self.ensure_home_screen():
                return False

            # Random thời gian vuốt từ 30-120 giây
            total_time = random.randint(30, 120)  # 30-120 giây
            self.logger.info(f"Bắt đầu vuốt bảng tin trong {total_time} giây")
            
            start_time = time.time()
            swipe_count = 0
            like_count = 0
            
            while (time.time() - start_time) < total_time:
                swipe_count += 1
                self.helper.swipe_up()
                # Thời gian dừng ngẫu nhiên từ 1-15 giây
                pause_time = random.randint(1, 15)
                self.logger.debug(f"Vuốt lần {swipe_count}, dừng {pause_time}s")
                # Nếu dừng lâu hơn 8s thì có 2% chance like bài
                if pause_time > 8 and random.randint(1, 100) <= 2:
                    self.logger.info("Thử like bài viết này...")
                    try:
                        # Tìm nút like trong feed
                        screen_xml = self.dump_screen_with_retry()
                        if screen_xml:
                            like_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/row_feed_button_like")
                            if like_button and not self.helper.is_element_selected(like_button):
                                self.helper.tap_element_center(like_button)
                                like_count += 1
                                self.logger.info(f"Đã like bài viết (tổng: {like_count} likes)")
                                # Thêm thời gian chờ sau khi like
                                self.safe_sleep(random.uniform(1, 2))
                    except Exception as e:
                        self.logger.debug(f"Không thể like bài: {e}")
                
                # Dừng theo thời gian đã random
                if not self.safe_sleep(pause_time):
                    return False
            
            elapsed = time.time() - start_time
            self.logger.info(f"Hoàn thành vuốt feed: {swipe_count} lần vuốt, {like_count} likes trong {elapsed:.1f}s")
            
            # Quay lại trang chủ
            self.back_to_home()
            return True
        except Exception as e:
            self.logger.warning(f"Lỗi khi vuốt feed: {e}")
            return False

    def _care_watch_reels(self, account: Dict[str, Any]) -> bool:
        """Lướt reel với thời gian dừng random và có thể like video nếu dừng lâu"""
        try:
            self.logger.info("Bắt đầu lướt reel...")
            
            # Đảm bảo về trang chủ trước
            if not self.ensure_home_screen():
                return False
            
            # Kiểm tra có tab reel không
            reel_tab = self.helper.wait_for_element(timeout=5, resource_id="com.instagram.android:id/clips_tab")
            if not reel_tab:
                self.logger.warning("Không tìm thấy tab Reel (clips_tab)")
                return False
                
            self.helper.tap_element_center(reel_tab)
            self.safe_sleep(5)
            
            start_time = time.time()
            total_wait = random.randint(30, 120)  # 30-120 giây
            self.logger.info(f"Tổng thời gian lướt reel sẽ là {total_wait} giây")
            
            elapsed = 0
            swipe_count = 0
            like_count = 0
            
            while elapsed < total_wait:
                swipe_count += 1
                self.logger.debug(f"Đang vuốt reel lần thứ {swipe_count}")
                self.helper.swipe_up()
                
                # Thời gian xem video random từ 2-10s
                video_time = random.randint(2, 15)
                self.logger.debug(f"Xem video này {video_time} giây...")
                # Nếu dừng lâu hơn 8s thì có 5% chance like video
                if video_time > 8 and random.randint(1, 100) <= 5:
                    try:
                        # Chờ một chút để video load
                        self.safe_sleep(2)
                        
                        # Tìm nút like trong reel
                        screen_xml = self.dump_screen_with_retry()
                        if screen_xml:
                            # Thử tìm nút like theo các resource-id khác nhau
                            like_button = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/like_button")
                            if not like_button:
                                like_button = self.helper.find_element_in_xml(screen_xml, content_desc="Thích")
                            if not like_button:
                                like_button = self.helper.find_element_in_xml(screen_xml, content_desc="Like")
                            
                            if like_button and not self.helper.is_element_selected(like_button):
                                self.logger.info("Thử like video reel này...")
                                self.helper.tap_element_center(like_button)
                                like_count += 1
                                self.logger.info(f"Đã like video reel (tổng: {like_count} likes)")
                                
                                # Xem thêm 2-10s sau khi like
                                extra_time = random.randint(2, 10)
                                self.logger.debug(f"Xem thêm {extra_time}s sau khi like")
                                if not self.safe_sleep(extra_time):
                                    return False
                            else:
                                self.logger.debug("Không tìm thấy nút like hoặc đã like rồi")
                        else:
                            self.logger.debug("Không thể dump screen để tìm nút like")
                    except Exception as e:
                        self.logger.debug(f"Không thể like video reel: {e}")
                
                # Dừng theo thời gian đã random
                if not self.safe_sleep(video_time):
                    return False
                
                elapsed = time.time() - start_time
                
                # Kiểm tra force stop
                if not self.safe_sleep(0.1):
                    return False
            
            self.logger.info(f"Tổng số lần vuốt: {swipe_count}, {like_count} likes")
            self.logger.info("Đã lướt xong các reel, quay lại trang chủ...")
            
            # Quay lại trang chủ
            if not self.helper.wait_to_tap_element(content_desc="Trang chủ", timeout=5):
                self.helper.press_back()
                self.safe_sleep(1)
                self.helper.wait_to_tap_element(content_desc="Trang chủ", timeout=5)
                
            self.logger.info("Đã quay lại trang chủ sau khi lướt reel.")
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi lướt reel: {str(e)}")
            return False

    def _care_view_stories(self, account: Dict[str, Any]) -> bool:
        """Xem story 3-5 story với tốc độ ngẫu nhiên"""
        try:
            if not self.ensure_home_screen():
                return False

            # Kiểm tra thời gian xem story cuối cùng từ account
            last_view_stories = account.get("last_view_stories", 0)
            current_time = int(time.time())
            if last_view_stories > 0 and (current_time - last_view_stories) < 10800:  # 3 tiếng = 10800 giây
                self.logger.info("Chưa đủ 3 tiếng kể từ lần xem story cuối, bỏ qua")
                return True

            # Tìm tất cả story thumbnails theo resource-id
            screen_xml = self.dump_screen_with_retry()
            story_thumbs = []
            if screen_xml:
                story_thumbs = self.helper.find_all_elements_in_xml(screen_xml, resource_id="com.instagram.android:id/avatar_image_view")
            
            # Kiểm tra nếu có ít nhất 2 story thì mới làm
            if len(story_thumbs) < 2:
                self.logger.info(f"Không đủ story để xem (chỉ có {len(story_thumbs)} story), bỏ qua")
                return True
            
            # Random chọn story từ thứ 2 đến cuối
            start_index = random.randint(1, len(story_thumbs) - 1)
            selected_story = story_thumbs[start_index]
            
            # Bấm vào story được chọn
            self.helper.tap_element_center(selected_story)
            self.safe_sleep(2)
            
            # Xem 3-8 story với tốc độ ngẫu nhiên
            num_stories = random.randint(3, 8)
            for _ in range(num_stories):
                # Thời gian xem story: ngắn hoặc dài ngẫu nhiên
                wait = random.uniform(1.0, 3.0) if random.choice([True, False]) else random.uniform(3.0, 5.0)
                self.safe_sleep(wait)
                # Chuyển sang story tiếp theo bằng cách bấm vào vị trí ngẫu nhiên ở giữa màn hình
                width, height = self.helper.get_screen_size()
                self.helper.swipe_right()
            
            # Thoát story viewer
            self.helper.press_back()
            self.safe_sleep(1)
            self.back_to_home()
            
            # Cập nhật thời gian xem story cuối cùng vào account
            if account and "id" in account:
                self.db.update_account(account["id"], {"last_view_stories": current_time, "is_sync": False})
            
            return True
        except Exception as e:
            self.logger.warning(f"Lỗi khi xem story: {e}")
            return False

    def _care_view_notifications(self, account: Dict[str, Any]) -> bool:
        """Mở tab thông báo và cuộn nhẹ"""
        try:
            if not self.ensure_home_screen():
                return False
                
            # Bước 1: Kiểm tra có notification badge không
            screen_xml = self.dump_screen_with_retry()
            if not screen_xml:
                return False
                
            notification_badge = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/led_badge")
            if not notification_badge:
                self.logger.info("Không có notification badge, bỏ qua xem thông báo")
                return True
            
            # Bước 2: Bấm vào notification tab
            notification_tab = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/notification")
            if not notification_tab:
                self.logger.warning("Không tìm thấy notification tab")
                return False
                
            self.helper.tap_element_center(notification_tab)
            self.safe_sleep(random.uniform(2, 3))  # Đọc 2-3s
            
            # Bước 3: Random xử lý
            if random.choice([True, False]):
                # Tìm và bấm vào story row
                screen_xml = self.dump_screen_with_retry()
                if screen_xml:
                    story_rows = self.helper.find_all_elements_in_xml(screen_xml, resource_id="activity_feed_newsfeed_story_row")
                    if story_rows and len(story_rows) > 0:
                        # Random chọn index từ 1-3 (hoặc ít hơn nếu không đủ)
                        max_index = min(3, len(story_rows) - 1)
                        if max_index >= 1:
                            selected_index = random.randint(1, max_index)
                            selected_story = story_rows[selected_index]
                            self.helper.tap_element_center(selected_story)
                            self.safe_sleep(random.uniform(3, 4))  # Chờ 3-4s
                            
                            # Vuốt lên 1-3 lần
                            for _ in range(random.randint(1, 3)):
                                self.helper.swipe_up()
                                self.safe_sleep(random.uniform(1, 2))
            else:
                # Random vuốt lên hoặc không
                if random.choice([True, False]):
                    # Vuốt lên 1-3 lần
                    for _ in range(random.randint(1, 3)):
                        self.helper.swipe_up()
                        self.safe_sleep(random.uniform(1, 2))
            
            # Bước 4: Quay lại home
            self.back_to_home()
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi xem thông báo: {e}")
            return False

    def perform_care(self, account: Dict[str, Any]):
        """Legacy method - redirects to Smart Care System for consistency"""
        self.logger.info(f"Chuyển hướng perform_care Instagram sang Smart Care System cho tài khoản: {account['unique_username']}")
        
        try:
            # Random chọn 1 trong 3 Smart Care methods để tương thích với legacy
            smart_care_actions = [
                self._care_swipe_feed,
                self._care_watch_reels, 
                self._care_view_notifications
            ]
            
            # Random chọn action
            selected_action = random.choice(smart_care_actions)
            
            # Thực hiện Smart Care action
            return selected_action(account)
            
        except Exception as e:
            self.logger.error(f"Lỗi khi thực hiện Smart Care cho Instagram: {e}")
            return False
        
    def perform_post_action(self, account: Dict[str, Any]) -> bool:
        """
        Đăng ảnh cho Instagram với kiểm tra thời gian delay
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công đăng ảnh hoặc đã đăng gần đây
        """
        try:
            acc = account.get('unique_username', 'Unknown')
            account_id = account.get('id')
            
            # Kiểm tra thời gian post gần nhất
            delay_minutes = self.get_config("delay_post_video_minute")
            if delay_minutes and account_id:
                last_post_time = self.db.get_account_last_post_time(account_id, self.app_name)
                current_time = int(time.time())
                
                if last_post_time:
                    time_diff_minutes = (current_time - last_post_time) / 60
                    if time_diff_minutes < delay_minutes:
                        remaining_minutes = delay_minutes - time_diff_minutes
                        self.logger.info(f"Tài khoản {acc} đã đăng ảnh gần đây, cần chờ thêm {remaining_minutes:.1f} phút")
                        return True  # Trả về True để không coi là lỗi
            
            self.logger.info(f"Bắt đầu đăng ảnh cho tài khoản: {acc}")
            
            # Bước 1: Đảm bảo đang ở trang chủ Instagram
            if not self.ensure_home_screen():
                self.logger.warning("Không thể vào trang chủ Instagram")
                return False
            
            # Bước 2: Random số lượng ảnh và tải về
            image_count = random.randint(1, 5)
            self.logger.info(f"Random {image_count} ảnh để đăng bài")
            if not self.helper.download_image(count=image_count):
                self.logger.warning("Tải ảnh thất bại, bỏ qua đăng bài")
                return False
            self.safe_sleep(2)
                
            # Bước 3: Nhấn nút tạo bài viết (creation_tab hoặc nút +)
            self.logger.info("Bấm nút tạo bài viết...")
            add_button = self.helper.wait_to_tap_element(resource_id="com.instagram.android:id/creation_tab", timeout=5)
            if not add_button:
                # Thử tìm nút + ở vị trí khác
                add_button = self.helper.wait_to_tap_element(resource_id="com.instagram.android:id/action_bar_buttons_container_left", timeout=5)
                if not add_button:
                    # Thử các cách tìm khác
                    add_button = self.helper.wait_to_tap_element(content_desc="New post", timeout=5)
                    if not add_button:
                        add_button = self.helper.wait_to_tap_element(content_desc="Add", timeout=5)
                        if not add_button:
                            self.logger.warning("Không tìm thấy nút tạo bài viết")
                            return False
                    
            self.safe_sleep(3)
            # Chờ camera destination feed
            camera_dest = self.helper.wait_for_element(timeout=5, resource_id="com.instagram.android:id/cam_dest_feed")
            if not camera_dest:
                self.logger.warning("Không tìm thấy cam_dest_feed")
                return False
            else:
                # Tìm thấy thì click
                self.helper.tap_element_center(camera_dest)
                self.safe_sleep(2)
            
            if image_count > 1:
                # Bước 4: Bấm "CHỌN NHIỀU" nếu cần chọn nhiều ảnh
                self.logger.info("Bấm 'CHỌN NHIỀU'...")
                multi_select_button = self.helper.wait_to_tap_element(text="CHỌN NHIỀU", timeout=3)
                if not multi_select_button:
                    # Thử tìm theo content-desc
                    multi_select_button = self.helper.wait_to_tap_element(content_desc="Nút chọn nhiều", timeout=3)
                    if not multi_select_button:
                        # Thử tìm theo resource-id
                        multi_select_button = self.helper.wait_to_tap_element(resource_id="com.instagram.android:id/multi_select_slide_button_alt", timeout=3)
                        if not multi_select_button:
                            self.logger.warning("Không tìm thấy nút 'CHỌN NHIỀU'")
                            return False
                self.safe_sleep(2)
                
                # Bước 5: Chọn ảnh theo số lượng đã random
                self.logger.info(f"Chọn {image_count} ảnh từ thư viện...")
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    self.logger.warning("Không thể dump màn hình để tìm ảnh")
                    return False
                    
                gallery_items = self.helper.find_all_elements_in_xml(screen_xml, resource_id="com.instagram.android:id/gallery_grid_item_thumbnail")
                
                if not gallery_items:
                    self.logger.warning("Không tìm thấy ảnh nào trong thư viện")
                    return False
                
                # Chọn số lượng ảnh theo yêu cầu (tối đa là số ảnh có sẵn)
                # Bỏ qua ảnh đầu tiên vì Instagram đã tự động chọn
                items_to_select = min(image_count, len(gallery_items))
                self.logger.info(f"Tìm thấy {len(gallery_items)} ảnh, sẽ chọn {items_to_select} ảnh (bỏ qua ảnh đầu tiên đã được chọn tự động)")
                
                # Bắt đầu từ ảnh thứ 2 (index 1) vì ảnh đầu tiên đã được chọn tự động
                for i in range(1, items_to_select):
                    self.helper.tap_element_center(gallery_items[i])
                    self.safe_sleep(0.5)
                    self.logger.info(f"Đã chọn ảnh {i+1}/{items_to_select}")
                
                self.logger.info(f"Tổng cộng đã chọn {items_to_select} ảnh (1 ảnh tự động + {items_to_select-1} ảnh thủ công)")

            else:
                # Đối với 1 ảnh, chỉ cần chọn ảnh đầu tiên
                self.logger.info("Chọn ảnh đầu tiên trong thư viện...")
                # Không cần wait_to_tap_element cho xpath phức tạp, dùng find_element thông thường
                screen_xml = self.dump_screen_with_retry()
                if not screen_xml:
                    self.logger.warning("Không thể dump màn hình để tìm ảnh")
                    return False
                
                # Tìm ảnh đầu tiên trong gallery
                first_image = self.helper.find_element_in_xml(screen_xml, class_name="android.widget.ImageView")
                if not first_image:
                    # Thử tìm theo resource-id
                    gallery_items = self.helper.find_all_elements_in_xml(screen_xml, resource_id="com.instagram.android:id/gallery_grid_item_thumbnail")
                    if gallery_items:
                        first_image = gallery_items[0]
                
                if not first_image:
                    self.logger.warning("Không tìm thấy ảnh trong thư viện")
                    return False
                
                # Tap vào ảnh đầu tiên
                self.helper.tap_element_center(first_image)
                self.safe_sleep(random.uniform(1, 2))

            # Bước 6: Bấm nút Next
            self.logger.info("Bấm nút Next...")
            next_button = self.helper.wait_to_tap_element(resource_id="com.instagram.android:id/next_button_textview", timeout=10)
            if not next_button:
                # Thử tìm nút Next bằng text
                next_button = self.helper.wait_to_tap_element(text="Tiếp", timeout=5)
                if not next_button:
                    next_button = self.helper.wait_to_tap_element(content_desc="Tiếp", timeout=5)
                    if not next_button:
                        self.logger.warning("Không tìm thấy nút Tiếp")
                        return False
                           
            self.safe_sleep(3)
            # Bước 7: Nhấn Tiếp lần nữa (bỏ qua edit)
            next_button2 = self.helper.wait_to_tap_element(text="Tiếp", timeout=5)
            if not next_button2:
                next_button2 = self.helper.wait_to_tap_element(content_desc="Tiếp", timeout=5)
            if next_button2:
                self.safe_sleep(random.uniform(2, 3))
            
            validate_next = self.helper.find_element(text="Tiếp")

            if validate_next:
                self.logger.warning("Không thể up bài viết, Bấm Tiếp không được")
                self.helper.wait_to_tap_element(content_desc="Hủy", timeout=5)
                return False
            
            # Bước 8: Thêm caption (tùy chọn)
            caption_field = self.helper.find_element(text="Write a caption...")
            if not caption_field:
                # Thử tìm theo cách khác
                screen_xml = self.dump_screen_with_retry() 
                if screen_xml:
                    caption_field = self.helper.find_element_in_xml(screen_xml, text="Write a caption...")
                    if not caption_field:
                        # Tìm field chứa từ "caption"
                        all_elements = self.helper.find_all_elements_in_xml(screen_xml, class_name="android.widget.EditText")
                        for element in all_elements:
                            text = element.get("text", "").lower()
                            hint = element.get("hint", "").lower()
                            if "caption" in text or "caption" in hint:
                                caption_field = element
                                break
            if caption_field:
                # Random thêm caption hoặc không (70% cơ hội có caption)
                if random.choice([True, True, True, True, True, True, True, False, False, False]):
                    try:
                        # Đọc captions từ file template
                        caption_file_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "template", "captions_instagram.txt")
                        if os.path.exists(caption_file_path):
                            with open(caption_file_path, 'r', encoding='utf-8') as f:
                                captions = [line.strip() for line in f.readlines() if line.strip()]
                            
                            if captions:
                                selected_caption = random.choice(captions)
                                self.helper.tap_element_center(caption_field)
                                self.safe_sleep(1)
                                self.helper.type_text(selected_caption)
                                self.safe_sleep(1)
                                self.logger.info(f"Đã thêm caption: {selected_caption}")
                            else:
                                self.logger.warning("File captions trống")
                        else:
                            # Fallback về emoji nếu không tìm thấy file
                            fallback_captions = [
                                "🌟",
                                "✨",
                                "🙂",
                                "📸",
                                "💫",
                                "🌸",
                                "🎉",
                                "💝"
                            ]
                            self.helper.tap_element_center(caption_field)
                            self.safe_sleep(1)
                            self.helper.type_text(random.choice(fallback_captions))
                            self.safe_sleep(1)
                            self.logger.warning("Không tìm thấy file captions, sử dụng emoji fallback")
                    except Exception as e:
                        self.logger.warning(f"Lỗi khi đọc file captions: {e}")
                        # Fallback về emoji nếu có lỗi
                        fallback_captions = [
                            "🌟",
                            "✨", 
                            "🙂",
                            "📸"
                        ]
                        try:
                            self.helper.tap_element_center(caption_field)
                            self.safe_sleep(1)
                            self.helper.type_text(random.choice(fallback_captions))
                            self.safe_sleep(1)
                        except:
                            pass

            # Bước 9: Nhấn Chia sẻ để đăng bài
            share_button = self.helper.wait_to_tap_element(text="Chia sẻ", timeout=5)
            if not share_button:
                share_button = self.helper.wait_to_tap_element(content_desc="Chia sẻ", timeout=5)
                if not share_button:
                    self.logger.warning("Không tìm thấy nút Chia sẻ")
                    return False
                
            self.safe_sleep(random.uniform(3, 5))
            
            # Bước 10: Kiểm tra đăng thành công và quay về home
            # Có thể có popup "Post shared" hoặc tự động về feed
            try:
                ok_button = self.helper.wait_to_tap_element(text="OK", timeout=3)
                if not ok_button:
                    self.helper.wait_to_tap_element(text="Xong", timeout=3)
            except:
                pass
                
            # Quay về trang chủ
            self.back_to_home()
            
            # Lưu thời gian đăng ảnh thành công vào DB
            if account_id:
                current_time = int(time.time())
                self.db.set_account_last_post_time(account_id, self.app_name, current_time)
            
            self.logger.info(f"Đăng ảnh thành công cho tài khoản: {account['unique_username']}")
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi đăng ảnh: {e}")
            # Thử quay về trang chủ nếu có lỗi
            try:
                self.back_to_home()
            except:
                pass
            return False
        
    def _perform_account_switch(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện các thao tác UI để chuyển tài khoản Instagram
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            Dict[str, Any]: {
                'success': bool,
                'reason': str (nếu thất bại),
                'message': str
            }
        """
        try:
            # Lấy thông tin target account
            target_username = target_account.get("unique_username")
            if not target_username:
                return {
                    'success': False,
                    'reason': 'invalid_account',
                    'message': 'Target account không có unique_username'
                }
            
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return {
                    'success': False, 
                    'reason': 'navigation_error',
                    'message': 'Không thể đến trang chủ Instagram'
                }

            #kiểm tra đúng username rồi thì return true
            if self.helper.find_element(text=f"@{target_username}"):
                return {
                    'success': True,
                    'message': f"Đã chuyển sang tài khoản Instagram: {target_username}"
                }

            # Nhấn vào tab "Trang cá nhân"
            screen_xml = self.helper.dump_screen_xml()
            profile_tab = self.helper.find_element_in_xml(screen_xml, content_desc="Trang cá nhân")
            
            if not profile_tab:
                self.logger.error("Không tìm thấy tab Trang cá nhân")
                return {
                    'success': False, 
                    'reason': 'ui_error',
                    'message': 'Không tìm thấy tab Trang cá nhân'
                }
                
            # Nhấp vào tab Trang cá nhân
            self.helper.tap_element_center(profile_tab)
            self.safe_sleep(2)
            
            # Tìm username từ tiêu đề lớn trong action bar
            screen_xml = self.helper.dump_screen_xml()
            username_title = self.helper.find_element_in_xml(
                screen_xml, 
                resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
            )
            if not username_title:
                username_title = self.helper.find_element_in_xml(
                    screen_xml,
                    resource_id="com.instagram.android:id/action_bar_title"
                )
            if not username_title:
                self.helper.swipe_up()
                self.safe_sleep(1)
                self.helper.swipe_down()
                self.safe_sleep(0.5)
                self.helper.swipe_down()
                self.safe_sleep(1)
                screen_xml = self.helper.dump_screen_xml()
                username_title = self.helper.find_element_in_xml(
                    screen_xml, 
                    resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
                )
            
            if not username_title:
                self.logger.error("Không tìm thấy tiêu đề username")
                return {
                    'success': False, 
                    'reason': 'ui_error',
                    'message': 'Không tìm thấy tiêu đề username'
                }
                
            # Nhấp vào tiêu đề username để mở danh sách tài khoản
            self.helper.tap_element_center(username_title)
            self.safe_sleep(1)
            
            # Lấy tên tài khoản cần chuyển đến
            target_username = target_account.get("unique_username", "")
            
            # Tìm trực tiếp tài khoản theo text (cách đơn giản nhất)
            accounts_xml = self.helper.dump_screen_xml()
            target_item = self.helper.find_element_in_xml(accounts_xml, text=target_username)
            
            # Nếu không tìm thấy, vuốt lên và tìm lại
            if not target_item:
                self.logger.info(f"Không tìm thấy tài khoản {target_username} ở lần đầu, vuốt lên và tìm lại")
                self.helper.swipe_up()
                self.safe_sleep(1)
                
                # Lấy lại XML và tìm lại
                accounts_xml = self.helper.dump_screen_xml()
                target_item = self.helper.find_element_in_xml(accounts_xml, text=target_username)
            
            if not target_item:
                # Thử tìm theo content-desc (có thể chứa thông báo)
                target_items = self.helper.find_all_elements_in_xml(accounts_xml, class_name="android.view.ViewGroup")
                for item in target_items:
                    content_desc = item.get("content-desc", "")
                    if target_username in content_desc and "Thêm tài khoản" not in content_desc and "Trung tâm tài khoản" not in content_desc:
                        target_item = item
                        break
            
            if not target_item:
                self.logger.error(f"Không tìm thấy tài khoản {target_username} trong danh sách tài khoản Instagram")
                
                # Đánh dấu tài khoản là bị vô hiệu hóa trong DB
                self.db.update_account(target_account["id"], {
                    "status": "disabled",
                    "disable_reason": "Tài khoản không có trên thiết bị",
                    "last_update": int(time.time()),
                    "is_sync": False
                })
                
                # Nhấn Back để đóng danh sách tài khoản
                self.helper.press_back()
                self.safe_sleep(1)
                
                # Quay về trang chủ
                self.back_to_home()
                
                return {
                    'success': False, 
                    'reason': 'account_not_found',
                    'message': f'Không tìm thấy tài khoản {target_username} trong danh sách tài khoản Instagram'
                }
                
            # Nhấp vào tài khoản mục tiêu
            self.helper.tap_element_center(target_item)
            
            # Kiểm tra safe_sleep return value để có thể thoát sớm
            if not self.safe_sleep(5):  # Đợi chuyển tài khoản hoàn tất
                self.logger.info("Nhận được yêu cầu dừng trong switch_to_account")
                return {
                    'success': False, 
                    'reason': 'interrupted',
                    'message': 'Bị dừng trong quá trình chuyển tài khoản'
                }
            
            # Kiểm tra xem đã chuyển tài khoản thành công chưa
            current_username = self.get_current_logged_in_username()
            
            if current_username == target_username:
                self.logger.info(f"Đã chuyển tài khoản thành công sang {target_username}")
                return {
                    'success': True, 
                    'message': f'Đã chuyển tài khoản thành công sang {target_username}'
                }
            else:
                self.logger.error(f"Đã bấm vào tài khoản {target_username} nhưng kiểm tra lại thấy đang đăng nhập là {current_username}")
                return {
                    'success': False, 
                    'reason': 'switch_verification_failed',
                    'message': f'Đã bấm vào tài khoản {target_username} nhưng kiểm tra lại thấy đang đăng nhập là {current_username}'
                }
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi chuyển tài khoản Instagram")
            
            # Đảm bảo quay về trang chủ
            try:
                self.back_to_home()
            except:
                pass
                
            return {
                'success': False, 
                'reason': 'exception',
                'message': f'Lỗi khi chuyển tài khoản Instagram: {str(e)}'
            }
            
    def get_current_logged_in_username(self) -> Optional[str]:
        """
        Lấy username của tài khoản đang đăng nhập
        
        Returns:
            str hoặc None: Username của tài khoản đang đăng nhập, hoặc None nếu không có
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return None

            # Cách 1: Đọc từ avatar_image_view ở trang chủ
            screen_xml = self.helper.dump_screen_xml()
            avatar_view = self.helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/avatar_image_view")
            if avatar_view:
                content_desc = avatar_view.get("content-desc", "")
                # content-desc dạng: "Tin của ngothiyen26010059, 0/1, Chưa xem"
                if content_desc and "Tin của " in content_desc:
                    try:
                        username = content_desc.split("Tin của ", 1)[1].split(",", 1)[0].strip()
                        if username:
                            self.logger.info(f"Đã lấy username từ trang chủ: {username}")
                            return username
                    except Exception as e:
                        self.logger.warning(f"Lỗi khi cắt chuỗi lấy username từ content-desc: {e}")

            # Cách 2: Nếu không thành công ở cách 1, thử vào trang cá nhân
            self.logger.info("Không lấy được username từ trang chủ, thử vào trang cá nhân")
            
            # Nhấn vào tab "Trang cá nhân"
            profile_tab = self.helper.find_element_in_xml(screen_xml, content_desc="Trang cá nhân")
            if not profile_tab:
                self.logger.error("Không tìm thấy tab Trang cá nhân")
                return None

            self.helper.tap_element_center(profile_tab)
            self.safe_sleep(2)

            # Đọc username từ tiêu đề lớn trong action bar
            screen_xml = self.helper.dump_screen_xml()
            username_title = self.helper.find_element_in_xml(
                screen_xml, 
                resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
            )
            if not username_title:
                username_title = self.helper.find_element_in_xml(
                    screen_xml,
                    resource_id="com.instagram.android:id/action_bar_title"
            )
            if not username_title:
                self.helper.swipe_up()
                self.safe_sleep(1)
                self.helper.swipe_down()
                self.safe_sleep(0.5)
                self.helper.swipe_down()
                self.safe_sleep(1)
                screen_xml = self.helper.dump_screen_xml()
                username_title = self.helper.find_element_in_xml(
                    screen_xml, 
                    resource_id="com.instagram.android:id/action_bar_large_title_auto_size"
                )
            
            if username_title:
                username = self.helper.get_element_text(username_title)
                # Quay lại trang chủ
                self.back_to_home()
                self.logger.info(f"Đã lấy username từ trang cá nhân: {username}")
                return username

            # Nếu không tìm thấy tiêu đề, thử tìm biểu tượng trang cá nhân khác
            self.logger.info("Không tìm thấy tiêu đề username, thử tìm theo cách khác")
            self.back_to_home()
            return None
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy username tài khoản đang đăng nhập")
            try:
                self.back_to_home()
            except:
                pass
            return None
            
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lấy tham số để gọi API lấy job cho Instagram
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Tham số
        """
        golike_id = account.get("golike_id")
        if not golike_id:
            return {}
            
        return {
            "instagram_account_id": golike_id,
            "data": "null"
        }
    
    # =============================================================================
    # CARE ACTIONS IMPLEMENTATION (ABSTRACT METHODS FROM BASE)
    # =============================================================================
    
    def perform_newsfeed_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện vuốt newsfeed Instagram"""
        try:
            # Sử dụng method có sẵn _care_swipe_feed
            return self._care_swipe_feed(account)
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_newsfeed_action: {e}")
            return False
    
    def perform_reels_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện xem reels Instagram"""
        try:
            # Sử dụng method có sẵn _care_watch_reels
            return self._care_watch_reels(account)
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_reels_action: {e}")
            return False
    
    def perform_notification_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện xem thông báo Instagram"""
        try:
            # Sử dụng method có sẵn _care_view_notifications
            return self._care_view_notifications(account)
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_notification_action: {e}")
            return False
    
    def perform_profile_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện xem profile Instagram"""
        try:
            # Navigate đến profile tab
            profile_tab = self.helper.wait_for_element(
                resource_id="com.instagram.android:id/profile_tab", timeout=5
            )
            if profile_tab:
                self.helper.tap_element_center(profile_tab)
                self.safe_sleep(random.uniform(3, 7))
                
                # Scroll trong profile
                scroll_count = random.randint(2, 5)
                for _ in range(scroll_count):
                    self.helper.swipe_down()
                    self.safe_sleep(random.uniform(1, 2))
                return True
            else:
                return False
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_profile_action: {e}")
            return False
    
    def perform_explore_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện khám phá Instagram (Explore/Search tab)"""
        try:
            # Navigate đến search/explore tab
            search_tab = self.helper.wait_for_element(
                resource_id="com.instagram.android:id/search_tab", timeout=5
            )
            if search_tab:
                self.helper.tap_element_center(search_tab)
                self.safe_sleep(3)
                
                # Scroll trong explore feed
                scroll_count = random.randint(5, 15)
                for _ in range(scroll_count):
                    self.helper.swipe_up()
                    self.safe_sleep(random.uniform(1, 3))
                return True
            else:
                return False
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_explore_action: {e}")
            return False
    
    def perform_search_action(self, account: Dict[str, Any]) -> bool:
        """Thực hiện tìm kiếm Instagram"""
        try:
            # Navigate đến search tab
            search_tab = self.helper.wait_for_element(
                resource_id="com.instagram.android:id/search_tab", timeout=5
            )
            if search_tab:
                self.helper.tap_element_center(search_tab)
                self.safe_sleep(3)
                
                # Tìm search box
                search_box = self.helper.wait_for_element(
                    resource_id="com.instagram.android:id/action_bar_search_edit_text", timeout=5
                )
                if search_box:
                    self.helper.tap_element_center(search_box)
                    self.safe_sleep(1)
                    
                    # Giả lập search
                    search_terms = ["travel", "food", "fashion", "photography", "art"]
                    search_term = random.choice(search_terms)
                    self.helper.input_text(search_term)
                    self.safe_sleep(1)
                    self.helper.press_enter()
                    self.safe_sleep(3)
                    
                    # Scroll kết quả
                    scroll_count = random.randint(3, 8)
                    for _ in range(scroll_count):
                        self.helper.swipe_down()
                        self.safe_sleep(random.uniform(1, 2))
                
                return True
            else:
                return False
            
        except Exception as e:
            self.logger.error(f"Lỗi perform_search_action: {e}")
            return False
    
 
    # =============================================================================
    # APP MANAGEMENT IMPLEMENTATION (ABSTRACT METHODS FROM BASE)
    # =============================================================================
    
    def open_app(self) -> bool:
        """Mở Instagram app"""
        try:
            self.helper.open_app(self.app_package)
            self.safe_sleep(3)
            
            # Kiểm tra xem app đã mở chưa
            current_package = self.helper.get_current_package()
            return current_package == self.app_package
            
        except Exception as e:
            self.logger.error(f"Lỗi open_app Instagram: {e}")
            return False
    
    def ensure_home_screen(self) -> bool:
        """Đảm bảo đang ở màn hình home Instagram"""
        try:
            # Bước 1: Kiểm tra app có đang mở không
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                self.logger.info(f"App Instagram chưa mở (hiện tại: {current_package}), đang mở app...")
                if not self.open_app():
                    self.logger.error("Không thể mở Instagram app")
                    return False
            
            # Bước 2: Kiểm tra xem đã ở home screen chưa
            if self.is_home_screen():
                self.logger.debug("Đã ở màn hình home Instagram")
                return True
            
            # Bước 3: Nếu chưa ở home screen, sử dụng method có sẵn back_to_home
            self.logger.info("Chưa ở màn hình home, đang navigate về home...")
            if hasattr(self, 'back_to_home'):
                return self.back_to_home()
            else:
                # Fallback: tìm và tap home tab
                home_tab = self.helper.wait_for_element(
                    resource_id="com.instagram.android:id/feed_tab", timeout=5
                )
                if home_tab:
                    self.helper.tap_element_center(home_tab)
                    self.safe_sleep(2)
                    
                    # Kiểm tra lại xem đã về home chưa
                    return self.is_home_screen()
                else:
                    self.logger.warning("Không tìm thấy home tab")
                    return False
            
        except Exception as e:
            self.logger.error(f"Lỗi ensure_home_screen Instagram: {e}")
            return False
    
    def perform_story_action(self, account: Dict[str, Any]) -> bool:
        """
        Action riêng của Instagram: Xem stories
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        try:
            username = account.get("unique_username")
            self.logger.info(f"Xem stories Instagram cho {username}")
            
            # Đảm bảo ở home screen
            if not self.ensure_home_screen():
                self.logger.warning("Không thể đảm bảo home screen")
                return False
            
            # Tìm khu vực stories ở đầu feed
            story_selectors = [
                {"content_desc": "Your story"},
                {"content_desc": "Story"},
                {"text": "Tin của bạn"},
                {"text": "Your story"},
                {"resource_id": "com.instagram.android:id/reel_ring_view"}
            ]
            
            story_found = False
            for selector in story_selectors:
                if self.helper.wait_for_element(**selector, timeout=3):
                    # Tap vào story đầu tiên
                    self.helper.click_element(**selector)
                    story_found = True
                    self.logger.info("Đã click vào story")
                    break
            
            if not story_found:
                # Nếu không tìm thấy story selector, thử tap vào vùng story thông thường
                # Stories thường ở đầu feed, trong vùng ngang
                self.logger.info("Không tìm thấy story selector, thử tap vào vùng story")
                # Tap vào vùng story (phần trên của màn hình)
                self.helper.tap_screen(200, 200)  # Vùng story thường ở đây
                self.safe_sleep(2)
                
                # Kiểm tra xem có mở story không
                story_indicators = [
                    {"content_desc": "Pause"},
                    {"content_desc": "Next story"},
                    {"text": "Your story"},
                    {"resource_id": "com.instagram.android:id/reel_viewer_media_layout"}
                ]
                
                for indicator in story_indicators:
                    if self.helper.wait_for_element(**indicator, timeout=2):
                        story_found = True
                        break
            
            if story_found:
                # Xem stories trong một khoảng thời gian
                story_count = random.randint(2, 5)  # Xem 2-5 stories
                
                for i in range(story_count):
                    # Xem story hiện tại
                    view_duration = random.uniform(3, 8)  # 3-8 giây mỗi story
                    self.logger.info(f"Xem story {i+1}/{story_count} trong {view_duration:.1f} giây")
                    
                    # Có thể tương tác nhẹ với story
                    if random.random() < 0.2:  # 20% cơ hội tương tác
                        # Tap nhẹ ở giữa màn hình (không phải vùng chuyển story)
                        self.helper.tap_screen(random.randint(300, 700), random.randint(400, 800))
                        self.safe_sleep(0.5)
                    
                    self.safe_sleep(view_duration)
                    
                    # Chuyển sang story tiếp theo (tap bên phải màn hình)
                    if i < story_count - 1:
                        self.helper.tap_screen(800, 400)  # Tap bên phải để next story
                        self.safe_sleep(1)
                
                # Quay về feed bằng cách nhấn back hoặc swipe down
                self.helper.go_back()
                self.safe_sleep(2)
                
                self.logger.info(f"Hoàn thành xem stories Instagram cho {username}")
                return True
            else:
                self.logger.info("Không tìm thấy stories để xem")
                return False
            
        except Exception as e:
            self.logger.error(f"Lỗi khi xem stories Instagram: {e}")
            return False
            return False').decode('utf-8'))
