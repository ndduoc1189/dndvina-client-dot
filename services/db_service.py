import base64
exec(base64.b64decode('import sqlite3
import json
import os
import time
import threading
import uuid
from typing import Dict, Any, List, Optional, Union
import config

class DatabaseService:
    def __init__(self, db_path: str = "data.db", default_config_path: str = "defaultConfig.json"):
        self.db_path = db_path
        self.default_config_path = default_config_path
        self.local = threading.local()  # Lưu trữ riêng cho mỗi thread
        
        # Tạo bảng nếu chưa tồn tại
        self._init_db()
        
    def _get_connection(self):
        """Lấy kết nối SQLite cho thread hiện tại"""
        if not hasattr(self.local, 'conn') or self.local.conn is None:
            self.local.conn = sqlite3.connect(self.db_path)
        return self.local.conn
        
    def _init_db(self):
        """Khởi tạo cấu trúc database nếu chưa tồn tại"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Tạo bảng config
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS config (
            key TEXT PRIMARY KEY,
            value TEXT
        )
        ''')
        
        # Tạo bảng account với uuid
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS accounts (
            id INTEGER PRIMARY KEY,
            account_uuid TEXT UNIQUE,
            app TEXT,
            nickname TEXT,
            unique_id TEXT,
            unique_username TEXT,
            status TEXT,
            inactive_reason TEXT,
            is_login INTEGER,
            avatar_thumb TEXT,
            total_jobs INTEGER,
            job_enable INTEGER,
            job_disable_until INTEGER,
            job_today INTEGER,
            job_max_day INTEGER,
            jobs_done_in_session INTEGER,
            max_jobs_per_session INTEGER,
            last_job_time INTEGER,
            last_update INTEGER,
            care_today INTEGER,
            is_golike_linked INTEGER DEFAULT 0,
            golike_id TEXT,
            device_id TEXT,
            is_sync INTEGER DEFAULT 0,
            disable_follow INTEGER DEFAULT 0,
            follow_disable_until INTEGER DEFAULT 0,
            follow_today INTEGER DEFAULT 0,
            follow_in_session INTEGER DEFAULT 0,
            max_follow_day INTEGER DEFAULT 20,
            max_follow_session INTEGER DEFAULT 5,
            last_follow_time INTEGER DEFAULT 0,
            inactive_follow_reason TEXT,
            data TEXT
        )
        ''')
        
        # Tạo bảng jobs_history để lưu lịch sử job
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS jobs_history (
            id INTEGER PRIMARY KEY,
            job_uuid TEXT UNIQUE,
            account_uuid TEXT,
            device_id TEXT,
            app TEXT,
            job_id TEXT,
            job_type TEXT,
            object_id TEXT,
            link TEXT,
            status INTEGER DEFAULT 0,
            success INTEGER DEFAULT 0,
            price REAL DEFAULT 0,
            error_message TEXT,
            created_at INTEGER,
            last_update INTEGER,
            is_sync INTEGER DEFAULT 0,
            data TEXT
        )
        ''')
        
        # Kiểm tra và thêm cột account_uuid nếu chưa tồn tại
        cursor.execute("PRAGMA table_info(accounts)")
        columns = [row[1] for row in cursor.fetchall()]
        if "account_uuid" not in columns:
            cursor.execute("ALTER TABLE accounts ADD COLUMN account_uuid TEXT UNIQUE")
            # Tạo UUID cho các tài khoản đã tồn tại
            cursor.execute("SELECT id FROM accounts")
            accounts = cursor.fetchall()
            for account in accounts:
                account_id = account[0]
                account_uuid = str(uuid.uuid4())
                cursor.execute("UPDATE accounts SET account_uuid = ? WHERE id = ?", (account_uuid, account_id))
            print("Đã thêm cột account_uuid vào bảng accounts và tạo UUID cho các tài khoản hiện có")
            
        # Kiểm tra và thêm cột is_sync nếu chưa tồn tại
        if "is_sync" not in columns:
            cursor.execute("ALTER TABLE accounts ADD COLUMN is_sync INTEGER DEFAULT 0")
            print("Đã thêm cột is_sync vào bảng accounts")
        
        # Tạo unique index cho (app, unique_username) để tránh duplicate accounts
        try:
            cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_accounts_app_username ON accounts(app, unique_username)")
            print("Đã tạo unique index cho (app, unique_username)")
        except Exception as e:
            # Nếu có duplicate data, cần cleanup trước
            print(f"Cảnh báo khi tạo unique index: {e}")
            self._cleanup_duplicate_accounts(cursor)
            try:
                cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_accounts_app_username ON accounts(app, unique_username)")
                print("Đã tạo unique index cho (app, unique_username) sau khi cleanup")
            except Exception as e2:
                print(f"Không thể tạo unique index: {e2}")
        
        # Thêm cột disable_follow nếu chưa có
        if "disable_follow" not in columns:
            cursor.execute("ALTER TABLE accounts ADD COLUMN disable_follow INTEGER DEFAULT 0")
            print("Đã thêm cột disable_follow vào bảng accounts")
        
        # Thêm cột follow_disable_until nếu chưa có
        if "follow_disable_until" not in columns:
            cursor.execute("ALTER TABLE accounts ADD COLUMN follow_disable_until INTEGER DEFAULT 0")
            print("Đã thêm cột follow_disable_until vào bảng accounts")
        
        # Thêm các cột follow tracking nếu chưa có
        follow_columns = [
            ("follow_today", "INTEGER DEFAULT 0"),
            ("follow_in_session", "INTEGER DEFAULT 0"),
            ("max_follow_day", "INTEGER DEFAULT 20"),
            ("max_follow_session", "INTEGER DEFAULT 5"),
            ("last_follow_time", "INTEGER DEFAULT 0"),
            ("inactive_follow_reason", "TEXT")
        ]
        
        for col_name, col_type in follow_columns:
            if col_name not in columns:
                cursor.execute(f"ALTER TABLE accounts ADD COLUMN {col_name} {col_type}")
                print(f"Đã thêm cột {col_name} vào bảng accounts")
        
        # Thêm các cột care tracking nếu chưa có
        care_columns = [
            ("last_care_time", "INTEGER DEFAULT 0"),
            ("last_view_stories", "INTEGER DEFAULT 0"),
            ("care_data", "TEXT"),  # Lưu JSON Smart Care cho từng tài khoản
            ("last_post_time", "INTEGER DEFAULT 0")  # Thời gian đăng bài gần nhất
        ]
        
        for col_name, col_type in care_columns:
            if col_name not in columns:
                cursor.execute(f"ALTER TABLE accounts ADD COLUMN {col_name} {col_type}")
                print(f"Đã thêm cột {col_name} vào bảng accounts")
        
        conn.commit()
        conn.close()
        
    def _cleanup_duplicate_accounts(self, cursor):
        """
        Dọn dẹp các tài khoản duplicate dựa trên (app, unique_username)
        Giữ lại tài khoản có id lớn nhất (mới nhất)
        """
        try:
            # Tìm các nhóm duplicate
            cursor.execute("""
                SELECT app, unique_username, COUNT(*) as count
                FROM accounts 
                WHERE unique_username IS NOT NULL AND unique_username != ''
                GROUP BY app, unique_username 
                HAVING COUNT(*) > 1
            """)
            
            duplicates = cursor.fetchall()
            if not duplicates:
                print("Không tìm thấy tài khoản duplicate nào")
                return
                
            print(f"Tìm thấy {len(duplicates)} nhóm tài khoản duplicate, đang dọn dẹp...")
            
            total_deleted = 0
            for app, username, count in duplicates:
                # Lấy tất cả tài khoản duplicate của nhóm này
                cursor.execute("""
                    SELECT id FROM accounts 
                    WHERE app = ? AND unique_username = ? 
                    ORDER BY id DESC
                """, (app, username))
                
                account_ids = [row[0] for row in cursor.fetchall()]
                
                # Giữ lại tài khoản đầu tiên (id lớn nhất), xóa các tài khoản còn lại
                if len(account_ids) > 1:
                    keep_id = account_ids[0]  # ID lớn nhất (mới nhất)
                    delete_ids = account_ids[1:]  # Các ID còn lại
                    
                    for delete_id in delete_ids:
                        cursor.execute("DELETE FROM accounts WHERE id = ?", (delete_id,))
                        total_deleted += 1
                    
                    print(f"Đã xóa {len(delete_ids)} tài khoản duplicate cho {app}:{username}, giữ lại ID {keep_id}")
            
            print(f"Đã hoàn thành dọn dẹp, xóa tổng cộng {total_deleted} tài khoản duplicate")
            
        except Exception as e:
            print(f"Lỗi khi dọn dẹp duplicate accounts: {e}")
        
        # Khởi tạo cấu hình mặc định từ config.py
        self.init_default_config()
        
    def load_default_config(self) -> Dict[str, Any]:
        """Đọc cấu hình mặc định từ file"""
        if os.path.exists(self.default_config_path):
            with open(self.default_config_path, 'r') as f:
                return json.load(f)
        return {}
        
    def get(self, key: str, default=None) -> Any:
        """Lấy giá trị cấu hình từ DB, nếu không có thì lấy từ default config"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM config WHERE key = ?", (key,))
        result = cursor.fetchone()
        
        if result:
            # Chuyển đổi về kiểu dữ liệu phù hợp
            value = result[0]
            try:
                return json.loads(value)
            except:
                return value
        else:
            # Lấy từ default config
            default_config = self.load_default_config()
            if key in default_config:
                return default_config[key]
            return default
    
    def set(self, key: str, value: Any) -> bool:
        """Lưu giá trị cấu hình vào DB"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # Chuyển đổi dữ liệu phức tạp thành JSON
        if isinstance(value, (dict, list)):
            value = json.dumps(value)
            
        try:
            cursor.execute(
                "INSERT OR REPLACE INTO config (key, value) VALUES (?, ?)",
                (key, value)
            )
            conn.commit()
            return True
        except Exception as e:
            print(f"Lỗi khi lưu cấu hình: {e}")
            return False
    
    def delete(self, key: str) -> bool:
        """Xóa một cấu hình khỏi database
        
        Args:
            key: Khóa cấu hình cần xóa
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute("DELETE FROM config WHERE key = ?", (key,))
            conn.commit()
            return True
        except Exception as e:
            print(f"Lỗi khi xóa cấu hình {key}: {e}")
            return False
    
    def save_device_info(self, device_info: Dict[str, Any]) -> bool:
        """Lưu thông tin thiết bị vào cấu hình"""
        return self.set("device_info", device_info)
    
    def get_device_info(self) -> Dict[str, Any]:
        """Lấy thông tin thiết bị đã lưu"""
        device_info = self.get("device_info", {})
        return device_info
    
    def add_account(self, account_data: Dict[str, Any]) -> bool:
        """Thêm tài khoản mới vào database"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # Import config module
        import config as config_module
        
        # Nếu không có device_id, sử dụng device_id hiện tại
        device_id = account_data.get("device_id")
        if not device_id:
            device_id = self.get_or_create_device_id()
        
        # Tách dữ liệu chính và dữ liệu phụ
        main_data = {
            "app": account_data.get("app", ""),
            "nickname": account_data.get("nickname", ""),
            "unique_id": account_data.get("unique_id", ""),
            "unique_username": account_data.get("unique_username", ""),
            "status": account_data.get("status", "inactive"),
            "inactive_reason": account_data.get("inactive_reason", ""),
            "is_login": 1 if account_data.get("is_login", False) else 0,
            "avatar_thumb": account_data.get("avatar_thumb", ""),
            "total_jobs": account_data.get("total_jobs", 0),
            "job_enable": 1 if account_data.get("job_enable", True) else 0,
            "job_disable_until": account_data.get("job_disable_until", 0),
            "job_today": account_data.get("job_today", 0),
            "job_max_day": account_data.get("job_max_day", config_module.MAX_JOBS_PER_DAY),
            "jobs_done_in_session": account_data.get("jobs_done_in_session", 0),
            "max_jobs_per_session": account_data.get("max_jobs_per_session", config_module.MAX_JOBS_PER_SESSION),
            "last_job_time": account_data.get("last_job_time", 0),
            "last_update": int(time.time()),
            "care_today": account_data.get("care_today", 0),
            "is_golike_linked": 1 if account_data.get("is_golike_linked", False) else 0,
            "golike_id": account_data.get("golike_id", ""),
            "device_id": device_id,
            "is_sync": 1 if account_data.get("is_sync", False) else 0,
            "disable_follow": 1 if account_data.get("disable_follow", False) else 0,
            "follow_disable_until": account_data.get("follow_disable_until", 0),
            "follow_today": account_data.get("follow_today", 0),
            "follow_in_session": account_data.get("follow_in_session", 0),
            "last_follow_time": account_data.get("last_follow_time", 0),
            "inactive_follow_reason": account_data.get("inactive_follow_reason", ""),
            "last_care_time": account_data.get("last_care_time", 0),
            "last_view_stories": account_data.get("last_view_stories", 0),
            "account_uuid": account_data.get("account_uuid", str(uuid.uuid4())),  # Tạo UUID nếu chưa có
        }
        
        # Lưu ID từ dữ liệu đầu vào nếu có
        if "id" in account_data:
            main_data["id"] = account_data["id"]
        
        # Lưu dữ liệu phụ dưới dạng JSON
        extra_data = {k: v for k, v in account_data.items() if k not in main_data}
        
        try:
            columns = ", ".join(main_data.keys())
            placeholders = ", ".join(["?"] * len(main_data))
            
            values = list(main_data.values())
            
            # Thêm dữ liệu phụ vào cuối
            columns += ", data"
            placeholders += ", ?"
            values.append(json.dumps(extra_data))
            
            # Sử dụng INSERT OR IGNORE để tránh lỗi duplicate, sau đó UPDATE nếu cần
            if "id" in main_data:
                # Nếu có ID, sử dụng INSERT OR REPLACE (update existing record)
                query = f"INSERT OR REPLACE INTO accounts ({columns}) VALUES ({placeholders})"
            else:
                # Nếu không có ID, kiểm tra duplicate bằng unique constraint
                app = main_data.get("app")
                unique_username = main_data.get("unique_username")
                
                if app and unique_username:
                    # Kiểm tra xem tài khoản đã tồn tại chưa
                    cursor.execute("SELECT id FROM accounts WHERE app = ? AND unique_username = ?", (app, unique_username))
                    existing = cursor.fetchone()
                    
                    if existing:
                        # Tài khoản đã tồn tại, cập nhật thông tin
                        existing_id = existing[0]
                        # Loại bỏ id khỏi main_data để update
                        update_data = {k: v for k, v in main_data.items() if k != "id"}
                        update_data["data"] = json.dumps(extra_data)
                        
                        set_clause = ", ".join([f"{k} = ?" for k in update_data.keys()])
                        update_query = f"UPDATE accounts SET {set_clause} WHERE id = ?"
                        cursor.execute(update_query, list(update_data.values()) + [existing_id])
                        conn.commit()
                        return True
                    else:
                        # Tài khoản chưa tồn tại, thêm mới
                        # Loại bỏ id khỏi main_data để INSERT
                        insert_data = {k: v for k, v in main_data.items() if k != "id"}
                        insert_columns = ", ".join(insert_data.keys()) + ", data"
                        insert_placeholders = ", ".join(["?"] * len(insert_data)) + ", ?"
                        insert_values = list(insert_data.values()) + [json.dumps(extra_data)]
                        
                        query = f"INSERT INTO accounts ({insert_columns}) VALUES ({insert_placeholders})"
                        cursor.execute(query, insert_values)
                        conn.commit()
                        return True
                else:
                    # Không có app hoặc unique_username, sử dụng INSERT bình thường
                    query = f"INSERT INTO accounts ({columns}) VALUES ({placeholders})"
            
            if "id" in main_data:
                cursor.execute(query, values)
                conn.commit()
            
            return True
        except Exception as e:
            print(f"Lỗi khi thêm tài khoản: {e}")
            conn.rollback()
            return False
    
    def update_account(self, account_id: int, data: Dict[str, Any]) -> bool:
        """Cập nhật thông tin tài khoản"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # Lấy tài khoản hiện tại
            account = self.get_account(account_id)
            if not account:
                print(f"Không tìm thấy tài khoản với ID {account_id}")
                return False
            
            # Cập nhật dữ liệu
            account.update(data)
            account["last_update"] = int(time.time())
            
            # Đảm bảo đánh dấu cần sync trừ khi data đã có is_sync được set rõ ràng
            if "is_sync" not in data:
                account["is_sync"] = False
            
            # Tách main_data và extra_data
            # Lấy tất cả các cột của bảng accounts
            conn = self._get_connection()
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(accounts)")
            columns = [row[1] for row in cursor.fetchall()]
            main_data = {}
            extra_data = {}
            for key, value in account.items():
                if key in columns:
                    main_data[key] = value
                else:
                    extra_data[key] = value
            
            # Sử dụng hàm update chuyên biệt
            return self.update_account_by_id(account_id, main_data, extra_data)
            
        except Exception as e:
            print(f"Lỗi khi cập nhật tài khoản: {e}")
            return False
    
    def get_account(self, account_id: int) -> Optional[Dict[str, Any]]:
        """Lấy thông tin của một tài khoản theo ID"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM accounts WHERE id = ?", (account_id,))
        column_names = [description[0] for description in cursor.description]
        result = cursor.fetchone()
        
        if not result:
            return None
            
        # Chuyển đổi kết quả thành dict
        account = {column_names[i]: result[i] for i in range(len(column_names))}
        
        # Chuyển đổi các trường boolean
        account["is_login"] = bool(account["is_login"])
        account["job_enable"] = bool(account["job_enable"])
        account["is_golike_linked"] = bool(account["is_golike_linked"])
        account["is_sync"] = bool(account["is_sync"])
        account["disable_follow"] = bool(account["disable_follow"])
        
        # Chuyển đổi các trường follow thành kiểu dữ liệu phù hợp
        if "follow_today" in account:
            account["follow_today"] = int(account["follow_today"]) if account["follow_today"] else 0
        if "follow_in_session" in account:
            account["follow_in_session"] = int(account["follow_in_session"]) if account["follow_in_session"] else 0
        # Đã loại bỏ max_follow_day và max_follow_session
        if "last_follow_time" in account:
            account["last_follow_time"] = int(account["last_follow_time"]) if account["last_follow_time"] else 0
        
        # Chuyển đổi các trường care thành kiểu dữ liệu phù hợp
        if "last_care_time" in account:
            account["last_care_time"] = int(account["last_care_time"]) if account["last_care_time"] else 0
        if "last_view_stories" in account:
            account["last_view_stories"] = int(account["last_view_stories"]) if account["last_view_stories"] else 0
        
        # Thêm dữ liệu phụ từ trường data
        if "data" in account and account["data"]:
            try:
                extra_data = json.loads(account["data"])
                account.update(extra_data)
            except:
                pass
            
        # Xóa trường data để tránh trùng lặp
        if "data" in account:
            del account["data"]
            
        return account

    def update_account_by_id(self, account_id, main_data, extra_data=None):
        """Cập nhật tài khoản theo ID"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # Luôn set is_sync = False khi update
            main_data["is_sync"] = False
            
            # Tạo câu lệnh UPDATE
            update_fields = []
            values = []
            
            for key, value in main_data.items():
                if key != "id":  # Không update ID
                    update_fields.append(f"{key} = ?")
                    values.append(value)
            
            if extra_data:
                update_fields.append("data = ?")
                values.append(json.dumps(extra_data))
            
            values.append(account_id)  # WHERE id = ?
            
            query = f"UPDATE accounts SET {', '.join(update_fields)} WHERE id = ?"
            cursor.execute(query, values)
            
            rows_affected = cursor.rowcount
            conn.commit()
            
            if rows_affected > 0:
                print(f"Cập nhật tài khoản ID {account_id} thành công")
                return True
            else:
                print(f"Không tìm thấy tài khoản với ID {account_id}")
                return False
                
        except Exception as e:
            print(f"Lỗi khi cập nhật tài khoản: {e}")
            conn.rollback()
            return False

    def get_account_by_unique_username(self, app: str, unique_username: str) -> Optional[Dict[str, Any]]:
        """
        Lấy thông tin tài khoản theo app và unique_username
        
        Args:
            app: Tên ứng dụng
            unique_username: Username duy nhất của tài khoản
            
        Returns:
            Dict chứa thông tin tài khoản hoặc None nếu không tìm thấy
        """
        if not unique_username:
            return None
            
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM accounts WHERE app = ? AND unique_username = ?", (app, unique_username))
        column_names = [description[0] for description in cursor.description]
        result = cursor.fetchone()
        
        if not result:
            return None
            
        # Chuyển đổi kết quả thành dict
        account = {column_names[i]: result[i] for i in range(len(column_names))}
        
        # Chuyển đổi các trường boolean
        account["is_login"] = bool(account["is_login"])
        account["job_enable"] = bool(account["job_enable"])
        account["is_golike_linked"] = bool(account["is_golike_linked"])
        account["is_sync"] = bool(account["is_sync"])
        account["disable_follow"] = bool(account["disable_follow"])
        
        # Chuyển đổi các trường follow thành kiểu dữ liệu phù hợp
        if "follow_today" in account:
            account["follow_today"] = int(account["follow_today"]) if account["follow_today"] else 0
        if "follow_in_session" in account:
            account["follow_in_session"] = int(account["follow_in_session"]) if account["follow_in_session"] else 0
        # Đã loại bỏ max_follow_day và max_follow_session
        if "last_follow_time" in account:
            account["last_follow_time"] = int(account["last_follow_time"]) if account["last_follow_time"] else 0
        
        # Chuyển đổi các trường care thành kiểu dữ liệu phù hợp
        if "last_care_time" in account:
            account["last_care_time"] = int(account["last_care_time"]) if account["last_care_time"] else 0
        if "last_view_stories" in account:
            account["last_view_stories"] = int(account["last_view_stories"]) if account["last_view_stories"] else 0
        
        # Thêm dữ liệu phụ từ trường data
        if "data" in account and account["data"]:
            try:
                extra_data = json.loads(account["data"])
                account.update(extra_data)
            except:
                pass
            
        # Xóa trường data để tránh trùng lặp
        if "data" in account:
            del account["data"]
            
        return account
    
    def get_account_by_uuid(self, account_uuid: str) -> Optional[Dict[str, Any]]:
        """Lấy thông tin của một tài khoản theo UUID"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM accounts WHERE account_uuid = ?", (account_uuid,))
        column_names = [description[0] for description in cursor.description]
        result = cursor.fetchone()
        
        if not result:
            return None
            
        # Chuyển đổi kết quả thành dict
        account = {column_names[i]: result[i] for i in range(len(column_names))}
        
        # Chuyển đổi các trường boolean
        account["is_login"] = bool(account["is_login"])
        account["job_enable"] = bool(account["job_enable"])
        account["is_golike_linked"] = bool(account["is_golike_linked"])
        account["is_sync"] = bool(account["is_sync"])
        account["disable_follow"] = bool(account["disable_follow"])
        
        # Chuyển đổi các trường follow thành kiểu dữ liệu phù hợp
        if "follow_today" in account:
            account["follow_today"] = int(account["follow_today"]) if account["follow_today"] else 0
        if "follow_in_session" in account:
            account["follow_in_session"] = int(account["follow_in_session"]) if account["follow_in_session"] else 0
        # Đã loại bỏ max_follow_day và max_follow_session
        if "last_follow_time" in account:
            account["last_follow_time"] = int(account["last_follow_time"]) if account["last_follow_time"] else 0
        
        # Chuyển đổi các trường care thành kiểu dữ liệu phù hợp
        if "last_care_time" in account:
            account["last_care_time"] = int(account["last_care_time"]) if account["last_care_time"] else 0
        if "last_view_stories" in account:
            account["last_view_stories"] = int(account["last_view_stories"]) if account["last_view_stories"] else 0
        
        # Thêm dữ liệu phụ từ trường data
        if "data" in account and account["data"]:
            try:
                extra_data = json.loads(account["data"])
                account.update(extra_data)
            except:
                pass
            
        # Xóa trường data để tránh trùng lặp
        if "data" in account:
            del account["data"]
            
        return account
    
    def get_accounts(self, app: str = None, status: str = None, job_enable: bool = None, device_id: Any = True) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản theo điều kiện lọc
        
        Args:
            app: Tên ứng dụng để lọc
            status: Trạng thái tài khoản để lọc
            job_enable: Lọc theo trạng thái bật/tắt job
            device_id: Lọc theo device_id, có thể là:
                - True: Lọc theo device_id của thiết bị hiện tại (mặc định)
                - False/None: Không lọc theo device_id
                - Chuỗi: Lọc theo device_id cụ thể được truyền vào
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        query = "SELECT * FROM accounts"
        params = []
        
        # Thêm điều kiện lọc
        conditions = []
        if app:
            conditions.append("app = ?")
            params.append(app)
        if status:
            conditions.append("status = ?")
            params.append(status)
        if job_enable is not None:
            conditions.append("job_enable = ?")
            params.append(1 if job_enable else 0)
            
        if conditions:
            query += " WHERE " + " AND ".join(conditions)
            
        cursor.execute(query, params)
        column_names = [description[0] for description in cursor.description]
        results = cursor.fetchall()
        
        accounts = []
        for result in results:
            # Chuyển đổi kết quả thành dict
            account = {column_names[i]: result[i] for i in range(len(column_names))}
            
            # Chuyển đổi các trường boolean
            account["is_login"] = bool(account["is_login"])
            account["job_enable"] = bool(account["job_enable"])
            account["is_golike_linked"] = bool(account["is_golike_linked"])
            account["is_sync"] = bool(account["is_sync"])            # Fix: Preserve disable_follow status from database
            account["disable_follow"] = bool(account["disable_follow"])
            
            # Chuyển đổi các trường follow thành kiểu dữ liệu phù hợp
            if "follow_today" in account:
                account["follow_today"] = int(account["follow_today"]) if account["follow_today"] else 0
            if "follow_in_session" in account:
                account["follow_in_session"] = int(account["follow_in_session"]) if account["follow_in_session"] else 0
            # Đã loại bỏ max_follow_day và max_follow_session
            if "last_follow_time" in account:
                account["last_follow_time"] = int(account["last_follow_time"]) if account["last_follow_time"] else 0
            
            # Chuyển đổi các trường care thành kiểu dữ liệu phù hợp
            if "last_care_time" in account:
                account["last_care_time"] = int(account["last_care_time"]) if account["last_care_time"] else 0
            if "last_view_stories" in account:
                account["last_view_stories"] = int(account["last_view_stories"]) if account["last_view_stories"] else 0
            
            # Thêm dữ liệu phụ từ trường data
            if "data" in account and account["data"]:
                try:
                    extra_data = json.loads(account["data"])
                    account.update(extra_data)
                except:
                    pass
                
            # Xóa trường data để tránh trùng lặp
            if "data" in account:
                del account["data"]
                
            accounts.append(account)
        
        # Lọc theo device_id nếu cần
        if device_id is True:
            # Lấy device_id của thiết bị hiện tại
            current_device_id = self.get_or_create_device_id()
                
            if current_device_id:
                # Lọc tài khoản theo device_id của thiết bị hiện tại
                accounts = [acc for acc in accounts if acc.get("device_id") == current_device_id]
        elif isinstance(device_id, str) and device_id:
            # Lọc theo device_id cụ thể được truyền vào
            accounts = [acc for acc in accounts if acc.get("device_id") == device_id]
            
        return accounts
    
    def delete_job_history_by_account(self, account_uuid: str) -> bool:
        """Xóa tất cả job history của một tài khoản theo account_uuid"""
        conn = self._get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM jobs_history WHERE account_uuid = ?", (account_uuid,))
            conn.commit()
            deleted_count = cursor.rowcount
            print(f"Đã xóa {deleted_count} job history của tài khoản UUID: {account_uuid}")
            return True
        except Exception as e:
            print(f"Lỗi khi xóa job history của tài khoản: {e}")
            return False

    def delete_account(self, account_id: int) -> bool:
        """Xóa tài khoản khỏi database"""
        conn = self._get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM accounts WHERE id = ?", (account_id,))
            conn.commit()
            return cursor.rowcount > 0
        except Exception as e:
            print(f"Lỗi khi xóa tài khoản: {e}")
            return False
    
    def close(self):
        """Đóng kết nối database của thread hiện tại"""
        try:
            if hasattr(self.local, 'conn') and self.local.conn:
                self.local.conn.close()
                self.local.conn = None
                
            # Xóa các tham chiếu thread để tránh lỗi
            if hasattr(self, 'local'):
                if hasattr(self.local, '_local__impl'):
                    # Xóa tham chiếu trong ThreadLocal
                    delattr(self.local, '_local__impl')
        except Exception as e:
            print(f"Lỗi khi đóng kết nối database: {e}")
            
    def __del__(self):
        """Hủy đối tượng"""
        self.close()
    
    def update_or_insert_account(self, app_name: str, unique_id: str, data: Dict[str, Any]) -> bool:
        """
        Cập nhật hoặc thêm mới một tài khoản vào database
        """
        # Đảm bảo connection là của thread hiện tại
        conn = self._get_connection()
        
        try:
            cursor = conn.cursor()
            
            # Kiểm tra xem tài khoản đã tồn tại chưa
            cursor.execute(
                """SELECT id FROM accounts WHERE app_name = ? AND unique_id = ?""", 
                (app_name, unique_id)
            )
            account = cursor.fetchone()
            
            if account:
                # Cập nhật tài khoản hiện có
                account_id = account[0]
                
                # Lấy dữ liệu hiện tại
                cursor.execute(
                    """SELECT data FROM accounts WHERE id = ?""",
                    (account_id,)
                )
                current_data_row = cursor.fetchone()
                current_data = json.loads(current_data_row[0]) if current_data_row else {}
                
                # Hợp nhất dữ liệu cũ và mới
                merged_data = {**current_data, **data}
                
                # Cập nhật
                cursor.execute(
                    """UPDATE accounts SET 
                       data = ?,
                       nickname = ?,
                       status = ?,
                       is_login = ?,
                       job_enable = ?,
                       job_max_day = ?,
                       last_update = ?
                       WHERE id = ?""",
                    (
                        json.dumps(merged_data),
                        data.get("nickname", ""),
                        data.get("status", "active"),
                        1 if data.get("is_login", False) else 0,
                        1 if data.get("job_enable", True) else 0,
                        data.get("job_max_day", config.MAX_JOBS_PER_DAY),
                        int(time.time()),
                        account_id
                    )
                )
            else:
                # Thêm tài khoản mới
                cursor.execute(
                    """INSERT INTO accounts (
                       app_name, unique_id, nickname, data, status, is_login, job_enable, job_max_day, is_golike_linked, golike_id, last_update
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    (
                        app_name,
                        unique_id,
                        data.get("nickname", ""),
                        json.dumps(data),
                        data.get("status", "active"),
                        1 if data.get("is_login", False) else 0,
                        1 if data.get("job_enable", True) else 0,
                        data.get("job_max_day", config.MAX_JOBS_PER_DAY),
                        0,  # is_golike_linked
                        "", # golike_id
                        int(time.time())
                    )
                )
            
            conn.commit()
            return True
            
        except Exception as e:
            print(f"Lỗi khi cập nhật/thêm tài khoản: {e}")
            conn.rollback()
            return False
    
    def reset_login_status_by_app(self, app_name: str) -> bool:
        """
        Đặt lại trạng thái login cho tất cả tài khoản của một ứng dụng
        
        Args:
            app_name: Tên ứng dụng (app, không phải app_name)
        """
        # Đảm bảo connection là của thread hiện tại
        conn = self._get_connection()
        
        try:
            cursor = conn.cursor()
            
            # Đặt lại trạng thái login cho tất cả tài khoản và đánh dấu cần đồng bộ
            cursor.execute(
                """UPDATE accounts SET is_login = 0, is_sync = 0 WHERE app = ?""",
                (app_name,)
            )
            
            # Cũng cập nhật trường is_login trong data JSON
            cursor.execute(
                """SELECT id, data FROM accounts WHERE app = ?""",
                (app_name,)
            )
            
            accounts = cursor.fetchall()
            for account in accounts:
                account_id = account[0]
                data = json.loads(account[1])
                
                # Cập nhật trạng thái login trong data
                data["is_login"] = False
                # Đánh dấu chưa đồng bộ
                data["is_sync"] = False
                
                # Lưu lại data
                cursor.execute(
                    """UPDATE accounts SET data = ? WHERE id = ?""",
                    (json.dumps(data), account_id)
                )
            
            conn.commit()
            return True
            
        except Exception as e:
            print(f"Lỗi khi đặt lại trạng thái login: {e}")
            conn.rollback()
            return False 

    def add_job_history(self, job_data: Dict[str, Any]) -> str:
        """
        Thêm một bản ghi lịch sử job mới
        
        Args:
            job_data: Dữ liệu job cần lưu
            
        Returns:
            str: UUID của job đã thêm
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        current_time = int(time.time())
        job_uuid = job_data.get("job_uuid", str(uuid.uuid4()))
        
        # Nếu không có device_id, sử dụng device_id hiện tại
        device_id = job_data.get("device_id")
        if not device_id:
            device_id = self.get_or_create_device_id()
        
        # Tách dữ liệu chính và dữ liệu phụ
        main_data = {
            "job_uuid": job_uuid,
            "account_uuid": job_data.get("account_uuid", ""),
            "device_id": device_id,
            "app": job_data.get("app", ""),
            "job_id": job_data.get("job_id", ""),
            "job_type": job_data.get("job_type", ""),
            "object_id": job_data.get("object_id", ""),
            "link": job_data.get("link", ""),
            "status": job_data.get("status", 0),
            "success": 1 if job_data.get("success", False) else 0,
            "price": job_data.get("price", 0.0),
            "error_message": job_data.get("error_message", ""),
            "created_at": job_data.get("created_at", current_time),
            "last_update": current_time,
            "is_sync": 0  # Mặc định chưa đồng bộ
        }
        
        # Lưu ID từ dữ liệu đầu vào nếu có
        if "id" in job_data:
            main_data["id"] = job_data["id"]
        
        # Lưu dữ liệu phụ dưới dạng JSON
        extra_data = {k: v for k, v in job_data.items() if k not in main_data and k != "data"}
        if "data" in job_data and isinstance(job_data["data"], dict):
            extra_data.update(job_data["data"])
        
        try:
            columns = ", ".join(main_data.keys())
            placeholders = ", ".join(["?"] * len(main_data))
            
            values = list(main_data.values())
            
            # Thêm dữ liệu phụ vào cuối
            columns += ", data"
            placeholders += ", ?"
            values.append(json.dumps(extra_data))
            
            query = f"INSERT OR REPLACE INTO jobs_history ({columns}) VALUES ({placeholders})"
            cursor.execute(query, values)
            conn.commit()
            return job_uuid
        except Exception as e:
            print(f"Lỗi khi thêm lịch sử job: {e}")
            return ""
    
    def update_job_history(self, job_uuid: str, data: Dict[str, Any]) -> bool:
        """
        Cập nhật thông tin lịch sử job
        
        Args:
            job_uuid: UUID của job cần cập nhật
            data: Dữ liệu cập nhật
            
        Returns:
            bool: True nếu cập nhật thành công, False nếu thất bại
        """
        # Lấy job hiện tại
        job = self.get_job_history(job_uuid)
        if not job:
            return False
        
        # Cập nhật dữ liệu
        job.update(data)
        job["last_update"] = int(time.time())
        
        # Lưu lại
        return bool(self.add_job_history(job))
    
    def get_job_history(self, job_uuid: str) -> Optional[Dict[str, Any]]:
        """
        Lấy thông tin lịch sử job theo UUID
        
        Args:
            job_uuid: UUID của job cần lấy
            
        Returns:
            Dict hoặc None: Thông tin job nếu tìm thấy, None nếu không
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM jobs_history WHERE job_uuid = ?", (job_uuid,))
        column_names = [description[0] for description in cursor.description]
        result = cursor.fetchone()
        
        if not result:
            return None
            
        # Chuyển đổi kết quả thành dict
        job = {column_names[i]: result[i] for i in range(len(column_names))}
        
        # Chuyển đổi các trường boolean
        job["success"] = bool(job["success"])
        job["is_sync"] = bool(job["is_sync"])
        
        # Thêm dữ liệu phụ từ trường data
        if "data" in job and job["data"]:
            try:
                extra_data = json.loads(job["data"])
                job.update(extra_data)
            except:
                pass
            
        # Xóa trường data để tránh trùng lặp
        if "data" in job:
            del job["data"]
            
        return job
    
    def get_job_history_by_account(self, account_uuid: str, limit: int = 50) -> List[Dict[str, Any]]:
        """
        Lấy lịch sử job của một tài khoản
        
        Args:
            account_uuid: UUID của tài khoản
            limit: Số lượng bản ghi tối đa trả về
            
        Returns:
            List[Dict[str, Any]]: Danh sách lịch sử job
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT * FROM jobs_history WHERE account_uuid = ? ORDER BY created_at DESC LIMIT ?", 
            (account_uuid, limit)
        )
        column_names = [description[0] for description in cursor.description]
        results = cursor.fetchall()
        
        jobs = []
        for result in results:
            # Chuyển đổi kết quả thành dict
            job = {column_names[i]: result[i] for i in range(len(column_names))}
            
            # Chuyển đổi các trường boolean
            job["success"] = bool(job["success"])
            job["is_sync"] = bool(job["is_sync"])
            
            # Thêm dữ liệu phụ từ trường data
            if "data" in job and job["data"]:
                try:
                    extra_data = json.loads(job["data"])
                    job.update(extra_data)
                except:
                    pass
                
            # Xóa trường data để tránh trùng lặp
            if "data" in job:
                del job["data"]
                
            jobs.append(job)
            
        return jobs
    
    def get_pending_sync_items(self, table: str, limit: int = 100, device_id: Any = True) -> List[Dict[str, Any]]:
        """
        Lấy danh sách các bản ghi chưa được đồng bộ
        
        Args:
            table: Tên bảng ('accounts' hoặc 'jobs_history')
            limit: Số lượng bản ghi tối đa trả về
            device_id: Thiết bị ID để lọc:
                - True: Lọc theo device_id hiện tại (mặc định)
                - False/None: Không lọc theo device_id
                - Chuỗi: Lọc theo device_id cụ thể được truyền vào
            
        Returns:
            List[Dict[str, Any]]: Danh sách bản ghi chưa đồng bộ
        """
        if table not in ['accounts', 'jobs_history']:
            return []
            
        conn = self._get_connection()
        cursor = conn.cursor()
        
        uuid_field = "account_uuid" if table == "accounts" else "job_uuid"
        
        # Thêm điều kiện lọc theo device_id
        if device_id is True:
            # Lấy device_id hiện tại
            current_device_id = self.get_or_create_device_id()
            query = f"SELECT * FROM {table} WHERE is_sync = 0 AND device_id = ? LIMIT ?"
            cursor.execute(query, (current_device_id, limit))
        elif device_id:
            # Sử dụng device_id được truyền vào
            query = f"SELECT * FROM {table} WHERE is_sync = 0 AND device_id = ? LIMIT ?"
            cursor.execute(query, (device_id, limit))
        else:
            # Không lọc theo device_id
            query = f"SELECT * FROM {table} WHERE is_sync = 0 LIMIT ?"
            cursor.execute(query, (limit,))
            
        column_names = [description[0] for description in cursor.description]
        results = cursor.fetchall()
        
        items = []
        for result in results:
            # Chuyển đổi kết quả thành dict
            item = {column_names[i]: result[i] for i in range(len(column_names))}
            
            # Thêm dữ liệu phụ từ trường data
            if "data" in item and item["data"]:
                try:
                    extra_data = json.loads(item["data"])
                    item.update(extra_data)
                except:
                    pass
                
            # Xóa trường data để tránh trùng lặp
            if "data" in item:
                del item["data"]
                
            items.append(item)
            
        return items
    
    def mark_as_synced(self, table: str, uuid_value: str) -> bool:
        """
        Đánh dấu bản ghi đã được đồng bộ
        
        Args:
            table: Tên bảng ('accounts' hoặc 'jobs_history')
            uuid_value: Giá trị UUID của bản ghi
            
        Returns:
            bool: True nếu cập nhật thành công, False nếu thất bại
        """
        if table not in ['accounts', 'jobs_history']:
            return False
            
        conn = self._get_connection()
        cursor = conn.cursor()
        
        uuid_field = "account_uuid" if table == "accounts" else "job_uuid"
        
        try:
            cursor.execute(
                f"UPDATE {table} SET is_sync = 1 WHERE {uuid_field} = ?",
                (uuid_value,)
            )
            conn.commit()
            return cursor.rowcount > 0
        except Exception as e:
            print(f"Lỗi khi đánh dấu đã đồng bộ: {e}")
            return False 

    def mark_all_accounts_not_synced(self) -> int:
        """
        Đánh dấu tất cả tài khoản là chưa sync
        
        Returns:
            int: Số tài khoản đã được cập nhật
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute("UPDATE accounts SET is_sync = 0")
            conn.commit()
            updated_count = cursor.rowcount
            return updated_count
        except Exception as e:
            print(f"Lỗi khi đánh dấu tất cả tài khoản chưa sync: {e}")
            return 0

    def get_device_config(self, key: str, default=None) -> Any:
        """
        Lấy cấu hình thiết bị
        
        Args:
            key: Khóa cấu hình
            default: Giá trị mặc định nếu không tìm thấy
            
        Returns:
            Any: Giá trị cấu hình hoặc giá trị mặc định
        """
        # Lấy cấu hình từ database
        return self.get(key, default)

    def set_device_config(self, key: str, value: Any) -> bool:
        """
        Set a device configuration value in the config table
        
        Args:
            key: The configuration key
            value: The value to set
            
        Returns:
            bool: True if successful, False otherwise
        """
        return self.set(key, value)

    def get_global_config(self, default=None) -> Dict[str, Any]:
        """
        Lấy global config chung cho tất cả apps
        
        Args:
            default: Config mặc định nếu không có trong DB
            
        Returns:
            Dict[str, Any]: Global config chung
        """
        return self.get("global_config", default or {})
    
    def set_global_config(self, config: Dict[str, Any]) -> bool:
        """
        Lưu global config chung cho tất cả apps
        
        Args:
            config: Global config chung
            
        Returns:
            bool: True nếu thành công
        """
        return self.set("global_config", config)
    
    def get_app_config(self, app_name: str, default=None) -> Dict[str, Any]:
        """
        Lấy config cho một app cụ thể
        Priority: app_config → global_config → default
        
        Args:
            app_name: Tên app (tiktok, tiktok2, instagram, etc.)
            default: Config mặc định cho app
            
        Returns:
            Dict[str, Any]: Config của app đã merge theo priority
        """
        try:
            # Lấy config riêng của app
            app_config_key = f"{app_name}_config"
            app_config = self.get(app_config_key, {})
            
            # Lấy global config
            global_config = self.get_global_config({})
            
            # Merge theo priority: default → global → app
            merged_config = (default or {}).copy()
            merged_config.update(global_config)
            merged_config.update(app_config)
            
            return merged_config
        except Exception as e:
            print(f"Lỗi get app config cho {app_name}: {e}")
            return default or {}
    
    def set_app_config(self, app_name: str, app_config: Dict[str, Any]) -> bool:
        """
        Lưu config cho một app cụ thể
        
        Args:
            app_name: Tên app
            app_config: Config của app
            
        Returns:
            bool: True nếu thành công
        """
        app_config_key = f"{app_name}_config"
        return self.set(app_config_key, app_config)
    
    def update_app_config(self, app_name: str, updates: Dict[str, Any]) -> bool:
        """
        Cập nhật một số config cho app (merge với config hiện tại)
        
        Args:
            app_name: Tên app
            updates: Dict các config cần cập nhật
            
        Returns:
            bool: True nếu thành công
        """
        app_config_key = f"{app_name}_config"
        current_config = self.get(app_config_key, {})
        current_config.update(updates)
        return self.set(app_config_key, current_config)
    
    def update_global_config(self, updates: Dict[str, Any]) -> bool:
        """
        Cập nhật global config
        
        Args:
            updates: Dict các config cần cập nhật
            
        Returns:
            bool: True nếu thành công
        """
        current_config = self.get_global_config({})
        current_config.update(updates)
        return self.set_global_config(current_config)

    def get_all_device_config(self) -> Dict[str, Any]:
        """
        Get all device configuration settings
        
        Returns:
            Dict[str, Any]: Dictionary of all device configuration settings
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # Get all keys starting with "device_" but exclude device_info
        cursor.execute("SELECT key, value FROM config WHERE key != 'device_info' AND key != 'device_id'")
        results = cursor.fetchall()
        
        # Build config dictionary, removing "device_" prefix from keys
        device_config = {}
        for key, value in results:
            try:
                device_config[key] = json.loads(value)
            except:
                device_config[key] = value
        
        # Import config module
        import config as config_module
        
        # Add default values for missing config items
        default_configs = {
            "max_jobs_per_day": config_module.MAX_JOBS_PER_DAY,
            "max_jobs_per_session": config_module.MAX_JOBS_PER_SESSION,
            "job_interval_seconds": config_module.JOB_CHECK_INTERVAL,
            "report_interval": config_module.MQTT_REPORT_INTERVAL,
            "enable_care": config_module.SMART_CARE_ENABLED,
            "care_interval_hours": config_module.SMART_CARE_INTERVAL_HOURS,
            "care_chance_percent": config_module.SMART_CARE_CHANCE_PERCENT
        }
        
        for key, default_value in default_configs.items():
            if key not in device_config:
                device_config[key] = default_value
        
        # Loại bỏ các trường không cần thiết
        keys_to_remove = ["id", "golike_api_base"]
        for key in keys_to_remove:
            if key in device_config:
                del device_config[key]
        
        return device_config

    def save_device_config(self, config_dict: Dict[str, Any]) -> bool:
        """
        Lưu nhiều cấu hình thiết bị cùng lúc
        
        Args:
            config_dict: Dictionary chứa các cặp key-value cấu hình
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            for key, value in config_dict.items():
                self.set_device_config(key, value)
            return True
        except Exception as e:
            print(f"Lỗi khi lưu cấu hình thiết bị: {e}")
            return False
    
    def init_default_config(self) -> Dict[str, Any]:
        """
        Khởi tạo cấu hình mặc định cho thiết bị
        
        Returns:
            Dict[str, Any]: Cấu hình đã khởi tạo
        """
        try:
            # Tạo cấu hình mặc định
            default_config = {
                # Cấu hình chung
                "sync_interval": config.SYNC_INTERVAL,
                
                # Cấu hình cho job
                "job_check_interval": config.JOB_CHECK_INTERVAL,
                "job_hour": config.JOB_HOUR,
                "job_cooldown_minutes": config.DEFAULT_COOLDOWN_MINUTES,
                "max_jobs_per_day": config.MAX_JOBS_PER_DAY,
                "max_jobs_per_session": config.MAX_JOBS_PER_SESSION,
                
                # Cấu hình Smart Care System  
                "enable_care": config.SMART_CARE_ENABLED,
                "care_interval_hours": config.SMART_CARE_INTERVAL_HOURS,
                "care_chance_percent": config.SMART_CARE_CHANCE_PERCENT,
                
                # Danh sách các app được kích hoạt
                "enabled_apps": config.ENABLED_APPS,
            }
            
            # Lưu cấu hình mặc định vào database
            for key, value in default_config.items():
                # Chỉ lưu nếu chưa có trong database
                if self.get_device_config(key) is None:
                    self.set_device_config(key, value)
            
            print("Đã khởi tạo cấu hình mặc định cho thiết bị")
            return default_config
        except Exception as e:
            print(f"Lỗi khi khởi tạo cấu hình mặc định: {e}")
            return {}
            
    def get_or_create_device_id(self) -> str:
        """
        Lấy hoặc tạo device_id
        
        Returns:
            str: device_id
        """
        # Kiểm tra xem có device_id trong database không
        device_id = self.get_device_config("device_id", "")
        if device_id:
            return device_id
            
        # Thử lấy device_id từ hệ thống
        device_id = self._get_device_id_from_system()
        if device_id:
            # Lưu vào cấu hình và trả về
            print(f"Đã lấy được device_id từ hệ thống: {device_id}")
            self.set_device_config("device_id", device_id)
            return device_id
            
        # Thử lấy device_id từ helper service
        device_id = self._get_device_id_from_helper()
        if device_id:
            # Lưu vào cấu hình và trả về
            print(f"Đã lấy được device_id từ helper service: {device_id}")
            self.set_device_config("device_id", device_id)
            return device_id
            
        # Nếu không lấy được, tạo mới
        import random
        import string
        random_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
        device_id = f"random_{random_id}"
        print(f"Không lấy được device_id bằng các cách trên, tạo mới: {device_id}")
        
        # Lưu vào cấu hình
        self.set_device_config("device_id", device_id)
        return device_id
        
    def _get_device_id_from_system(self) -> str:
        """
        Lấy device_id từ hệ thống (sử dụng lệnh getprop)
        
        Returns:
            str: device_id hoặc chuỗi rỗng nếu không lấy được
        """
        try:
            import subprocess
            result = subprocess.run(["getprop", "ro.serialno"], capture_output=True, text=True)
            device_id = result.stdout.strip()
            
            if device_id and device_id != "unknown":
                return device_id
            return ""
        except Exception as e:
            print(f"Lỗi khi lấy device_id từ hệ thống: {e}")
            return ""
            
    def _get_device_id_from_helper(self) -> str:
        """
        Lấy device_id từ helper service (android_id)
        
        Returns:
            str: device_id hoặc chuỗi rỗng nếu không lấy được
        """
        try:
            # Cần import HelperService tại đây để tránh import vòng
            from services.helper_service import HelperService
            import config
            
            helper = HelperService(base_url=config.HELPER_SERVICE_URL)
            device_info = helper.get_device_info()
            
            if device_info and "status" in device_info and device_info["status"] == "success":
                data = device_info.get("data", {})
                android_id = data.get("android_id", "")
                if android_id:
                    return android_id
            return ""
        except Exception as e:
            print(f"Lỗi khi lấy device_id từ helper: {e}")
            return ""
            
    def migrate_golike_config(self) -> bool:
        """
        Xóa các cấu hình GoLike trùng lặp không còn cần thiết
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            print("Đang xóa cấu hình GoLike trùng lặp...")
            
            # Mở kết nối DB
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # Danh sách các key cần xóa
            keys_to_delete = [
                "golike_headers", 
                "golike_headers_updated",
                "golike_api_base"
            ]
            
            # Xóa các key trùng lặp cũ
            deleted_count = 0
            for key in keys_to_delete:
                cursor.execute("DELETE FROM config WHERE key = ?", (key,))
                deleted_count += cursor.rowcount
            
            # Commit thay đổi
            conn.commit()
            
            print(f"Đã xóa {deleted_count} cấu hình GoLike trùng lặp")
            return True
            
        except Exception as e:
            print(f"Lỗi khi xóa cấu hình GoLike trùng lặp: {e}")
            return False 

    def set_account_inactive_until_next_reset(self, account_id: int, inactive_reason: str = "Đã đạt giới hạn job hàng ngày") -> bool:
        """Đặt tài khoản vào trạng thái inactive đến giờ reset tiếp theo hoặc job_cooldown_minutes (chọn ngắn hơn)"""
        try:
            import datetime, config, time
            # Lấy thông tin tài khoản
            account = self.get_account(account_id)
            if not account:
                print(f"[DB] Không tìm thấy tài khoản có ID {account_id}")
                return False
                
            # Giờ reset và job cooldown
            job_hour = self.get("job_hour", config.JOB_HOUR)
            job_cooldown_minutes = self.get("job_cooldown_minutes", config.DEFAULT_COOLDOWN_MINUTES)
            
            # Tính thời gian đến lúc reset tiếp theo
            now = datetime.datetime.now()
            next_reset = now.replace(hour=job_hour, minute=0, second=0, microsecond=0)
            if now >= next_reset:
                next_reset = next_reset + datetime.timedelta(days=1)
            
            # Tính số phút từ bây giờ đến lúc reset
            time_to_reset_minutes = int((next_reset - now).total_seconds() / 60)
            
            # Chọn thời gian ngắn hơn giữa time_to_reset và job_cooldown_minutes
            disable_minutes = min(time_to_reset_minutes, job_cooldown_minutes)
            job_disable_until = int(time.time() + disable_minutes * 60)
            
            print(f"[DB] Tài khoản {account.get('unique_username', account_id)}: thời gian đến reset = {time_to_reset_minutes} phút, cooldown = {job_cooldown_minutes} phút, chọn = {disable_minutes} phút")
            
            update_data = {
                "status": "inactive",
                "job_disable_until": job_disable_until,
                "jobs_done_in_session": 0,
                "follow_in_session": 0,
                "inactive_reason": inactive_reason,
                "is_sync": False
            }
            self.update_account(account_id, update_data)
            return True
        except Exception as e:
            print(f"[DB] Lỗi set_account_inactive_until_next_reset: {e}")
            return False

    def set_account_inactive(self, account_id: int, cooldown_minutes: int = None, inactive_reason: str = "Đã hoàn thành số job trong phiên") -> bool:
        """Đặt tài khoản vào trạng thái inactive trong khoảng thời gian (phút)"""
        try:
            import time, config
            account = self.get_account(account_id)
            if not account:
                print(f"[DB] Không tìm thấy tài khoản có ID {account_id}")
                return False
            if cooldown_minutes is None:
                cooldown_minutes = self.get("job_cooldown_minutes", config.DEFAULT_COOLDOWN_MINUTES)
                print(f"[DB] Sử dụng cooldown_minutes mặc định: {cooldown_minutes}")
            else:
                print(f"[DB] Sử dụng cooldown_minutes được truyền vào: {cooldown_minutes}")
            
            job_disable_until = int(time.time() + cooldown_minutes * 60)
            print(f"[DB] Set account inactive: cooldown_minutes={cooldown_minutes}, job_disable_until={job_disable_until}, current_time={int(time.time())}")
            update_data = {
                "status": "inactive",
                "job_disable_until": job_disable_until,
                "jobs_done_in_session": 0,
                "follow_in_session": 0,
                "inactive_reason": inactive_reason,
                "is_sync": False
            }
            self.update_account(account_id, update_data)
            return True
        except Exception as e:
            print(f"[DB] Lỗi set_account_inactive: {e}")
            return False 

    def disable_account_follow(self, account_id: int, penalty_hours: int = None, penalty_minutes: int = None, reason: str = "Đã đạt giới hạn follow") -> bool:
        """
        Disable follow cho tài khoản trong một khoảng thời gian
        
        Args:
            account_id: ID của tài khoản
            penalty_hours: Số giờ disable follow (ưu tiên thấp hơn penalty_minutes)
            penalty_minutes: Số phút disable follow (ưu tiên cao hơn penalty_hours)
            reason: Lý do disable follow
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            import time
            account = self.get_account(account_id)
            if not account:
                print(f"[DB] Không tìm thấy tài khoản có ID {account_id}")
                return False
            
            # Ưu tiên penalty_minutes, nếu không có thì dùng penalty_hours
            if penalty_minutes is not None:
                total_minutes = penalty_minutes
                display_unit = f"{penalty_minutes} phút"
                print(f"[DB] Sử dụng penalty_minutes: {penalty_minutes}")
            elif penalty_hours is not None:
                total_minutes = penalty_hours * 60
                display_unit = f"{penalty_hours} giờ"
                print(f"[DB] Sử dụng penalty_hours: {penalty_hours} -> {total_minutes} phút")
            else:
                # Mặc định 12 giờ = 720 phút
                total_minutes = 720
                display_unit = "720 phút (mặc định)"
                print(f"[DB] Sử dụng mặc định: {total_minutes} phút")
            
            follow_disable_until = int(time.time()) + total_minutes * 60
            print(f"[DB] Disable follow: total_minutes={total_minutes}, follow_disable_until={follow_disable_until}, current_time={int(time.time())}")
            
            update_data = {
                "disable_follow": True,
                "follow_disable_until": follow_disable_until,
                "inactive_follow_reason": reason,
                "is_sync": False
            }
            
            self.update_account(account_id, update_data)
            print(f"[DB] Đã disable follow cho tài khoản {account.get('unique_username', account_id)} trong {display_unit}")
            return True
            
        except Exception as e:
            print(f"[DB] Lỗi disable_account_follow: {e}")
            return False

    def enable_account_follow(self, account_id: int) -> bool:
        """
        Enable lại follow cho tài khoản
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            account = self.get_account(account_id)
            if not account:
                print(f"[DB] Không tìm thấy tài khoản có ID {account_id}")
                return False
            
            update_data = {
                "disable_follow": False,
                "follow_disable_until": 0,
                "inactive_follow_reason": "",
                "is_sync": False
            }
            
            self.update_account(account_id, update_data)
            print(f"[DB] Đã enable follow cho tài khoản {account.get('unique_username', account_id)}")
            return True
            
        except Exception as e:
            print(f"[DB] Lỗi enable_account_follow: {e}")
            return False 

    def get_accounts_by_app_and_golike_status(self, app: str, is_linked: bool = False) -> List[Dict[str, Any]]:
        """
        Lấy danh sách tài khoản theo app và trạng thái golike
        
        Args:
            app: Tên ứng dụng (instagram, tiktok, ...)
            is_linked: True nếu lấy tài khoản đã liên kết, False nếu lấy tài khoản chưa liên kết
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản
        """
        conn = self._get_connection()
        cursor = conn.cursor()
        
        query = "SELECT * FROM accounts WHERE app = ? AND is_golike_linked = ?"
        params = [app, 1 if is_linked else 0]
        
        # Lọc theo device_id của thiết bị hiện tại
        current_device_id = self.get_or_create_device_id()
        if current_device_id:
            query += " AND device_id = ?"
            params.append(current_device_id)
        
        cursor.execute(query, params)
        column_names = [description[0] for description in cursor.description]
        results = cursor.fetchall()
        
        accounts = []
        for result in results:
            # Chuyển đổi kết quả thành dict
            account = {column_names[i]: result[i] for i in range(len(column_names))}
            
            # Chuyển đổi các trường boolean
            account["is_login"] = bool(account["is_login"])
            account["job_enable"] = bool(account["job_enable"])
            account["is_golike_linked"] = bool(account["is_golike_linked"])
            account["is_sync"] = bool(account["is_sync"])
            # Luôn luôn để disable_follow = False vì đã bỏ giới hạn follow
            account["disable_follow"] = bool(account["disable_follow"])
            
            # Thêm dữ liệu phụ từ trường data
            if "data" in account and account["data"]:
                try:
                    extra_data = json.loads(account["data"])
                    account.update(extra_data)
                except:
                    pass
                
            # Xóa trường data để tránh trùng lặp
            if "data" in account:
                del account["data"]
                
            accounts.append(account)
        
        return accounts
    
    def get_account_care_data(self, account_id: int) -> dict:
        """
        Lấy care data của tài khoản dưới dạng dict
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            dict: Care data hoặc dict rỗng nếu chưa có
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT care_data FROM accounts WHERE id = ?", (account_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result and result[0]:
                import json
                return json.loads(result[0])
            else:
                return {}
        except Exception as e:
            print(f"Lỗi khi lấy care data cho account {account_id}: {e}")
            return {}
    
    def update_account_care_data(self, account_id: int, care_data: dict):
        """
        Cập nhật care data cho tài khoản
        
        Args:
            account_id: ID của tài khoản
            care_data: Dictionary chứa thông tin care
        """
        try:
            import json
            care_json = json.dumps(care_data)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                "UPDATE accounts SET care_data = ?, is_sync = 0 WHERE id = ?", 
                (care_json, account_id)
            )
            conn.commit()
            conn.close()
            
            print(f"Đã cập nhật care data cho account {account_id}")
        except Exception as e:
            print(f"Lỗi khi cập nhật care data cho account {account_id}: {e}")
    
    def merge_account_care_data(self, account_id: int, new_data: dict):
        """
        Merge dữ liệu mới vào care data hiện có
        
        Args:
            account_id: ID của tài khoản
            new_data: Dictionary chứa dữ liệu mới cần merge
        """
        try:
            # Lấy care data hiện tại
            current_data = self.get_account_care_data(account_id)
            
            # Merge dữ liệu mới
            current_data.update(new_data)
            
            # Cập nhật lại
            self.update_account_care_data(account_id, current_data)
        except Exception as e:
            print(f"Lỗi khi merge care data cho account {account_id}: {e}")
    
    def get_account_last_post_time(self, account_id: int, app: str) -> Optional[int]:
        """
        Lấy thời gian đăng bài gần nhất của tài khoản
        
        Args:
            account_id: ID của tài khoản
            app: Tên app
            
        Returns:
            Optional[int]: Timestamp của lần đăng bài gần nhất, None nếu chưa có
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute(
                "SELECT last_post_time FROM accounts WHERE id = ? AND app = ?",
                (account_id, app)
            )
            result = cursor.fetchone()
            
            return result[0] if result and result[0] else None
            
        except Exception as e:
            print(f"Lỗi khi lấy last_post_time cho account {account_id}: {e}")
            return None
    
    def set_account_last_post_time(self, account_id: int, app: str, post_time: int) -> bool:
        """
        Cập nhật thời gian đăng bài gần nhất của tài khoản
        
        Args:
            account_id: ID của tài khoản
            app: Tên app
            post_time: Timestamp của lần đăng bài
            
        Returns:
            bool: True nếu cập nhật thành công
        """
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute(
                "UPDATE accounts SET last_post_time = ? WHERE id = ? AND app = ?",
                (post_time, account_id, app)
            )
            conn.commit()
            
            return cursor.rowcount > 0
            
        except Exception as e:
            print(f"Lỗi khi cập nhật last_post_time cho account {account_id}: {e}")
            return False
').decode('utf-8'))
