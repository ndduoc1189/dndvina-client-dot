import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgb3MKaW1wb3J0IHNpZ25hbAppbXBvcnQgc3lzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBMaXN0CmZyb20gc2VydmljZXMuaGVscGVyX3NlcnZpY2UgaW1wb3J0IEhlbHBlclNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5kYl9zZXJ2aWNlIGltcG9ydCBEYXRhYmFzZVNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5nb2xpa2Vfc2VydmljZSBpbXBvcnQgR29MaWtlU2VydmljZQpmcm9tIHNlcnZpY2VzLm1haW5fc2VydmljZSBpbXBvcnQgTWFpblNlcnZpY2UgICMgVGhheSDEkeG7lWk6IFPhu60gZOG7pW5nIE1haW5TZXJ2aWNlIHRoYXkgdsOsIEpvYlNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5tcXR0X3NlcnZpY2UgaW1wb3J0IE1RVFRTZXJ2aWNlCmltcG9ydCB1dGlscwpmcm9tIHV0aWxzIGltcG9ydCBMb2dMZXZlbCwgTG9nZ2VyCmltcG9ydCBjb25maWcKCiMgVGhp4bq/dCBs4bqtcCBsb2dnaW5nCnV0aWxzLnNldHVwX2RlZmF1bHRfbG9nZ2luZygKICAgIHByb2R1Y3Rpb249bm90IGNvbmZpZy5ERUJVR19NT0RFIGlmIGhhc2F0dHIoY29uZmlnLCAnREVCVUdfTU9ERScpIGVsc2UgRmFsc2UsCiAgICBsb2dfdG9fZmlsZT1UcnVlIGlmIGhhc2F0dHIoY29uZmlnLCAnTE9HX1RPX0ZJTEUnKSBhbmQgY29uZmlnLkxPR19UT19GSUxFIGVsc2UgRmFsc2UKKQoKIyBU4bqhbyBsb2dnZXIgY2jDrW5oIGNobyDhu6luZyBk4bulbmcKbG9nZ2VyID0gdXRpbHMuZ2V0X2xvZ2dlcigiTWFpbldpdGhNYWluU2VydmljZSIpCgojIEJp4bq/biB0b8OgbiBj4bulYyDEkeG7gyBsxrB1IHNlcnZpY2UgaW5zdGFuY2VzCmRiID0gTm9uZQpoZWxwZXIgPSBOb25lCmdvbGlrZV9zZXJ2aWNlID0gTm9uZQptYWluX3NlcnZpY2UgPSBOb25lICAjIFRoYXkgxJHhu5VpOiDEkeG7lWkgdMOqbiB04burIGpvYl9zZXJ2aWNlIHRow6BuaCBtYWluX3NlcnZpY2UKbXF0dF9zZXJ2aWNlID0gTm9uZQoKIyBGbGFnIMSRaeG7gXUga2hp4buDbgpydW5uaW5nID0gVHJ1ZQoKZGVmIHNpZ25hbF9oYW5kbGVyKHNpZywgZnJhbWUpOgogICAgIiIiWOG7rSBsw70ga2hpIG5nxrDhu51pIGTDuW5nIG5o4bqlbiBDdHJsK0MiIiIKICAgIGdsb2JhbCBydW5uaW5nLCBtYWluX3NlcnZpY2UsIG1xdHRfc2VydmljZQogICAgCiAgICBsb2dnZXIuaW5mbygixJBhbmcgZOG7q25nIOG7qW5nIGThu6VuZyAoQ3RybCtDIMSRxrDhu6NjIG5o4bqlbikuLi4iKQogICAgcnVubmluZyA9IEZhbHNlCiAgICAKICAgICMgROG7q25nIGPDoWMgc2VydmljZSBt4buZdCBjw6FjaCBhbiB0b8OgbgogICAgaWYgbWFpbl9zZXJ2aWNlOgogICAgICAgIGxvZ2dlci5pbmZvKCJE4burbmcgTWFpblNlcnZpY2UuLi4iKQogICAgICAgIG1haW5fc2VydmljZS5mb3JjZV9zdG9wX2FsbCgpICAjIEThu6tuZyBuZ2F5IGzhuq1wIHThu6ljCiAgICAgICAgCiAgICBpZiBtcXR0X3NlcnZpY2U6CiAgICAgICAgbG9nZ2VyLmluZm8oIk5n4bqvdCBr4bq/dCBu4buRaSBNUVRULi4uIikKICAgICAgICBtcXR0X3NlcnZpY2UuZGlzY29ubmVjdCgpICAjIE5n4bqvdCBr4bq/dCBu4buRaSBNUVRUCiAgICAgICAgCiAgICAjIMSQw7NuZyBr4bq/dCBu4buRaSBkYXRhYmFzZSBu4bq/dSBj4bqnbgogICAgaWYgZGI6CiAgICAgICAgbG9nZ2VyLmluZm8oIsSQw7NuZyBr4bq/dCBu4buRaSBkYXRhYmFzZS4uLiIpCiAgICAgICAgZGIuY2xvc2UoKQogICAgCiAgICBsb2dnZXIuaW5mbygi4buobmcgZOG7pW5nIMSRw6MgZOG7q25nIGFuIHRvw6BuLiBU4bqhbSBiaeG7h3QhIikKICAgIHN5cy5leGl0KDApCgpkZWYgbWFpbigpOgogICAgIiIiSMOgbSBjaMOtbmggY+G7p2Eg4bupbmcgZOG7pW5nIC0gc+G7rSBk4bulbmcgTWFpblNlcnZpY2UiIiIKICAgIGdsb2JhbCBydW5uaW5nLCBkYiwgaGVscGVyLCBnb2xpa2Vfc2VydmljZSwgbWFpbl9zZXJ2aWNlLCBtcXR0X3NlcnZpY2UKICAgIAogICAgdHJ5OgogICAgICAgICMgS+G6v3QgbuG7kWkgQURCCiAgICAgICAgdXRpbHMuY29ubmVjdF9hZGIoY29uZmlnLkFEQl9IT1NULCBjb25maWcuQURCX1BPUlQpCiAgICAgICAgCiAgICAgICAgIyBLaOG7n2kgdOG6oW8gY8OhYyBzZXJ2aWNlCiAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSB04bqhbyBjw6FjIHNlcnZpY2UuLi4iKQogICAgICAgIGRiID0gRGF0YWJhc2VTZXJ2aWNlKGRiX3BhdGg9Y29uZmlnLkRCX1BBVEgsIGRlZmF1bHRfY29uZmlnX3BhdGg9Y29uZmlnLkRFRkFVTFRfQ09ORklHX1BBVEgpCiAgICAgICAgaGVscGVyID0gSGVscGVyU2VydmljZShiYXNlX3VybD1jb25maWcuSEVMUEVSX1NFUlZJQ0VfVVJMKQogICAgICAgIGdvbGlrZV9zZXJ2aWNlID0gR29MaWtlU2VydmljZShkYiwgaGVscGVyKQogICAgICAgIAogICAgICAgIGxvZ2dlci5pbmZvKCJLaOG7n2kgxJHhu5luZyDhu6luZyBk4bulbmcgRE5EVmluYSB24bubaSBNYWluU2VydmljZS4uLiIpCiAgICAgICAgCiAgICAgICAgIyBWaeG7h2MgxJHhuqd1IHRpw6puOiBM4bqleSBkZXZpY2VfaWQKICAgICAgICBsb2dnZXIuaW5mbygixJBhbmcgbOG6pXkgZGV2aWNlX2lkLi4uIikKICAgICAgICBkZXZpY2VfaWQgPSBkYi5nZXRfb3JfY3JlYXRlX2RldmljZV9pZCgpCiAgICAgICAgbG9nZ2VyLmluZm8oZiJEZXZpY2UgSUQ6IHtkZXZpY2VfaWR9IikKICAgICAgICAKICAgICAgICAjIEto4bufaSB04bqhbyBNUVRUIHNlcnZpY2UKICAgICAgICBtcXR0X3NlcnZpY2UgPSBNUVRUU2VydmljZShkYiwgZGV2aWNlX2lkLCBoZWxwZXIpCiAgICAgICAgCiAgICAgICAgIyBLaOG7n2kgxJHhu5luZyBNYWluU2VydmljZSB0aGF5IHbDrCBKb2JTZXJ2aWNlCiAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSDEkeG7mW5nIE1haW5TZXJ2aWNlICh0aGF5IHRo4bq/IEpvYlNlcnZpY2UpLi4uIikKICAgICAgICBtYWluX3NlcnZpY2UgPSBNYWluU2VydmljZShkYiwgaGVscGVyLCBnb2xpa2Vfc2VydmljZSwgbXF0dF9zZXJ2aWNlKQogICAgICAgIAogICAgICAgICMgR8OhbiBNYWluU2VydmljZSB2w6BvIE1RVFRTZXJ2aWNlIMSR4buDIHjhu60gbMO9IGNvbmZpZyB1cGRhdGVzCiAgICAgICAgIyBMxrB1IMO9OiBNUVRUIHNlcnZpY2UgY+G6p24gbWV0aG9kIHTGsMahbmcgdGjDrWNoIHbhu5tpIEpvYlNlcnZpY2UKICAgICAgICBtcXR0X3NlcnZpY2Uuc2V0X2pvYl9zZXJ2aWNlKG1haW5fc2VydmljZSkKICAgICAgICAKICAgICAgICAjIEto4bufaSDEkeG7mW5nIE1RVFQgc2VydmljZQogICAgICAgIGxvZ2dlci5pbmZvKCJLaOG7n2kgxJHhu5luZyBNUVRUIHNlcnZpY2UuLi4iKQogICAgICAgIG1xdHRfdGhyZWFkID0gbXF0dF9zZXJ2aWNlLnN0YXJ0KCkKICAgICAgICAKICAgICAgICAjIEto4bufaSDEkeG7mW5nIE1haW5TZXJ2aWNlIHRyb25nIHRocmVhZCByacOqbmcKICAgICAgICBsb2dnZXIuaW5mbygiS2jhu59pIMSR4buZbmcgTWFpblNlcnZpY2UgdGhyZWFkLi4uIikKICAgICAgICBtYWluX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PW1haW5fc2VydmljZS5zdGFydCwgZGFlbW9uPVRydWUpCiAgICAgICAgbWFpbl90aHJlYWQuc3RhcnQoKQogICAgICAgIAogICAgICAgICMgVGjDqm0gdsOybmcgbOG6t3Aga2nhu4NtIHRyYSDEkeG7gyBk4buFIGTDoG5nIGThu6tuZyDhu6luZyBk4bulbmcKICAgICAgICBsb2dnZXIuaW5mbygi4buobmcgZOG7pW5nIMSRYW5nIGNo4bqheSB24bubaSBNYWluU2VydmljZS4gTmjhuqVuIEN0cmwrQyDEkeG7gyBk4burbmcuLi4iKQogICAgICAgIAogICAgICAgICMgSGnhu4NuIHRo4buLIHRo4buRbmcga8OqIMSR4buLbmgga+G7swogICAgICAgIGxhc3Rfc3RhdHNfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgCiAgICAgICAgd2hpbGUgcnVubmluZzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEhp4buDbiB0aOG7iyBzdGF0cyBt4buXaSA2MCBnacOieQogICAgICAgICAgICAgICAgIyBjdXJyZW50X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICAgICAgIyBpZiBjdXJyZW50X3RpbWUgLSBsYXN0X3N0YXRzX3RpbWUgPj0gNjA6CiAgICAgICAgICAgICAgICAjICAgICB0cnk6CiAgICAgICAgICAgICAgICAjICAgICAgICAgc3RhdHMgPSBtYWluX3NlcnZpY2UuZ2V0X3NlcnZpY2Vfc3RhdHMoKQogICAgICAgICAgICAgICAgIyAgICAgICAgIGxvZ2dlci5pbmZvKGYi8J+TiiBNYWluU2VydmljZSBTdGF0czoge3N0YXRzLmdldCgndG90YWxfd29ya2FibGVfYWNjb3VudHMnLCAwKX0gYWNjb3VudHMsICIKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgZiJjdXJyZW50OiB7c3RhdHMuZ2V0KCdjdXJyZW50X3dvcmtpbmdfYWNjb3VudCcsICdOb25lJyl9LCAiCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICAgICAgIGYiam9iX3JhdGlvczoge2xlbihzdGF0cy5nZXQoJ2pvYl9yYXRpb3MnLCB7fSkpfSIpCiAgICAgICAgICAgICAgICAjICAgICAgICAgbGFzdF9zdGF0c190aW1lID0gY3VycmVudF90aW1lCiAgICAgICAgICAgICAgICAjICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAjICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiTOG7l2kgbOG6pXkgc3RhdHM6IHtlfSIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgICAgICAjIE7hur91IHNpZ25hbF9oYW5kbGVyIGtow7RuZyDEkcaw4bujYyBn4buNaSB2w6wgbMO9IGRvIG7DoG8gxJHDswogICAgICAgICAgICAgICAgc2lnbmFsX2hhbmRsZXIoc2lnbmFsLlNJR0lOVCwgTm9uZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBsb2dnZXIuaW5mbygiTmjhuq1uIHTDrW4gaGnhu4d1IGThu6tuZyB04burIG5nxrDhu51pIGTDuW5nLCDEkWFuZyB0aG/DoXQuLi4iKQogICAgICAgIHNpZ25hbF9oYW5kbGVyKHNpZ25hbC5TSUdJTlQsIE5vbmUpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2jDtG5nIHjhu60gbMO9IMSRxrDhu6NjIHRyb25nIGjDoG0gbWFpbiIpCiAgICAgICAgIyDEkOG6o20gYuG6o28gZOG7q25nIGPDoWMgc2VydmljZSB0csaw4bubYyBraGkgdGhvw6F0CiAgICAgICAgc2lnbmFsX2hhbmRsZXIoc2lnbmFsLlNJR0lOVCwgTm9uZSkKICAgICAgICBzeXMuZXhpdCgxKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgICMgxJDEg25nIGvDvSBzaWduYWwgaGFuZGxlcgogICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBzaWduYWxfaGFuZGxlcikKICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR1RFUk0sIHNpZ25hbF9oYW5kbGVyKQogICAgCiAgICAjIEto4bufaSBjaOG6oXkgY2jGsMahbmcgdHLDrG5oCiAgICBtYWluKCkK').decode('utf-8'))
