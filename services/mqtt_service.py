import base64
exec(base64.b64decode('import paho.mqtt.client as mqtt
import threading
import json
import time
import uuid
import os
from typing import Dict, Any, List, Optional, Callable, Union
import config
import utils

# Logger
logger = utils.get_logger("MQTTService")

class MQTTService:
    def __init__(self, db_service, device_id, helper_service=None):
        self.db = db_service
        self.device_id = device_id
        self.helper_service = helper_service
        # Khởi tạo client với ID duy nhất
        self.client_id = f"{config.MQTT_CLIENT_ID_PREFIX}_{str(uuid.uuid4())[:8]}"
        
        # Lấy thông tin kết nối từ config
        self.broker_url = config.MQTT_SERVERS[config.MODE]
        # Phân tích URL
        self.broker_address = self.broker_url.replace("mqtt://", "").split(":")[0]
        try:
            self.broker_port = int(self.broker_url.split(":")[-1])
        except:
            self.broker_port = 1883  # Port mặc định

        # Thông tin xác thực
        self.username = config.MQTT_USERNAME
        self.password = config.MQTT_PASSWORD
        
        # Trạng thái kết nối
        self.is_connected = False
        self.client = None
        self.device_id = self._get_device_id()
        
        # Cấu hình reconnect
        self.reconnect_delay = config.MQTT_RECONNECT_DELAY
        self.max_reconnect_delay = config.MQTT_MAX_RECONNECT_DELAY
        self.reconnect_count = 0
        
        # MQTT topics
        self.topic_client_sync = config.MQTT_TOPIC_CLIENT_SYNC
        self.topic_server_task = f"{config.MQTT_TOPIC_SERVER_TASK_PREFIX}/{self.device_id}"
        
        # Đăng ký handlers xử lý task từ server
        self.task_handlers = {}
        
        # Thread cho việc đồng bộ và xử lý
        self.sync_thread = None
        self.running = False
        self.stop_event = threading.Event()
        # Lấy sync_interval từ cấu hình thiết bị, nếu không có thì sử dụng giá trị mặc định
        self.sync_interval = self.db.get_device_config("sync_interval", config.SYNC_INTERVAL)  # giây
        
        # Kiểm tra môi trường Termux
        self.is_termux = 'TERMUX_VERSION' in os.environ or '/data/data/com.termux' in os.environ.get('PATH', '')
        if self.is_termux:
            logger.info("Đang chạy trong môi trường Termux")
        
    def _get_device_id(self) -> str:
        """Lấy device_id của thiết bị hiện tại"""
        return self.db.get_or_create_device_id()
        
    def connect(self) -> bool:
        """Kết nối đến MQTT broker và chờ cho đến khi kết nối thành công"""
        try:
            # Đảm bảo stop_event được reset
            self.stop_event.clear()
            
            # Tạo client MQTT mới
            try:
                # Thử sử dụng API v2 trước
                self.client = mqtt.Client(
                    client_id=self.client_id, 
                    clean_session=True, 
                    protocol=mqtt.MQTTv311,
                    callback_api_version=mqtt.CallbackAPIVersion.VERSION2
                )
                logger.info("Sử dụng MQTT API v2")
            except (AttributeError, TypeError):
                # Fallback về API v1 nếu có lỗi
                logger.info("Sử dụng MQTT API v1")
                self.client = mqtt.Client(self.client_id, clean_session=True, protocol=mqtt.MQTTv311)
            
            # Đặt callback handlers
            self.client.on_connect = self._on_connect
            self.client.on_message = self._on_message
            self.client.on_disconnect = self._on_disconnect
            
            # Đặt username và password nếu có
            if self.username and self.password:
                self.client.username_pw_set(self.username, self.password)
            
            # Thiết lập tự động kết nối lại
            # Đặt giá trị là False để tự xử lý việc kết nối lại
            self.client.reconnect_delay_set(min_delay=1, max_delay=60)
            
            # Kết nối đến broker
            logger.info(f"Đang kết nối tới MQTT broker {self.broker_address}:{self.broker_port}")
            self.client.connect_async(self.broker_address, self.broker_port, keepalive=60)
            
            # Khởi động loop trong thread riêng
            self.client.loop_start()
            
            # Chờ cho đến khi kết nối thành công hoặc có yêu cầu dừng
            retry_count = 0
            while not self.is_connected:
                if self.stop_event.is_set():
                    logger.info("Đã nhận yêu cầu dừng, hủy kết nối MQTT")
                    self.client.loop_stop()
                    return False
                
                time.sleep(1)
                retry_count += 1
                
                # Log thông báo mỗi 5 giây
                if retry_count % 5 == 0:
                    logger.info(f"Đang chờ kết nối MQTT (đã thử {retry_count} giây)...")
                
                # Nếu sau 60 giây vẫn không kết nối được, thử kết nối lại
                if retry_count >= 60 and not self.is_connected:
                    logger.warning("Thời gian chờ kết nối quá lâu, thử kết nối lại...")
                    try:
                        # Dừng client hiện tại
                        self.client.loop_stop()
                        
                        # Thử kết nối lại từ đầu
                        logger.info("Thử kết nối lại MQTT broker...")
                        self.client.reconnect()
                        retry_count = 0
                    except Exception as reconnect_error:
                        logger.error(f"Lỗi khi thử kết nối lại: {str(reconnect_error)}")
            
            logger.info("Đã kết nối thành công đến MQTT broker")
            return True
            
        except Exception as e:
            logger.error(f"Lỗi kết nối MQTT: {str(e)}")
            # Nếu có lỗi khi kết nối, thử kết nối lại
            self._handle_reconnect()
            return False
    
    def _handle_reconnect(self):
        """Xử lý kết nối lại khi mất kết nối"""
        if self.stop_event.is_set():
            return  # Không kết nối lại nếu đã yêu cầu dừng
            
        # Tính toán thời gian chờ trước khi kết nối lại
        delay = min(self.reconnect_delay * (2 ** self.reconnect_count), self.max_reconnect_delay)
        self.reconnect_count += 1
        
        logger.info(f"Thử kết nối lại sau {delay} giây...")
        time.sleep(delay)
        
        # Thử kết nối lại
        try:
            success = self.connect()
            if success:
                # Gửi thông báo kết nối sau khi kết nối lại thành công
                self.send_connect_notification()
        except Exception as e:
            logger.error(f"Lỗi kết nối lại: {str(e)}")
    
    def _on_connect(self, client, userdata, flags, rc, properties=None):
        """Callback khi kết nối thành công (hỗ trợ cả API v1 và v2)"""
        try:
            if rc == 0:
                self.is_connected = True
                self.reconnect_count = 0  # Reset reconnect counter
                logger.info("Đã kết nối thành công tới MQTT broker")
                
                # Đăng ký nhận task từ server
                self.client.subscribe(self.topic_server_task, qos=1)
                logger.info(f"Đã đăng ký nhận task tại: {self.topic_server_task}")
                
                # Gửi thông báo kết nối
                self.send_connect_notification()
            else:
                self.is_connected = False
                logger.error(f"Kết nối MQTT thất bại với mã lỗi: {rc}")
                self._handle_reconnect()
        except Exception as e:
            logger.error(f"Lỗi trong callback _on_connect: {str(e)}")
            self.is_connected = False
            self._handle_reconnect()
    
    def _on_message(self, client, userdata, msg, properties=None):
        """Callback khi nhận được tin nhắn (hỗ trợ cả API v1 và v2)"""
        try:
            logger.info(f"Nhận tin nhắn trên kênh {msg.topic}")
            payload = json.loads(msg.payload.decode('utf-8'))
            
            # Xử lý thông báo từ server
            if msg.topic == self.topic_server_task:
                self._handle_server_task(payload)
        except Exception as e:
            logger.error(f"Lỗi xử lý tin nhắn MQTT: {str(e)}")
    
    def _on_disconnect(self, client, userdata, rc, properties=None, reason_code=None, **kwargs):
        """Callback khi ngắt kết nối (hỗ trợ cả API v1 và v2)"""
        self.is_connected = False
        if rc != 0:
            logger.warning(f"Ngắt kết nối MQTT không mong muốn với mã lỗi: {rc}")
            if not self.stop_event.is_set():
                self._handle_reconnect()
        else:
            logger.info("Đã ngắt kết nối MQTT")
    
    def _handle_server_task(self, payload):
        """Xử lý task từ server"""
        try:
            task_type = payload.get("task_type")
            
            logger.info(f"Nhận task từ server: {task_type}")
            
            # Gọi handler tương ứng nếu đã đăng ký
            if task_type in self.task_handlers:
                self.task_handlers[task_type](payload)
            else:
                logger.warning(f"Không tìm thấy handler cho task_type: {task_type}")
                
        except Exception as e:
            logger.error(f"Lỗi xử lý task từ server: {str(e)}")
    
    def register_task_handler(self, task_type: str, handler: Callable):
        """
        Đăng ký handler cho loại task
        
        Args:
            task_type: Loại task
            handler: Hàm xử lý task
        """
        self.task_handlers[task_type] = handler
        logger.info(f"Đã đăng ký handler cho task {task_type}")
    
    def sync_data(self):
        """Đồng bộ dữ liệu với server"""
        try:
            # Nếu chưa kết nối MQTT, không thể đồng bộ
            if not self.is_connected:
                logger.warning("Chưa kết nối MQTT, không thể đồng bộ dữ liệu")
                return
                
            # Lấy helper service
            helper = self.helper_service
            if not helper:
                logger.error("Không có helper service, không thể đồng bộ dữ liệu")
                return
                
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            if not device_id:
                logger.error("Không thể xác định device_id, không thể đồng bộ dữ liệu")
                return
                
            # Lấy thông tin thiết bị
            device_info = None
            try:
                device_info_response = helper.get_device_info()
                
                # Nếu lấy thành công, lưu vào database
                if device_info_response["status"] == "success" and "data" in device_info_response:
                    # Lưu thông tin thiết bị vào database
                    self.db.save_device_info(device_info_response["data"])
                    device_info = device_info_response["data"]
            except Exception as e:
                logger.error(f"Lỗi khi lấy thông tin thiết bị: {e}")
                
            # Nếu không lấy được thông tin thiết bị, sử dụng thông tin đã lưu trong database
            if not device_info:
                device_info = self.db.get_device_info()
                
            if not device_info:
                logger.warning("Không có thông tin thiết bị, đồng bộ dữ liệu có thể không đầy đủ")
                
            # Lấy cấu hình thiết bị
            device_config = self.db.get_all_device_config()
            
            # Loại bỏ golike_report khỏi device_config để gửi riêng
            golike_report = None
            if "golike_report" in device_config:
                golike_report = device_config.pop("golike_report")
                logger.info("Đã tách golike_report khỏi device_config")
            
            # Loại bỏ golike_api_base khỏi device_config
            if "golike_api_base" in device_config:
                device_config.pop("golike_api_base")
                logger.debug("Đã loại bỏ golike_api_base khỏi dữ liệu đồng bộ")
                
            # Lấy các tài khoản chưa đồng bộ
            pending_accounts = self.db.get_pending_sync_items("accounts", limit=50)
            
            # Lấy các job chưa đồng bộ
            pending_jobs = self.db.get_pending_sync_items("jobs_history", limit=50)
                
            # Tạo payload
            payload = {
                "device_id": device_id,
                "device_info": device_info,
                "device_config": device_config,
                "timestamp": int(time.time())
            }
            
            # Thêm golike_report nếu có
            if golike_report:
                payload["golike_report"] = golike_report
                
            # Thêm tài khoản chưa đồng bộ nếu có
            if pending_accounts:
                payload["accounts"] = pending_accounts
                logger.info(f"Đồng bộ {len(pending_accounts)} tài khoản chưa đồng bộ")
                
            # Thêm job chưa đồng bộ nếu có
            if pending_jobs:
                payload["jobs"] = pending_jobs
                logger.info(f"Đồng bộ {len(pending_jobs)} job chưa đồng bộ")
                
            # Gửi dữ liệu
            self.client.publish(config.MQTT_TOPIC_CLIENT_SYNC, json.dumps(payload))
            logger.info(f"Đã đồng bộ dữ liệu với server, timestamp: {payload['timestamp']}")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi đồng bộ dữ liệu với server")
    
    def start_sync_thread(self):
        """Bắt đầu thread đồng bộ tự động"""
        if self.sync_thread is not None and self.sync_thread.is_alive():
            logger.warning("Thread đồng bộ đã đang chạy")
            return
            
        self.running = True
        self.stop_event.clear()
        self.sync_thread = threading.Thread(target=self._sync_loop, daemon=True)
        self.sync_thread.start()
        logger.info("Đã khởi động thread đồng bộ tự động")
    
    def _sync_loop(self):
        """Loop đồng bộ tự động"""
        logger.info(f"Bắt đầu đồng bộ tự động mỗi {self.sync_interval} giây")
        
        # Biến để theo dõi trạng thái kết nối trước đó
        was_connected = self.is_connected
        
        while not self.stop_event.is_set() and self.running:
            try:
                # Kiểm tra kết nối
                if not self.is_connected:
                    logger.warning("MQTT không kết nối, đang thử kết nối lại...")
                    success = self.connect()
                    
                    # Nếu kết nối lại thành công sau khi mất kết nối
                    if success and not was_connected:
                        logger.info("Đã kết nối lại MQTT sau khi mất kết nối")
                        # Gửi thông báo kết nối
                        self.send_connect_notification()
                
                # Cập nhật trạng thái kết nối trước đó
                was_connected = self.is_connected
                
                if self.is_connected:
                    self.sync_data()
            except Exception as e:
                logger.error(f"Lỗi trong quá trình đồng bộ tự động: {str(e)}")
                
            # Nghỉ đến lần đồng bộ tiếp theo
            for _ in range(self.sync_interval):
                if self.stop_event.is_set() or not self.running:
                    break
                time.sleep(1)
    
    def stop_sync_thread(self):
        """Dừng thread đồng bộ tự động"""
        self.running = False
        self.stop_event.set()
        if self.sync_thread is not None:
            self.sync_thread.join(timeout=2.0)
            self.sync_thread = None
        logger.info("Đã dừng thread đồng bộ tự động")
    
    def disconnect(self):
        """Ngắt kết nối MQTT"""
        self.stop_sync_thread()
        
        if self.client is not None:
            self.client.loop_stop()
            self.client.disconnect()
            self.is_connected = False
            logger.info("Đã ngắt kết nối MQTT")
    
    def setup_mqtt_handlers(self):
        """Thiết lập các handler cho MQTT tasks"""
        # Đăng ký các task handler mặc định
        self.register_task_handler("update_device_config", self._handle_update_device_config)
        self.register_task_handler("update_synced", self._handle_update_synced)
        self.register_task_handler("account_update", self._handle_account_update)
        
        logger.info("Đã thiết lập các MQTT task handler")
        
    def _handle_update_device_config(self, task_data):
        """
        Xử lý task cập nhật cấu hình thiết bị
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            logger.info("Nhận yêu cầu cập nhật cấu hình thiết bị từ server")
            config_data = task_data.get("config_data", {})
            if not config_data:
                logger.warning("Dữ liệu cấu hình thiết bị rỗng")
                return
            
            # Lưu từng cấu hình thiết bị
            success = self.db.save_device_config(config_data)
            
            if success:
                logger.info(f"Đã cập nhật cấu hình thiết bị: {', '.join(config_data.keys())}")
                
                # Cập nhật sync_interval nếu nó thay đổi
                if "sync_interval" in config_data:
                    new_sync_interval = config_data["sync_interval"]
                    if new_sync_interval != self.sync_interval:
                        logger.info(f"Cập nhật sync_interval từ {self.sync_interval} thành {new_sync_interval}")
                        self.sync_interval = new_sync_interval
                        
                        # Khởi động lại thread đồng bộ nếu đang chạy
                        if self.sync_thread is not None and self.sync_thread.is_alive():
                            logger.info("Khởi động lại thread đồng bộ với khoảng thời gian mới")
                            self.stop_sync_thread()
                            self.start_sync_thread()
                
                # Thông báo cho JobService nếu có thay đổi liên quan đến jobs
                job_related_keys = ["max_jobs_per_day", "max_jobs_per_session", "job_interval_seconds"]
                if any(key in config_data for key in job_related_keys):
                    logger.info("Áp dụng cấu hình mới cho JobService")
                    # Không cần khởi động lại, JobService sẽ lấy cấu hình mới khi cần
            else:
                logger.error("Không thể cập nhật cấu hình thiết bị")
            
        except Exception as e:
            logger.error(f"Lỗi xử lý cập nhật cấu hình thiết bị: {str(e)}")

    def _handle_update_synced(self, task_data):
        """
        Xử lý task cập nhật trạng thái đồng bộ
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            logger.info("Nhận yêu cầu cập nhật trạng thái đồng bộ từ server")
            data = task_data.get("data", {})
            
            # Đánh dấu tài khoản đã đồng bộ
            if "accounts" in data and isinstance(data["accounts"], list):
                for account_uuid in data["accounts"]:
                    self.db.mark_as_synced("accounts", account_uuid)
                    logger.debug(f"Đánh dấu tài khoản đã đồng bộ: {account_uuid}")
                logger.info(f"Đã cập nhật {len(data['accounts'])} tài khoản đã đồng bộ")
            
            # Đánh dấu job đã đồng bộ
            if "jobs" in data and isinstance(data["jobs"], list):
                for job_uuid in data["jobs"]:
                    self.db.mark_as_synced("jobs_history", job_uuid)
                    logger.debug(f"Đánh dấu job đã đồng bộ: {job_uuid}")
                logger.info(f"Đã cập nhật {len(data['jobs'])} job đã đồng bộ")
            
            # Hiển thị thông báo từ server nếu có
            if "message" in task_data:
                logger.info(f"Thông báo từ server: {task_data['message']}")
                
        except Exception as e:
            logger.error(f"Lỗi xử lý cập nhật trạng thái đồng bộ: {str(e)}")
            
    def _handle_config_update(self, task_data):
        """
        Xử lý task cập nhật cấu hình
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            logger.info("Nhận yêu cầu cập nhật cấu hình từ server")
            config_data = task_data.get("config_data", {})
            if not config_data:
                logger.warning("Dữ liệu cấu hình rỗng")
                return
                
            # Cập nhật cấu hình trong DB
            for key, value in config_data.items():
                self.db.set(key, value)
                logger.info(f"Đã cập nhật cấu hình: {key}")
                
            logger.info("Cập nhật cấu hình thành công")
        except Exception as e:
            logger.error(f"Lỗi xử lý cập nhật cấu hình: {str(e)}")
    
    def _handle_account_update(self, task_data):
        """
        Xử lý task cập nhật thông tin tài khoản
        
        Args:
            task_data: Dữ liệu task từ server có cấu trúc:
            {
                "task_id": "task_1749399536272_641",
                "device_id": "a125f624f41a4f7c",
                "task_type": "account_update",
                "data": {
                    "app": "instagram",
                    "status": "inactive",
                    "job_max_day": 108,
                    "job_today": 30,
                    "job_enable": true,
                    "account_uuid": "7ed9557d-76a4-47f7-8850-7ceef0c690af"
                },
                "message": "",
                "status": "pending"
            }
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            data = task_data.get("data", {})
            
            logger.info(f"Nhận yêu cầu cập nhật tài khoản từ server (task_id: {task_id})")
            
            if not data or "account_uuid" not in data:
                logger.warning("Dữ liệu tài khoản không hợp lệ")
                self.send_task_report(task_id, device_id, "failed", "Dữ liệu tài khoản không hợp lệ")
                return
                
            # Lấy tài khoản từ DB
            account = self.db.get_account_by_uuid(data["account_uuid"])
            if not account:
                error_msg = f"Không tìm thấy tài khoản với UUID: {data['account_uuid']}"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
                
            # Cập nhật thông tin tài khoản
            update_data = {}
            valid_fields = ["status", "job_max_day", "job_today", "job_enable"]
            
            for key, value in data.items():
                if key in valid_fields:
                    update_data[key] = value
                    
            if not update_data:
                logger.warning("Không có thông tin cần cập nhật")
                self.send_task_report(task_id, device_id, "failed", "Không có thông tin cần cập nhật")
                return
                    
            # Lưu lại vào DB
            success = self.db.update_account(account["id"], update_data)
            
            if success:
                logger.info(f"Đã cập nhật tài khoản {account.get('unique_username', '')} (UUID: {data['account_uuid']}) với dữ liệu: {update_data}")
                self.send_task_report(task_id, device_id, "success", f"Đã cập nhật tài khoản {account.get('unique_username', '')}")
            else:
                error_msg = f"Không thể cập nhật tài khoản {account.get('unique_username', '')}"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật tài khoản: {str(e)}"
            logger.error(error_msg)
            self.send_task_report(task_id, device_id, "failed", error_msg)
            
    def send_task_report(self, task_id: str, device_id: str, status: str, client_message: str = ""):
        """
        Gửi báo cáo kết quả thực hiện task lên server
        
        Args:
            task_id: ID của task
            device_id: ID của thiết bị
            status: Trạng thái thực hiện task ('pending', 'success', 'failed')
            client_message: Thông báo từ client
        """
        try:
            if not self.is_connected:
                logger.error("Không thể gửi báo cáo task: MQTT chưa kết nối")
                return False
                
            # Chuẩn bị dữ liệu báo cáo
            report_data = {
                "task_id": task_id,
                "device_id": device_id,
                "status": status,
                "client_message": client_message,
                "timestamp": int(time.time())
            }
            
            # Gửi lên server
            self.client.publish(
                "dndvina/client/task_report", 
                json.dumps(report_data), 
                qos=1
            )
            
            logger.info(f"Đã gửi báo cáo task {task_id} với trạng thái {status}")
            return True
            
        except Exception as e:
            logger.error(f"Lỗi khi gửi báo cáo task: {str(e)}")
            return False

    def send_connect_notification(self):
        """
        Gửi thông báo kết nối đến server
        """
        try:
            if not self.is_connected:
                logger.error("Không thể gửi thông báo kết nối: MQTT chưa kết nối")
                return False
                
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            
            # Chuẩn bị dữ liệu thông báo
            connect_data = {
                "device_id": device_id,
                "timestamp": int(time.time())
            }
            
            # Gửi lên server
            self.client.publish(
                "dndvina/client/connect", 
                json.dumps(connect_data), 
                qos=1
            )
            
            logger.info(f"Đã gửi thông báo kết nối cho thiết bị {device_id}")
            return True
            
        except Exception as e:
            logger.error(f"Lỗi khi gửi thông báo kết nối: {str(e)}")
            return False

    def start(self):
        """
        Khởi động MQTT service trong một thread riêng
        
        Returns:
            threading.Thread: Thread đang chạy MQTT service
        """
        try:
            # Thiết lập các handler trước khi kết nối
            self.setup_mqtt_handlers()
            
            # Kết nối MQTT - hàm này sẽ chờ cho đến khi kết nối thành công
            logger.info("Khởi động MQTT service...")
            self.connect()
            
            # Bắt đầu thread đồng bộ tự động sau khi đã kết nối thành công
            if self.is_connected:
                self.start_sync_thread()
                logger.info("Đã khởi động MQTT service và đồng bộ dữ liệu")
            else:
                logger.warning("MQTT service đang chạy nhưng chưa kết nối thành công")
            
            return self.sync_thread
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động MQTT service")
            return None').decode('utf-8'))
