import base64
exec(base64.b64decode('"""
Test script để debug các hàm TikTok Job một cách nhanh chóng
Chạy file này để test từng hàm riêng lẻ
"""

import sys
import os

# Thêm đường dẫn root vào sys.path để import các module
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from jobs.tiktok_job import TiktokJob
from services.db_service import DatabaseService
from services.helper_service import HelperService
from services.golike_service import GoLikeService


def create_tiktok_job():
    """Tạo TikTok Job instance với các service thực"""
    try:
        # Khởi tạo các service thực
        db_service = DatabaseService()
        helper_service = HelperService()
        golike_service = GoLikeService(db_service, helper_service)
        
        # Tạo TikTok job
        tiktok_job = TiktokJob(
            db_service=db_service,
            helper_service=helper_service,
            golike_service=golike_service
        )
        
        print("✅ Đã khởi tạo TikTok Job thành công!")
        return tiktok_job
        
    except Exception as e:
        print(f"❌ Lỗi khi khởi tạo TikTok Job: {e}")
        return None


def get_sample_account():
    """Trả về sample account để test"""
    return {
        "id": 1,
        "unique_username": "test_user",
        "nickname": "Test User",
        "status": "active",
        "is_login": True,
        "avatar_thumb": "",
        "job_enable": True,
        "level": 3,
        "last_update": 1640995200,
        "golike_id": "12345"
    }


def get_sample_job():
    """Trả về sample job để test"""
    return {
        "id": "job_123",
        "type": "follow",
        "link": "https://tiktok.com/@test_account",
        "description": "Follow test account"
    }


def test_get_accounts_from_device():
    """Test hàm get_accounts_from_device"""
    print("\n=== TEST GET ACCOUNTS FROM DEVICE ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    try:
        print("Đang lấy danh sách tài khoản TikTok từ thiết bị...")
        
        # Gọi hàm get_accounts_from_device - có thể đặt breakpoint ở đây để debug
        accounts = job.get_accounts_from_device()
        
        print(f"Tìm thấy {len(accounts)} tài khoản:")
        for i, account in enumerate(accounts, 1):
            print(f"  {i}. {account.get('unique_username', 'Unknown')}")
        
        return accounts
        
    except Exception as e:
        print(f"❌ Lỗi khi test get_accounts_from_device: {e}")
        return []


def test_execute_job():
    """Test hàm execute_job"""
    print("\n=== TEST EXECUTE JOB ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    account = get_sample_account()
    sample_job = get_sample_job()
    
    try:
        print(f"Đang test execute_job:")
        print(f"  - Account: {account['unique_username']}")
        print(f"  - Job type: {sample_job['type']}")
        print(f"  - Job link: {sample_job['link']}")
        
        # Gọi hàm execute_job - có thể đặt breakpoint ở đây để debug
        result = job.execute_job(account, sample_job)
        
        print(f"Kết quả: {result}")
        return result
        
    except Exception as e:
        print(f"❌ Lỗi khi test execute_job: {e}")
        return None


def test_follow_job():
    """Test hàm _perform_follow_job"""
    print("\n=== TEST FOLLOW JOB ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    try:
        test_link = "https://tiktok.com/@test_account"
        print(f"Đang test follow job với link: {test_link}")
        
        # Gọi hàm _perform_follow_job - có thể đặt breakpoint ở đây để debug
        result = job._perform_follow_job(test_link)
        
        status_map = {
            0: "Chưa thực hiện",
            1: "Thành công",
            2: "Thất bại - không tìm thấy",
            3: "Thất bại - đã unfollow",
            4: "Thất bại - yêu cầu chờ",
            5: "Gửi yêu cầu chờ duyệt",
            6: "Bị khóa/giới hạn"
        }
        
        print(f"Kết quả: {result} - {status_map.get(result, 'Không xác định')}")
        return result
        
    except Exception as e:
        print(f"❌ Lỗi khi test follow job: {e}")
        return 2


def test_like_job():
    """Test hàm _perform_like_job"""
    print("\n=== TEST LIKE JOB ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    try:
        test_link = "https://tiktok.com/@test_account/video/1234567890"
        print(f"Đang test like job với link: {test_link}")
        
        # Gọi hàm _perform_like_job - có thể đặt breakpoint ở đây để debug
        result = job._perform_like_job(test_link)
        
        status_map = {
            0: "Chưa thực hiện",
            1: "Thành công", 
            2: "Thất bại - không tìm thấy",
            3: "Thất bại - đã unlike",
            4: "Thất bại - yêu cầu chờ",
            5: "Gửi yêu cầu chờ duyệt",
            6: "Bị khóa/giới hạn"
        }
        
        print(f"Kết quả: {result} - {status_map.get(result, 'Không xác định')}")
        return result
        
    except Exception as e:
        print(f"❌ Lỗi khi test like job: {e}")
        return 2


def test_navigation_functions():
    """Test các hàm navigation"""
    print("\n=== TEST NAVIGATION FUNCTIONS ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    try:
        # Test _navigate_to_home
        print("1. Test _navigate_to_home...")
        result1 = job._navigate_to_home()
        print(f"   Về trang chủ: {'✅ Thành công' if result1 else '❌ Thất bại'}")
        
        # Test _navigate_to_profile_tab
        print("2. Test _navigate_to_profile_tab...")
        result2 = job._navigate_to_profile_tab()
        print(f"   Vào tab profile: {'✅ Thành công' if result2 else '❌ Thất bại'}")
        
        return [result1, result2]
        
    except Exception as e:
        print(f"❌ Lỗi khi test navigation functions: {e}")
        return [False, False]


def test_care_functions():
    """Test các hàm care (nếu có)"""
    print("\n=== TEST CARE FUNCTIONS ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    account = get_sample_account()
    
    try:
        # Kiểm tra xem có hàm perform_care không
        if hasattr(job, 'perform_care'):
            print("Test perform_care...")
            result = job.perform_care(account)
            print(f"Kết quả: {'✅ Thành công' if result else '❌ Thất bại'}")
            return result
        else:
            print("TikTok Job không có hàm perform_care")
            return True
        
    except Exception as e:
        print(f"❌ Lỗi khi test care functions: {e}")
        return False


def test_profile_functions():
    """Test các hàm liên quan đến profile"""
    print("\n=== TEST PROFILE FUNCTIONS ===")
    
    job = create_tiktok_job()
    if not job:
        return
        
    try:
        # Test _open_profile_menu
        print("1. Test _open_profile_menu...")
        result1 = job._open_profile_menu()
        print(f"   Mở profile menu: {'✅ Thành công' if result1 else '❌ Thất bại'}")
        
        # Test get_current_logged_in_username
        print("2. Test get_current_logged_in_username...")
        username = job.get_current_logged_in_username()
        print(f"   Username hiện tại: {username if username else 'Không xác định'}")
        
        return [result1, username is not None]
        
    except Exception as e:
        print(f"❌ Lỗi khi test profile functions: {e}")
        return [False, False]


def main():
    """Menu chính để chọn test nào muốn chạy"""
    print("🔧 TIKTOK JOB DEBUGGER")
    print("=" * 50)
    
    while True:
        print("\nChọn function muốn test:")
        print("1. Test get_accounts_from_device")
        print("2. Test execute_job")
        print("3. Test follow job")
        print("4. Test like job")
        print("5. Test navigation functions")
        print("6. Test care functions")
        print("7. Test profile functions")
        print("8. Test tất cả")
        print("0. Thoát")
        
        choice = input("\nNhập lựa chọn (0-8): ").strip()
        
        if choice == "0":
            print("👋 Tạm biệt!")
            break
        elif choice == "1":
            test_get_accounts_from_device()
        elif choice == "2":
            test_execute_job()
        elif choice == "3":
            test_follow_job()
        elif choice == "4":
            test_like_job()
        elif choice == "5":
            test_navigation_functions()
        elif choice == "6":
            test_care_functions()
        elif choice == "7":
            test_profile_functions()
        elif choice == "8":
            print("\n🚀 CHẠY TẤT CẢ TESTS")
            test_navigation_functions()
            test_profile_functions()
            test_get_accounts_from_device()
            test_care_functions()
            test_follow_job()
            test_like_job()
            test_execute_job()
        else:
            print("❌ Lựa chọn không hợp lệ!")


if __name__ == '__main__':
    main()
').decode('utf-8'))
