import base64
exec(base64.b64decode('import time
import random
from typing import Dict, Any, List
from jobs.job_base import BaseJob
import utils
from utils import LogLevel, Logger

class TiktokJob(BaseJob):
    def __init__(self, db_service, helper_service, golike_service=None):
        super().__init__(db_service, helper_service, golike_service)
        self.app_package = "com.ss.android.ugc.trill"
        self.app_name = "tiktok"
        
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản Tiktok từ thiết bị"""
        accounts = []
        
        try:
            # Mở ứng dụng TikTok
            self.helper.open_app(self.app_package)
            self.safe_sleep(5)  # Đợi ứng dụng mở
            
            # Chờ màn hình chính tải
            home_button = self.helper.wait_for_element(content_desc="Trang chủ", timeout=10)
            if not home_button:
                self.logger.error("Không thể tải màn hình chính TikTok")
                return []
                
            # Tìm nút "Hồ sơ" và nhấp vào
            profile_button = self.helper.find_element(content_desc="Hồ sơ")
            if profile_button:
                self.helper.tap_element_center(profile_button)
                self.safe_sleep(3)
                # Vuốt lên 1 lần
                self.helper.swipe_up()
                self.safe_sleep(0.5)
                
                # Tìm nút menu hồ sơ
                menu_button = self.helper.find_element(content_desc="Menu hồ sơ")
                if menu_button:
                    # Lấy tọa độ của nút menu
                    bounds = self.helper.get_element_bounds(menu_button)
                    x1, y1, x2, y2 = bounds
                    
                    # Tính toán tọa độ giữa của nút
                    y = ((y2 - y1) // 2)+y1
                    x = x2 // 2
                    
                    # Thêm độ lệch ngẫu nhiên ±10
                    x += random.randint(-10, 10)
                    
                    # Click vào vị trí đã tính để hiển thị bảng chọn tài khoản
                    self.helper.tap(x, y)
                    self.safe_sleep(1)
                    
                    # Lấy XML màn hình sau khi mở menu
                    screen_xml = self.helper.dump_screen_xml()
                    
                    # Tìm nút "Thêm tài khoản"
                    add_account_button = self.helper.find_element_in_xml(screen_xml, content_desc="Thêm tài khoản")
                    
                    if add_account_button:
                        # Tìm danh sách tài khoản (RecyclerView) - là cha của nút "Thêm tài khoản"
                        recycler_view = None
                        
                        # Tìm tất cả RecyclerView
                        all_recycler_views = self.helper.find_all_elements_in_xml(
                            screen_xml, 
                            class_name="androidx.recyclerview.widget.RecyclerView"
                        )
                        
                        # Tìm RecyclerView chứa các tài khoản
                        for rv in all_recycler_views:
                            rv_bounds = self.helper.get_element_bounds(rv)
                            add_account_bounds = self.helper.get_element_bounds(add_account_button)
                            
                            # Kiểm tra xem add_account_button có nằm trong recycler_view không
                            if (rv_bounds[0] <= add_account_bounds[0] and
                                rv_bounds[1] <= add_account_bounds[1] and
                                rv_bounds[2] >= add_account_bounds[2] and
                                rv_bounds[3] >= add_account_bounds[3]):
                                recycler_view = rv
                                break
                        
                        if recycler_view:
                            # Tìm tất cả nút (Button) trong RecyclerView bằng class thay vì resource-id
                            account_buttons = self.helper.find_all_elements_in_xml(
                                screen_xml,
                                class_name="android.widget.Button"
                            )
                            
                            for button in account_buttons:
                                # Bỏ qua nút "Thêm tài khoản"
                                if button.get("content-desc") == "Thêm tài khoản":
                                    continue
                                
                                # Lấy tên tài khoản từ content-desc
                                username = button.get("content-desc", "")
                                if not username:
                                    # Tìm TextView trong button bằng class thay vì resource-id
                                    textviews = self.helper.find_all_elements_in_xml(
                                        screen_xml,
                                        class_name="android.widget.TextView"
                                    )
                                    
                                    # Lọc textview theo bounds để tìm đúng cái thuộc về button này
                                    button_bounds = self.helper.get_element_bounds(button)
                                    for tv in textviews:
                                        tv_bounds = self.helper.get_element_bounds(tv)
                                        if (tv_bounds[0] >= button_bounds[0] and
                                            tv_bounds[1] >= button_bounds[1] and
                                            tv_bounds[2] <= button_bounds[2] and
                                            tv_bounds[3] <= button_bounds[3]):
                                            text = self.helper.get_element_text(tv)
                                            # Kiểm tra để không lấy phải text rỗng hoặc "null"
                                            if text and text != "null":
                                                username = text
                                                break
                                
                                # Bỏ qua nút "Đóng"
                                if username == "Đóng":
                                    continue
                                
                                # Kiểm tra xem tài khoản có đang đăng nhập không
                                is_current = False
                                
                                # Tìm dấu kiểm trong button bằng content-desc
                                checkmarks = self.helper.find_all_elements_in_xml(
                                    screen_xml,
                                    content_desc="Dấu kiểm"
                                )
                                
                                # Kiểm tra xem dấu kiểm có thuộc về button này không
                                button_bounds = self.helper.get_element_bounds(button)
                                for check in checkmarks:
                                    check_bounds = self.helper.get_element_bounds(check)
                                    if (check_bounds[0] >= button_bounds[0] and
                                        check_bounds[1] >= button_bounds[1] and
                                        check_bounds[2] <= button_bounds[2] and
                                        check_bounds[3] <= button_bounds[3]):
                                        is_current = True
                                        break
                                
                                # Cũng có thể kiểm tra thuộc tính selected
                                if button.get("selected") == "true":
                                    is_current = True
                                
                                # Kiểm tra username hợp lệ trước khi thêm vào danh sách
                                if username and username != "null" and username.strip():
                                    # Lọc thêm các tên không phải tài khoản
                                    if username not in ["Cài đặt", "Cài đặt tài khoản", "Tùy chọn", "Menu"]:
                                        account = {
                                            "nickname": username,
                                            "unique_username": username,
                                            "unique_id": username,
                                            "status": "active",
                                            "is_login": is_current,
                                            "avatar_thumb": "",
                                            "job_enable": True,
                                            "level": 1,
                                            "last_update": int(time.time())
                                        }
                                        accounts.append(account)
                
                # Quay lại màn hình chính
                self.helper.press_back()
                self.safe_sleep(0.5)
                self.helper.press_back()
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản TikTok")
            
        return accounts
    
    def perform_job(self, account: Dict[str, Any]):
        """Thực hiện công việc với tài khoản TikTok"""
        # Sử dụng phương thức của lớp cha
        super().perform_job(account)
        
    def perform_care(self, account: Dict[str, Any]):
        """Nuôi tài khoản TikTok"""
        self.logger.info(f"Đang nuôi tài khoản TikTok: {account['unique_username']}")
        # Phần code nuôi tài khoản sẽ được thêm sau
        
    def get_available_jobs(self, account: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Lấy danh sách các job khả dụng từ GoLike
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            List[Dict[str, Any]]: Danh sách job hoặc list rỗng nếu không có
        """
        if not self.golike_service:
            self.logger.error("Không thể lấy job: GoLikeService chưa được cung cấp")
            return []
            
        try:
            # Gọi API lấy job
            job_url = self.get_jobs_url()
            
            # Tạo tham số
            params = self.get_job_params(account)
            
            # Gọi API
            response = self.api_request(job_url, "GET", params)
            
            if response and response.get("success", False):
                job_data = response.get("data", None)
                if job_data:
                    # Chuẩn hóa dữ liệu job
                    job = self.map_job_data(job_data)
                    self.logger.info(f"Đã tìm thấy job {job['id']} loại {job['type']} cho tài khoản {account['unique_username']}")
                    return [job]
                
            return []
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách job")
            return []
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện job, bao gồm:
                - status (int): Mã trạng thái job
                    0: Chưa thực hiện
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
        """
        try:
            job_type = job.get("type", "").lower()
            job_link = job.get("link", "")
            job_id = job.get("id")
            
            self.logger.info(f"Đang thực hiện job {job_id} loại {job_type} với link {job_link}")
            
            # Kiểm tra loại job được hỗ trợ
            if job_type not in ["follow", "like"]:
                message = f"Loại job {job_type} không được hỗ trợ"
                self.logger.warning(message)
                return {
                    "status": 2,
                    "message": message,
                    "success": False
                }
            
            # TODO: Implement job execution for TikTok
            message = f"Chức năng thực hiện job {job_type} cho TikTok chưa được triển khai"
            self.logger.warning(message)
            return {
                "status": 2,
                "message": message,
                "success": False
            }
                
        except Exception as e:
            message = f"Lỗi khi thực hiện job: {str(e)}"
            self.logger.exception(e, message)
            return {
                "status": 2,
                "message": message,
                "success": False
            }
            
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lấy tham số để gọi API lấy job cho TikTok
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Tham số
        """
        golike_id = account.get("golike_id")
        if not golike_id:
            return {}
            
        return {
            "account_id": golike_id,
            "data": "null"
        }
        
    def sync_accounts_to_db(self) -> List[Dict[str, Any]]:
        """
        Đồng bộ tài khoản từ thiết bị vào database
        Ghi đè phương thức của lớp cha để đảm bảo chỉ có một tài khoản được đánh dấu là đang login
        """
        try:
            # Đặt lại trạng thái login cho tất cả tài khoản TikTok trong DB
            self.db.reset_login_status_by_app(self.app_name)
            
            # Lấy danh sách tài khoản từ thiết bị
            device_accounts = self.get_accounts_from_device()
            
            # Cập nhật hoặc thêm mới vào DB
            for account in device_accounts:
                # Thêm thông tin app
                account["app"] = self.app_name
                
                # Kiểm tra tài khoản đã tồn tại chưa
                existing_accounts = self.db.get_accounts(
                    app=self.app_name, 
                    status="active" if account.get("is_login", False) else None
                )
                
                # Tìm tài khoản trong DB dựa vào unique_username
                existing_account = None
                for acc in existing_accounts:
                    if acc.get("unique_username") == account.get("unique_username"):
                        existing_account = acc
                        break
                
                if existing_account:
                    # Cập nhật tài khoản
                    account_id = existing_account["id"]
                    self.db.update_account(account_id, account)
                else:
                    # Thêm tài khoản mới
                    self.db.add_account(account)
                
            return device_accounts
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi đồng bộ tài khoản {self.app_name}")
            return []

    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Ánh xạ tài khoản từ GoLike vào tài khoản trên thiết bị
        
        Args:
            golike_accounts: Danh sách tài khoản từ GoLike API
            device_accounts: Danh sách tài khoản trên thiết bị
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã ánh xạ
        """
        mapped_accounts = []
        
        try:
            # Chuẩn hóa dữ liệu từ GoLike
            golike_data = {}
            for acc in golike_accounts:
                # Trích xuất thông tin từ tài khoản GoLike
                golike_account = {
                    "golike_id": acc.get("id"),
                    "nickname": acc.get("nickname"),
                    "unique_id": acc.get("unique_id"),
                    "unique_username": acc.get("unique_username"),
                    "avatar_thumb": acc.get("avatar_thumb")
                }
                
                # Sử dụng unique_username làm khóa để dễ ánh xạ
                username = golike_account["unique_username"]
                if username:
                    golike_data[username.lower()] = golike_account
            
            # Ánh xạ với tài khoản trên thiết bị
            for device_account in device_accounts:
                username = device_account.get("unique_username", "").lower()
                
                if username in golike_data:
                    # Đã tìm thấy tài khoản trong danh sách GoLike
                    # Cập nhật thông tin từ GoLike vào tài khoản thiết bị
                    golike_info = golike_data[username]
                    
                    # Cập nhật thông tin
                    update_data = {
                        "golike_id": golike_info["golike_id"],
                        "is_golike_linked": True,
                        "avatar_thumb": golike_info["avatar_thumb"] or device_account.get("avatar_thumb", ""),
                        "unique_id": golike_info["unique_id"] or device_account.get("unique_id", "")
                    }
                    
                    # Tìm ID tài khoản trong DB
                    account_id = device_account.get("id")
                    if account_id:
                        # Cập nhật vào DB
                        self.db.update_account(account_id, update_data)
                        
                        # Cập nhật thông tin vào device_account
                        device_account.update(update_data)
                        mapped_accounts.append(device_account)
                        
                        self.logger.info(f"Đã ánh xạ tài khoản TikTok: {username}")
            
            return mapped_accounts
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi ánh xạ tài khoản TikTok")
            return [] ').decode('utf-8'))
