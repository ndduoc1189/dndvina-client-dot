import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsCmZyb20gam9icy5qb2JfYmFzZSBpbXBvcnQgQmFzZUpvYgoKY2xhc3MgVGlrdG9rSm9iKEJhc2VKb2IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSkKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbCIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gInRpa3RvayIKICAgICAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrdG9rIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBN4bufIOG7qW5nIGThu6VuZyBUaWtUb2sKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpICAjIMSQ4bujaSDhu6luZyBk4bulbmcgbeG7nwogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSBtw6BuIGjDrG5oIGNow61uaCB04bqjaQogICAgICAgICAgICBob21lX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6o2kgbcOgbiBow6xuaCBjaMOtbmggVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0ICJI4buTIHPGoSIgdsOgIG5o4bqlcCB2w6BvCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYigpOgogICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIG1lbnUgaOG7kyBzxqEgxJHhu4MgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgaWYgbm90IHNlbGYuX29wZW5fcHJvZmlsZV9tZW51KCk6CiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgWE1MIG3DoG4gaMOsbmggc2F1IGtoaSBt4bufIG1lbnUKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCAiVGjDqm0gdMOgaSBraG/huqNuIgogICAgICAgICAgICBhZGRfYWNjb3VudF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iVGjDqm0gdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGFkZF9hY2NvdW50X2J1dHRvbjoKICAgICAgICAgICAgICAgICMgVMOsbSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiAoUmVjeWNsZXJWaWV3KSAtIGzDoCBjaGEgY+G7p2EgbsO6dCAiVGjDqm0gdMOgaSBraG/huqNuIgogICAgICAgICAgICAgICAgcmVjeWNsZXJfdmlldyA9IE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgUmVjeWNsZXJWaWV3CiAgICAgICAgICAgICAgICBhbGxfcmVjeWNsZXJfdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZHgucmVjeWNsZXJ2aWV3LndpZGdldC5SZWN5Y2xlclZpZXciCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBSZWN5Y2xlclZpZXcgY2jhu6lhIGPDoWMgdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBmb3IgcnYgaW4gYWxsX3JlY3ljbGVyX3ZpZXdzOgogICAgICAgICAgICAgICAgICAgIHJ2X2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhydikKICAgICAgICAgICAgICAgICAgICBhZGRfYWNjb3VudF9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYWRkX2FjY291bnRfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gYWRkX2FjY291bnRfYnV0dG9uIGPDsyBu4bqxbSB0cm9uZyByZWN5Y2xlcl92aWV3IGtow7RuZwogICAgICAgICAgICAgICAgICAgIGlmIChydl9ib3VuZHNbMF0gPD0gYWRkX2FjY291bnRfYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbMV0gPD0gYWRkX2FjY291bnRfYm91bmRzWzFdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbMl0gPj0gYWRkX2FjY291bnRfYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbM10gPj0gYWRkX2FjY291bnRfYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgcmVjeWNsZXJfdmlldyA9IHJ2CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHJlY3ljbGVyX3ZpZXc6CiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgbsO6dCAoQnV0dG9uKSB0cm9uZyBSZWN5Y2xlclZpZXcgYuG6sW5nIGNsYXNzIHRoYXkgdsOsIHJlc291cmNlLWlkCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBidXR0b24gaW4gYWNjb3VudF9idXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICAjIELhu48gcXVhIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIlRow6ptIHTDoGkga2hv4bqjbiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSB0w6puIHTDoGkga2hv4bqjbiB04burIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gVGV4dFZpZXcgdHJvbmcgYnV0dG9uIGLhurFuZyBjbGFzcyB0aGF5IHbDrCByZXNvdXJjZS1pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuVGV4dFZpZXciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTOG7jWMgdGV4dHZpZXcgdGhlbyBib3VuZHMgxJHhu4MgdMOsbSDEkcO6bmcgY8OhaSB0aHXhu5ljIHbhu4EgYnV0dG9uIG7DoHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHR2IGluIHRleHR2aWV3czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHModHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR2X2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMV0gPj0gYnV0dG9uX2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzJdIDw9IGJ1dHRvbl9ib3VuZHNbMl0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSDEkeG7gyBraMO0bmcgbOG6pXkgcGjhuqNpIHRleHQgcuG7l25nIGhv4bq3YyAibnVsbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dCAhPSAibnVsbCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIELhu48gcXVhIG7DunQgIsSQw7NuZyIKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgPT0gIsSQw7NuZyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gY8OzIMSRYW5nIMSRxINuZyBuaOG6rXAga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGThuqV1IGtp4buDbSB0cm9uZyBidXR0b24gYuG6sW5nIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgICAgICAgICBjaGVja21hcmtzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYz0iROG6pXUga2nhu4NtIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGThuqV1IGtp4buDbSBjw7MgdGh14buZYyB24buBIGJ1dHRvbiBuw6B5IGtow7RuZwogICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGNoZWNrIGluIGNoZWNrbWFya3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja19ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoY2hlY2spCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tfYm91bmRzWzBdID49IGJ1dHRvbl9ib3VuZHNbMF0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzJdIDw9IGJ1dHRvbl9ib3VuZHNbMl0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzNdIDw9IGJ1dHRvbl9ib3VuZHNbM10pOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ8WpbmcgY8OzIHRo4buDIGtp4buDbSB0cmEgdGh14buZYyB0w61uaCBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiBidXR0b24uZ2V0KCJzZWxlY3RlZCIpID09ICJ0cnVlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgdXNlcm5hbWUgaOG7o3AgbOG7hyB0csaw4bubYyBraGkgdGjDqm0gdsOgbyBkYW5oIHPDoWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lIGFuZCB1c2VybmFtZSAhPSAibnVsbCIgYW5kIHVzZXJuYW1lLnN0cmlwKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEzhu41jIHRow6ptIGPDoWMgdMOqbiBraMO0bmcgcGjhuqNpIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgbm90IGluIFsiQ8OgaSDEkeG6t3QiLCAiQ8OgaSDEkeG6t3QgdMOgaSBraG/huqNuIiwgIlTDuXkgY2jhu41uIiwgIk1lbnUiXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiB1c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiYWN0aXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlzX2xvZ2luIjogaXNfY3VycmVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2VuYWJsZSI6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuYXBwZW5kKGFjY291bnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSBtw6BuIGjDrG5oIGNow61uaAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrVG9rIikKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnRzCiAgICAKICAgIGRlZiBwZXJmb3JtX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiBjw7RuZyB2aeG7h2MgduG7m2kgdMOgaSBraG/huqNuIFRpa1RvayIiIgogICAgICAgICMgU+G7rSBk4bulbmcgcGjGsMahbmcgdGjhu6ljIGPhu6dhIGzhu5twIGNoYQogICAgICAgIHN1cGVyKCkucGVyZm9ybV9qb2IoYWNjb3VudCkKICAgICAgICAKICAgIGRlZiBwZXJmb3JtX2NhcmUoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIk51w7RpIHTDoGkga2hv4bqjbiBUaWtUb2siIiIKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgbnXDtGkgdMOgaSBraG/huqNuIFRpa1Rvazoge2FjY291bnRbJ3VuaXF1ZV91c2VybmFtZSddfSIpCiAgICAgICAgIyBQaOG6p24gY29kZSBudcO0aSB0w6BpIGtob+G6o24gc+G6vSDEkcaw4bujYyB0aMOqbSBzYXUKICAgICAgICAKICAgIGRlZiBnZXRfYXZhaWxhYmxlX2pvYnMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGRhbmggc8OhY2ggY8OhYyBqb2Iga2jhuqMgZOG7pW5nIHThu6sgR29MaWtlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggam9iIGhv4bq3YyBsaXN0IHLhu5duZyBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHNlbGYuZ29saWtlX3NlcnZpY2U6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgbOG6pXkgam9iOiBHb0xpa2VTZXJ2aWNlIGNoxrBhIMSRxrDhu6NjIGN1bmcgY+G6pXAiKQogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEfhu41pIEFQSSBs4bqleSBqb2IKICAgICAgICAgICAgam9iX3VybCA9IHNlbGYuZ2V0X2pvYnNfdXJsKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gdGhhbSBz4buRCiAgICAgICAgICAgIHBhcmFtcyA9IHNlbGYuZ2V0X2pvYl9wYXJhbXMoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdChqb2JfdXJsLCAiR0VUIiwgcGFyYW1zKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgIGpvYl9kYXRhID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGpvYl9kYXRhOgogICAgICAgICAgICAgICAgICAgICMgQ2h14bqpbiBow7NhIGThu68gbGnhu4d1IGpvYgogICAgICAgICAgICAgICAgICAgIGpvYiA9IHNlbGYubWFwX2pvYl9kYXRhKGpvYl9kYXRhKQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gdGjhuqV5IGpvYiB7am9iWydpZCddfSBsb+G6oWkge2pvYlsndHlwZSddfSBjaG8gdMOgaSBraG/huqNuIHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBbam9iXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBqb2IiKQogICAgICAgICAgICByZXR1cm4gW10KICAgIAogICAgZGVmIGV4ZWN1dGVfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iLCBiYW8gZ+G7k206CiAgICAgICAgICAgICAgICAtIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAgICAgMDogQ2jGsGEgdGjhu7FjIGhp4buHbgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgICAgIDQ6IFRo4bqldCBi4bqhaSwgecOqdSBj4bqndSDEkWFuZyBjaOG7nQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX3R5cGUgPSBqb2IuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgam9iX2xpbmsgPSBqb2IuZ2V0KCJsaW5rIiwgIiIpCiAgICAgICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyB0aOG7sWMgaGnhu4duIGpvYiB7am9iX2lkfSBsb+G6oWkge2pvYl90eXBlfSB24bubaSBsaW5rIHtqb2JfbGlua30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGxv4bqhaSBqb2IgxJHGsOG7o2MgaOG7lyB0cuG7owogICAgICAgICAgICBpZiBqb2JfdHlwZSBub3QgaW4gWyJmb2xsb3ciLCAibGlrZSJdOgogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYiTG/huqFpIGpvYiB7am9iX3R5cGV9IGtow7RuZyDEkcaw4bujYyBo4buXIHRy4bujIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogMiwKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGpvYiB0aGVvIGxv4bqhaQogICAgICAgICAgICBqb2Jfc3RhdHVzID0gMCAgIyBN4bq3YyDEkeG7i25oIGzDoCBjaMawYSBsw6BtCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBqb2JfdHlwZSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2ZvbGxvd19qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIGVsaWYgam9iX3R5cGUgPT0gImxpa2UiOgogICAgICAgICAgICAgICAgam9iX3N0YXR1cyA9IHNlbGYuX3BlcmZvcm1fbGlrZV9qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIGvhur90IHF14bqjIHRy4bqjIHbhu4EgZOG7sWEgdHLDqm4gam9iX3N0YXR1cwogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBob8OgbiB0aMOgbmggam9iIHtqb2JfdHlwZX0gdGjDoG5oIGPDtG5nIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBUcnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAyOiAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiJLaMO0bmcgdGjhu4MgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nIMSR4buDIHRo4buxYyBoaeG7h24gam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiBqb2Jfc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICAic3VjY2VzcyI6IEZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAzOiAgIyDEkMOjIGLhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiLEkOG7kWkgdMaw4bujbmcgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZSB0csaw4bubYyDEkcOzIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlOiAgIyBUaOG6pXQgYuG6oWkgaG/hurdjIHRy4bqhbmcgdGjDoWkga2jDoWMKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlRo4buxYyBoaeG7h24gam9iIHtqb2JfdHlwZX0gdGjhuqV0IGLhuqFpIHbhu5tpIHRy4bqhbmcgdGjDoWkge2pvYl9zdGF0dXN9IgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSkKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IGpvYl9zdGF0dXMsCiAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbWVzc2FnZSA9IGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iOiB7c3RyKGUpfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAic3RhdHVzIjogMiwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgIGRlZiBfcGVyZm9ybV9mb2xsb3dfam9iKHNlbGYsIHByb2ZpbGVfbGluazogc3RyKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IgZm9sbG93IHRyw6puIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb2ZpbGVfbGluazogTGluayDEkeG6v24gdHJhbmcgY8OhIG5ow6JuIGPhuqduIGZvbGxvdyAoZOG6oW5nOiBodHRwczovL3d3dy50aWt0b2suY29tL0B1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBUcuG6oW5nIHRow6FpIGpvYiAoMDogY2jGsGEgbMOgbSwgMTogaG/DoG4gdGjDoG5oLCAyOiBs4buXaSwgMzogYuG7iyB1bmZvbGxvdywgNDogecOqdSBj4bqndSBjaOG7nSwgNTogZ+G7rWkgecOqdSBj4bqndSkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgVVJMIFRpa1RvayDEkeG7gyBz4butIGThu6VuZyBjaG8gbG9nZ2luZwogICAgICAgICAgICB1c2VybmFtZV9tYXRjaCA9IHJlLnNlYXJjaChyJ3Rpa3Rva1wuY29tL0AoW14vP10rKScsIHByb2ZpbGVfbGluaykKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX21hdGNoOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgdHLDrWNoIHh14bqldCB1c2VybmFtZSB04burIGxpbms6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZV9tYXRjaC5ncm91cCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIHRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX3BhZ2UocHJvZmlsZV9saW5rKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgRm9sbG93IHRoZW8gY8OhYyBjw6FjaCBraMOhYyBuaGF1CiAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPDoWNoIDE6IFTDrG0gdGhlbyB0ZXh0IHRp4bq/bmcgVmnhu4d0IHbDoCB0aeG6v25nIEFuaAogICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl0KICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPDoWNoIDI6IFTDrG0gdGhlbyBjb250ZW50LWRlc2MKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBmb2xsb3dfZGVzY3MgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdCiAgICAgICAgICAgICAgICBmb3IgZGVzYyBpbiBmb2xsb3dfZGVzY3M6CiAgICAgICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9ZGVzYykKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSB04bqldCBj4bqjIGPDoWMgY8OhY2gKICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgdGhlbyBkw7VpIHNhdSBuaGnhu4F1IGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRleHQgY+G7p2EgbsO6dAogICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgYnV0dG9uX3Jlc291cmNlX2lkID0gZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiAne2J1dHRvbl90ZXh0fScsIHJlc291cmNlLWlkOiAne2J1dHRvbl9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaQogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHnDqnUgY+G6p3UgdGhlbyBkw7VpIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgbMOgICJUaGVvIGTDtWkiIGhv4bq3YyAiRm9sbG93IiB0aMOsIGNsaWNrIHbDoG8gbsO6dAogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIlRoZW8gZMO1aSIsICJGb2xsb3ciXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlRo4buxYyBoaeG7h24gY2xpY2sgdsOgbyBuw7p0IHRoZW8gZMO1aSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTOG6pXkgcmVzb3VyY2VfaWQgY+G7p2EgYnV0dG9uIMSR4buDIGtp4buDbSB0cmEgbOG6oWkgc2F1CiAgICAgICAgICAgICAgICBidXR0b25fcmVzb3VyY2VfaWQgPSBmb2xsb3dfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICMgVnXhu5F0IHh14buRbmcgMSBs4bqnbiDEkeG7gyByZWZyZXNoIHRy4bqhbmcgdGjDoWkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBkaWFsb2cgaGnhu4duIGzDqm4ga2jDtG5nCiAgICAgICAgICAgICAgICAjIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgIyBpZiBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgIyAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyBj4bqjbmggYsOhbyBob+G6t2MgZ2nhu5tpIGjhuqFuCiAgICAgICAgICAgICAgICAjICAgICBkaWFsb2dzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQuYXBwLkRpYWxvZyIpCiAgICAgICAgICAgICAgICAjICAgICBmb3IgZGlhbG9nIGluIGRpYWxvZ3M6CiAgICAgICAgICAgICAgICAjICAgICAgICAgZGlhbG9nX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGRpYWxvZykKICAgICAgICAgICAgICAgICMgICAgICAgICBpZiBhbnkoa2V5d29yZCBpbiBkaWFsb2dfdGV4dC5sb3dlcigpIGZvciBrZXl3b3JkIGluIFsidGjhu60gbOG6oWkgc2F1IiwgImdp4bubaSBo4bqhbiIsICJsaW1pdCIsICJ0cnkgYWdhaW4iXSk6CiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICMgVMOsbSB2w6AgbmjhuqVuIG7DunQgT0svxJDDs25nCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIG9rX2J1dHRvbnMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoc2NyZWVuX3htbCwgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgZm9yIGJ0biBpbiBva19idXR0b25zOgogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgYnRuX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGJ0bikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgIGlmIGJ0bl90ZXh0IGFuZCBidG5fdGV4dC5sb3dlcigpIGluIFsib2siLCAixJHDs25nIiwgInTDtGkgaGnhu4N1IiwgIsSR4buTbmcgw70iXToKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnRuKQogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIkpvYiBraMO0bmcgaG/DoG4gdGjDoG5oLCBi4buLIGdp4bubaSBo4bqhbiB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICByZXR1cm4gMwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgdGV4dCBzYXUga2hpIG5o4bqlbiB0aGVvIGTDtWkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gbOG6oWkgbsO6dCBmb2xsb3cgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIC0gxrB1IHRpw6puIHRoZW8gcmVzb3VyY2UtaWQgbuG6v3UgY8OzCiAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3UgY8OzIHJlc291cmNlX2lkLCB0w6xtIHRoZW8gcmVzb3VyY2VfaWQgdHLGsOG7m2MKICAgICAgICAgICAgICAgIGlmIGJ1dHRvbl9yZXNvdXJjZV9pZDoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9YnV0dG9uX3Jlc291cmNlX2lkKQogICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdMOsbSBs4bqhaSBuw7p0IGZvbGxvdyB0aGVvIHJlc291cmNlLWlkOiB7YnV0dG9uX3Jlc291cmNlX2lkfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IHRoZW8gcmVzb3VyY2VfaWQgaG/hurdjIGtow7RuZyBjw7MgcmVzb3VyY2VfaWQsIHTDrG0gdGhlbyB0ZXh0CiAgICAgICAgICAgICAgICBpZiBub3QgdXBkYXRlZF9mb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwgIlRoZW8gZMO1aSIsICJGb2xsb3ciXQogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXBkYXRlZF9mb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBGYWxsYmFjazogdMOsbSB0aGVvIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfZGVzY3MgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdCiAgICAgICAgICAgICAgICAgICAgZm9yIGRlc2MgaW4gZm9sbG93X2Rlc2NzOgogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPWRlc2MpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHVwZGF0ZWRfZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3Jlc291cmNlX2lkID0gdXBkYXRlZF9mb2xsb3dfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU2F1IGtoaSBjbGljayBmb2xsb3c6IHRleHQ9J3t1cGRhdGVkX3RleHR9JywgcmVzb3VyY2UtaWQ9J3t1cGRhdGVkX3Jlc291cmNlX2lkfSciKQogICAgICAgICAgICAgICAgICAgICMgVHJpbSB3aGl0ZXNwYWNlIHThu6sgdXBkYXRlZF90ZXh0CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF90ZXh0ID0gdXBkYXRlZF90ZXh0LnN0cmlwKCkKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OhYyB0csaw4budbmcgaOG7o3Aga2jDoWMgbmhhdQogICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCAiTmjhuq9uIHRpbiIsICJNZXNzYWdlIl06CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkZvbGxvdyB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBn4butaSB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIlRoZW8gZMO1aSIsICJGb2xsb3ciXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJGb2xsb3cga2jDtG5nIHRow6BuaCBjw7RuZywgdGV4dCBj4bunYSBuw7p0IHbhuqtuIGzDoDoge3VwZGF0ZWRfdGV4dH0iKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiRm9sbG93IGtow7RuZyB0aMOgbmggY8O0bmcsIHRleHQgY+G7p2EgbsO6dCBsw6A6IHt1cGRhdGVkX3RleHR9IikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCwgY8OzIHRo4buDIMSRw6MgZm9sbG93IHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGZvbGxvdyBzYXUga2hpIG5o4bqlbiwgZ2nhuqMgxJHhu4tuaCDEkcOjIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVGV4dCBj4bunYSBuw7p0IGtow7RuZyBraOG7m3AgduG7m2kgJ1RoZW8gZMO1aScgaG/hurdjICdGb2xsb3cnOiB7YnV0dG9uX3RleHR9IikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGpvYiBmb2xsb3c6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfcGFnZShzZWxmLCBwcm9maWxlX2xpbms6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBN4bufIHRyYW5nIHByb2ZpbGUgVGlrVG9rIGLhurFuZyB0w6xtIGtp4bq/bSBob+G6t2MgbGluayB0cuG7sWMgdGnhur9wCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIMSR4bq/biB0cmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgVVJMIFRpa1RvawogICAgICAgICAgICB1c2VybmFtZV9tYXRjaCA9IHJlLnNlYXJjaChyJ3Rpa3Rva1wuY29tL0AoW14vP10rKScsIHByb2ZpbGVfbGluaykKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX21hdGNoOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgdHLDrWNoIHh14bqldCB1c2VybmFtZSB04burIGxpbms6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWVfbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiAxIHRyb25nIDIgY8OhY2g6IHTDrG0ga2nhur9tIGhv4bq3YyBt4bufIHRy4buxYyB0aeG6v3AgbGluawogICAgICAgICAgICBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBGYWxzZV0pOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdHJhbmcgY8OhIG5ow6JuIGLhurFuZyBjw6FjaCB0w6xtIGtp4bq/bToge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAjIFRo4butIG3hu58gYuG6sW5nIHTDrG0ga2nhur9tCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX2J5X3NlYXJjaCh1c2VybmFtZSk6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIGtp4bq/bSB0aOG6pXQgYuG6oWksIGZhbGxiYWNrIHNhbmcgbeG7nyBsaW5rCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVMOsbSBraeG6v20gdGjhuqV0IGLhuqFpLCBt4bufIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3AiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluaykKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgQ8OhY2ggMjogTeG7nyB0cuG7sWMgdGnhur9wIFVSTCB0aMO0bmcgcXVhIGhlbHBlci5vcGVuX3VybCgpCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTeG7nyB0cmFuZyBjw6EgbmjDom4gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cDoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIHbDoG8gxJHDum5nIHByb2ZpbGUga2jDtG5nIGLhurFuZyBjw6FjaCB0w6xtIGJ1dHRvbiBjw7MgdGV4dCA9IEB1c2VybmFtZQogICAgICAgICAgICAjIFTDrG0gYnV0dG9uIGPDsyB0ZXh0IGNow61uaCB4w6FjIGLhurFuZyBAdXNlcm5hbWUgKFRpa1RvayBsdcO0biBjw7MgQCB0csaw4bubYyB1c2VybmFtZSkKICAgICAgICAgICAgYXRfdXNlcm5hbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9ZiJAe3VzZXJuYW1lfSIpCiAgICAgICAgICAgIGlmIGF0X3VzZXJuYW1lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHjDoWMgbmjhuq1uIHbDoG8gxJHDum5nIHByb2ZpbGUgY+G7p2Ege3VzZXJuYW1lfSAodMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0OiAnQHt1c2VybmFtZX0nKSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0ID0gJ0B7dXNlcm5hbWV9JyB0csOqbiBtw6BuIGjDrG5oLCBjw7MgdGjhu4Mga2jDtG5nIHbDoG8gxJHDum5nIHByb2ZpbGUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIG3hu58gdHJhbmcgcHJvZmlsZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHNlbGYsIHVzZXJuYW1lOiBzdHIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTeG7nyB0cmFuZyBwcm9maWxlIFRpa1RvayBi4bqxbmcgY8OhY2ggdMOsbSBraeG6v20gdXNlcm5hbWUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1c2VybmFtZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIGPhuqduIHTDrG0KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUw6xtIHRhYiB0w6xtIGtp4bq/bQogICAgICAgICAgICBzZWFyY2hfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVMOsbSBraeG6v20iKQogICAgICAgICAgICBpZiBub3Qgc2VhcmNoX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFTDrG0ga2nhur9tIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgVMOsbSDDtCBuaOG6rXAgdMOsbSBraeG6v20KICAgICAgICAgICAgc2VhcmNoX2lucHV0ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkVkaXRUZXh0IikKICAgICAgICAgICAgaWYgbm90IHNlYXJjaF9pbnB1dDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgw7Qgbmjhuq1wIHTDrG0ga2nhur9tIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6rXAgdXNlcm5hbWUgY+G6p24gdMOsbQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2lucHV0KQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIuaW5wdXRfdGV4dChmInt1c2VybmFtZX0iKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgQ2jhu50ga+G6v3QgcXXhuqMgdMOsbSBraeG6v20KCiAgICAgICAgICAgICMgVMOsbSBuw7p0IFTDrG0ga2nhur9tIHbDoCBjbGljawogICAgICAgICAgICBzZWFyY2hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9IlTDrG0ga2nhur9tIikKICAgICAgICAgICAgaWYgc2VhcmNoX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IG7DunQgJ1TDrG0ga2nhur9tJywgxJFhbmcgY2xpY2suLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0ICdUw6xtIGtp4bq/bSciKQogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIHNlYXJjaCB24bubaSBlbnRlciBrZXkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2VudGVyKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKSAKCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHRhYiAiTmfGsOG7nWkgZMO5bmciIHbDoCBjbGljayB2w6BvIG7DsyAtIMSR4bujaSB04buRaSDEkWEgMTBzCiAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJOZ8aw4budaSBkw7luZyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCB1c2VyX3RhYjoKICAgICAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjb250ZW50X2Rlc2M9Ik5nxrDhu51pIGTDuW5nIiwgdGltZW91dD02KQoKICAgICAgICAgICAgaWYgdXNlcl90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgTmfGsOG7nWkgZMO5bmcsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIE5nxrDhu51pIGTDuW5nIHNhdSAxMHMiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBUZXh0VmlldyBjw7MgdGV4dCBjaMOtbmggeMOhYyBi4bqxbmcgdXNlcm5hbWUgKGtow7RuZyBjw7MgQCkgLSDEkeG7o2kgdOG7kWkgxJFhIDEwcwogICAgICAgICAgICB1c2VybmFtZV9lbGVtZW50ID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIsIHRleHQ9dXNlcm5hbWUsIHRpbWVvdXQ9NikKCiAgICAgICAgICAgIGlmIHVzZXJuYW1lX2VsZW1lbnQ6CiAgICAgICAgICAgICAgICAjIENsaWNrIHbDoG8gZWxlbWVudCDEkeG6p3UgdGnDqm4gdMOsbSDEkcaw4bujYwogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9LCDEkWFuZyBjbGljayB2w6BvLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih1c2VybmFtZV9lbGVtZW50KQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB0cm9uZyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSBzYXUgMTBzIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHTDrG0ga2nhur9tIHTDoGkga2hv4bqjbjoge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9wZXJmb3JtX2xpa2Vfam9iKHNlbGYsIHBvc3RfbGluazogc3RyKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IgbGlrZSB2aWRlbyB0csOqbiBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwb3N0X2xpbms6IExpbmsgxJHhur9uIHZpZGVvIGPhuqduIGxpa2UKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBUcuG6oW5nIHRow6FpIGpvYiAoMDogY2jGsGEgbMOgbSwgMTogaG/DoG4gdGjDoG5oLCAyOiBs4buXaSwgMzogxJHDoyBsaWtlIHRyxrDhu5tjIMSRw7MpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIHZpZGVvIFRpa1RvayBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wOiB7cG9zdF9saW5rfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gdHLhu7FjIHRp4bq/cCBVUkwgdGjDtG5nIHF1YSBoZWxwZXIub3Blbl91cmwoKQogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwb3N0X2xpbmspCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJhbmRvbSBuZ2jhu4kgMy0xMCBnacOieSBuaMawIG5nxrDhu51pIGTDuW5nIHRow7RuZyB0aMaw4budbmcKICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMywgMTApCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBuZ2jhu4kge3dhaXRfdGltZX1zIG5oxrAgbmfGsOG7nWkgZMO5bmcgdGjDtG5nIHRoxrDhu51uZy4uLiIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCBsaWtlIGLhurFuZyBjb250ZW50LWRlc2MgIlRow61jaCB2aWRlby4iCiAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgbGlrZV9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBsaWtlIHRyw6puIG3DoG4gaMOsbmgiKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdGjDtG5nIHRpbiBuw7p0IGxpa2UgYmFuIMSR4bqndQogICAgICAgICAgICBpbml0aWFsX2NvbnRlbnRfZGVzYyA9IGxpa2VfYnV0dG9uLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgIGluaXRpYWxfcmVzb3VyY2VfaWQgPSBsaWtlX2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIGluaXRpYWxfc2VsZWN0ZWQgPSBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRy4bqhbmcgdGjDoWkgbsO6dCBsaWtlIGJhbiDEkeG6p3U6IHNlbGVjdGVkPXtpbml0aWFsX3NlbGVjdGVkfSwgY29udGVudC1kZXNjPSd7aW5pdGlhbF9jb250ZW50X2Rlc2N9JywgcmVzb3VyY2UtaWQ9J3tpbml0aWFsX3Jlc291cmNlX2lkfSciKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIG7hur91IMSRw6MgbGlrZSB04burIHRyxrDhu5tjCiAgICAgICAgICAgIGlmIGluaXRpYWxfc2VsZWN0ZWQgb3IgIkLhu48gdGjDrWNoIiBpbiBpbml0aWFsX2NvbnRlbnRfZGVzYyBvciAiVW5saWtlIiBpbiBpbml0aWFsX2NvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlZpZGVvIMSRw6MgxJHGsOG7o2MgbGlrZSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJlc3VsdCA9IDMgICMgxJDDoyBsaWtlIHRyxrDhu5tjIMSRw7MKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBsaWtlIHZpZGVvCiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmLl9hdHRlbXB0X2xpa2VfdmlkZW8obGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFNhdSBraGkgbGlrZSB4b25nLCB2deG7kXQgcmFuZG9tIDItNSB2aWRlbyBy4buTaSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIHJlc3VsdCA9PSAxOiAgIyBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIHNlbGYuX3Njcm9sbF92aWRlb3NfYW5kX3JldHVybl9ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGxpa2U6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKCiAgICBkZWYgX2ZpbmRfbGlrZV9idXR0b24oc2VsZik6CiAgICAgICAgIiIiVMOsbSBuw7p0IGxpa2UgdHLDqm4gbcOgbiBow6xuaCIiIgogICAgICAgICMgVMOsbSB0aGVvIGNvbnRlbnQtZGVzYyAiVGjDrWNoIHZpZGVvLiIKICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICBhbGxfYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzY3JlZW5feG1sLCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iKQogICAgICAgIAogICAgICAgIGZvciBidXR0b24gaW4gYWxsX2J1dHRvbnM6CiAgICAgICAgICAgIGNvbnRlbnRfZGVzYyA9IGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICBpZiBjb250ZW50X2Rlc2Muc3RhcnRzd2l0aCgiVGjDrWNoIHZpZGVvLiIpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IG7DunQgbGlrZSB24bubaSBjb250ZW50LWRlc2M6ICd7Y29udGVudF9kZXNjfSciKQogICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbgogICAgICAgIAogICAgICAgICMgRmFsbGJhY2s6IHTDrG0gdGhlbyBjw6FjIGPDoWNoIGtow6FjCiAgICAgICAgbGlrZV9pZHMgPSBbCiAgICAgICAgICAgICJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGw6aWQvbGlrZV9idG4iLAogICAgICAgICAgICAiY29tLnNzLmFuZHJvaWQudWdjLnRyaWxsOmlkL2J0bl9saWtlIiwgCiAgICAgICAgICAgICJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGw6aWQvbGlrZV9idXR0b24iCiAgICAgICAgXQogICAgICAgIAogICAgICAgIGZvciBsaWtlX2lkIGluIGxpa2VfaWRzOgogICAgICAgICAgICBidXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9bGlrZV9pZCkKICAgICAgICAgICAgaWYgYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IG7DunQgbGlrZSB0aGVvIHJlc291cmNlLWlkOiB7bGlrZV9pZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbgogICAgICAgIAogICAgICAgICMgVMOsbSB0aGVvIGNvbnRlbnQtZGVzYyBraMOhYwogICAgICAgIGxpa2VfZGVzY3MgPSBbIlRow61jaCIsICJMaWtlIiwgIkLhu48gdGjDrWNoIiwgIlVubGlrZSJdCiAgICAgICAgZm9yIGRlc2MgaW4gbGlrZV9kZXNjczoKICAgICAgICAgICAgYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz1kZXNjKQogICAgICAgICAgICBpZiBidXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgbsO6dCBsaWtlIHRoZW8gY29udGVudC1kZXNjOiB7ZGVzY30iKQogICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbgogICAgICAgIAogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIF9hdHRlbXB0X2xpa2VfdmlkZW8oc2VsZiwgbGlrZV9idXR0b24pOgogICAgICAgICIiIlRo4buxYyBoaeG7h24gbGlrZSB2aWRlbywgxrB1IHRpw6puIGLhuqVtIHJhbmRvbSB04buNYSDEkeG7mSwgZmFsbGJhY2sgc2FuZyBi4bqlbSBuw7p0IGxpa2UiIiIKICAgICAgICAjIEzhuqV5IGvDrWNoIHRoxrDhu5tjIG3DoG4gaMOsbmggxJHhu4MgdMOtbmggdOG7jWEgxJHhu5kgcmFuZG9tCiAgICAgICAgd2lkdGgsIGhlaWdodCA9IHNlbGYuaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgCiAgICAgICAgIyBUaOG7rSBi4bqlbSByYW5kb20gdOG7jWEgxJHhu5kgdHLGsOG7m2MgKGRvdWJsZSBjbGljaykKICAgICAgICB4ID0gaW50KHdpZHRoICogcmFuZG9tLnVuaWZvcm0oMC42LCAwLjcpKQogICAgICAgIHkgPSBpbnQoaGVpZ2h0ICogcmFuZG9tLnVuaWZvcm0oMC42LCAwLjgpKQogICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUaOG7rSBkb3VibGUgY2xpY2sgdOG6oWkgdOG7jWEgxJHhu5kgKHt4fSwge3l9KSDEkeG7gyBsaWtlIHZpZGVvIikKICAgICAgICAKICAgICAgICAjIFRo4buxYyBoaeG7h24gZG91YmxlIGNsaWNrCiAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuMSkKICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikgICMgQ2jhu50gYW5pbWF0aW9uCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIGvhur90IHF14bqjIHNhdSBkb3VibGUgY2xpY2sKICAgICAgICBsaWtlX2J1dHRvbl9hZnRlcl9kb3VibGUgPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBsaWtlX2J1dHRvbl9hZnRlcl9kb3VibGU6CiAgICAgICAgICAgIGlzX3NlbGVjdGVkID0gc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbl9hZnRlcl9kb3VibGUpCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYyA9IGxpa2VfYnV0dG9uX2FmdGVyX2RvdWJsZS5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlNhdSBkb3VibGUgY2xpY2s6IHNlbGVjdGVkPXtpc19zZWxlY3RlZH0sIGNvbnRlbnQtZGVzYz0ne2NvbnRlbnRfZGVzY30nIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGlzX3NlbGVjdGVkIG9yICJC4buPIHRow61jaCIgaW4gY29udGVudF9kZXNjIG9yICJVbmxpa2UiIGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgbGlrZSB2aWRlbyB0aMOgbmggY8O0bmcgYuG6sW5nIGRvdWJsZSBjbGljayIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgIAogICAgICAgICMgTuG6v3UgZG91YmxlIGNsaWNrIGtow7RuZyB0aMOgbmggY8O0bmcsIGLhuqVtIHRy4buxYyB0aeG6v3AgdsOgbyBuw7p0IGxpa2UKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJEb3VibGUgY2xpY2sgY2jGsGEgbGlrZSDEkcaw4bujYywgYuG6pW0gdHLhu7FjIHRp4bq/cCB2w6BvIG7DunQgbGlrZSIpCiAgICAgICAgCiAgICAgICAgIyBM4bqleSBs4bqhaSB0aMO0bmcgdGluIG7DunQgbGlrZSBt4bubaSBuaOG6pXQKICAgICAgICBjdXJyZW50X2xpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgaWYgbm90IGN1cnJlbnRfbGlrZV9idXR0b246CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgxJHhu4MgYuG6pW0gdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgCiAgICAgICAgIyBC4bqlbSB2w6BvIG7DunQgbGlrZQogICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihjdXJyZW50X2xpa2VfYnV0dG9uKQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBxdeG6oyBzYXUga2hpIGLhuqVtIG7DunQKICAgICAgICBsaWtlX2J1dHRvbl9maW5hbCA9IHNlbGYuX2ZpbmRfbGlrZV9idXR0b24oKQogICAgICAgIGlmIGxpa2VfYnV0dG9uX2ZpbmFsOgogICAgICAgICAgICBpc19zZWxlY3RlZF9maW5hbCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b25fZmluYWwpCiAgICAgICAgICAgIGNvbnRlbnRfZGVzY19maW5hbCA9IGxpa2VfYnV0dG9uX2ZpbmFsLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgIHJlc291cmNlX2lkX2ZpbmFsID0gbGlrZV9idXR0b25fZmluYWwuZ2V0KCJyZXNvdXJjZS1pZCIsICIiKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlNhdSBraGkgYuG6pW0gbsO6dCBsaWtlOiBzZWxlY3RlZD17aXNfc2VsZWN0ZWRfZmluYWx9LCBjb250ZW50LWRlc2M9J3tjb250ZW50X2Rlc2NfZmluYWx9JywgcmVzb3VyY2UtaWQ9J3tyZXNvdXJjZV9pZF9maW5hbH0nIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGlzX3NlbGVjdGVkX2ZpbmFsIG9yICJC4buPIHRow61jaCIgaW4gY29udGVudF9kZXNjX2ZpbmFsIG9yICJVbmxpa2UiIGluIGNvbnRlbnRfZGVzY19maW5hbDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgbGlrZSB2aWRlbyB0aMOgbmggY8O0bmcgYuG6sW5nIGNsaWNrIG7DunQiKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyBsaWtlIHZpZGVvIHNhdSBraGkgdGjhu60gY+G6oyAyIGPDoWNoIikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCDEkeG7gyBraeG7g20gdHJhLCBnaeG6oyDEkeG7i25oIHRow6BuaCBjw7RuZwogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBsaWtlIMSR4buDIGtp4buDbSB0cmEsIGdp4bqjIMSR4buLbmggdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgcmV0dXJuIDEKCiAgICBkZWYgX3Njcm9sbF92aWRlb3NfYW5kX3JldHVybl9ob21lKHNlbGYpOgogICAgICAgICIiIlZ14buRdCByYW5kb20gMi01IHZpZGVvIHLhu5NpIHbhu4EgdHJhbmcgY2jhu6ciIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgUmFuZG9tIHPhu5EgbMaw4bujbmcgdmlkZW8gc+G6vSB2deG7kXQgKDItNSkKICAgICAgICAgICAgbnVtX3ZpZGVvcyA9IHJhbmRvbS5yYW5kaW50KDIsIDUpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJT4bq9IHZ14buRdCBxdWEge251bV92aWRlb3N9IHZpZGVvIHRyxrDhu5tjIGtoaSB24buBIHRyYW5nIGNo4bunIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQgPSBzZWxmLmhlbHBlci5nZXRfc2NyZWVuX3NpemUoKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobnVtX3ZpZGVvcyk6CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJWdeG7kXQgdmlkZW8gdGjhu6kge2krMX0ve251bV92aWRlb3N9IikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmdo4buJIHJhbmRvbSAyLTQgZ2nDonkgbmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQKICAgICAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDQpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCB2deG7kXQgdmlkZW8sIMSRYW5nIHF1YXkgduG7gSB0cmFuZyBjaOG7pyIpCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB2deG7kXQgdmlkZW86IHtzdHIoZSl9IikKICAgICAgICAgICAgIyBW4bqrbiBj4buRIGfhuq9uZyB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9wYXJhbXMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRoYW0gc+G7kSDEkeG7gyBn4buNaSBBUEkgbOG6pXkgam9iIGNobyBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZDoKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJhY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiZGF0YSI6ICJudWxsIgogICAgICAgIH0KICAgICAgICAKICAgIGRlZiBzeW5jX2FjY291bnRzX3RvX2RiKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMSQ4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgdsOgbyBkYXRhYmFzZQogICAgICAgIEdoaSDEkcOoIHBoxrDGoW5nIHRo4bupYyBj4bunYSBs4bubcCBjaGEgxJHhu4MgxJHhuqNtIGLhuqNvIGNo4buJIGPDsyBt4buZdCB0w6BpIGtob+G6o24gxJHGsOG7o2MgxJHDoW5oIGThuqV1IGzDoCDEkWFuZyBsb2dpbgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6t3QgbOG6oWkgdHLhuqFuZyB0aMOhaSBsb2dpbiBjaG8gdOG6pXQgY+G6oyB0w6BpIGtob+G6o24gVGlrVG9rIHRyb25nIERCCiAgICAgICAgICAgIHNlbGYuZGIucmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHMgPSBzZWxmLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBob+G6t2MgdGjDqm0gbeG7m2kgdsOgbyBEQgogICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICAjIFRow6ptIHRow7RuZyB0aW4gYXBwCiAgICAgICAgICAgICAgICBhY2NvdW50WyJhcHAiXSA9IHNlbGYuYXBwX25hbWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHTDoGkga2hv4bqjbiDEkcOjIHThu5NuIHThuqFpIGNoxrBhCiAgICAgICAgICAgICAgICBleGlzdGluZ19hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKAogICAgICAgICAgICAgICAgICAgIGFwcD1zZWxmLmFwcF9uYW1lLCAKICAgICAgICAgICAgICAgICAgICBzdGF0dXM9ImFjdGl2ZSIgaWYgYWNjb3VudC5nZXQoImlzX2xvZ2luIiwgRmFsc2UpIGVsc2UgTm9uZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gdMOgaSBraG/huqNuIHRyb25nIERCIGThu7FhIHbDoG8gdW5pcXVlX3VzZXJuYW1lCiAgICAgICAgICAgICAgICBleGlzdGluZ19hY2NvdW50ID0gTm9uZQogICAgICAgICAgICAgICAgZm9yIGFjYyBpbiBleGlzdGluZ19hY2NvdW50czoKICAgICAgICAgICAgICAgICAgICBpZiBhY2MuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKSA9PSBhY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIik6CiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nX2FjY291bnQgPSBhY2MKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgZXhpc3RpbmdfYWNjb3VudDoKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2lkID0gZXhpc3RpbmdfYWNjb3VudFsiaWQiXQogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgYWNjb3VudCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSB0w6BpIGtob+G6o24gbeG7m2kKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLmFkZF9hY2NvdW50KGFjY291bnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIGRldmljZV9hY2NvdW50cwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgcmV0dXJuIFtdCgogICAgZGVmIG1hcF9nb2xpa2VfYWNjb3VudHMoc2VsZiwgZ29saWtlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSwgZGV2aWNlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgw4FuaCB44bqhIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSB2w6BvIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBnb2xpa2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgR29MaWtlIEFQSQogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gxJHDoyDDoW5oIHjhuqEKICAgICAgICAiIiIKICAgICAgICBtYXBwZWRfYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBDaHXhuqluIGjDs2EgZOG7ryBsaeG7h3UgdOG7qyBHb0xpa2UKICAgICAgICAgICAgZ29saWtlX2RhdGEgPSB7fQogICAgICAgICAgICBmb3IgYWNjIGluIGdvbGlrZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICMgVHLDrWNoIHh14bqldCB0aMO0bmcgdGluIHThu6sgdMOgaSBraG/huqNuIEdvTGlrZQogICAgICAgICAgICAgICAgZ29saWtlX2FjY291bnQgPSB7CiAgICAgICAgICAgICAgICAgICAgImdvbGlrZV9pZCI6IGFjYy5nZXQoImlkIiksCiAgICAgICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogYWNjLmdldCgibmlja25hbWUiKSwKICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogYWNjLmdldCgidW5pcXVlX2lkIiksCiAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IGFjYy5nZXQoInVuaXF1ZV91c2VybmFtZSIpLAogICAgICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiBhY2MuZ2V0KCJhdmF0YXJfdGh1bWIiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFPhu60gZOG7pW5nIHVuaXF1ZV91c2VybmFtZSBsw6BtIGtow7NhIMSR4buDIGThu4Ugw6FuaCB44bqhCiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdvbGlrZV9hY2NvdW50WyJ1bmlxdWVfdXNlcm5hbWUiXQogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgZ29saWtlX2RhdGFbdXNlcm5hbWUubG93ZXIoKV0gPSBnb2xpa2VfYWNjb3VudAogICAgICAgICAgICAKICAgICAgICAgICAgIyDDgW5oIHjhuqEgduG7m2kgdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBmb3IgZGV2aWNlX2FjY291bnQgaW4gZGV2aWNlX2FjY291bnRzOgogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBkZXZpY2VfYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lIGluIGdvbGlrZV9kYXRhOgogICAgICAgICAgICAgICAgICAgICMgxJDDoyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24gdHJvbmcgZGFuaCBzw6FjaCBHb0xpa2UKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHThu6sgR29MaWtlIHbDoG8gdMOgaSBraG/huqNuIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgICAgIGdvbGlrZV9pbmZvID0gZ29saWtlX2RhdGFbdXNlcm5hbWVdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbgogICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAiZ29saWtlX2lkIjogZ29saWtlX2luZm9bImdvbGlrZV9pZCJdLAogICAgICAgICAgICAgICAgICAgICAgICAiaXNfZ29saWtlX2xpbmtlZCI6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiBnb2xpa2VfaW5mb1siYXZhdGFyX3RodW1iIl0gb3IgZGV2aWNlX2FjY291bnQuZ2V0KCJhdmF0YXJfdGh1bWIiLCAiIiksCiAgICAgICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfaWQiOiBnb2xpa2VfaW5mb1sidW5pcXVlX2lkIl0gb3IgZGV2aWNlX2FjY291bnQuZ2V0KCJ1bmlxdWVfaWQiLCAiIikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIElEIHTDoGkga2hv4bqjbiB0cm9uZyBEQgogICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBkZXZpY2VfYWNjb3VudC5nZXQoImlkIikKICAgICAgICAgICAgICAgICAgICBpZiBhY2NvdW50X2lkOgogICAgICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB2w6BvIERCCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHbDoG8gZGV2aWNlX2FjY291bnQKICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2FjY291bnQudXBkYXRlKHVwZGF0ZV9kYXRhKQogICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRfYWNjb3VudHMuYXBwZW5kKGRldmljZV9hY2NvdW50KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6Mgw6FuaCB44bqhIHTDoGkga2hv4bqjbiBUaWtUb2s6IHt1c2VybmFtZX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIG1hcHBlZF9hY2NvdW50cwogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSDDoW5oIHjhuqEgdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiBbXQogICAgCiAgICBkZWYgX25hdmlnYXRlX3RvX3Byb2ZpbGVfdGFiKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJBp4buBdSBoxrDhu5tuZyDEkeG6v24gdGFiIGjhu5Mgc8ahIFRpa1RvawogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHbDoCBi4bqlbSB2w6BvIG7DunQgIkjhu5Mgc8ahIgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgcHJvZmlsZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iSOG7kyBzxqEiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHByb2ZpbGVfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IEjhu5Mgc8ahIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihwcm9maWxlX2J1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgdsOgIHjhu60gbMO9IGRpYWxvZyAiS2jDtG5nIGNobyBwaMOpcCIgbuG6v3UgY8OzCiAgICAgICAgICAgIG5vdF9hbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iS2jDtG5nIGNobyBwaMOpcCIpCiAgICAgICAgICAgIGlmIG5vdF9hbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nICdLaMO0bmcgY2hvIHBow6lwJywgxJFhbmcgY2xpY2sgxJHhu4MgxJHDs25nLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihub3RfYWxsb3dfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCgogICAgICAgICAgICAjIEtp4buDbSB0cmEgdsOgIHjhu60gbMO9IGRpYWxvZyAiTMawdSBs4bqhaSDEkcSDbmcgbmjhuq1wIGzhuqduIHNhdSIgbuG6v3UgY8OzCiAgICAgICAgICAgIHNhdmVfbG9naW5fYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkzGsHUgdGjDtG5nIHRpbiDEkcSDbmcgbmjhuq1wIikKICAgICAgICAgICAgaWYgc2F2ZV9sb2dpbl9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nICdMxrB1IGzhuqFpIMSRxINuZyBuaOG6rXAgbOG6p24gc2F1JywgxJFhbmcgY2xpY2sgxJHhu4MgxJHDs25nLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzYXZlX2xvZ2luX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQoKCiAgICAgICAgICAgICMgVnXhu5F0IGzDqm4gMSBs4bqnbiDEkeG7gyB04bqjaSDEkeG6p3kgxJHhu6cgbuG7mWkgZHVuZwogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSDEkWnhu4F1IGjGsOG7m25nIMSR4bq/biB0YWIgaOG7kyBzxqEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfbWVudShzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE3hu58gbWVudSBo4buTIHPGoSAoZGFuaCBzw6FjaCB0w6BpIGtob+G6o24pCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKCiAgICAgICAgICAgICMgVMOsbSBuw7p0IG1lbnUgaOG7kyBzxqEKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIG1lbnVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9Ik1lbnUgaOG7kyBzxqEiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IG1lbnVfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IE1lbnUgaOG7kyBzxqEiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB04buNYSDEkeG7mSBj4bunYSBuw7p0IG1lbnUgdsOgIGNsaWNrIHbhu5tpIMSR4buZIGzhu4djaCBuZ+G6q3Ugbmhpw6puCiAgICAgICAgICAgIGJvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhtZW51X2J1dHRvbikKICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIgPSBib3VuZHMKICAgICAgICAgICAgeSA9ICgoeTIgLSB5MSkgLy8gMikgKyB5MQogICAgICAgICAgICB4ID0geDIgLy8gMgogICAgICAgICAgICB4ICs9IHJhbmRvbS5yYW5kaW50KC0xMCwgMTApCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIG3hu58gbWVudSBo4buTIHPGoSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBpc19ob21lX3NjcmVlbihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBUaWtUb2sgaGF5IGtow7RuZwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJFhbmcg4bufIHRyYW5nIGNo4bunLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw7MgbsO6dCAiVHJhbmcgY2jhu6ciIMSRxrDhu6NjIGNo4buNbiAoc2VsZWN0ZWQ9dHJ1ZSkgdHJvbmcgdGhhbmggdGFiIGtow7RuZwogICAgICAgICAgICBob21lX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IlRyYW5nIGNo4bunIikKICAgICAgICAgICAgaWYgaG9tZV90YWI6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGhvbWVfdGFiKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIE7hur91IHTDrG0gdGjhuqV5IHRhYiAiVHJhbmcgY2jhu6ciIG5oxrBuZyBjaMawYSDEkcaw4bujYyBjaOG7jW4sIGNsaWNrIHbDoG8gxJHDswogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihob21lX3RhYikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2jDtG5nIHTDrG0gdGjhuqV5IGPDoWMgeeG6v3UgdOG7kSBj4bunYSB0cmFuZyBjaOG7pwogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBraeG7g20gdHJhIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgZGVmIGVuc3VyZV9ob21lX3NjcmVlbihzZWxmLCBtYXhfcmV0cmllczogaW50ID0gMykgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkOG6o20gYuG6o28gxJFhbmcg4bufIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgVGlrVG9rLCBu4bq/dSBraMO0bmcgdGjDrCBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBtYXhfcmV0cmllczogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIHJldHJ5X2NvdW50ID0gMAogICAgICAgIAogICAgICAgIHdoaWxlIHJldHJ5X2NvdW50IDwgbWF4X3JldHJpZXM6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIMSRYW5nIOG7nyB0cmFuZyBjaOG7pyBraMO0bmcKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGtow7RuZyDhu58gdHJhbmcgY2jhu6csIMSRw7NuZyB2w6AgbeG7nyBs4bqhaSBhcHAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHBo4bqjaSB0cmFuZyBjaOG7pyBUaWtUb2ssIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcC4uLiIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgcmV0cnlfY291bnQgKz0gMQogICAgICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBt4bufIHRyYW5nIGNo4bunIFRpa1RvayBzYXUge21heF9yZXRyaWVzfSBs4bqnbiB0aOG7rSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICBkZWYgdmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIGtow7RuZyBjw7MgdMOgaSBraG/huqNuIG7DoG8gYuG7iyBiYW5uZWQKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nIGPhuqNuaCBiw6FvIGNodW5nCiAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyAiQ+G6rXAgbmjhuq10IENow61uaCBzw6FjaCBxdXnhu4FuIHJpw6puZyB0xrAiCiAgICAgICAgcHJpdmFjeV91cGRhdGVfZWxlbWVudHMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIHRleHQ9IkPhuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawIgogICAgICAgICkKCiAgICAgICAgaWYgcHJpdmFjeV91cGRhdGVfZWxlbWVudHM6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBkaWFsb2cgJ0Phuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawJywgxJFhbmcgeOG7rSBsw70uLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgIsSQw6MgaGnhu4N1IiB2w6AgYuG6pW0gdHLhu7FjIHRp4bq/cAogICAgICAgICAgICB1bmRlcnN0YW5kX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSLEkMOjIGhp4buDdSIpCiAgICAgICAgICAgIGlmIHVuZGVyc3RhbmRfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVuZGVyc3RhbmRfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSB24bubaSBjw6FjIHRleHQga2jDoWMKICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIFsiVGnhur9wIHThu6VjIiwgIsSQ4buTbmcgw70iLCAiQ29udGludWUiLCAiQWdyZWUiLCAiQ2jhuqVwIG5o4bqtbiIsICJBY2NlcHQiXToKICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD10ZXh0KQogICAgICAgICAgICAgICAgICAgIGlmIGJ1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIAogICAgICAgICMgVMOsbSBkaWFsb2cgY+G6o25oIGLDoW8gYuG6sW5nIElEIGhv4bq3YyBjb250ZW50LWRlc2MgY8OzIGNo4bupYSAiY+G6o25oIGLDoW8iLCAibOG7l2kiLCAidGjDtG5nIGLDoW8iCiAgICAgICAgYWxlcnRfZGlhbG9ncyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC5hcHAuRGlhbG9nIgogICAgICAgICkKICAgICAgICAKICAgICAgICBmb3IgZGlhbG9nIGluIGFsZXJ0X2RpYWxvZ3M6CiAgICAgICAgICAgICMgVMOsbSB0ZXh0IHRyb25nIGRpYWxvZwogICAgICAgICAgICB0ZXh0X3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgdGV4dF92aWV3IGluIHRleHRfdmlld3M6CiAgICAgICAgICAgICAgICB0ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh0ZXh0X3ZpZXcpCiAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCBhbnkoa2V5d29yZCBpbiB0ZXh0Lmxvd2VyKCkgZm9yIGtleXdvcmQgaW4gWyJj4bqjbmggYsOhbyIsICJs4buXaSIsICJ0aMO0bmcgYsOhbyIsICJi4buLIGtow7NhIiwgInZpIHBo4bqhbSJdKToKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggY+G6o25oIGLDoW8gaGnhu4duIHThuqFpIHThu6sgZGIKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzID0gc2VsZi5kYi5nZXQoImxvZ3Mtd2FybmluZy1tZXNzYWdlIiwgW10pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSBj4bqjbmggYsOhbyBt4bubaQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MuYXBwZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgInRpbWUiOiBkYXRldGltZS5kYXRldGltZS5ub3coKS5pc29mb3JtYXQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3MiOiB0ZXh0CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIENo4buJIGdp4buvIGzhuqFpIHThu5FpIMSRYSAyMCBsb2cgZ+G6p24gbmjhuqV0CiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGN1cnJlbnRfd2FybmluZ3MpID4gMjA6CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MgPSBjdXJyZW50X3dhcm5pbmdzWy0yMDpdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBMxrB1IGzhuqFpIHbDoG8gZGIKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgibG9ncy13YXJuaW5nLW1lc3NhZ2UiLCBjdXJyZW50X3dhcm5pbmdzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiLEkMOjIGzGsHUgY+G6o25oIGLDoW8gVGlrVG9rOiB7dGV4dH0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBuw7p0IE9LIGhv4bq3YyDEkMOzbmcgxJHhu4MgxJHDs25nIGRpYWxvZwogICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGJ1dHRvbiBpbiBidXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBidXR0b25fdGV4dCBhbmQgYnV0dG9uX3RleHQubG93ZXIoKSBpbiBbIm9rIiwgIsSRw7NuZyIsICJ0w7RpIGhp4buDdSIsICLEkeG7k25nIMO9Il06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBDw7MgY+G6o25oIGLDoW8gdGjDrCByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gVHJ1ZSAgIyBLaMO0bmcgY8OzIGPhuqNuaCBiw6FvCiAgICAgICAgCiAgICBkZWYgYmFja190b19ob21lKHNlbGYsIG1heF9iYWNrX2NvdW50OiBpbnQgPSA1LCBtYXhfcmV0cmllczogaW50ID0gMSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBRdWF5IGzhuqFpIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgVGlrVG9rCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgbWF4X2JhY2tfY291bnQ6IFPhu5EgbOG6p24gbmjhuqVuIEJhY2sgdOG7kWkgxJFhIHRyxrDhu5tjIGtoaSB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAKICAgICAgICAgICAgbWF4X3JldHJpZXM6IFPhu5EgbOG6p24gdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIHThu5FpIMSRYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIOG7nyB0cmFuZyBjaOG7pyBjaMawYQogICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJBhbmcgdMOsbSBjw6FjaCBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rLi4uIikKICAgICAgICAKICAgICAgICAjIFRo4butIGzhuqFpIHRvw6BuIGLhu5kgcXXDoSB0csOsbmggdOG7kWkgxJFhIG1heF9yZXRyaWVzIGzhuqduCiAgICAgICAgZm9yIHJldHJ5IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgIyBUaOG7rSBi4bqlbSBuw7p0IGJhY2sgdOG7kWkgxJFhIG1heF9iYWNrX2NvdW50IGzhuqduCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG1heF9iYWNrX2NvdW50KToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyB24buBIHRyYW5nIGNo4bunIGNoxrBhCiAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgcXVheSB24buBIHRyYW5nIGNo4bunIHNhdSB7aSsxfSBs4bqnbiBi4bqlbSBiYWNrIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0pIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSB24bqrbiBraMO0bmcgduG7gSDEkcaw4bujYyB0cmFuZyBjaOG7pywga2lsbCBhcHAgdsOgIG3hu58gbOG6oWkKICAgICAgICAgICAgaWYgcmV0cnkgPCBtYXhfcmV0cmllcyAtIDE6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgc2F1IHttYXhfYmFja19jb3VudH0gbOG6p24gYuG6pW0gYmFjaywgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0ve21heF9yZXRyaWVzfSkuLi4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgduG7gSB0cmFuZyBjaOG7pyBzYXUge21heF9iYWNrX2NvdW50fSBs4bqnbiBi4bqlbSBiYWNrIChs4bqnbiB0aOG7rSBjdeG7kWkge3JldHJ5KzF9L3ttYXhfcmV0cmllc30pLi4uIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQoKICAgICAgICAgICAgaWYgbm90IHNlbGYudmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIHhlbSBjw7Mg4bufIHRyYW5nIGNo4bunIGtow7RuZwogICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgc2F1IGtoaSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAgKGzhuqduIHRo4butIHtyZXRyeSsxfSkiKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB24buBIHRyYW5nIGNo4bunIG5nYXkgY+G6oyBzYXUge21heF9yZXRyaWVzfSBs4bqnbiB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAiKQogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgc3dpdGNoX2FjY291bnQoc2VsZiwgdGFyZ2V0X2FjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIENodXnhu4NuIHNhbmcgdMOgaSBraG/huqNuIFRpa1RvayBraMOhYwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhcmdldF9hY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGNodXnhu4NuIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdGFyZ2V0X3VzZXJuYW1lID0gdGFyZ2V0X2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBUaWtUb2s6IHt0YXJnZXRfdXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWw6BvIHRyYW5nIGjhu5Mgc8ahCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiAxIGzhuqduCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBtZW51IGjhu5Mgc8ahCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfbWVudSgpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBhZGRfYWNjb3VudF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iVGjDqm0gdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBhZGRfYWNjb3VudF9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG1lbnUgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB0w6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24KICAgICAgICAgICAgYWNjb3VudF9idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgdGFyZ2V0X2l0ZW0gPSBOb25lCiAgICAgICAgICAgIGZvciBidXR0b24gaW4gYWNjb3VudF9idXR0b25zOgogICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIlRow6ptIHTDoGkga2hv4bqjbiIgb3IgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIsSQw7NuZyI6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYnV0dG9uLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgICAgICBpZiBub3QgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgdGV4dHZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uX2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhidXR0b24pCiAgICAgICAgICAgICAgICAgICAgZm9yIHR2IGluIHRleHR2aWV3czoKICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKHR2KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHZfYm91bmRzWzBdID49IGJ1dHRvbl9ib3VuZHNbMF0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMV0gPj0gYnV0dG9uX2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzNdIDw9IGJ1dHRvbl9ib3VuZHNbM10pOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCB0ZXh0ICE9ICJudWxsIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2l0ZW0gPSBidXR0b24KICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdGFyZ2V0X2l0ZW06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gdHJvbmcgZGFuaCBzw6FjaCIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHTDoGkga2hv4bqjbiBsw6AgYuG7iyB2w7QgaGnhu4d1IGjDs2EgdHJvbmcgREIKICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQodGFyZ2V0X2FjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImRpc2FibGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGlzYWJsZV9yZWFzb24iOiAiVMOgaSBraG/huqNuIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE5o4bqlbiBCYWNrIMSR4buDIMSRw7NuZyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBRdWF5IHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6pXAgdsOgbyB0w6BpIGtob+G6o24gbeG7pWMgdGnDqnUKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHRhcmdldF9pdGVtKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgxJDhu6NpIGNodXnhu4NuIHTDoGkga2hv4bqjbiBob8OgbiB04bqldAogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgY2jGsGEKICAgICAgICAgICAgY3VycmVudF91c2VybmFtZSA9IHNlbGYuZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGN1cnJlbnRfdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY2h1eeG7g24gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyBzYW5nIHt0YXJnZXRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIsSQw6MgYuG6pW0gdsOgbyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gbmjGsG5nIGtp4buDbSB0cmEgbOG6oWkgdGjhuqV5IMSRYW5nIMSRxINuZyBuaOG6rXAgbMOgIHtjdXJyZW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyBxdWF5IHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgZGVmIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoKHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGPDoWMgdGhhbyB0w6FjIFVJIMSR4buDIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXJnZXRfYWNjb3VudDogVMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuIMSR4bq/bgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZi5zd2l0Y2hfYWNjb3VudCh0YXJnZXRfYWNjb3VudCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIFRpa1RvayDEkWFuZyDEkcSDbmcgbmjhuq1wCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyIGhv4bq3YyBOb25lOiBVc2VybmFtZSBj4bunYSB0w6BpIGtob+G6o24gxJFhbmcgxJHEg25nIG5o4bqtcCwgaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgICAgICMgVsOgbyB0cmFuZyBo4buTIHPGoSDEkeG7gyBs4bqleSB1c2VybmFtZQogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZ14buRdCB4deG7kW5nIHbDoCBjaOG7nSAyIGdpw6J5CiAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgVMOsbSB1c2VybmFtZSB0cm9uZyB0cmFuZyBo4buTIHPGoQogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB0cm9uZyBjw6FjIFRleHRWaWV3IGPDsyB0aOG7gyBjaOG7qWEgdXNlcm5hbWUKICAgICAgICAgICAgdGV4dF92aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIHVzZXJuYW1lID0gTm9uZQogICAgICAgICAgICBmb3IgdGV4dF92aWV3IGluIHRleHRfdmlld3M6CiAgICAgICAgICAgICAgICB0ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh0ZXh0X3ZpZXcpCiAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCB0ZXh0LnN0YXJ0c3dpdGgoIkAiKSBhbmQgbGVuKHRleHQpID4gMToKICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHRbMTpdICAjIELhu48ga8O9IHThu7EgQAogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGzhuqV5IHVzZXJuYW1lIHThu6sgdHJhbmcgaOG7kyBzxqE6IHt1c2VybmFtZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgbOG6pXkgdXNlcm5hbWUgdOG7qyB0cmFuZyBo4buTIHPGoSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBs4bqleSB1c2VybmFtZSB0w6BpIGtob+G6o24gxJFhbmcgxJHEg25nIG5o4bqtcCIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICByZXR1cm4gTm9uZQ==').decode('utf-8'))
