import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLQoiIiIKVGVzdCBzY3JpcHQgZm9yIFRpa1RvayBfcGVyZm9ybV9saWtlX2pvYiBmdW5jdGlvbgpVc2FnZTogcHl0aG9uIHRlc3QucHkKIiIiCgppbXBvcnQgc3lzCmltcG9ydCBvcwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCgojIEFkZCBjdXJyZW50IGRpcmVjdG9yeSB0byBwYXRoIHRvIGltcG9ydCBtb2R1bGVzCnN5cy5wYXRoLmFwcGVuZChvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkpCgojIEltcG9ydCByZXF1aXJlZCBtb2R1bGVzCmZyb20gam9icy50aWt0b2tfam9iIGltcG9ydCBUaWt0b2tKb2IKZnJvbSBzZXJ2aWNlcy5oZWxwZXJfc2VydmljZSBpbXBvcnQgSGVscGVyU2VydmljZQpmcm9tIHNlcnZpY2VzLmRiX3NlcnZpY2UgaW1wb3J0IERhdGFiYXNlU2VydmljZQoKZGVmIHRlc3RfcGVyZm9ybV9saWtlX2pvYigpOgogICAgIiIiVGVzdCBmdW5jdGlvbiBmb3IgX3BlcmZvcm1fbGlrZV9qb2IiIiIKICAgIAogICAgcHJpbnQoIvCfmoAgQuG6r3QgxJHhuqd1IHRlc3QgaMOgbSBfcGVyZm9ybV9saWtlX2pvYiBj4bunYSBUaWtUb2suLi4iKQogICAgCiAgICB0cnk6CiAgICAgICAgIyBLaOG7n2kgdOG6oW8gY8OhYyBzZXJ2aWNlIGPhuqduIHRoaeG6v3QKICAgICAgICBwcmludCgi8J+TsSDEkGFuZyBraOG7n2kgdOG6oW8gc2VydmljZXMuLi4iKQogICAgICAgIAogICAgICAgICMgS2jhu59pIHThuqFvIERCIHNlcnZpY2UKICAgICAgICBkYl9zZXJ2aWNlID0gRGF0YWJhc2VTZXJ2aWNlKCkKICAgICAgICAKICAgICAgICAjIEto4bufaSB04bqhbyBIZWxwZXIgc2VydmljZQogICAgICAgIGhlbHBlcl9zZXJ2aWNlID0gSGVscGVyU2VydmljZShiYXNlX3VybD0iaHR0cDovLzEwLjAuMC4xMDo5MDk5IikKICAgICAgICAKICAgICAgICAjIEto4bufaSB04bqhbyBUaWtUb2sgam9iCiAgICAgICAgdGlrdG9rX2pvYiA9IFRpa3Rva0pvYihkYl9zZXJ2aWNlLCBoZWxwZXJfc2VydmljZSkKICAgICAgICAKICAgICAgICBwcmludCgi4pyFIMSQw6Mga2jhu59pIHThuqFvIHNlcnZpY2VzIHRow6BuaCBjw7RuZyEiKQogICAgICAgIAogICAgICAgICMgVGVzdCBkYXRhIC0gdGhheSDEkeG7lWkgbGluayBuw6B5IHRow6BuaCB2aWRlbyBUaWtUb2sgYuG6oW4gbXXhu5FuIHRlc3QKICAgICAgICB0ZXN0X3ZpZGVvX2xpbmtzID0gWwogICAgICAgICAgICAiaHR0cHM6Ly93d3cudGlrdG9rLmNvbS9AcGhhbmhhYW4yMi92aWRlby83NTE5NDUyMDgxNzY2Mzg2OTUyIiwgICMgVGhheSBi4bqxbmcgbGluayB2aWRlbyB0aOG6rXQKICAgICAgICAgICAgIyBUaMOqbSBuaGnhu4F1IGxpbmsga2jDoWMgbuG6v3UgbXXhu5FuIHRlc3Qgbmhp4buBdSB2aWRlbwogICAgICAgIF0KICAgICAgICAKICAgICAgICAjIE5o4bqtcCBsaW5rIHZpZGVvIHThu6sgdXNlcgogICAgICAgIHByaW50KCJcbvCfk44gTmjhuq1wIGxpbmsgdmlkZW8gVGlrVG9rIMSR4buDIHRlc3QgKGhv4bq3YyBFbnRlciDEkeG7gyBkw7luZyBsaW5rIG3hurdjIMSR4buLbmgpOiIpCiAgICAgICAgdXNlcl9pbnB1dCA9IGlucHV0KCJMaW5rIHZpZGVvOiAiKS5zdHJpcCgpCiAgICAgICAgCiAgICAgICAgaWYgdXNlcl9pbnB1dDoKICAgICAgICAgICAgdGVzdF92aWRlb19saW5rcyA9IFt1c2VyX2lucHV0XQogICAgICAgIAogICAgICAgICMgVGVzdCB04burbmcgdmlkZW8KICAgICAgICBmb3IgaSwgdmlkZW9fbGluayBpbiBlbnVtZXJhdGUodGVzdF92aWRlb19saW5rcywgMSk6CiAgICAgICAgICAgIHByaW50KGYiXG7wn46sIFRlc3QgdmlkZW8ge2l9L3tsZW4odGVzdF92aWRlb19saW5rcyl9OiB7dmlkZW9fbGlua30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBow6BtIF9wZXJmb3JtX2xpa2Vfam9iCiAgICAgICAgICAgIHByaW50KCLij7MgxJBhbmcgdGjhu7FjIGhp4buHbiBsaWtlIGpvYi4uLiIpCiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgcmVzdWx0ID0gdGlrdG9rX2pvYi5fcGVyZm9ybV9saWtlX2pvYih2aWRlb19saW5rKQogICAgICAgICAgICAKICAgICAgICAgICAgZW5kX3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBkdXJhdGlvbiA9IGVuZF90aW1lIC0gc3RhcnRfdGltZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBIaeG7g24gdGjhu4sga+G6v3QgcXXhuqMKICAgICAgICAgICAgcHJpbnQoZiLij7HvuI8gIFRo4budaSBnaWFuIHRo4buxYyBoaeG7h246IHtkdXJhdGlvbjouMmZ9cyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXN1bHQgPT0gMToKICAgICAgICAgICAgICAgIHByaW50KCLinIUgS+G6v3QgcXXhuqM6IFRIw4BOSCBDw5RORyAtIMSQw6MgbGlrZSB2aWRlbyEiKQogICAgICAgICAgICBlbGlmIHJlc3VsdCA9PSAyOgogICAgICAgICAgICAgICAgcHJpbnQoIuKdjCBL4bq/dCBxdeG6ozogVEjhuqRUIELhuqBJIC0gS2jDtG5nIHRo4buDIGxpa2UgdmlkZW8iKQogICAgICAgICAgICBlbGlmIHJlc3VsdCA9PSAzOgogICAgICAgICAgICAgICAgcHJpbnQoIuKaoO+4jyAgS+G6v3QgcXXhuqM6IMSQw4MgTElLRSAtIFZpZGVvIMSRw6MgxJHGsOG7o2MgbGlrZSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi8J+UjSBL4bq/dCBxdeG6ozogS0jDlE5HIFjDgUMgxJDhu4pOSCAtIE3DoyB0cuG6oW5nIHRow6FpOiB7cmVzdWx0fSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE5naOG7iSBnaeG7r2EgY8OhYyB0ZXN0CiAgICAgICAgICAgIGlmIGkgPCBsZW4odGVzdF92aWRlb19saW5rcyk6CiAgICAgICAgICAgICAgICB3YWl0X3RpbWUgPSByYW5kb20ucmFuZGludCgzLCA4KQogICAgICAgICAgICAgICAgcHJpbnQoZiLwn5KkIE5naOG7iSB7d2FpdF90aW1lfXMgdHLGsOG7m2MgdGVzdCB0aeG6v3AgdGhlby4uLiIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXRfdGltZSkKICAgICAgICAKICAgICAgICBwcmludCgiXG7wn46JIEhvw6BuIHRow6BuaCB0ZXN0ISIpCiAgICAgICAgCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoIlxu4o+577iPICBUZXN0IGLhu4sgZOG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nIikKICAgICAgICAKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIlxu8J+SpSBM4buXaSB0cm9uZyBxdcOhIHRyw6xuaCB0ZXN0OiB7c3RyKGUpfSIpCiAgICAgICAgaW1wb3J0IHRyYWNlYmFjawogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIAogICAgZmluYWxseToKICAgICAgICBwcmludCgiXG7wn6e5IEThu41uIGThurlwLi4uIikKICAgICAgICAjIENsZWFudXAgbuG6v3UgY+G6p24KICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgJ3Rpa3Rva19qb2InIGluIGxvY2FscygpOgogICAgICAgICAgICAgICAgdGlrdG9rX2pvYi5iYWNrX3RvX2hvbWUoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKZGVmIHRlc3RfaGVscGVyX2Z1bmN0aW9ucygpOgogICAgIiIiVGVzdCBjw6FjIGjDoG0gaGVscGVyIGxpw6puIHF1YW4iIiIKICAgIAogICAgcHJpbnQoIlxu8J+UpyBUZXN0IGPDoWMgaMOgbSBoZWxwZXIuLi4iKQogICAgCiAgICB0cnk6CiAgICAgICAgIyBLaOG7n2kgdOG6oW8gc2VydmljZXMKICAgICAgICBkYl9zZXJ2aWNlID0gRGF0YWJhc2VTZXJ2aWNlKCkKICAgICAgICBoZWxwZXJfc2VydmljZSA9IEhlbHBlclNlcnZpY2UoKQogICAgICAgIHRpa3Rva19qb2IgPSBUaWt0b2tKb2IoZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UpCiAgICAgICAgCiAgICAgICAgIyBUZXN0IF9maW5kX2xpa2VfYnV0dG9uCiAgICAgICAgcHJpbnQoIvCflI0gVGVzdCBfZmluZF9saWtlX2J1dHRvbi4uLiIpCiAgICAgICAgbGlrZV9idXR0b24gPSB0aWt0b2tfam9iLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAKICAgICAgICBpZiBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgcHJpbnQoIuKchSBUw6xtIHRo4bqleSBuw7p0IGxpa2UhIikKICAgICAgICAgICAgcHJpbnQoZiIgICAtIENvbnRlbnQtZGVzYzoge2xpa2VfYnV0dG9uLmdldCgnY29udGVudC1kZXNjJywgJ04vQScpfSIpCiAgICAgICAgICAgIHByaW50KGYiICAgLSBSZXNvdXJjZS1pZDoge2xpa2VfYnV0dG9uLmdldCgncmVzb3VyY2UtaWQnLCAnTi9BJyl9IikKICAgICAgICAgICAgcHJpbnQoZiIgICAtIFNlbGVjdGVkOiB7dGlrdG9rX2pvYi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbil9IikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgi4p2MIEtow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UiKQogICAgICAgIAogICAgICAgICMgVGVzdCBlbnN1cmVfaG9tZV9zY3JlZW4KICAgICAgICBwcmludCgiXG7wn4+gIFRlc3QgZW5zdXJlX2hvbWVfc2NyZWVuLi4uIikKICAgICAgICBpc19ob21lID0gdGlrdG9rX2pvYi5lbnN1cmVfaG9tZV9zY3JlZW4oKQogICAgICAgIHByaW50KGYiS+G6v3QgcXXhuqM6IHsn4pyFIMSQw6Mg4bufIHRyYW5nIGNo4bunJyBpZiBpc19ob21lIGVsc2UgJ+KdjCBLaMO0bmcg4bufIHRyYW5nIGNo4bunJ30iKQogICAgICAgIAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYi8J+SpSBM4buXaSB0ZXN0IGhlbHBlcjoge3N0cihlKX0iKQoKZGVmIG1haW4oKToKICAgICIiIk1haW4gZnVuY3Rpb24iIiIKICAgIAogICAgcHJpbnQoIvCfjq8gVGlrVG9rIExpa2UgSm9iIFRlc3QgU2NyaXB0IikKICAgIHByaW50KCI9IiAqIDUwKQogICAgCiAgICAjIE1lbnUgbOG7sWEgY2jhu41uCiAgICBwcmludCgiXG5DaOG7jW4gbG/huqFpIHRlc3Q6IikKICAgIHByaW50KCIxLiBUZXN0IF9wZXJmb3JtX2xpa2Vfam9iIChDaMOtbmgpIikKICAgIHByaW50KCIyLiBUZXN0IGhlbHBlciBmdW5jdGlvbnMiKQogICAgcHJpbnQoIjMuIFRlc3QgY+G6oyBoYWkiKQogICAgCiAgICBjaG9pY2UgPSBpbnB1dCgiXG5OaOG6rXAgbOG7sWEgY2jhu41uICgxLTMpOiAiKS5zdHJpcCgpCiAgICAKICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgdGVzdF9wZXJmb3JtX2xpa2Vfam9iKCkKICAgIGVsaWYgY2hvaWNlID09ICIyIjoKICAgICAgICB0ZXN0X2hlbHBlcl9mdW5jdGlvbnMoKQogICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgIHRlc3RfcGVyZm9ybV9saWtlX2pvYigpCiAgICAgICAgdGVzdF9oZWxwZXJfZnVuY3Rpb25zKCkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIuKdjCBM4buxYSBjaOG7jW4ga2jDtG5nIGjhu6NwIGzhu4chIikKICAgICAgICByZXR1cm4KICAgIAogICAgcHJpbnQoIlxu8J+PgSBUZXN0IGhvw6BuIHThuqV0ISIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==').decode('utf-8'))
