import base64
exec(base64.b64decode('import requests
import json
import random
import time
import re
import subprocess
import os
import config
import utils
from urllib.parse import quote, unquote
from typing import Dict, Any, Optional, Tuple, List, Union
try:
    from lxml import etree
    LXML_AVAILABLE = True
except ImportError:
    LXML_AVAILABLE = False

# Tạo logger cho HelperService
logger = utils.get_logger("HelperService")

class HelperService:
    def __init__(self, base_url: str = None, db_service=None):
        # Sử dụng config nếu base_url không được cung cấp
        if base_url is None:
            base_url = config.HELPER_SERVICE_URL
        
        self.base_url = base_url
        self.is_adb_connected = False
        self.device_ip = config.DEVICE_IP  # Sử dụng DEVICE_IP từ config
        self.db_service = db_service
        
        # Luôn thử kết nối ADB với IP từ config
        self.check_and_connect_adb()

    def check_and_connect_adb(self) -> bool:
        """
        Kiểm tra và kết nối ADB tới thiết bị
        """
        try:
            # Kiểm tra ADB có được cài đặt không
            subprocess.run(["adb", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # Kết nối ADB đến thiết bị sử dụng địa chỉ từ config
            adb_address = f"{config.ADB_HOST}:{config.ADB_PORT}"
            
            # Thử kết nối đến thiết bị
            connect_process = subprocess.run(
                ["adb", "connect", adb_address],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Kiểm tra kết quả kết nối
            if "connected" in connect_process.stdout.lower():
                self.is_adb_connected = True
                logger.info(f"Đã kết nối ADB thành công đến {adb_address}")
                return True
                
        except (subprocess.SubprocessError, FileNotFoundError) as e:
            logger.error(f"Không thể kết nối ADB: {e}")
        
        self.is_adb_connected = False
        return False

    def _get_adb_device_param(self) -> List[str]:
        """
        Trả về tham số thiết bị cho lệnh ADB
        
        Returns:
            List[str]: Danh sách [-s, device_id] hoặc list rỗng nếu không có thiết bị
        """
        if self.is_adb_connected:
            adb_address = f"{config.ADB_HOST}:{config.ADB_PORT}"
            return ["-s", adb_address]
        return []

    def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Thực hiện request API và trả về kết quả dạng JSON hoặc XML
        """
        url = f"{self.base_url}/{endpoint}"
        try:
            # Thiết lập timeout cho request
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            # Kiểm tra Content-Type
            content_type = response.headers.get('Content-Type', '')
            if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                # Trả về XML dưới dạng text
                return {"status": "success", "data": response.text}
            else:
                # Trả về JSON
                return response.json()
        except requests.exceptions.Timeout:
            logger.warning(f"Request timeout khi gọi {url}, thử khởi động lại helper app")
            self._restart_helper_app()
            # Thử lại request sau khi khởi động lại helper app
            try:
                time.sleep(1)  # Chờ 1 giây để ứng dụng khởi động
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                
                content_type = response.headers.get('Content-Type', '')
                if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                    return {"status": "success", "data": response.text}
                else:
                    return response.json()
            except requests.exceptions.RequestException as e:
                logger.error(f"Vẫn lỗi sau khi thử khởi động lại helper app: {e}")
                return {"status": "error", "message": str(e)}
        except requests.exceptions.ConnectionError as e:
            # Bắt lỗi kết nối bị từ chối hoặc không thể kết nối
            logger.warning(f"Lỗi kết nối khi gọi {url}, thử khởi động lại helper app: {e}")
            self._restart_helper_app()
            # Thử lại request sau khi khởi động lại helper app
            try:
                time.sleep(2)  # Chờ 2 giây để ứng dụng khởi động
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                
                content_type = response.headers.get('Content-Type', '')
                if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                    return {"status": "success", "data": response.text}
                else:
                    return response.json()
            except requests.exceptions.RequestException as e:
                logger.error(f"Vẫn lỗi sau khi thử khởi động lại helper app: {e}")
                return {"status": "error", "message": str(e)}
        except requests.exceptions.RequestException as e:
            logger.error(f"Lỗi khi thực hiện request: {e}")
            return {"status": "error", "message": str(e)}

    def _restart_helper_app(self) -> bool:
        """
        Khởi động lại helper app sử dụng ADB
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Khởi động helper app bằng ADB
                cmd = ["adb"] + device_params + ["shell", "am", "start", "-n", "com.dndvina.helper/.MainActivity"]
                subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                logger.info("Đã khởi động lại helper app qua ADB")
                return True
            except subprocess.SubprocessError as e:
                logger.error(f"Lỗi khi khởi động lại helper app qua ADB: {e}")
                return False
        else:
            logger.warning("Không thể khởi động lại helper app vì ADB chưa được kết nối")
            return False

    def tap(self, x: int, y: int) -> Dict[str, Any]:
        """
        Chạm vào vị trí x,y trên màn hình
        """
        return self._make_request("tap", params={"x": x, "y": y})

    def tap_element(self, bounds: str) -> Dict[str, Any]:
        """
        Chạm vào một phần tử dựa trên bounds của nó
        Format bounds: "[x1,y1][x2,y2]" hoặc element dict
        """
        # Nếu bounds là một dict (element), lấy bounds string từ đó
        if isinstance(bounds, dict):
            bounds = bounds.get("bounds", "[0,0][0,0]")
            
        # Thử các pattern khác nhau để parse bounds, cho phép số âm
        patterns = [
            r"\[(-?\d+),(-?\d+)\]\[(-?\d+),(-?\d+)\]",  # [x1,y1][x2,y2] với số âm
            r"(-?\d+),(-?\d+),(-?\d+),(-?\d+)",         # x1,y1,x2,y2
            r"\[(-?\d+);(-?\d+)\]\[(-?\d+);(-?\d+)\]"   # [x1;y1][x2;y2]
        ]
        
        for pattern in patterns:
            match = re.match(pattern, bounds)
            if match:
                x1, y1, x2, y2 = map(int, match.groups())
                
                # print(f"Original bounds: ({x1}, {y1}, {x2}, {y2})")  # Bỏ log này
                
                # Sửa chữa bounds không hợp lệ
                if y1 < 0 or y2 < 0:
                    print(f"Fixing negative Y coordinates...")
                    if y2 < 0:
                        height = abs(y2 - y1)
                        y1 = max(0, y1)
                        y2 = y1 + height
                        print(f"Adjusted Y: y1={y1}, y2={y2}")
                
                if x1 < 0 or x2 < 0:
                    print(f"Fixing negative X coordinates...")
                    if x2 < 0:
                        width = abs(x2 - x1)
                        x1 = max(0, x1)
                        x2 = x1 + width
                        print(f"Adjusted X: x1={x1}, x2={x2}")
                
                # Kiểm tra bounds hợp lệ sau khi điều chỉnh
                if x1 >= x2 or y1 >= y2:
                    print(f"Invalid bounds after adjustment: ({x1}, {y1}, {x2}, {y2})")
                    continue
                    
                # Chọn một điểm trong bounds với margin an toàn
                margin = min(3, (x2 - x1) // 4, (y2 - y1) // 4)  # Dynamic margin
                margin = max(1, margin)  # Ít nhất 1px margin
                
                x = random.randint(x1 + margin, max(x1 + margin + 1, x2 - margin))
                y = random.randint(y1 + margin, max(y1 + margin + 1, y2 - margin))
                
                # print(f"Final tap coordinates: ({x}, {y}) with margin {margin}")  # Bỏ log này
                
                return self.tap(x, y)
        
        return {"status": "error", "message": f"Định dạng bounds không hợp lệ: {bounds}"}

    def swipe(self, startX: int, startY: int, endX: int, endY: int, duration: int = 800) -> Dict[str, Any]:
        """
        Thực hiện thao tác vuốt tùy chỉnh với các tham số cụ thể
        
        Args:
            startX: Tọa độ X điểm bắt đầu
            startY: Tọa độ Y điểm bắt đầu  
            endX: Tọa độ X điểm kết thúc
            endY: Tọa độ Y điểm kết thúc
            duration: Thời gian thực hiện thao tác vuốt (milliseconds)
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện thao tác
            
        Example:
            # Vuốt từ trên xuống dưới
            helper.swipe(100, 200, 100, 600, 1000)
            
            # Vuốt từ trái qua phải
            helper.swipe(50, 400, 350, 400, 500)
        """
        params = {
            "startX": startX,
            "startY": startY, 
            "endX": endX,
            "endY": endY,
            "duration": duration
        }
        
        logger.debug(f"Swipe: ({startX},{startY}) → ({endX},{endY}) trong {duration}ms")
        return self._make_request("swipe", params=params)

    def swipe_up(self) -> Dict[str, Any]:
        """
        Vuốt lên từ vị trí ngẫu nhiên phù hợp
        """
        return self._make_request("swipe_up")

    def swipe_down(self) -> Dict[str, Any]:
        """
        Vuốt xuống từ vị trí ngẫu nhiên phù hợp
        """
        return self._make_request("swipe_down")

    def input_text(self, text: str, speed: float = 1.0, 
                  direct_mode: bool = False, perfect_mode: bool = True) -> Dict[str, Any]:
        """
        Mô phỏng gõ phím với tốc độ ngẫu nhiên giống người thật bằng ADB
        """
        try:
            # Ưu tiên sử dụng ADB nếu đã kết nối
            if self.is_adb_connected:
                # Escape text để tránh lỗi với các ký tự đặc biệt
                escaped_text = text.replace(' ', '\\ ').replace('&', '\\&').replace('(', '\\(').replace(')', '\\)')
                
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Thực thi ADB input text
                cmd = ["adb"] + device_params + ["shell", "input", "text", f"'{escaped_text}'"]
                result = subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    timeout=15
                )
                
                return {"status": "success", "message": f"Đã nhập text '{text}' bằng ADB"}
            else:
                # Fallback về API nếu không có ADB
                params = {
                    "text": text,
                    "speed": speed,
                    "direct_mode": str(direct_mode).lower(),
                    "perfect_mode": str(perfect_mode).lower()
                }
                return self._make_request("input_text", params=params)
                
        except subprocess.TimeoutExpired:
            logger.warning(f"Timeout khi gửi ADB input text: {text}")
            # Fallback về API
            params = {
                "text": text,
                "speed": speed,
                "direct_mode": str(direct_mode).lower(),
                "perfect_mode": str(perfect_mode).lower()
            }
            return self._make_request("input_text", params=params)
        except subprocess.SubprocessError as e:
            logger.error(f"Lỗi ADB input text '{text}': {e}")
            # Fallback về API
            params = {
                "text": text,
                "speed": speed,
                "direct_mode": str(direct_mode).lower(),
                "perfect_mode": str(perfect_mode).lower()
            }
            return self._make_request("input_text", params=params)
        except Exception as e:
            logger.error(f"Lỗi không xác định khi gửi ADB input text '{text}': {e}")
            # Fallback về API
            params = {
                "text": text,
                "speed": speed,
                "direct_mode": str(direct_mode).lower(),
                "perfect_mode": str(perfect_mode).lower()
            }
            return self._make_request("input_text", params=params)

    def show_toast(self, message: str, type_: str = "info", 
                  position: str = "bottom") -> Dict[str, Any]:
        """
        Hiển thị thông báo toast
        """
        params = {
            "message": message,
            "type": type_,
            "position": position
        }
        return self._make_request("toast-message", params=params)

    def get_device_info(self) -> Dict[str, Any]:
        """
        Lấy thông tin chi tiết về thiết bị
        """
        result = self._make_request("device-info")
        
        # Nếu kết quả thành công, thêm thông tin internet IP và user_id
        if result.get("status") == "success" and "data" in result:
            try:
                # Lấy internet IP bằng requests
                internet_ip = self._get_internet_ip()
                if internet_ip:
                    result["data"]["internet_ip"] = internet_ip
                else:
                    result["data"]["internet_ip"] = "unknown"
                    
            except Exception as e:
                print(f"Lỗi khi lấy internet IP: {e}")
                result["data"]["internet_ip"] = "error"
            
            # Thêm user_id từ database config (đã được đọc 1 lần khi khởi động)
            try:
                # Chỉ lấy user_id từ database, không đọc file nữa
                user_id = self.db_service.get("user_id") if hasattr(self, 'db_service') and self.db_service else None
                
                # Thêm user_id vào result
                if user_id:
                    result["data"]["user_id"] = user_id
                else:
                    result["data"]["user_id"] = "unknown"
                    
            except Exception as e:
                print(f"Lỗi khi lấy user_id: {e}")
                result["data"]["user_id"] = "error"
                
        return result
        
    def _get_internet_ip(self) -> str:
        """
        Lấy địa chỉ IP công cộng bằng requests
        
        Returns:
            str: Địa chỉ IP công cộng hoặc chuỗi rỗng nếu thất bại
        """
        try:
            response = requests.get("https://api.ipify.org", timeout=3)
            ip = response.text.strip()
            
            # Kiểm tra định dạng IP đơn giản
            if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip):
                return ip
            else:
                print(f"Kết quả không phải là IP hợp lệ: {ip}")
                return ""
                
        except requests.exceptions.Timeout:
            print("Timeout khi lấy internet IP (3 giây)")
            return ""
        except requests.exceptions.RequestException as e:
            print(f"Lỗi khi lấy internet IP: {e}")
            return ""
        except Exception as e:
            print(f"Lỗi không xác định khi lấy internet IP: {e}")
            return ""

    def check_internet(self) -> bool:
        """
        Kiểm tra kết nối internet
        
        Returns:
            bool: True nếu có kết nối internet, False nếu không
        """
        try:
            # Thử kết nối đến Google DNS với timeout ngắn
            response = requests.get("https://8.8.8.8", timeout=5)
            return True
        except requests.exceptions.RequestException:
            try:
                # Thử với một domain khác
                response = requests.get("https://www.google.com", timeout=5)
                return True
            except requests.exceptions.RequestException:
                return False
        except Exception:
            return False

    def get_local_ip(self) -> str:
        """
        Lấy địa chỉ IP local của thiết bị từ device info
        
        Returns:
            str: Địa chỉ IP local hoặc chuỗi rỗng nếu thất bại
        """
        try:
            device_info = self.get_device_info()
            if device_info.get("status") == "success" and "data" in device_info:
                return device_info["data"].get("local_ip", "")
            return ""
        except Exception as e:
            print(f"Lỗi khi lấy local IP: {e}")
            return ""

    def dump_screen_xml(self) -> str:
        """
        Dump toàn bộ cấu trúc XML của màn hình hiện tại
        
        Trả về nội dung XML dưới dạng chuỗi
        """
        response = self._make_request("dump-screen-xml")
        if response["status"] == "success":
            return response["data"]
        return ""

    def open_app(self, package: str, activity: str = None) -> Dict[str, Any]:
        """
        Mở một ứng dụng với package name và activity cụ thể
        """
        params = {"package": package}
        if activity:
            params["activity"] = activity
        return self._make_request("open_app", params=params)

    def close_app(self, package: str) -> Dict[str, Any]:
        """
        Đóng một ứng dụng đang chạy
        Ưu tiên sử dụng ADB nếu đã kết nối
        """
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Đóng ứng dụng bằng ADB
                cmd = ["adb"] + device_params + ["shell", f"am force-stop {package}"]
                subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                return {"status": "success", "message": f"Đã đóng {package} bằng ADB"}
            except subprocess.SubprocessError as e:
                print(f"Lỗi khi đóng ứng dụng bằng ADB: {e}")
                # Nếu lỗi, thử phương thức HTTP
        
        # Sử dụng HTTP API nếu không có ADB hoặc ADB bị lỗi
        return self._make_request("press_home")

    def _sanitize_xml(self, xml_content: str) -> str:
        """
        Xử lý các ký tự đặc biệt trong XML để tránh lỗi khi phân tích
        
        Args:
            xml_content: Chuỗi XML cần xử lý
            
        Returns:
            str: Chuỗi XML đã được xử lý
        """
        # Thay thế các ký tự & không hợp lệ bằng &amp;
        # Nhưng giữ nguyên các entity hợp lệ như &amp;, &lt;, &gt;, &quot;, &apos;
        xml_content = re.sub(r'&(?!(amp|lt|gt|quot|apos);)', '&amp;', xml_content)
        
        # Loại bỏ các ký tự điều khiển không hợp lệ trong XML
        xml_content = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F]', '', xml_content)
        
        return xml_content

    def find_element_in_xml(self, xml_content: str, 
                          text: str = None, content_desc: str = None, 
                          resource_id: str = None, class_name: str = None,
                          visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm phần tử trong XML dựa trên text, content-desc, resource-id, class hoặc visible-to-user
        
        Args:
            xml_content: Nội dung XML
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Phần tử đầu tiên tìm thấy hoặc None nếu không tìm thấy
        """
        if not xml_content:
            return None
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Xây dựng XPath query dựa trên các điều kiện
                conditions = []
                if text is not None:
                    if contains:
                        # Tìm kiếm chứa từ khóa trong text
                        conditions.append(f'contains(@text, "{text}")')
                    else:
                        # Tìm kiếm khớp chính xác
                        conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    if contains:
                        # Tìm kiếm chứa từ khóa trong content-desc
                        conditions.append(f'contains(@content-desc, "{content_desc}")')
                    else:
                        # Tìm kiếm khớp chính xác
                        conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    conditions.append(f'@class="{class_name}"')
                if visible_to_user is not None:
                    visible_value = "true" if visible_to_user else "false"
                    conditions.append(f'@visible-to-user="{visible_value}"')
                
                xpath_query = "//node"
                if conditions:
                    xpath_query += "[" + " and ".join(conditions) + "]"
                
                # Tìm phần tử đầu tiên phù hợp
                element = root.xpath(xpath_query)
                if element:
                    return self._element_to_dict(element[0])
                    
            except Exception as e:
                print(f"Lỗi khi tìm phần tử với lxml: {e}")
        
        # Fallback: Tìm kiếm bằng regex
        if text:
            if contains:
                # Tìm kiếm chứa từ khóa thay vì khớp chính xác
                pattern = f'text="[^"]*{re.escape(text)}[^"]*"'
            else:
                # Tìm kiếm khớp chính xác
                pattern = f'text="{text}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa text
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        if content_desc:
            if contains:
                # Tìm kiếm chứa từ khóa thay vì khớp chính xác
                pattern = f'content-desc="[^"]*{re.escape(content_desc)}[^"]*"'
            else:
                # Tìm kiếm khớp chính xác
                pattern = f'content-desc="{content_desc}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa content-desc
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        if resource_id:
            pattern = f'resource-id="{resource_id}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa resource-id
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
                    
        if class_name:
            pattern = f'class="{class_name}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa class
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        return None
    
    def find_parent_element_in_xml(self, xml_content: str, child_element: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Tìm element cha của một element con trong XML
        
        Args:
            xml_content: Nội dung XML
            child_element: Element con (dict với các thuộc tính như bounds, text, etc.)
            
        Returns:
            Optional[Dict[str, Any]]: Element cha hoặc None nếu không tìm thấy
        """
        if not xml_content or not child_element:
            return None
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Xây dựng điều kiện để tìm element con chính xác
                conditions = []
                for key, value in child_element.items():
                    if key in ['text', 'content-desc', 'resource-id', 'class', 'bounds', 'visible-to-user']:
                        conditions.append(f'@{key}="{value}"')
                
                if not conditions:
                    return None
                
                xpath_query = "//node[" + " and ".join(conditions) + "]"
                
                # Tìm element con
                child_nodes = root.xpath(xpath_query)
                if child_nodes:
                    # Lấy element cha của element con đầu tiên tìm được
                    parent_node = child_nodes[0].getparent()
                    if parent_node is not None and parent_node.tag == 'node':
                        return self._element_to_dict(parent_node)
                    
            except Exception as e:
                print(f"Lỗi khi tìm element cha với lxml: {e}")
        
        # Fallback: Tìm kiếm bằng regex (phức tạp hơn nhưng cần thiết)
        try:
            # Tìm bounds của element con để xác định vị trí
            child_bounds = child_element.get('bounds', '')
            if not child_bounds:
                return None
            
            # Tìm pattern của element con trong XML
            child_pattern = None
            for key, value in child_element.items():
                if key in ['text', 'content-desc', 'resource-id', 'class'] and value:
                    escaped_value = re.escape(str(value))
                    pattern = f'{key}="{escaped_value}"'
                    if pattern in xml_content:
                        child_pattern = pattern
                        break
            
            if not child_pattern:
                return None
            
            # Tìm vị trí của element con trong XML
            child_match = re.search(child_pattern, xml_content)
            if not child_match:
                return None
            
            # Tìm thẻ node chứa pattern này
            child_start = xml_content.rfind('<node', 0, child_match.start())
            if child_start == -1:
                return None
            
            # Tìm thẻ node cha bằng cách đếm level
            # Tìm ngược lại để tìm thẻ node cha gần nhất
            parent_start = xml_content.rfind('<node', 0, child_start)
            if parent_start == -1:
                return None
            
            parent_end = xml_content.find('>', parent_start) + 1
            parent_content = xml_content[parent_start:parent_end]
            
            return self._extract_attributes(parent_content)
            
        except Exception as e:
            print(f"Lỗi khi tìm element cha với regex: {e}")
            return None
    
    def find_child_elements_in_xml(self, xml_content: str, parent_element: Dict[str, Any],
                                 text: str = None, content_desc: str = None, 
                                 resource_id: str = None, class_name: str = None,
                                 visible_to_user: bool = True, contains: bool = False) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các element con của một element cha trong XML
        
        Args:
            xml_content: Nội dung XML
            parent_element: Element cha (dict với các thuộc tính như bounds, text, etc.)
            text: Text của element con cần tìm
            content_desc: Content description của element con cần tìm
            resource_id: Resource ID của element con cần tìm
            class_name: Class name của element con cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            List[Dict[str, Any]]: Danh sách các element con tìm thấy
        """
        results = []
        
        if not xml_content or not parent_element:
            return results
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Tìm element cha trước
                parent_conditions = []
                for key, value in parent_element.items():
                    if key in ['text', 'content-desc', 'resource-id', 'class', 'bounds', 'visible-to-user']:
                        parent_conditions.append(f'@{key}="{value}"')
                
                if not parent_conditions:
                    return results
                
                parent_xpath = "//node[" + " and ".join(parent_conditions) + "]"
                parent_nodes = root.xpath(parent_xpath)
                
                if not parent_nodes:
                    return results
                
                # Tìm tất cả element con của element cha
                for parent_node in parent_nodes:
                    # Xây dựng điều kiện tìm kiếm cho element con
                    child_conditions = []
                    if text is not None:
                        child_conditions.append(f'@text="{text}"')
                    if content_desc is not None:
                        child_conditions.append(f'@content-desc="{content_desc}"')
                    if resource_id is not None:
                        child_conditions.append(f'@resource-id="{resource_id}"')
                    if class_name is not None:
                        child_conditions.append(f'@class="{class_name}"')
                    if visible_to_user is not None:
                        visible_value = "true" if visible_to_user else "false"
                        child_conditions.append(f'@visible-to-user="{visible_value}"')
                    
                    # Tìm element con trong parent node
                    child_xpath = ".//node"
                    if child_conditions:
                        child_xpath += "[" + " and ".join(child_conditions) + "]"
                    
                    child_nodes = parent_node.xpath(child_xpath)
                    for child_node in child_nodes:
                        results.append(self._element_to_dict(child_node))
                        
            except Exception as e:
                print(f"Lỗi khi tìm element con với lxml: {e}")
        
        return results
    
    def find_child_element_in_xml(self, xml_content: str, parent_element: Dict[str, Any],
                                text: str = None, content_desc: str = None, 
                                resource_id: str = None, class_name: str = None,
                                visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element con đầu tiên của một element cha trong XML
        
        Args:
            xml_content: Nội dung XML
            parent_element: Element cha (dict với các thuộc tính như bounds, text, etc.)
            text: Text của element con cần tìm
            content_desc: Content description của element con cần tìm
            resource_id: Resource ID của element con cần tìm
            class_name: Class name của element con cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element con đầu tiên tìm thấy hoặc None nếu không tìm thấy
        """
        child_elements = self.find_child_elements_in_xml(
            xml_content, parent_element, text, content_desc, resource_id, class_name, visible_to_user, contains
        )
        return child_elements[0] if child_elements else None
    
    def find_all_elements_in_xml(self, xml_content: str, 
                               text: str = None, content_desc: str = None, 
                               resource_id: str = None, class_name: str = None,
                               visible_to_user: bool = True, contains: bool = False) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử trong XML phù hợp với điều kiện
        
        Args:
            xml_content: Nội dung XML
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            List[Dict[str, Any]]: Danh sách các phần tử tìm thấy
        """
        results = []
        
        if not xml_content:
            return results
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML để tránh lỗi EntityRef
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Xây dựng XPath query dựa trên các điều kiện
                conditions = []
                if text is not None:
                    if contains:
                        # Tìm kiếm chứa từ khóa trong text
                        conditions.append(f'contains(@text, "{text}")')
                    else:
                        # Tìm kiếm khớp chính xác
                        conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    if contains:
                        # Tìm kiếm chứa từ khóa trong content-desc
                        conditions.append(f'contains(@content-desc, "{content_desc}")')
                    else:
                        # Tìm kiếm khớp chính xác
                        conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    conditions.append(f'@class="{class_name}"')
                if visible_to_user is not None:
                    visible_value = "true" if visible_to_user else "false"
                    conditions.append(f'@visible-to-user="{visible_value}"')
                
                xpath_query = "//node"
                if conditions:
                    xpath_query += "[" + " and ".join(conditions) + "]"
                
                # Tìm tất cả phần tử phù hợp
                elements = root.xpath(xpath_query)
                for element in elements:
                    results.append(self._element_to_dict(element))
                    
            except Exception as e:
                print(f"Lỗi khi tìm phần tử với lxml: {e}")
                print(f"Thử tìm phần tử bằng phương thức thay thế...")
        
        # Fallback: Tìm kiếm bằng regex (chỉ trả về kết quả đơn giản)
        if not results and text:
            if contains:
                # Tìm kiếm chứa từ khóa thay vì khớp chính xác
                pattern = f'text="[^"]*{re.escape(text)}[^"]*"'
            else:
                # Tìm kiếm khớp chính xác
                pattern = f'text="{text}"'
            for match in re.finditer(pattern, xml_content):
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    results.append(self._extract_attributes(node_content))
        
        if not results and content_desc:
            if contains:
                # Tìm kiếm chứa từ khóa thay vì khớp chính xác
                pattern = f'content-desc="[^"]*{re.escape(content_desc)}[^"]*"'
            else:
                # Tìm kiếm khớp chính xác
                pattern = f'content-desc="{content_desc}"'
            for match in re.finditer(pattern, xml_content):
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    results.append(self._extract_attributes(node_content))
        
        return results
    
    def _extract_attributes(self, node_content: str) -> Dict[str, Any]:
        """
        Trích xuất các thuộc tính từ nội dung của một thẻ node
        """
        attributes = {}
        
        # Các thuộc tính cần trích xuất
        attr_patterns = {
            "class": r'class="([^"]*)"',
            "package": r'package="([^"]*)"',
            "resource-id": r'resource-id="([^"]*)"',
            "text": r'text="([^"]*)"',
            "content-desc": r'content-desc="([^"]*)"',
            "bounds": r'bounds="([^"]*)"',
            "checkable": r'checkable="([^"]*)"',
            "checked": r'checked="([^"]*)"',
            "clickable": r'clickable="([^"]*)"',
            "enabled": r'enabled="([^"]*)"',
            "focusable": r'focusable="([^"]*)"',
            "focused": r'focused="([^"]*)"',
            "scrollable": r'scrollable="([^"]*)"',
            "long-clickable": r'long-clickable="([^"]*)"',
            "password": r'password="([^"]*)"',
            "selected": r'selected="([^"]*)"'
        }
        
        for attr_name, pattern in attr_patterns.items():
            match = re.search(pattern, node_content)
            if match:
                attributes[attr_name] = match.group(1)
                
        return attributes

    def _element_to_dict(self, element) -> Dict[str, Any]:
        """
        Chuyển đổi một phần tử XML từ lxml thành dict
        """
        result = {}
        
        # Lấy tất cả thuộc tính
        for key, value in element.attrib.items():
            result[key] = value
            
        return result

    def find_element(self, text: str = None, content_desc: str = None, 
                    resource_id: str = None, class_name: str = None,
                    visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm phần tử trên màn hình dựa trên text, content-desc, resource-id, class hoặc visible-to-user
        
        Args:
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Phần tử đầu tiên tìm thấy hoặc None nếu không tìm thấy
        """
        xml_content = self.dump_screen_xml()
        return self.find_element_in_xml(xml_content, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def find_all_elements(self, text: str = None, content_desc: str = None, 
                        resource_id: str = None, class_name: str = None,
                        visible_to_user: bool = True, contains: bool = False) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử trên màn hình phù hợp với điều kiện
        
        Args:
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            List[Dict[str, Any]]: Danh sách các phần tử tìm thấy
        """
        xml_content = self.dump_screen_xml()
        return self.find_all_elements_in_xml(xml_content, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def find_child_elements(self, parent_element: Dict[str, Any],
                          text: str = None, content_desc: str = None, 
                          resource_id: str = None, class_name: str = None,
                          visible_to_user: bool = True, contains: bool = False) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các element con của một element cha trên màn hình hiện tại
        
        Args:
            parent_element: Element cha (dict với các thuộc tính như bounds, text, etc.)
            text: Text của element con cần tìm
            content_desc: Content description của element con cần tìm
            resource_id: Resource ID của element con cần tìm
            class_name: Class name của element con cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            List[Dict[str, Any]]: Danh sách các element con tìm thấy
            
        Example:
            # Tìm tất cả GridView trong một ViewGroup
            parent = helper.find_element(class_name="android.widget.ViewGroup")
            grid_views = helper.find_child_elements(parent, class_name="android.widget.GridView")
        """
        xml_content = self.dump_screen_xml()
        return self.find_child_elements_in_xml(xml_content, parent_element, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def find_child_element(self, parent_element: Dict[str, Any],
                         text: str = None, content_desc: str = None, 
                         resource_id: str = None, class_name: str = None,
                         visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element con đầu tiên của một element cha trên màn hình hiện tại
        
        Args:
            parent_element: Element cha (dict với các thuộc tính như bounds, text, etc.)
            text: Text của element con cần tìm
            content_desc: Content description của element con cần tìm
            resource_id: Resource ID của element con cần tìm
            class_name: Class name của element con cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element con đầu tiên tìm thấy hoặc None nếu không tìm thấy
            
        Example:
            # Tìm một TextView trong một LinearLayout cụ thể
            parent = helper.find_element(class_name="android.widget.LinearLayout", resource_id="com.example:id/container")
            text_view = helper.find_child_element(parent, class_name="android.widget.TextView")
        """
        xml_content = self.dump_screen_xml()
        return self.find_child_element_in_xml(xml_content, parent_element, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def get_next_element_in_xml(self, xml_content: str, current_element: Dict[str, Any],
                              text: str = None, content_desc: str = None, 
                              resource_id: str = None, class_name: str = None,
                              visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element tiếp theo (anh em) của element hiện tại trong XML
        
        Args:
            xml_content: Nội dung XML
            current_element: Element hiện tại để làm mốc
            text: Text của element tiếp theo cần tìm
            content_desc: Content description của element tiếp theo cần tìm
            resource_id: Resource ID của element tiếp theo cần tìm
            class_name: Class name của element tiếp theo cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element tiếp theo hoặc None nếu không tìm thấy
        """
        if not xml_content or not current_element:
            return None
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Tìm element hiện tại trước
                current_conditions = []
                for key, value in current_element.items():
                    if key in ['text', 'content-desc', 'resource-id', 'class', 'bounds', 'visible-to-user']:
                        current_conditions.append(f'@{key}="{value}"')
                
                if not current_conditions:
                    return None
                
                current_xpath = "//node[" + " and ".join(current_conditions) + "]"
                current_nodes = root.xpath(current_xpath)
                
                if not current_nodes:
                    return None
                
                current_node = current_nodes[0]
                
                # Tìm element tiếp theo (following-sibling)
                next_conditions = []
                if text is not None:
                    if contains:
                        next_conditions.append(f'contains(@text, "{text}")')
                    else:
                        next_conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    if contains:
                        next_conditions.append(f'contains(@content-desc, "{content_desc}")')
                    else:
                        next_conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    next_conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    next_conditions.append(f'@class="{class_name}"')
                if visible_to_user is not None:
                    visible_value = "true" if visible_to_user else "false"
                    next_conditions.append(f'@visible-to-user="{visible_value}"')
                
                # Tìm anh em tiếp theo
                next_xpath = "following-sibling::node"
                if next_conditions:
                    next_xpath += "[" + " and ".join(next_conditions) + "]"
                
                next_nodes = current_node.xpath(next_xpath)
                if next_nodes:
                    return self._element_to_dict(next_nodes[0])
                    
            except Exception as e:
                print(f"Lỗi khi tìm element tiếp theo với lxml: {e}")
        
        return None

    def get_prev_element_in_xml(self, xml_content: str, current_element: Dict[str, Any],
                              text: str = None, content_desc: str = None, 
                              resource_id: str = None, class_name: str = None,
                              visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element trước đó (anh em) của element hiện tại trong XML
        
        Args:
            xml_content: Nội dung XML
            current_element: Element hiện tại để làm mốc
            text: Text của element trước đó cần tìm
            content_desc: Content description của element trước đó cần tìm
            resource_id: Resource ID của element trước đó cần tìm
            class_name: Class name của element trước đó cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element trước đó hoặc None nếu không tìm thấy
        """
        if not xml_content or not current_element:
            return None
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Tìm element hiện tại trước
                current_conditions = []
                for key, value in current_element.items():
                    if key in ['text', 'content-desc', 'resource-id', 'class', 'bounds', 'visible-to-user']:
                        current_conditions.append(f'@{key}="{value}"')
                
                if not current_conditions:
                    return None
                
                current_xpath = "//node[" + " and ".join(current_conditions) + "]"
                current_nodes = root.xpath(current_xpath)
                
                if not current_nodes:
                    return None
                
                current_node = current_nodes[0]
                
                # Tìm element trước đó (preceding-sibling)
                prev_conditions = []
                if text is not None:
                    if contains:
                        prev_conditions.append(f'contains(@text, "{text}")')
                    else:
                        prev_conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    if contains:
                        prev_conditions.append(f'contains(@content-desc, "{content_desc}")')
                    else:
                        prev_conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    prev_conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    prev_conditions.append(f'@class="{class_name}"')
                if visible_to_user is not None:
                    visible_value = "true" if visible_to_user else "false"
                    prev_conditions.append(f'@visible-to-user="{visible_value}"')
                
                # Tìm anh em trước đó (lấy cái cuối cùng vì preceding-sibling trả về theo thứ tự ngược)
                prev_xpath = "preceding-sibling::node"
                if prev_conditions:
                    prev_xpath += "[" + " and ".join(prev_conditions) + "]"
                
                prev_nodes = current_node.xpath(prev_xpath)
                if prev_nodes:
                    # Lấy element cuối cùng vì preceding-sibling trả về theo thứ tự ngược
                    return self._element_to_dict(prev_nodes[-1])
                    
            except Exception as e:
                print(f"Lỗi khi tìm element trước đó với lxml: {e}")
        
        return None

    def get_next_element(self, current_element: Dict[str, Any],
                        text: str = None, content_desc: str = None, 
                        resource_id: str = None, class_name: str = None,
                        visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element tiếp theo (anh em) của element hiện tại trên màn hình
        
        Args:
            current_element: Element hiện tại để làm mốc
            text: Text của element tiếp theo cần tìm
            content_desc: Content description của element tiếp theo cần tìm
            resource_id: Resource ID của element tiếp theo cần tìm
            class_name: Class name của element tiếp theo cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element tiếp theo hoặc None nếu không tìm thấy
            
        Example:
            # Tìm button tiếp theo sau button hiện tại
            current_btn = helper.find_element(text="Previous")
            next_btn = helper.get_next_element(current_btn, class_name="android.widget.Button")
        """
        xml_content = self.dump_screen_xml()
        return self.get_next_element_in_xml(xml_content, current_element, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def get_prev_element(self, current_element: Dict[str, Any],
                        text: str = None, content_desc: str = None, 
                        resource_id: str = None, class_name: str = None,
                        visible_to_user: bool = True, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Tìm element trước đó (anh em) của element hiện tại trên màn hình
        
        Args:
            current_element: Element hiện tại để làm mốc
            text: Text của element trước đó cần tìm
            content_desc: Content description của element trước đó cần tìm
            resource_id: Resource ID của element trước đó cần tìm
            class_name: Class name của element trước đó cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Element trước đó hoặc None nếu không tìm thấy
            
        Example:
            # Tìm button trước đó trước button hiện tại
            current_btn = helper.find_element(text="Next")
            prev_btn = helper.get_prev_element(current_btn, class_name="android.widget.Button")
        """
        xml_content = self.dump_screen_xml()
        return self.get_prev_element_in_xml(xml_content, current_element, text, content_desc, resource_id, class_name, visible_to_user, contains)

    def is_element_selected(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được chọn hay không
        """
        return element.get("selected") == "true"

    def wait_for_element(self, text: str = None, content_desc: str = None, 
                        resource_id: str = None, class_name: str = None,
                        visible_to_user: bool = True, timeout: int = 30, 
                        check_interval: int = 1, contains: bool = False) -> Optional[Dict[str, Any]]:
        """
        Chờ đợi cho đến khi một phần tử xuất hiện trên màn hình
        
        Args:
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            timeout: Thời gian chờ tối đa (giây)
            check_interval: Khoảng thời gian giữa các lần kiểm tra (giây)
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            Optional[Dict[str, Any]]: Phần tử tìm thấy hoặc None nếu timeout
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            element = self.find_element(text, content_desc, resource_id, class_name, visible_to_user, contains)
            if element:
                return element
                
            time.sleep(check_interval)
        
        return None

    def wait_to_tap_element(self, text: str = None, content_desc: str = None, 
                           resource_id: str = None, class_name: str = None,
                           visible_to_user: bool = True, timeout: int = 30, 
                           check_interval: int = 1, delay_before_tap: int = 1, contains: bool = False) -> bool:
        """
        Chờ đợi element xuất hiện, delay một khoảng thời gian, rồi tap vào element
        
        Args:
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            timeout: Thời gian chờ tối đa để tìm element (giây)
            check_interval: Khoảng thời gian giữa các lần kiểm tra (giây)
            delay_before_tap: Thời gian delay trước khi tap (giây, mặc định 1 giây)
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Chờ element xuất hiện
            element = self.wait_for_element(
                text=text, 
                content_desc=content_desc, 
                resource_id=resource_id, 
                class_name=class_name,
                visible_to_user=visible_to_user, 
                timeout=timeout, 
                check_interval=check_interval,
                contains=contains
            )
            
            if not element:
                # Tạo thông báo lỗi chi tiết
                criteria = []
                if text:
                    criteria.append(f"text='{text}'")
                if content_desc:
                    criteria.append(f"content_desc='{content_desc}'")
                if resource_id:
                    criteria.append(f"resource_id='{resource_id}'")
                if class_name:
                    criteria.append(f"class_name='{class_name}'")
                
                criteria_str = ", ".join(criteria) if criteria else "không xác định"
                error_msg = f"Không tìm thấy element sau {timeout}s với tiêu chí: {criteria_str}"
                print(error_msg)
                
                return False
            
            # Delay trước khi tap
            if delay_before_tap > 0:
                time.sleep(delay_before_tap)
            
            # Tap vào element
            result = self.tap_element_center(element)
            
            # Kiểm tra kết quả tap
            if result.get("status") == "success":
                element_info = []
                if text:
                    element_info.append(f"text='{text}'")
                if content_desc:
                    element_info.append(f"content_desc='{content_desc}'")
                if resource_id:
                    element_info.append(f"resource_id='{resource_id}'")
                if class_name:
                    element_info.append(f"class_name='{class_name}'")
                
                element_str = ", ".join(element_info) if element_info else "element"
                print(f"Đã tap thành công vào {element_str}")
                return True
            else:
                print(f"Lỗi khi tap element: {result.get('message', 'Không xác định')}")
                return False
            
        except Exception as e:
            error_msg = f"Lỗi trong wait_to_tap_element: {str(e)}"
            print(error_msg)
            return False
            
    def get_element_text(self, element: Dict[str, Any]) -> str:
        """
        Lấy text của một phần tử
        """
        return element.get("text", "")
    
    def get_element_content_desc(self, element: Dict[str, Any]) -> str:
        """
        Lấy content-desc của một phần tử
        """
        return element.get("content-desc", "")
    
    def get_element_resource_id(self, element: Dict[str, Any]) -> str:
        """
        Lấy resource-id của một phần tử
        """
        return element.get("resource-id", "")
    
    def get_element_class(self, element: Dict[str, Any]) -> str:
        """
        Lấy class của một phần tử
        """
        return element.get("class", "")
    
    def get_element_enabled(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được kích hoạt không
        """
        return element.get("enabled") == "true"
    
    def get_element_clickable(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có thể nhấp vào không
        """
        return element.get("clickable") == "true"
    
    def get_element_focused(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được focus không
        """
        return element.get("focused") == "true"
    
    def get_element_checked(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được chọn không (cho checkbox)
        """
        return element.get("checked") == "true"
    
    def get_element_bounds(self, element: Dict[str, Any]) -> Tuple[int, int, int, int]:
        """
        Lấy tọa độ bounds của phần tử dưới dạng tuple (x1, y1, x2, y2)
        Xử lý các trường hợp bounds không hợp lệ (âm, 0, hoặc format sai)
        """
        bounds = element.get("bounds", "[0,0][0,0]")
        
        # Thử các pattern khác nhau để parse bounds
        patterns = [
            r"\[(-?\d+),(-?\d+)\]\[(-?\d+),(-?\d+)\]",  # Pattern hiện tại, cho phép số âm
            r"(-?\d+),(-?\d+),(-?\d+),(-?\d+)",         # Pattern: x1,y1,x2,y2
            r"\[(-?\d+);(-?\d+)\]\[(-?\d+);(-?\d+)\]"   # Pattern với dấu ;
        ]
        
        for pattern in patterns:
            match = re.match(pattern, bounds)
            if match:
                x1, y1, x2, y2 = map(int, match.groups())
                
                # Sửa chữa bounds không hợp lệ
                # Nếu có tọa độ âm, điều chỉnh
                if y1 < 0 or y2 < 0:
                    print(f"Cảnh báo: Bounds có tọa độ y âm: ({x1}, {y1}, {x2}, {y2})")
                    # Nếu y2 âm, có thể element nằm trên thanh status bar
                    if y2 < 0:
                        # Điều chỉnh để element có thể tap được
                        height = abs(y2 - y1)  # Chiều cao element
                        y1 = max(0, y1)  # Đảm bảo y1 >= 0
                        y2 = y1 + height  # Đặt y2 dương
                        print(f"Đã điều chỉnh bounds thành: ({x1}, {y1}, {x2}, {y2})")
                
                if x1 < 0 or x2 < 0:
                    print(f"Cảnh báo: Bounds có tọa độ x âm: ({x1}, {y1}, {x2}, {y2})")
                    # Tương tự với x
                    if x2 < 0:
                        width = abs(x2 - x1)
                        x1 = max(0, x1)
                        x2 = x1 + width
                        print(f"Đã điều chỉnh bounds thành: ({x1}, {y1}, {x2}, {y2})")
                
                # Kiểm tra bounds hợp lệ sau khi điều chỉnh
                if x1 < x2 and y1 < y2 and not (x1 == 0 and y1 == 0 and x2 == 0 and y2 == 0):
                    return (x1, y1, x2, y2)
        
        # Nếu không parse được hoặc tất cả là 0, thử lấy từ thuộc tính khác
        print(f"Cảnh báo: Không thể parse bounds '{bounds}' của element, thử phương pháp khác...")
        
        # Thử lấy từ các thuộc tính khác nếu có
        x = element.get("x", 0)
        y = element.get("y", 0)
        width = element.get("width", 100)  # Default width
        height = element.get("height", 50)  # Default height
        
        if x or y or width != 100 or height != 50:  # Có ít nhất một thuộc tính khác 0/default
            return (x, y, x + width, y + height)
        
        print(f"Cảnh báo: Element bounds không hợp lệ, sử dụng tọa độ mặc định")
        return (0, 0, 100, 50)  # Fallback bounds nhỏ
    
    def get_element_center(self, element: Dict[str, Any]) -> Tuple[int, int]:
        """
        Lấy tọa độ trung tâm của phần tử với xử lý lỗi nâng cao
        """
        if not element:
            print("Cảnh báo: Element là None hoặc rỗng")
            return (0, 0)
            
        x1, y1, x2, y2 = self.get_element_bounds(element)
        
        # Kiểm tra bounds hợp lệ
        if x1 >= x2 or y1 >= y2:
            bounds_str = element.get("bounds", "")
            print(f"Cảnh báo: Bounds không hợp lệ '{bounds_str}': ({x1}, {y1}, {x2}, {y2})")
            
            # Nếu bounds không hợp lệ, trả về tọa độ an toàn ở giữa màn hình
            screen_width, screen_height = self.get_screen_size()
            if screen_width > 0 and screen_height > 0:
                center_x = screen_width // 2
                center_y = screen_height // 2
                return (center_x, center_y)
            else:
                return (540, 960)  # Tọa độ mặc định cho màn hình 1080x1920
        
        center_x = (x1 + x2) // 2
        center_y = (y1 + y2) // 2
        
        # Thêm một chút random để tránh detection (±3 pixels)
        center_x += random.randint(-3, 3)
        center_y += random.randint(-3, 3)
        
        # Đảm bảo tọa độ trong phạm vi màn hình
        screen_width, screen_height = self.get_screen_size()
        if screen_width > 0 and screen_height > 0:
            center_x = max(10, min(center_x, screen_width - 10))  # Margin 10px từ biên
            center_y = max(10, min(center_y, screen_height - 10))
        
        return (center_x, center_y)
    
    def tap_element_center(self, element: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chạm vào phần tử với tính random (sử dụng tap_element bên trong)
        Nếu element quá nhỏ thì mới dùng center, ngược lại sẽ tap random
        """
        if not element:
            return {"status": "error", "message": "Element là None hoặc rỗng"}
            
        try:
            # Kiểm tra visible-to-user trước
            visible = element.get("visible-to-user", "true")
            if visible == "false":
                print("Cảnh báo: Element có visible-to-user='false', vẫn thử tap...")
            
            # Lấy bounds của element để kiểm tra kích thước
            x1, y1, x2, y2 = self.get_element_bounds(element)
            width = x2 - x1
            height = y2 - y1
            
            # Nếu element quá nhỏ (< 20px width hoặc height), dùng center
            if width < 20 or height < 20:
                print(f"Element nhỏ ({width}x{height}px), sử dụng tap center")
                x, y = self.get_element_center(element)
                
                # Kiểm tra tọa độ hợp lệ
                if x <= 0 and y <= 0:
                    bounds_str = element.get("bounds", "")
                    if bounds_str and bounds_str != "[0,0][0,0]":
                        return self.tap_element(bounds_str)
                    else:
                        return {"status": "error", "message": "Không thể xác định tọa độ để tap"}
                
                return self.tap(x, y)
            else:
                # Element đủ lớn, sử dụng tap_element để tap random
                # print(f"Element đủ lớn ({width}x{height}px), sử dụng tap random")  # Bỏ log này
                return self.tap_element(element)
            
        except Exception as e:
            print(f"Lỗi khi tap element: {e}")
            return {"status": "error", "message": f"Lỗi khi tap element: {str(e)}"}
    
    def long_press(self, x: int, y: int, duration: int = 1000) -> Dict[str, Any]:
        """
        Nhấn giữ tại vị trí x,y trong một khoảng thời gian
        """
        params = {
            "x": x,
            "y": y,
            "duration": duration
        }
        return self._make_request("long_press", params=params)
    
    def long_press_element(self, element: Dict[str, Any], duration: int = 1000) -> Dict[str, Any]:
        """
        Nhấn giữ tại trung tâm của phần tử
        """
        x, y = self.get_element_center(element)
        return self.long_press(x, y, duration)
    
    def swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, 
             duration: int = 500) -> Dict[str, Any]:
        """
        Vuốt từ điểm (start_x, start_y) đến điểm (end_x, end_y)
        """
        params = {
            "start_x": start_x,
            "start_y": start_y,
            "end_x": end_x,
            "end_y": end_y,
            "duration": duration
        }
        return self._make_request("swipe", params=params)
    
    def swipe_between_elements(self, start_element: Dict[str, Any], 
                              end_element: Dict[str, Any], 
                              duration: int = 500) -> Dict[str, Any]:
        """
        Vuốt từ phần tử start_element đến phần tử end_element
        """
        start_x, start_y = self.get_element_center(start_element)
        end_x, end_y = self.get_element_center(end_element)
        return self.swipe(start_x, start_y, end_x, end_y, duration)
    
    def wait_for_element_to_disappear(self, text: str = None, content_desc: str = None, 
                                    resource_id: str = None, timeout: int = 30, 
                                    check_interval: int = 1, contains: bool = False) -> bool:
        """
        Chờ đợi cho đến khi một phần tử biến mất khỏi màn hình
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            element = self.find_element(text, content_desc, resource_id, contains=contains)
            if not element:
                return True
                
            time.sleep(check_interval)
        
        return False
    
    def wait_for_any_element(self, elements_to_find: List[Dict[str, str]], 
                           timeout: int = 30, check_interval: int = 1) -> Optional[Dict[str, Any]]:
        """
        Chờ đợi cho đến khi bất kỳ phần tử nào trong danh sách xuất hiện
        
        elements_to_find là danh sách các dict với các khóa: text, content_desc, resource_id
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            for element_criteria in elements_to_find:
                element = self.find_element(
                    element_criteria.get("text"), 
                    element_criteria.get("content_desc"), 
                    element_criteria.get("resource_id")
                )
                if element:
                    return element
                
            time.sleep(check_interval)
        
        return None
    
    def get_screen_size(self) -> Tuple[int, int]:
        """
        Lấy kích thước màn hình (width, height)
        """
        device_info = self.get_device_info()
        if device_info["status"] == "success":
            return (device_info["data"]["screen_width"], device_info["data"]["screen_height"])
        return (0, 0)
    
    def take_screenshot(self, file_path: str = None) -> Dict[str, Any]:
        """
        Chụp ảnh màn hình và lưu vào file_path (nếu được cung cấp)
        """
        params = {}
        if file_path:
            params["file_path"] = file_path
        return self._make_request("screenshot", params=params)
    
    def get_current_activity(self) -> str:
        """
        Lấy tên activity hiện tại
        """
        device_info = self.get_device_info()
        if device_info["status"] == "success" and "current_activity" in device_info["data"]:
            return device_info["data"]["current_activity"]
        return ""
    
    def get_current_package(self) -> str:
        """
        Lấy tên package hiện tại
        """
        response = self._make_request("current-package")
        if response.get("status") == "success" and "data" in response:
            return response["data"].get("package", "")
        return ""
    
    def press_enter(self) -> Dict[str, Any]:
        """
        Nhấn nút Enter bằng ADB keyevent
        """
        try:
            # Ưu tiên sử dụng ADB nếu đã kết nối
            if self.is_adb_connected:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Thực thi ADB keyevent ENTER (66)
                cmd = ["adb"] + device_params + ["shell", "input", "keyevent", "66"]
                result = subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    timeout=10
                )
                
                return {"status": "success", "message": "Đã nhấn Enter bằng ADB"}
            else:
                # Fallback về API nếu không có ADB
                return self._make_request("press_enter")
                
        except subprocess.TimeoutExpired:
            print("Timeout khi gửi ADB keyevent Enter")
            return self._make_request("press_enter")
        except subprocess.SubprocessError as e:
            print(f"Lỗi ADB keyevent Enter: {e}")
            return self._make_request("press_enter")
        except Exception as e:
            print(f"Lỗi không xác định khi gửi ADB keyevent Enter: {e}")
            return self._make_request("press_enter")
    
    def press_back(self) -> Dict[str, Any]:
        """
        Nhấn nút Back
        """
        return self._make_request("press_back")
    
    def press_home(self) -> Dict[str, Any]:
        """
        Nhấn nút Home
        """
        return self._make_request("press_home")
    
    def press_recent_apps(self) -> Dict[str, Any]:
        """
        Nhấn nút Recent Apps
        """
        return self._make_request("press_recent_apps")

    def is_app_installed(self, package_name: str) -> bool:
        """
        Kiểm tra xem ứng dụng đã được cài đặt trên thiết bị chưa
        Ưu tiên sử dụng ADB nếu đã kết nối
        
        Args:
            package_name: Tên package của ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu ứng dụng đã cài đặt, False nếu chưa
        """
        # Ưu tiên sử dụng ADB nếu đã kết nối
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Kiểm tra ứng dụng bằng ADB
                cmd = ["adb"] + device_params + ["shell", f"pm list packages | grep -x package:{package_name}"]
                result = subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Nếu có kết quả, ứng dụng đã được cài đặt
                return package_name in result.stdout
            except subprocess.SubprocessError:
                # Nếu lỗi ADB, sử dụng API HTTP
                pass
        
        # Sử dụng HTTP API
        response = self._make_request("is_installed", {"package": package_name})
        if response["status"] == "success":
            return response["data"].get("is_installed", False)
        return False
        
    def find_elements(self, class_name: str = None, text: str = None, 
                      content_desc: str = None, resource_id: str = None,
                      visible_to_user: bool = True, contains: bool = False) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử theo class_name, text, content_desc, resource_id hoặc visible-to-user
        Đây là một phương thức tiện lợi kết hợp dump_screen_xml và find_all_elements_in_xml
        
        Args:
            class_name: Class name của phần tử cần tìm
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            visible_to_user: True để tìm element hiển thị với user (mặc định), False để tìm element ẩn, None để bỏ qua điều kiện này
            contains: False để tìm kiếm khớp chính xác (mặc định), True để tìm kiếm chứa từ khóa
            
        Returns:
            List[Dict[str, Any]]: Danh sách các phần tử tìm thấy
        """
        # Lấy XML màn hình hiện tại
        screen_xml = self.dump_screen_xml()
        if not screen_xml:
            return []
            
        # Sử dụng find_all_elements_in_xml để tìm các phần tử
        return self.find_all_elements_in_xml(
            screen_xml, 
            text=text, 
            content_desc=content_desc, 
            resource_id=resource_id,
            class_name=class_name,
            visible_to_user=visible_to_user,
            contains=contains
        )

    def open_url(self, url: str, package: str = None) -> Dict[str, Any]:
        """
        Mở một URL trên thiết bị. Hữu ích để mở các link mạng xã hội trực tiếp.
        Trước khi mở link sẽ bấm Home và chờ 2-5 giây.
        
        Args:
            url: URL cần mở (ví dụ: https://www.instagram.com/username/)
            package: Package name của ứng dụng để mở URL (tùy chọn)
            
        Returns:
            Dict[str, Any]: Kết quả từ server
        """
        try:
            # Bước 1: Bấm nút Home trước
            print("Bấm nút Home trước khi mở URL...")
            self.press_home()
            
            # Bước 2: Chờ ngẫu nhiên 2-5 giây
            import random
            import time
            wait_time = random.uniform(2, 5)
            print(f"Chờ {wait_time:.1f}s trước khi mở URL...")
            time.sleep(wait_time)
            
            # Bước 3: Tiến hành mở URL
            print(f"Mở URL: {url}")
            
            # URL encode để tránh lỗi với các ký tự đặc biệt
            # Chỉ encode phần sau domain để giữ nguyên protocol và domain
            if '://' in url:
                parts = url.split('://', 1)
                if len(parts) == 2:
                    protocol = parts[0]
                    remaining = parts[1]
                    
                    if '/' in remaining:
                        domain_parts = remaining.split('/', 1)
                        domain = domain_parts[0]
                        path = domain_parts[1]
                        # Encode path part, nhưng giữ nguyên các ký tự an toàn
                        encoded_path = quote(path, safe='/@:?#[]!$&\'()*+,;=')
                        encoded_url = f"{protocol}://{domain}/{encoded_path}"
                    else:
                        encoded_url = url  # Chỉ có domain, không cần encode
                else:
                    encoded_url = url
            else:
                # Không có protocol, encode toàn bộ
                encoded_url = quote(url, safe='/@:?#[]!$&\'()*+,;=')
            
            params = {"url": encoded_url}
            if package:
                params["package"] = package
            return self._make_request("open_url", params=params)
            
        except Exception as e:
            print(f"Lỗi khi encode URL: {e}")
            # Fallback: gửi URL gốc nếu có lỗi encode
            params = {"url": url}
            if package:
                params["package"] = package
            return self._make_request("open_url", params=params)

    def get_clipboard(self) -> str:
        """
        Lấy nội dung clipboard từ thiết bị
        
        Returns:
            str: Nội dung clipboard hoặc chuỗi rỗng nếu không có nội dung
        """
        response = self._make_request("clipboard")
        if response.get("status") == "success" and response.get("data", {}).get("has_content"):
            return response["data"]["clipboard_text"]
        return ""

    def swipe_left(self) -> Dict[str, Any]:
        """
        Vuốt sang trái (tối ưu cho ngón cái tay phải)
        """
        return self._make_request("swipe_left")

    def swipe_right(self) -> Dict[str, Any]:
        """
        Vuốt sang phải (tối ưu cho ngón cái tay phải)
        """
        return self._make_request("swipe_right")

    def setup_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Thiết lập proxy cho phiên làm việc
        
        Args:
            proxy_config: Cấu hình proxy với các trường:
                - id: ID của proxy
                - type: Loại proxy (ppoe, http, socks5, etc.)
                - host: Địa chỉ server proxy
                - port: Port của proxy
                - username: Username (nếu có)
                - password: Password (nếu có)
                
        Returns:
            bool: True nếu thiết lập thành công, False nếu thất bại
        """
        try:
            proxy_type = proxy_config.get("type", "").lower()
            proxy_id = proxy_config.get("id")
            
            if proxy_type == "ppoe":
                return self._setup_ppoe_proxy(proxy_config)
            elif proxy_type in ["http", "https"]:
                return self._setup_http_proxy(proxy_config)
            elif proxy_type == "socks5":
                return self._setup_socks5_proxy(proxy_config)
            else:
                print(f"Loại proxy không được hỗ trợ: {proxy_type}")
                return False
                
        except Exception as e:
            print(f"Lỗi khi thiết lập proxy: {e}")
            return False
            
    def _setup_ppoe_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Thiết lập proxy PPPoE
        
        Args:
            proxy_config: Cấu hình proxy PPPoE
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            host = proxy_config.get("server_ip")
            proxy_id = proxy_config.get("proxy_id")
            proxy_name = proxy_config.get("name")
            if not host:
                print("Thiếu thông tin host cho proxy PPPoE")
                return False
                
            # Gọi API register trước
            register_url = f"http://{host}/register"
            
            # Lấy local IP từ device info
            device_info = self.get_device_info()
            local_ip = ""
            if device_info.get("status") == "success" and "data" in device_info:
                local_ip = device_info["data"].get("local_ip", "")
            
            try:
                register_data = {"name": proxy_name}
                if local_ip:
                    register_data["local_ip"] = local_ip
                    
                register_response = requests.post(
                    register_url, 
                    json=register_data, 
                    headers={"Content-Type": "application/json"}, 
                    timeout=10
                )
                if register_response.status_code == 200:
                    print(f"Đã đăng ký thành công với proxy PPPoE server: {host}")
                else:
                    print(f"Lỗi khi đăng ký với proxy PPPoE server: {register_response.status_code}")
                    return False
            except requests.RequestException as e:
                print(f"Không thể kết nối đến proxy PPPoE server {host}: {e}")
                return False
                
            # Reset IP proxy
            return self._reset_proxy_ip(proxy_config)
            
        except Exception as e:
            print(f"Lỗi khi thiết lập proxy PPPoE: {e}")
            return False
            
    def _setup_http_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Thiết lập proxy HTTP/HTTPS
        
        Args:
            proxy_config: Cấu hình proxy HTTP
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Đối với HTTP proxy, chỉ cần reset IP
            return self._reset_proxy_ip(proxy_config)
            
        except Exception as e:
            print(f"Lỗi khi thiết lập proxy HTTP: {e}")
            return False
            
    def _setup_socks5_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Thiết lập proxy SOCKS5
        
        Args:
            proxy_config: Cấu hình proxy SOCKS5
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Đối với SOCKS5 proxy, chỉ cần reset IP
            return self._reset_proxy_ip(proxy_config)
            
        except Exception as e:
            print(f"Lỗi khi thiết lập proxy SOCKS5: {e}")
            return False
            
    def _reset_proxy_ip(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Reset IP proxy (logic cũ được chuyển vào đây)
        
        Args:
            proxy_config: Cấu hình proxy
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Logic reset IP proxy sẽ được implement tùy theo loại proxy
            # Hiện tại return True để không block workflow
            proxy_id = proxy_config.get("id")
            proxy_type = proxy_config.get("type", "unknown")
            
            print(f"Reset IP cho proxy {proxy_id} (type: {proxy_type})")
            # Kiểm tra nếu có thông tin reset IP
            reset_ip_link = proxy_config.get("link_reset_ip")
            ppoe_name = proxy_config.get("ppoe_name")

            if reset_ip_link and ppoe_name:
                try:
                    # Gửi POST request để reset IP
                    reset_data = {"ppoe_name": ppoe_name}
                    reset_response = requests.post(
                        reset_ip_link, 
                        json=reset_data, 
                        headers={"Content-Type": "application/json"}, 
                        timeout=10
                    )
                    
                    if reset_response.status_code == 200:
                        print(f"Đã reset IP thành công cho proxy {ppoe_name}")
                        return True
                    else:
                        print(f"Lỗi khi reset IP: HTTP {reset_response.status_code}")
                        return False
                        
                except requests.RequestException as e:
                    print(f"Lỗi khi gửi request reset IP: {e}")
                    return False
            else:
                print("Thiếu thông tin link_reset_ip hoặc proxy_name")
            # TODO: Implement logic reset IP cụ thể cho từng loại proxy
            # Ví dụ: gọi API reset IP, hoặc thực hiện các lệnh cần thiết
            
            return True
            
        except Exception as e:
            print(f"Lỗi khi reset IP proxy: {e}")
            return False

    def reset_proxy_ip(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Phương thức public để reset IP proxy (để tương thích với code cũ)
        
        Args:
            proxy_config: Cấu hình proxy
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        return self._reset_proxy_ip(proxy_config)

    def unregister_proxy(self, proxy_config: Dict[str, Any] = None) -> bool:
        """
        Hủy đăng ký proxy sau khi sử dụng xong
        
        Args:
            proxy_config: Cấu hình proxy (tùy chọn, có thể lấy từ database nếu không truyền)
                
        Returns:
            bool: True nếu hủy đăng ký thành công, False nếu thất bại
        """
        try:
            # Nếu không truyền proxy_config, có thể lấy từ database hoặc context hiện tại
            if not proxy_config:
                print("Không có proxy config để unregister")
                return True  # Coi như thành công nếu không có gì để unregister
                
            proxy_type = proxy_config.get("type", "").lower()
            proxy_id = proxy_config.get("id")
            
            if proxy_type == "ppoe":
                return self._unregister_ppoe_proxy(proxy_config)
            elif proxy_type in ["http", "https"]:
                return self._unregister_http_proxy(proxy_config)
            elif proxy_type == "socks5":
                return self._unregister_socks5_proxy(proxy_config)
            else:
                print(f"Loại proxy không cần unregister hoặc không được hỗ trợ: {proxy_type}")
                return True
                
        except Exception as e:
            print(f"Lỗi khi hủy đăng ký proxy: {e}")
            return False
            
    def _unregister_ppoe_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Hủy đăng ký proxy PPPoE
        
        Args:
            proxy_config: Cấu hình proxy PPPoE
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            host = proxy_config.get("server_ip")
            proxy_id = proxy_config.get("proxy_id")
            proxy_name = proxy_config.get("name")
            
            if not host:
                print("Thiếu thông tin host cho proxy PPPoE, bỏ qua unregister")
                return True
                
            # Gọi API unregister
            unregister_url = f"http://{host}/unregister"
            
            # Lấy local IP từ device info
            device_info = self.get_device_info()
            local_ip = ""
            if device_info.get("status") == "success" and "data" in device_info:
                local_ip = device_info["data"].get("local_ip", "")
            
            try:
                unregister_data = {"name": proxy_name}
                if local_ip:
                    unregister_data["local_ip"] = local_ip
                    
                unregister_response = requests.post(
                    unregister_url, 
                    json=unregister_data, 
                    headers={"Content-Type": "application/json"}, 
                    timeout=10
                )
                if unregister_response.status_code == 200:
                    print(f"Đã hủy đăng ký thành công với proxy PPPoE server: {host}")
                    return True
                else:
                    print(f"Lỗi khi hủy đăng ký với proxy PPPoE server: {unregister_response.status_code}")
                    return False
            except requests.RequestException as e:
                print(f"Không thể kết nối đến proxy PPPoE server {host} để unregister: {e}")
                return False
                
        except Exception as e:
            print(f"Lỗi khi hủy đăng ký proxy PPPoE: {e}")
            return False
            
    def _unregister_http_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Hủy đăng ký proxy HTTP/HTTPS
        
        Args:
            proxy_config: Cấu hình proxy HTTP
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # HTTP proxy thường không cần unregister đặc biệt
            proxy_id = proxy_config.get("id")
            print(f"Hủy đăng ký proxy HTTP {proxy_id} (không cần thao tác đặc biệt)")
            return True
            
        except Exception as e:
            print(f"Lỗi khi hủy đăng ký proxy HTTP: {e}")
            return False
            
    def _unregister_socks5_proxy(self, proxy_config: Dict[str, Any]) -> bool:
        """
        Hủy đăng ký proxy SOCKS5
        
        Args:
            proxy_config: Cấu hình proxy SOCKS5
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # SOCKS5 proxy thường không cần unregister đặc biệt
            proxy_id = proxy_config.get("id")
            print(f"Hủy đăng ký proxy SOCKS5 {proxy_id} (không cần thao tác đặc biệt)")
            return True
            
        except Exception as e:
            print(f"Lỗi khi hủy đăng ký proxy SOCKS5: {e}")
            return False

    def debug_element_bounds(self, element: Dict[str, Any]) -> None:
        """
        Debug thông tin bounds của element để kiểm tra xem có tap được không
        """
        if not element:
            print("DEBUG: Element is None or empty")
            return
            
        print("=== DEBUG ELEMENT BOUNDS ===")
        bounds_str = element.get("bounds", "")
        print(f"Original bounds string: '{bounds_str}'")
        
        # Test get_element_bounds
        x1, y1, x2, y2 = self.get_element_bounds(element)
        print(f"Parsed bounds: ({x1}, {y1}, {x2}, {y2})")
        
        # Test get_element_center
        center_x, center_y = self.get_element_center(element)
        print(f"Calculated center: ({center_x}, {center_y})")
        
        # Test với ví dụ cụ thể
        print("\n--- Testing with example bounds [36,0][84,-30] ---")
        test_element = {"bounds": "[36,0][84,-30]", "content-desc": "Tìm kiếm"}
        
        test_x1, test_y1, test_x2, test_y2 = self.get_element_bounds(test_element)
        print(f"Test parsed bounds: ({test_x1}, {test_y1}, {test_x2}, {test_y2})")
        
        test_center_x, test_center_y = self.get_element_center(test_element)
        print(f"Test calculated center: ({test_center_x}, {test_center_y})")
        
        # Test tap_element
        print("\n--- Testing tap_element ---")
        result = self.tap_element(test_element)
        print(f"Tap result: {result}")
        
        print("=== END DEBUG ===")

    def download_image(self, server: str = "http://img.dndvina.com", count: int = 1) -> bool:
        """
        Tải ảnh từ server về thiết bị thông qua helper service
        
        Args:
            server: Server địa chỉ (nếu None thì đọc từ config db, mặc định "http://img.dndvina.com")
            count: Số lượng ảnh cần tải (mặc định 1)
            
        Returns:
            bool: True nếu tải thành công, False nếu thất bại
        """
        try:
            # Lấy server từ database nếu không truyền vào
            
            # Đảm bảo server có protocol
            if not server.startswith(("http://", "https://")):
                server = f"http://{server}"
            
            # Xây dựng URL dựa trên số lượng ảnh
            if count == 1:
                # Trường hợp tải 1 ảnh - sử dụng endpoint random-avatar
                image_url = f"{server}/random-avatar"
            else:
                # Trường hợp tải nhiều ảnh - sử dụng endpoint get-similar-images
                image_url = f"{server}/get-similar-images?count={count}"
            
            # Sử dụng _make_request để tận dụng cơ chế retry và error handling có sẵn
            result = self._make_request("download-image", params={"url": image_url})
            
            # Xử lý response format thực tế
            # Response: {"data": {"success": true, "message": "...", "data": {...}}, "message": "...", "status": "success"}
            if isinstance(result, dict) and result.get("status") == "success":
                # Kiểm tra data.success và data.message
                data_section = result.get("data", {})
                success = data_section.get("success", False)
                message = data_section.get("message", "")
                
                return success and "thành công" in message
            
            return False
            
        except Exception as e:
            print(f"Lỗi khi tải ảnh: {e}")
            return False

# Test function for the problematic element
def test_problematic_element():
    """
    Test function để kiểm tra element có bounds âm
    """
    helper = HelperService()
    
    # Element từ ví dụ của user
    problematic_element = {
        "class": "android.widget.ImageView",
        "package": "com.ss.android.ugc.trill", 
        "resource-id": "com.ss.android.ugc.trill:id/del",
        "text": "null",
        "content-desc": "Tìm kiếm",
        "bounds": "[36,0][84,-30]",
        "clickable": "false",
        "enabled": "true",
        "visible-to-user": "false"
    }
    
    print("Testing problematic element with bounds [36,0][84,-30]")
    helper.debug_element_bounds(problematic_element)
    
    print("\nTrying to tap the element...")
    result = helper.tap_element_center(problematic_element)
    print(f"Final tap result: {result}")

if __name__ == "__main__":
    test_problematic_element()
    
    # Ví dụ sử dụng
    helper = HelperService()
    
    # Lấy kích thước màn hình
    width, height = helper.get_screen_size()
    print(f"Kích thước màn hình: {width}x{height}")
    
    # Mở TikTok
    helper.open_app("com.ss.android.ugc.trill")
    
    # Chờ đợi cho đến khi nút "Trang chủ" hoặc nút "Khám phá" xuất hiện
    elements_to_find = [
        {"content_desc": "Trang chủ"},
        {"content_desc": "Khám phá"}
    ]
    
    element = helper.wait_for_any_element(elements_to_find)
    
    if element:
        print(f"Đã tìm thấy phần tử: {helper.get_element_content_desc(element)}")
        helper.tap_element_center(element)
    else:
        print("Không tìm thấy phần tử nào sau thời gian chờ")').decode('utf-8'))
