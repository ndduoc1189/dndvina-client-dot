import base64
exec(base64.b64decode('"""
Quick test script - Gọi trực tiếp các hàm để debug nhanh
Chỉ cần import và gọi hàm, không cần menu
"""

import sys
import os

# Thêm đường dẫn root vào sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from jobs.instagram_job import InstagramJob
from services.db_service import DatabaseService
from services.helper_service import HelperService
from services.golike_service import GoLikeService

# Khởi tạo global job instance
_job = None

def init_job():
    """Khởi tạo Instagram job một lần duy nhất"""
    global _job
    if _job is None:
        try:
            db_service = DatabaseService()
            helper_service = HelperService()
            golike_service = GoLikeService(db_service, helper_service)
            
            _job = InstagramJob(
                db_service=db_service,
                helper_service=helper_service,
                golike_service=golike_service
            )
            print("✅ Instagram Job initialized!")
        except Exception as e:
            print(f"❌ Error initializing job: {e}")
            _job = None
    return _job

def post_newfeed(username="test_user"):
    """
    Gọi hàm post_newfeed
    
    Args:
        username: Username để test (mặc định "test_user")
    """
    job = init_job()
    if not job:
        return False
        
    account = {
        "id": 1,
        "unique_username": username,
        "nickname": f"Test {username}",
        "status": "active",
        "is_login": True
    }
    
    print(f"🔥 Calling post_newfeed for: {username}")
    result = job.post_newfeed(account)
    print(f"Result: {'✅ Success' if result else '❌ Failed'}")
    return result

def execute_job(job_type="follow", link="https://instagram.com/test_account", username="test_user"):
    """
    Gọi hàm execute_job
    
    Args:
        job_type: "follow" hoặc "like"
        link: Link Instagram
        username: Username để test
    """
    job = init_job()
    if not job:
        return None
        
    account = {
        "id": 1,
        "unique_username": username,
        "golike_id": "12345"
    }
    
    job_data = {
        "id": "test_job_123",
        "type": job_type,
        "link": link
    }
    
    print(f"🔥 Calling execute_job: {job_type} -> {link}")
    result = job.execute_job(account, job_data)
    print(f"Result: {result}")
    return result

def follow_user(profile_link, username="test_user"):
    """
    Gọi hàm follow user
    
    Args:
        profile_link: Link profile Instagram
        username: Username để test
    """
    job = init_job()
    if not job:
        return 2
        
    print(f"🔥 Calling _perform_follow_job: {profile_link}")
    result = job._perform_follow_job(profile_link)
    
    status_map = {
        0: "Chưa thực hiện",
        1: "✅ Thành công",
        2: "❌ Thất bại",
        3: "⚠️ Bị unfollow", 
        4: "⏳ Đang chờ",
        5: "📝 Yêu cầu chờ duyệt",
        6: "🚫 Bị khóa"
    }
    
    print(f"Result: {result} - {status_map.get(result, 'Unknown')}")
    return result

def like_post(post_link, username="test_user"):
    """
    Gọi hàm like post
    
    Args:
        post_link: Link bài đăng Instagram
        username: Username để test
    """
    job = init_job()
    if not job:
        return 2
        
    print(f"🔥 Calling _perform_like_job: {post_link}")
    result = job._perform_like_job(post_link)
    
    status_map = {
        0: "Chưa thực hiện",
        1: "✅ Thành công",
        2: "❌ Thất bại",
        3: "⚠️ Bị unlike",
        4: "⏳ Đang chờ",
        5: "📝 Yêu cầu chờ duyệt", 
        6: "🚫 Bị khóa"
    }
    
    print(f"Result: {result} - {status_map.get(result, 'Unknown')}")
    return result

def get_accounts():
    """Lấy danh sách tài khoản từ thiết bị"""
    job = init_job()
    if not job:
        return []
        
    print("🔥 Calling get_accounts_from_device...")
    accounts = job.get_accounts_from_device()
    print(f"Found {len(accounts)} accounts:")
    for i, acc in enumerate(accounts, 1):
        print(f"  {i}. {acc.get('unique_username', 'Unknown')}")
    return accounts

def is_home():
    """Kiểm tra có đang ở home screen không"""
    job = init_job()
    if not job:
        return False
        
    print("🔥 Calling is_home_screen...")
    result = job.is_home_screen()
    print(f"Is home: {'✅ Yes' if result else '❌ No'}")
    return result

def go_home():
    """Về trang chủ"""
    job = init_job()
    if not job:
        return False
        
    print("🔥 Calling back_to_home...")
    result = job.back_to_home()
    print(f"Back to home: {'✅ Success' if result else '❌ Failed'}")
    return result

def swipe_feed(username="test_user"):
    """Vuốt feed Instagram"""
    job = init_job()
    if not job:
        return False
        
    account = {"unique_username": username}
    print(f"🔥 Calling _care_swipe_feed for: {username}")
    result = job._care_swipe_feed(account)
    print(f"Swipe feed: {'✅ Success' if result else '❌ Failed'}")
    return result

def watch_reels(username="test_user"):
    """Xem reels Instagram"""
    job = init_job()
    if not job:
        return False
        
    account = {"unique_username": username}
    print(f"🔥 Calling _care_watch_reels for: {username}")
    result = job._care_watch_reels(account)
    print(f"Watch reels: {'✅ Success' if result else '❌ Failed'}")
    return result

# Helper functions for UI testing
def find_child_elements(parent_element, text=None, content_desc=None, resource_id=None, class_name=None):
    """
    Tìm tất cả element con của một element cha
    
    Args:
        parent_element: Element cha
        text: Text của element con cần tìm
        content_desc: Content description của element con cần tìm  
        resource_id: Resource ID của element con cần tìm
        class_name: Class name của element con cần tìm (ví dụ: "android.widget.GridView")
    
    Returns:
        List[Dict]: Danh sách element con tìm thấy
    """
    helper = init_helper()
    if not helper:
        return []
    
    try:
        return helper.find_child_elements(
            parent_element, 
            text=text, 
            content_desc=content_desc, 
            resource_id=resource_id, 
            class_name=class_name
        )
    except Exception as e:
        print(f"❌ Error finding child elements: {e}")
        return []

def find_child_element(parent_element, text=None, content_desc=None, resource_id=None, class_name=None):
    """
    Tìm element con đầu tiên của một element cha
    
    Args:
        parent_element: Element cha
        text: Text của element con cần tìm
        content_desc: Content description của element con cần tìm
        resource_id: Resource ID của element con cần tìm
        class_name: Class name của element con cần tìm
    
    Returns:
        Dict or None: Element con đầu tiên tìm thấy
    """
    helper = init_helper()
    if not helper:
        return None
    
    try:
        return helper.find_child_element(
            parent_element, 
            text=text, 
            content_desc=content_desc, 
            resource_id=resource_id, 
            class_name=class_name
        )
    except Exception as e:
        print(f"❌ Error finding child element: {e}")
        return None

def init_helper():
    """Initialize helper service"""
    try:
        from services.helper_service import HelperService
        return HelperService()
    except Exception as e:
        print(f"❌ Error initializing helper: {e}")
        return None

# Shortcut aliases để gọi nhanh hơn
pnf = post_newfeed           # pnf("username")
ej = execute_job             # ej("follow", "link", "username") 
fu = follow_user             # fu("profile_link")
lp = like_post              # lp("post_link")
ga = get_accounts           # ga()
ih = is_home                # ih()
gh = go_home                # gh()
sf = swipe_feed             # sf("username")
wr = watch_reels            # wr("username")
# Helper shortcuts
fce = find_child_elements    # fce(parent, class_name="android.widget.GridView")
fcel = find_child_element    # fcel(parent, class_name="android.widget.TextView")

if __name__ == '__main__':
    print("🚀 QUICK INSTAGRAM TEST")
    print("=" * 40)
    print("Available functions:")
    print("  post_newfeed('username')       or pnf('username')")
    print("  execute_job('follow', 'link')  or ej('follow', 'link')")
    print("  follow_user('profile_link')    or fu('profile_link')")
    print("  like_post('post_link')         or lp('post_link')")
    print("  get_accounts()                 or ga()")
    print("  is_home()                      or ih()")
    print("  go_home()                      or gh()")
    print("  swipe_feed('username')         or sf('username')")
    print("  watch_reels('username')        or wr('username')")
    print("  find_child_elements(parent, class_name='...')  or fce(parent, class_name='...')")
    print("  find_child_element(parent, class_name='...')   or fcel(parent, class_name='...')")
    print("\nExample:")
    print("  python -c \"from quick_test import *; post_newfeed('my_account')\"")
    print("  python -c \"from quick_test import *; pnf('test123')\"")
    print("  python -c \"from quick_test import *; helper=init_helper(); parent=helper.find_element(class_name='android.widget.ViewGroup'); grids=fce(parent, class_name='android.widget.GridView')\"")
    post_newfeed('username')  ').decode('utf-8'))
