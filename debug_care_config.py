import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKRGVidWcgc2NyaXB0IMSR4buDIGtp4buDbSB0cmEgY29uZmlnIFNtYXJ0IENhcmUgdHJvbmcgZGF0YWJhc2UKIiIiCmltcG9ydCBzeXMKaW1wb3J0IG9zCnN5cy5wYXRoLmFwcGVuZChvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkpCgpmcm9tIHNlcnZpY2VzLmRiX3NlcnZpY2UgaW1wb3J0IERhdGFiYXNlU2VydmljZQppbXBvcnQgY29uZmlnCmltcG9ydCB0aW1lCgpkZWYgZGVidWdfY2FyZV9jb25maWcoKToKICAgIHByaW50KCI9PT0gREVCVUcgU01BUlQgQ0FSRSBDT05GSUcgPT09IikKICAgIAogICAgIyBLaOG7n2kgdOG6oW8gZGF0YWJhc2UKICAgIGRiID0gRGF0YWJhc2VTZXJ2aWNlKCkKICAgIAogICAgIyAxLiBDb25maWcgdHJvbmcgZmlsZSBjb25maWcucHkKICAgIHByaW50KCJcbjEuIENPTkZJRy5QWSBWQUxVRVM6IikKICAgIHByaW50KGYiICAgU01BUlRfQ0FSRV9FTkFCTEVEOiB7Y29uZmlnLlNNQVJUX0NBUkVfRU5BQkxFRH0iKQogICAgcHJpbnQoZiIgICBTTUFSVF9DQVJFX0lOVEVSVkFMX0hPVVJTOiB7Y29uZmlnLlNNQVJUX0NBUkVfSU5URVJWQUxfSE9VUlN9IikKICAgIHByaW50KGYiICAgU01BUlRfQ0FSRV9DSEFOQ0VfUEVSQ0VOVDoge2NvbmZpZy5TTUFSVF9DQVJFX0NIQU5DRV9QRVJDRU5UfSIpCiAgICAKICAgICMgMi4gQ29uZmlnIHRyb25nIGRhdGFiYXNlCiAgICBwcmludCgiXG4yLiBEQVRBQkFTRSBWQUxVRVM6IikKICAgIGVuYWJsZV9jYXJlID0gZGIuZ2V0X2RldmljZV9jb25maWcoImVuYWJsZV9jYXJlIikKICAgIGNhcmVfaW50ZXJ2YWxfaG91cnMgPSBkYi5nZXRfZGV2aWNlX2NvbmZpZygiY2FyZV9pbnRlcnZhbF9ob3VycyIpCiAgICBjYXJlX2NoYW5jZV9wZXJjZW50ID0gZGIuZ2V0X2RldmljZV9jb25maWcoImNhcmVfY2hhbmNlX3BlcmNlbnQiKQogICAgCiAgICBwcmludChmIiAgIGVuYWJsZV9jYXJlOiB7ZW5hYmxlX2NhcmV9IikKICAgIHByaW50KGYiICAgY2FyZV9pbnRlcnZhbF9ob3Vyczoge2NhcmVfaW50ZXJ2YWxfaG91cnN9IikKICAgIHByaW50KGYiICAgY2FyZV9jaGFuY2VfcGVyY2VudDoge2NhcmVfY2hhbmNlX3BlcmNlbnR9IikKICAgIAogICAgIyAzLiBTbyBzw6FuaAogICAgcHJpbnQoIlxuMy4gQ09NUEFSSVNPTjoiKQogICAgaWYgY2FyZV9pbnRlcnZhbF9ob3VycyA9PSBjb25maWcuU01BUlRfQ0FSRV9JTlRFUlZBTF9IT1VSUzoKICAgICAgICBwcmludCgiICAg4pyFIGNhcmVfaW50ZXJ2YWxfaG91cnMgTUFUQ0giKQogICAgZWxzZToKICAgICAgICBwcmludChmIiAgIOKdjCBjYXJlX2ludGVydmFsX2hvdXJzIE1JU01BVENIOiBEQj17Y2FyZV9pbnRlcnZhbF9ob3Vyc30sIENvbmZpZz17Y29uZmlnLlNNQVJUX0NBUkVfSU5URVJWQUxfSE9VUlN9IikKICAgIAogICAgaWYgY2FyZV9jaGFuY2VfcGVyY2VudCA9PSBjb25maWcuU01BUlRfQ0FSRV9DSEFOQ0VfUEVSQ0VOVDoKICAgICAgICBwcmludCgiICAg4pyFIGNhcmVfY2hhbmNlX3BlcmNlbnQgTUFUQ0giKSAKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiIgICDinYwgY2FyZV9jaGFuY2VfcGVyY2VudCBNSVNNQVRDSDogREI9e2NhcmVfY2hhbmNlX3BlcmNlbnR9LCBDb25maWc9e2NvbmZpZy5TTUFSVF9DQVJFX0NIQU5DRV9QRVJDRU5UfSIpCiAgICAKICAgICMgNC4gS2nhu4NtIHRyYSBpbnRlcnZhbCBjYWxjdWxhdGlvbgogICAgcHJpbnQoIlxuNC4gSU5URVJWQUwgQ0FMQ1VMQVRJT046IikKICAgIGludGVydmFsX3NlY29uZHMgPSBjYXJlX2ludGVydmFsX2hvdXJzICogMzYwMCBpZiBjYXJlX2ludGVydmFsX2hvdXJzIGVsc2UgMAogICAgcHJpbnQoZiIgICBjYXJlX2ludGVydmFsX2hvdXJzOiB7Y2FyZV9pbnRlcnZhbF9ob3Vyc31oIikKICAgIHByaW50KGYiICAgaW50ZXJ2YWxfc2Vjb25kczoge2ludGVydmFsX3NlY29uZHN9cyIpCiAgICBwcmludChmIiAgIGludGVydmFsX21pbnV0ZXM6IHtpbnRlcnZhbF9zZWNvbmRzLzYwOi4xZn1tIikKICAgIAogICAgIyA1LiBLaeG7g20gdHJhIHTDoGkga2hv4bqjbiBjw7MgbGFzdF9jYXJlX3RpbWUKICAgIHByaW50KCJcbjUuIEFDQ09VTlQgQ0FSRSBUSU1FUzoiKQogICAgZW5hYmxlZF9hcHBzID0gZGIuZ2V0X2RldmljZV9jb25maWcoImVuYWJsZWRfYXBwcyIsIGNvbmZpZy5FTkFCTEVEX0FQUFMpCiAgICBjdXJyZW50X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgCiAgICBmb3IgYXBwX25hbWUgaW4gZW5hYmxlZF9hcHBzOgogICAgICAgIGFjY291bnRzID0gZGIuZ2V0X2FjY291bnRzKGFwcD1hcHBfbmFtZSkKICAgICAgICBwcmludChmIlxuICAge2FwcF9uYW1lLnVwcGVyKCl9IGFjY291bnRzOiIpCiAgICAgICAgCiAgICAgICAgZm9yIGFjY291bnQgaW4gYWNjb3VudHM6CiAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsICdVbmtub3duJykKICAgICAgICAgICAgbGFzdF9jYXJlX3RpbWUgPSBhY2NvdW50LmdldCgnbGFzdF9jYXJlX3RpbWUnLCAwKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbGFzdF9jYXJlX3RpbWUgPiAwOgogICAgICAgICAgICAgICAgdGltZV9zaW5jZV9jYXJlID0gY3VycmVudF90aW1lIC0gbGFzdF9jYXJlX3RpbWUKICAgICAgICAgICAgICAgIHRpbWVfc2luY2VfaG91cnMgPSB0aW1lX3NpbmNlX2NhcmUgLyAzNjAwCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw7MgxJHhu6cgaW50ZXJ2YWwga2jDtG5nCiAgICAgICAgICAgICAgICBpZiBjYXJlX2ludGVydmFsX2hvdXJzIGFuZCB0aW1lX3NpbmNlX2NhcmUgPj0gaW50ZXJ2YWxfc2Vjb25kczoKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAi4pyFIMSQ4bumIElOVEVSVkFMIgogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcgPSAoaW50ZXJ2YWxfc2Vjb25kcyAtIHRpbWVfc2luY2VfY2FyZSkgLyAzNjAwIGlmIGNhcmVfaW50ZXJ2YWxfaG91cnMgZWxzZSAwCiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gZiLinYwgQ0jGr0EgxJDhu6YgKGPDsm4ge3JlbWFpbmluZzouMWZ9aCkiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHByaW50KGYiICAgICAtIHt1c2VybmFtZX06IHt0aW1lX3NpbmNlX2hvdXJzOi4xZn1oIGFnbywge3N0YXR1c30iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiIgICAgIC0ge3VzZXJuYW1lfTogQ0jGr0EgQ0FSRSBCQU8gR0nhu5wgKGxhc3RfY2FyZV90aW1lPTApIikKCmRlZiBmaXhfY29uZmlnX2lmX25lZWRlZCgpOgogICAgcHJpbnQoIlxuPT09IEZJWCBDT05GSUcgSUYgTkVFREVEID09PSIpCiAgICAKICAgIGRiID0gRGF0YWJhc2VTZXJ2aWNlKCkKICAgIAogICAgIyBD4bqtcCBuaOG6rXQgY29uZmlnIHThu6sgY29uZmlnLnB5IG7hur91IGPhuqduCiAgICB1cGRhdGVzID0ge30KICAgIAogICAgZW5hYmxlX2NhcmUgPSBkYi5nZXRfZGV2aWNlX2NvbmZpZygiZW5hYmxlX2NhcmUiKQogICAgaWYgZW5hYmxlX2NhcmUgIT0gY29uZmlnLlNNQVJUX0NBUkVfRU5BQkxFRDoKICAgICAgICB1cGRhdGVzWyJlbmFibGVfY2FyZSJdID0gY29uZmlnLlNNQVJUX0NBUkVfRU5BQkxFRAogICAgCiAgICBjYXJlX2ludGVydmFsX2hvdXJzID0gZGIuZ2V0X2RldmljZV9jb25maWcoImNhcmVfaW50ZXJ2YWxfaG91cnMiKQogICAgaWYgY2FyZV9pbnRlcnZhbF9ob3VycyAhPSBjb25maWcuU01BUlRfQ0FSRV9JTlRFUlZBTF9IT1VSUzoKICAgICAgICB1cGRhdGVzWyJjYXJlX2ludGVydmFsX2hvdXJzIl0gPSBjb25maWcuU01BUlRfQ0FSRV9JTlRFUlZBTF9IT1VSUwogICAgCiAgICBjYXJlX2NoYW5jZV9wZXJjZW50ID0gZGIuZ2V0X2RldmljZV9jb25maWcoImNhcmVfY2hhbmNlX3BlcmNlbnQiKQogICAgaWYgY2FyZV9jaGFuY2VfcGVyY2VudCAhPSBjb25maWcuU01BUlRfQ0FSRV9DSEFOQ0VfUEVSQ0VOVDoKICAgICAgICB1cGRhdGVzWyJjYXJlX2NoYW5jZV9wZXJjZW50Il0gPSBjb25maWcuU01BUlRfQ0FSRV9DSEFOQ0VfUEVSQ0VOVAogICAgCiAgICBpZiB1cGRhdGVzOgogICAgICAgIHByaW50KGYiQ+G6rXAgbmjhuq10IGNvbmZpZzoge3VwZGF0ZXN9IikKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiB1cGRhdGVzLml0ZW1zKCk6CiAgICAgICAgICAgIGRiLnNldF9kZXZpY2VfY29uZmlnKGtleSwgdmFsdWUpCiAgICAgICAgcHJpbnQoIuKchSDEkMOjIGPhuq1wIG5o4bqtdCBjb25maWcgdOG7qyBjb25maWcucHkiKQogICAgZWxzZToKICAgICAgICBwcmludCgi4pyFIENvbmZpZyDEkcOjIMSR4buTbmcgYuG7mSB24bubaSBjb25maWcucHkiKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGRlYnVnX2NhcmVfY29uZmlnKCkKICAgIGZpeF9jb25maWdfaWZfbmVlZGVkKCkKICAgIHByaW50KCJcbj09PSBDaOG6oXkgbOG6oWkgZGVidWcgc2F1IGtoaSBmaXggPT09IikKICAgIGRlYnVnX2NhcmVfY29uZmlnKCkK').decode('utf-8'))
