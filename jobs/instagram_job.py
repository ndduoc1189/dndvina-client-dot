import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IG9zCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsCmZyb20gam9icy5qb2JfYmFzZSBpbXBvcnQgQmFzZUpvYgoKY2xhc3MgSW5zdGFncmFtSm9iKEJhc2VKb2IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSkKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gImNvbS5pbnN0YWdyYW0uYW5kcm9pZCIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gImluc3RhZ3JhbSIKICAgICAgICAKICAgICAgICAjIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnIGNobyBJbnN0YWdyYW0KICAgICAgICBzZWxmLl9kZWZhdWx0X2NvbmZpZy51cGRhdGUoewogICAgICAgICAgICAiYWN0aW9uX3dlaWdodHMiOiB7CiAgICAgICAgICAgICAgICAibmV3c2ZlZWQiOiAxOCwgICAgICAjIDE4JSB2deG7kXQgZmVlZCAoY2FvIGjGoW4gdsOsIEluc3RhZ3JhbSBjw7Mgbmhp4buBdSBwb3N0cykKICAgICAgICAgICAgICAgICJyZWVscyI6IDIyLCAgICAgICAgICMgMjIlIHhlbSByZWVscwogICAgICAgICAgICAgICAgIm5vdGlmaWNhdGlvbiI6IDEwLCAgICMgMTAlIHhlbSB0aMO0bmcgYsOhbwogICAgICAgICAgICAgICAgInByb2ZpbGUiOiAxNSwgICAgICAgIyAxNSUgeGVtIHByb2ZpbGUgIAogICAgICAgICAgICAgICAgImpvYiI6IDIwLCAgICAgICAgICAgIyAyMCUgbMOgbSBqb2IgKGdp4buvIG5ndXnDqm4pCiAgICAgICAgICAgICAgICAiZXhwbG9yZSI6IDgsICAgICAgICAjIDglIGtow6FtIHBow6EgKHRo4bqlcCBoxqFuIFRpa1RvaykKICAgICAgICAgICAgICAgICJwb3N0IjogNSwgICAgICAgICAgICMgNSUgxJHEg25nIGLDoGkgKMOtdCBkw7luZyB0cm9uZyBJbnN0YWdyYW0pCiAgICAgICAgICAgICAgICAic3RvcnkiOiA1ICAgICAgICAgICAjIDUlIHhlbSBzdG9yaWVzIChhY3Rpb24gcmnDqm5nIGPhu6dhIEluc3RhZ3JhbSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlbGF5X3Bvc3RfdmlkZW9fbWludXRlIjogMTQ0MCwgICMgVGjhu51pIGdpYW4gY2jhu50gZ2nhu69hIGPDoWMgbOG6p24gxJHEg25nIOG6o25oIChwaMO6dCkgLSBt4bq3YyDEkeG7i25oIDI0IGdp4budCiAgICAgICAgfSkKICAgIAogICAgZGVmIGdldF9zdXBwb3J0ZWRfYWN0aW9ucyhzZWxmKSAtPiBMaXN0W3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgT3ZlcnJpZGUgZGFuaCBzw6FjaCBhY3Rpb25zIMSRxrDhu6NjIEluc3RhZ3JhbSBo4buXIHRy4bujCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtzdHJdOiBEYW5oIHPDoWNoIGFjdGlvbnMgSW5zdGFncmFtIGjhu5cgdHLhu6MKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmdldF9hY3Rpb25fd2VpZ2h0cygpLmtleXMoKSkKICAgICAgICAKICAgIGRlZiBkdW1wX3NjcmVlbl93aXRoX3JldHJ5KHNlbGYsIG1heF9yZXRyaWVzPTMsIHdhaXRfYmV0d2Vlbl9yZXRyaWVzPTAuNSk6CiAgICAgICAgIiIiCiAgICAgICAgRHVtcCBtw6BuIGjDrG5oIFhNTCB24bubaSBjxqEgY2jhur8gdGjhu60gbOG6oWkgbuG6v3UgZ+G6t3AgbOG7l2kKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBtYXhfcmV0cmllczogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICAgICAgd2FpdF9iZXR3ZWVuX3JldHJpZXM6IFRo4budaSBnaWFuIGNo4budIGdp4buvYSBjw6FjIGzhuqduIHRo4butIChnacOieSkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBYTUwgY+G7p2EgbcOgbiBow6xuaCBob+G6t2MgTm9uZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfcmV0cmllcyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgxJDhu6NpIFVJIOG7lW4gxJHhu4tuaAogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXRfYmV0d2Vlbl9yZXRyaWVzKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICByZXR1cm4gc2NyZWVuX3htbAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIGR1bXAgWE1MIChs4bqnbiB7YXR0ZW1wdCsxfS97bWF4X3JldHJpZXN9KToge3N0cihlKX0iKQogICAgICAgICAgICAgICAgIyBUxINuZyB0aOG7nWkgZ2lhbiBjaOG7nSBjaG8gbOG6p24gdGjhu60gdGnhur9wIHRoZW8KICAgICAgICAgICAgICAgIHdhaXRfYmV0d2Vlbl9yZXRyaWVzICs9IDAuNQogICAgICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgZHVtcCBYTUwgc2F1IHttYXhfcmV0cmllc30gbOG6p24gdGjhu60iKQogICAgICAgIHJldHVybiBOb25lCiAgICAgICAgCiAgICBkZWYgaXNfaG9tZV9zY3JlZW4oc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSBjw7MgxJFhbmcg4bufIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgSW5zdGFncmFtIGhheSBraMO0bmcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRYW5nIOG7nyB0cmFuZyBjaOG7pywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgcGFja2FnZSBoaeG7h24gdOG6oWkgdHLGsOG7m2MgdGnDqm4KICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICAjIEtp4buDbSB0cmEgMTogQ8OzIG7DunQgIlRyYW5nIGNo4bunIiDEkcaw4bujYyBjaOG7jW4gKHNlbGVjdGVkPXRydWUpIHRyb25nIHRoYW5oIHRhYiBraMO0bmcKICAgICAgICAgICAgaG9tZV90YWIgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciLCB0aW1lb3V0PTIwKQogICAgICAgICAgICBpZiBob21lX3RhYjoKICAgICAgICAgICAgICAgICMgTOG6pXkgWE1MIG3DoG4gaMOsbmggaGnhu4duIHThuqFpIHbhu5tpIGPGoSBjaOG6vyB0aOG7rSBs4bqhaQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQoaG9tZV90YWIpOgogICAgICAgICAgICAgICAgICAgIGxvZ29fYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvdGl0bGVfbG9nb19jaGV2cm9uX2NvbnRhaW5lciIKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgIGlmIGxvZ29fYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBsb2dvX2J1dHRvbi5nZXQoInZpc2libGUtdG8tdXNlciIpID09ICJ0cnVlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIHRo4bqleSB0YWIgIlRyYW5nIGNo4bunIiBuaMawbmcgY2jGsGEgxJHGsOG7o2MgY2jhu41uLCBjbGljayB2w6BvIMSRw7MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAxLjVzCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIHRo4bqleSB0YWIgIlRyYW5nIGNo4bunIiBuaMawbmcgY2jGsGEgxJHGsOG7o2MgY2jhu41uLCBjbGljayB2w6BvIMSRw7MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAxLjVzCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgY8OhYyB54bq/dSB04buRIGPhu6dhIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGtp4buDbSB0cmEgbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBJbnN0YWdyYW0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgZW5zdXJlX2hvbWVfc2NyZWVuKHNlbGYsIG1heF9yZXRyaWVzOiBpbnQgPSAzKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBJbnN0YWdyYW0sIG7hur91IGtow7RuZyB0aMOsIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1heF9yZXRyaWVzOiBT4buRIGzhuqduIHRo4butIHThu5FpIMSRYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCgoKICAgICAgICByZXRyeV9jb3VudCA9IDAKICAgICAgICAKICAgICAgICB3aGlsZSByZXRyeV9jb3VudCA8IG1heF9yZXRyaWVzOgogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gdHJhbmcgY2jhu6cga2jDtG5nCiAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcg4bufIHRyYW5nIGNo4bunLCDEkcOzbmcgdsOgIG3hu58gbOG6oWkgYXBwCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyBwaOG6o2kgdHJhbmcgY2jhu6cgSW5zdGFncmFtLCBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAuLi4iKQogICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttIGtoaSBj4bqnbiByZXN0YXJ0IHNlc3Npb24KICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgyKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBxdcOhIHRyw6xuaCBlbnN1cmVfaG9tZV9zY3JlZW4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttIGtoaSBj4bqnbiByZXN0YXJ0IHNlc3Npb24gIAogICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKDEwKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBxdcOhIHRyw6xuaCBlbnN1cmVfaG9tZV9zY3JlZW4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsaWYgbm90IHNlbGYudmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICByZXRyeV9jb3VudCArPSAxCiAgICAgICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIG3hu58gdHJhbmcgY2jhu6cgSW5zdGFncmFtIHNhdSB7bWF4X3JldHJpZXN9IGzhuqduIHRo4butIikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyBraMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIGLhu4sgYmFubmVkCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGV4dCAiVHJhbmcgbsOgeSBoaeG7h24ga2jDtG5nIGhp4buDbiB0aOG7iyIKICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICBwYWdlX25vdF9hdmFpbGFibGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICB0ZXh0PSJUcmFuZyBuw6B5IGhp4buHbiBraMO0bmcgaGnhu4NuIHRo4buLIgogICAgICAgICkKCiAgICAgICAgaWYgcGFnZV9ub3RfYXZhaWxhYmxlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJQaMOhdCBoaeG7h24gdHJhbmcga2jDtG5nIGhp4buDbiB0aOG7iywgxJFhbmcgcmVzZXQgcHJveHkgdsOgIGzDoG0gbeG7m2kiKQogICAgICAgICAgICAjIEfhu41pIHJlc2V0X2N1cnJlbnRfcHJveHkgdGjDtG5nIHF1YSBwcm94eV9zZXJ2aWNlCiAgICAgICAgICAgIGlmIHNlbGYucHJveHlfc2VydmljZToKICAgICAgICAgICAgICAgIHJlc2V0X3N1Y2Nlc3MgPSBzZWxmLnByb3h5X3NlcnZpY2UuZm9yY2VfcmVzZXRfY3VycmVudF9pcCgpCiAgICAgICAgICAgICAgICBpZiByZXNldF9zdWNjZXNzOgogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgyKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiTmjhuq1uIMSRxrDhu6NjIHnDqnUgY+G6p3UgZOG7q25nIHRyb25nIHZhbGlkYXRlX2FwcF9ub3RfYmFubmVkIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBi4bqlbSB2w6BvIG7DunQgIkzDoG0gbeG7m2kiCiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PSJMw6BtIG3hu5tpIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiByZWZyZXNoX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHJlZnJlc2hfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgc2FmZV9zbGVlcCByZXR1cm4gdmFsdWUgxJHhu4MgY8OzIHRo4buDIHRob8OhdCBz4bubbQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKDMpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiTmjhuq1uIMSRxrDhu6NjIHnDqnUgY+G6p3UgZOG7q25nIHRyb25nIHZhbGlkYXRlX2FwcF9ub3RfYmFubmVkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGLhuqVtIG7DunQgbMOgbSBt4bubaSBzYXUga2hpIHJlc2V0IHByb3h5IikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCAnTMOgbSBt4bubaSciKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiUmVzZXQgcHJveHkgdGjhuqV0IGLhuqFpIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIlByb3h5IHNlcnZpY2UgY2jGsGEgxJHGsOG7o2MgdGhp4bq/dCBs4bqtcCIpCgogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgY+G6o25oIGLDoW8KICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICBhbGVydF9jb250YWluZXIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2lnZHNfYWxlcnRfZGlhbG9nX3RleHRfY29udGFpbmVyIgogICAgICAgICkKICAgICAgICAKICAgICAgICAjS2nhu4NtIHRyYSBjw7MgdGjDtG5nIGLDoW8gdGjhu6kgbOG6oWkgc2F1LgogICAgICAgIGlmIGFsZXJ0X2NvbnRhaW5lcjoKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHRpw6p1IMSR4buBIGRpYWxvZwogICAgICAgICAgICBoZWFkbGluZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9pZ2RzX2FsZXJ0X2RpYWxvZ19oZWFkbGluZSIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaGVhZGxpbmUgYW5kIHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoaGVhZGxpbmUpID09ICJUaOG7rSBs4bqhaSBzYXUiOgogICAgICAgICAgICAgICAgIyBM4bqleSBu4buZaSBkdW5nIGPhuqNuaCBiw6FvCiAgICAgICAgICAgICAgICBzdWJ0ZXh0ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvaWdkc19hbGVydF9kaWFsb2dfc3VidGV4dCIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgc3VidGV4dDoKICAgICAgICAgICAgICAgICAgICB3YXJuaW5nX21lc3NhZ2UgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHN1YnRleHQpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIGPhuqNuaCBiw6FvIGhp4buHbiB04bqhaSB04burIGRiCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF93YXJuaW5ncyA9IHNlbGYuZGIuZ2V0KCJsb2dzLXdhcm5pbmctbWVzc2FnZSIsIFtdKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVGjDqm0gY+G6o25oIGLDoW8gbeG7m2kKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzIjogd2FybmluZ19tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIENo4buJIGdp4buvIGzhuqFpIHThu5FpIMSRYSAyMCBsb2cgZ+G6p24gbmjhuqV0CiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGN1cnJlbnRfd2FybmluZ3MpID4gMjA6CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MgPSBjdXJyZW50X3dhcm5pbmdzWy0yMDpdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBMxrB1IGzhuqFpIHbDoG8gZGIKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgibG9ncy13YXJuaW5nLW1lc3NhZ2UiLCBjdXJyZW50X3dhcm5pbmdzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiLEkMOjIGzGsHUgY+G6o25oIGLDoW86IHt3YXJuaW5nX21lc3NhZ2V9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGlzbWlzc19hbGxfZGlhbG9ncygpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgI0tp4buDbSB0cmEgeGVtIGPDsyB0aMO0bmcgYsOhbyBwaOG6o2kgxJHEg25nIG5o4bqtcCBraMO0bmcKICAgICAgICAjIEtp4buDbSB0cmEgY29udGFpbmVyIGJsb2tzCiAgICAgICAgYmxva3NfY29udGFpbmVyID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9ibG9rc19jb250YWluZXIiCiAgICAgICAgKQogICAgICAgIAogICAgICAgIGlmIGJsb2tzX2NvbnRhaW5lcjoKICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgY8OhYyB2aWV3IHRyb25nIGNvbnRhaW5lcgogICAgICAgICAgICB2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLnZpZXcuVmlldyIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB2aWV3IMSR4bqndSB0acOqbiBjw7MgdGV4dCBraMOhYyBudWxsCiAgICAgICAgICAgIHdhcm5pbmdfdGV4dCA9IE5vbmUKICAgICAgICAgICAgZm9yIHZpZXcgaW4gdmlld3M6CiAgICAgICAgICAgICAgICB0ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh2aWV3KQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dC5zdHJpcCgpIGFuZCB0ZXh0ICE9ICJudWxsIiBhbmQgdGV4dCAhPSAiICIgYW5kIGxlbih0ZXh0LnN0cmlwKCkpID4gMTA6CiAgICAgICAgICAgICAgICAgICAgd2FybmluZ190ZXh0ID0gdGV4dAogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB3YXJuaW5nX3RleHQ6IAogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGxvZ291dCB2w6AgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBCxrDhu5tjIDE6IELhuqVtIHbDoG8gbWVudQogICAgICAgICAgICAgICAgICAgIG1lbnVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9Ik1lbnUiKQogICAgICAgICAgICAgICAgICAgIGlmIG1lbnVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIobWVudV9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBCxrDhu5tjIDI6IMSQ4buNYyBs4bqhaSBYTUwgdsOgIHTDrG0gdGV4dCAixJDEg25nIHh14bqldCBraOG7j2kiCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVfeG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbWVudV94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChtZW51X3htbCwgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvdXRfdmlldyA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdmlldyBpbiB2aWV3czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3X3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHZpZXcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdmlld190ZXh0IGFuZCB2aWV3X3RleHQuc3RhcnRzd2l0aCgixJDEg25nIHh14bqldCBraOG7j2kiKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nb3V0X3ZpZXcgPSB2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6r3QgYuG7jyAixJDEg25nIHh14bqldCBraOG7j2kiIHbDoCB0cmltIMSR4buDIGzhuqV5IHVzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdmlld190ZXh0LnJlcGxhY2UoIsSQxINuZyB4deG6pXQga2jhu49pIiwgIiIpLnN0cmlwKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbG9nb3V0X3ZpZXcgYW5kIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQsaw4bubYyAzOiBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBhY2NvdW50IHRyb25nIGRhdGFiYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVkLyVtLyV5ICVIOiVNIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZV9yZWFzb24gPSBmIlBow6F0IGhp4buHbiB5w6p1IGPhuqd1IHjDoWMgbWluaCBsw7pjOiB7Y3VycmVudF90aW1lfSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gdMOgaSBraG/huqNuIHRoZW8gdW5pcXVlX3VzZXJuYW1lIHbDoCBj4bqtcCBuaOG6rXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD0iaW5zdGFncmFtIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpID09IHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJsb2dvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpbmFjdGl2ZV9yZWFzb24iOiBpbmFjdGl2ZV9yZWFzb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50WyJpZCJdLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiLEkMOjIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9OiB7aW5hY3RpdmVfcmVhc29ufSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQsaw4bubYyA0OiBC4bqlbSB2w6BvICLEkMSDbmcgeHXhuqV0IGto4buPaSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIobG9nb3V0X3ZpZXcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBCxrDhu5tjIDU6IFjDoWMgbmjhuq1uIMSRxINuZyB4deG6pXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY29uZmlybV94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1fYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1feG1sLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD0ixJDEg25nIHh14bqldCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjb25maXJtX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihjb25maXJtX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgQ2jhu50gNSBnacOieSBob8OgbiB04bqldCBsb2dvdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDEkcSDbmcgeHXhuqV0IGto4buPaSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBtZW51IMSRxINuZyB4deG6pXQiKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyDEkeG7jWMgWE1MIG1lbnUiKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBNZW51IikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBsb2dvdXQ6IHtzdHIoZSl9IikKICAgICAgICAgICAgICAgICAgICAjIEZhbGxiYWNrOiDEkcOzbmcgYXBwIG7hur91IGtow7RuZyBsb2dvdXQgxJHGsOG7o2MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICByZXR1cm4gVHJ1ZQogICAgCiAgICBkZWYgX2hhbmRsZV9kaWFsb2dzX2FuZF9uYXZpZ2F0ZV9ob21lKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIE92ZXJyaWRlIMSR4buDIHjhu60gbMO9IGRpYWxvZyBzcGVjaWZpYyBj4bunYSBJbnN0YWdyYW0gdsOgIG5hdmlnYXRlIHbhu4EgaG9tZQogICAgICAgICIiIgogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCLEkGFuZyB44butIGzDvSBJbnN0YWdyYW0gZGlhbG9ncyB2w6AgbmF2aWdhdGUgduG7gSBob21lLi4uIikKICAgICAgICAKICAgICAgICAjIFjhu60gbMO9IGPDoWMgZGlhbG9nIEluc3RhZ3JhbSBzcGVjaWZpYwogICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIlRo4butIGzhuqFpIHNhdSIKICAgICAgICBhbGVydF9jb250YWluZXIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2lnZHNfYWxlcnRfZGlhbG9nX3RleHRfY29udGFpbmVyIgogICAgICAgICkKICAgICAgICAKICAgICAgICBpZiBhbGVydF9jb250YWluZXI6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw7NuZyBkaWFsb2cgSW5zdGFncmFtIGFsZXJ0IikKICAgICAgICAgICAgc2VsZi5fZGlzbWlzc19hbGxfZGlhbG9ncygpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBjb250YWluZXIgYmxva3MgKGPhuqNuaCBiw6FvIGtow6FjKQogICAgICAgIGJsb2tzX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYmxva3NfY29udGFpbmVyIgogICAgICAgICkKICAgICAgICAKICAgICAgICBpZiBibG9rc19jb250YWluZXI6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw7NuZyBJbnN0YWdyYW0gYmxva3MgZGlhbG9nIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgIAogICAgICAgICMgU2F1IGtoaSB44butIGzDvSBkaWFsb2csIHRo4butIG5hdmlnYXRlIHbhu4EgaG9tZQogICAgICAgIGlmIG5vdCBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICMgVMOsbSBuw7p0ICJUcmFuZyBjaOG7pyIKICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuqVtIG7DunQgVHJhbmcgY2jhu6ciKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEZhbGxiYWNrOiBuaOG6pW4gYmFjayBt4buZdCB2w6BpIGzhuqduCiAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZSgzKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gSW5zdGFncmFtIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunIEluc3RhZ3JhbQogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVuIHbDoG8gdGFiICJUcmFuZyBjw6EgbmjDom4iCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBwcm9maWxlX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJUcmFuZyBjw6EgbmjDom4iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHByb2ZpbGVfdGFiOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0YWIgVHJhbmcgY8OhIG5ow6JuIikKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdGFiIFRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIocHJvZmlsZV90YWIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0aMO0bmcgdGluIHTDoGkga2hv4bqjbiBoaeG7h24gdOG6oWkgdOG7qyB0cmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdXNlcm5hbWUgdOG7qyB0acOqdSDEkeG7gSBs4bubbiB0cm9uZyBhY3Rpb24gYmFyCiAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX2xhcmdlX3RpdGxlX2F1dG9fc2l6ZSIKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICB1c2VybmFtZV90aXRsZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfdGl0bGUiCiAgICAgICAgICAgICkKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX3RpdGxlOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICB1c2VybmFtZV90aXRsZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX2xhcmdlX3RpdGxlX2F1dG9fc2l6ZSIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHVzZXJuYW1lX3RpdGxlOgogICAgICAgICAgICAgICAgY3VycmVudF91c2VybmFtZSA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodXNlcm5hbWVfdGl0bGUpCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgdXNlcm5hbWUgaGnhu4duIHThuqFpIHThu6sgdGnDqnUgxJHhu4E6IHtjdXJyZW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdGnDqnUgxJHhu4EgdXNlcm5hbWUgxJHhu4MgbeG7nyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJuYW1lX3RpdGxlKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gLSDEkeG7jWMgbOG6p24gMQogICAgICAgICAgICAgICAgYWNjb3VudHNfeG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgY8OhYyBwaOG6p24gdOG7rSBWaWV3R3JvdXAgY8OzIGNvbnRlbnQtZGVzYyAobMOgIHVzZXJuYW1lKQogICAgICAgICAgICAgICAgYWNjb3VudF9pdGVtcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICBhY2NvdW50c194bWwsCiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXdHcm91cCIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBY4butIGzDvSB0w6BpIGtob+G6o24gbOG6p24gMQogICAgICAgICAgICAgICAgc2VsZi5fcHJvY2Vzc19hY2NvdW50X2l0ZW1zKGFjY291bnRfaXRlbXMsIGFjY291bnRzX3htbCwgYWNjb3VudHMpCgogICAgICAgICAgICAgICAgIyBO4bq/dSBjw7Mgbmhp4buBdSBoxqFuIDYgdMOgaSBraG/huqNuLCB2deG7kXQgbMOqbiB2w6AgxJHhu41jIHRp4bq/cAogICAgICAgICAgICAgICAgaWYgbGVuKGFjY291bnRzKSA+IDY6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHtsZW4oYWNjb3VudHMpfSB0w6BpIGtob+G6o24sIHZ14buRdCBsw6puIMSR4buDIHTDrG0gdGjDqm0iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIGzhuqduIDIgc2F1IGtoaSB2deG7kXQKICAgICAgICAgICAgICAgICAgICBhY2NvdW50c194bWxfMiA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pdGVtc18yID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50c194bWxfMiwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXdHcm91cCIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBY4butIGzDvSB0w6BpIGtob+G6o24gbOG6p24gMgogICAgICAgICAgICAgICAgICAgIGFjY291bnRzX2JlZm9yZV8ybmQgPSBsZW4oYWNjb3VudHMpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcHJvY2Vzc19hY2NvdW50X2l0ZW1zKGFjY291bnRfaXRlbXNfMiwgYWNjb3VudHNfeG1sXzIsIGFjY291bnRzKQogICAgICAgICAgICAgICAgICAgIGFjY291bnRzX2FkZGVkID0gbGVuKGFjY291bnRzKSAtIGFjY291bnRzX2JlZm9yZV8ybmQKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTOG6p24gxJHhu41jIHRo4bupIDIgdMOsbSB0aMOqbSB7YWNjb3VudHNfYWRkZWR9IHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJDaOG7iSBjw7Mge2xlbihhY2NvdW50cyl9IHTDoGkga2hv4bqjbiwga2jDtG5nIGPhuqduIHZ14buRdCB0aMOqbSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmjhuqVuIGJhY2sgxJHhu4MgxJHDs25nIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBRdWF5IGzhuqFpIHRyYW5nIGNo4bunIGLhurFuZyBwaMawxqFuZyB0aOG7qWMgYmFja190b19ob21lCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gSW5zdGFncmFtIikKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnRzCiAgICAKICAgIGRlZiBfcHJvY2Vzc19hY2NvdW50X2l0ZW1zKHNlbGYsIGFjY291bnRfaXRlbXM6IExpc3QsIGFjY291bnRzX3htbDogc3RyLCBhY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0pIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgWOG7rSBsw70gZGFuaCBzw6FjaCBhY2NvdW50IGl0ZW1zIHbDoCB0aMOqbSB2w6BvIGFjY291bnRzIGxpc3QKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50X2l0ZW1zOiBEYW5oIHPDoWNoIFZpZXdHcm91cCBlbGVtZW50cwogICAgICAgICAgICBhY2NvdW50c194bWw6IFhNTCBj4bunYSBtw6BuIGjDrG5oIGNo4bupYSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICBhY2NvdW50czogTGlzdCDEkeG7gyB0aMOqbSB0w6BpIGtob+G6o24gdsOgbwogICAgICAgICIiIgogICAgICAgICMgVOG6oW8gc2V0IMSR4buDIHRyw6FuaCBkdXBsaWNhdGUgdXNlcm5hbWUKICAgICAgICBleGlzdGluZ191c2VybmFtZXMgPSB7YWNjLmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpLmxvd2VyKCkgZm9yIGFjYyBpbiBhY2NvdW50c30KICAgICAgICAKICAgICAgICAjIEzhu41jIHbDoCB44butIGzDvSBjw6FjIG3hu6VjIHTDoGkga2hv4bqjbgogICAgICAgIGZvciBpdGVtIGluIGFjY291bnRfaXRlbXM6CiAgICAgICAgICAgICMgTOG6pXkgY29udGVudC1kZXNjIGPhu6dhIGl0ZW0KICAgICAgICAgICAgY29udGVudF9kZXNjID0gaXRlbS5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICBpZiBub3QgY29udGVudF9kZXNjIG9yIGNvbnRlbnRfZGVzYyA9PSAibnVsbCI6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDonkgY8OzIHBo4bqjaSBsw6AgbsO6dCAixJBpIMSR4bq/biBUcnVuZyB0w6JtIHTDoGkga2hv4bqjbiIga2jDtG5nCiAgICAgICAgICAgIGlmICJUcnVuZyB0w6JtIHTDoGkga2hv4bqjbiIgaW4gY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIELhu48gcXVhIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIgCiAgICAgICAgICAgIGlmICJUaMOqbSB0w6BpIGtob+G6o24iIGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFjhu60gbMO9IHRyxrDhu51uZyBo4bujcCBjw7MgdGjDtG5nIGLDoW8gdHJvbmcgY29udGVudC1kZXNjICh2ZDogInVzZXJuYW1lLCAxMCB0aMO0bmcgYsOhbyIpCiAgICAgICAgICAgIHVzZXJuYW1lID0gY29udGVudF9kZXNjCiAgICAgICAgICAgIGlmICIsIiBpbiBjb250ZW50X2Rlc2M6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGNvbnRlbnRfZGVzYy5zcGxpdCgiLCIpWzBdLnN0cmlwKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUGjGsMahbmcgcGjDoXAgMjogVMOsbSB0cuG7sWMgdGnhur9wIHRyb25nIGPDoWMgdmlldyBjb24KICAgICAgICAgICAgY2hpbGRfdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICBhY2NvdW50c194bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLnZpZXcuVmlldyIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBib3VuZHMgY+G7p2EgaXRlbSBoaeG7h24gdOG6oWkgxJHhu4MgdMOsbSB2aWV3IGNvbiB0aHXhu5ljIHbhu4EgbsOzCiAgICAgICAgICAgIGl0ZW1fYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGl0ZW0pCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgdmlldyBpbiBjaGlsZF92aWV3czoKICAgICAgICAgICAgICAgIHZpZXdfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKHZpZXcpCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIHZpZXcgY8OzIG7hurFtIHRyb25nIGl0ZW0ga2jDtG5nCiAgICAgICAgICAgICAgICBpZiAodmlld19ib3VuZHNbMF0gPj0gaXRlbV9ib3VuZHNbMF0gYW5kIAogICAgICAgICAgICAgICAgICAgIHZpZXdfYm91bmRzWzFdID49IGl0ZW1fYm91bmRzWzFdIGFuZCAKICAgICAgICAgICAgICAgICAgICB2aWV3X2JvdW5kc1syXSA8PSBpdGVtX2JvdW5kc1syXSBhbmQgCiAgICAgICAgICAgICAgICAgICAgdmlld19ib3VuZHNbM10gPD0gaXRlbV9ib3VuZHNbM10pOgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHZpZXdfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodmlldykKICAgICAgICAgICAgICAgICAgICBpZiB2aWV3X3RleHQgYW5kICJ0aMO0bmcgYsOhbyIgbm90IGluIHZpZXdfdGV4dC5sb3dlcigpOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gdGjhuqV5IHZpZXcgY29uIGNo4bupYSB0w6puIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHZpZXdfdGV4dAogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGR1cGxpY2F0ZSB1c2VybmFtZQogICAgICAgICAgICBpZiB1c2VybmFtZS5sb3dlcigpIGluIGV4aXN0aW5nX3VzZXJuYW1lczoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gbsOgeSBjw7MgxJFhbmcgxJHGsOG7o2MgY2jhu41uIGtow7RuZwogICAgICAgICAgICBpc19zZWxlY3RlZCA9IGl0ZW0uZ2V0KCJzZWxlY3RlZCIpID09ICJ0cnVlIgogICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqhbyB0aMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBhY2NvdW50ID0gewogICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogIiIsCiAgICAgICAgICAgICAgICAidW5pcXVlX3VzZXJuYW1lIjogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogIiIsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogImFjdGl2ZSIsCiAgICAgICAgICAgICAgICAiaXNfbG9naW4iOiBpc19zZWxlY3RlZCwKICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiAiIiwKICAgICAgICAgICAgICAgICJqb2JfZW5hYmxlIjogVHJ1ZSwKICAgICAgICAgICAgICAgICJsZXZlbCI6IDMsCiAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZChhY2NvdW50KQogICAgICAgICAgICBleGlzdGluZ191c2VybmFtZXMuYWRkKHVzZXJuYW1lLmxvd2VyKCkpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiBJbnN0YWdyYW06IHt1c2VybmFtZX0gKHNlbGVjdGVkOiB7aXNfc2VsZWN0ZWR9KSIpCiAgICAKICAgIGRlZiBfZGlzbWlzc19hbGxfZGlhbG9ncyhzZWxmLCBtYXhfYXR0ZW1wdHM6IGludCA9IDUpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgQuG6pW0gbsO6dCBPSyBsacOqbiB04bulYyBjaG8gxJHhur9uIGtoaSBraMO0bmcgY8OybiBkaWFsb2cgbsOgbwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1heF9hdHRlbXB0czogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICAiIiIKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfYXR0ZW1wdHMpOgogICAgICAgICAgICAjIEzhuqV5IGzhuqFpIFhNTCDEkeG7gyB0w6xtIG7DunQgT0sKICAgICAgICAgICAgY3VycmVudF94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBpZiBub3QgY3VycmVudF94bWw6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIG9rX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICBjdXJyZW50X3htbCwKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvaWdkc19hbGVydF9kaWFsb2dfcHJpbWFyeV9idXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG9rX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihva19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLhuqVtIE9LIGzhuqduIHthdHRlbXB0ICsgMX0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBLaMO0bmcgY8OybiBuw7p0IE9LLCB0aG/DoXQgdsOybmcgbOG6t3AKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgxJHDs25nIGjhur90IGRpYWxvZyIpCiAgICAgICAgICAgICAgICBicmVhawogICAgCiAgICBkZWYgYmFja190b19ob21lKHNlbGYsIG1heF9iYWNrX2NvdW50OiBpbnQgPSA1LCBtYXhfcmV0cmllczogaW50ID0gMSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBRdWF5IGzhuqFpIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgSW5zdGFncmFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgbWF4X2JhY2tfY291bnQ6IFPhu5EgbOG6p24gbmjhuqVuIEJhY2sgdOG7kWkgxJFhIHRyxrDhu5tjIGtoaSB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAKICAgICAgICAgICAgbWF4X3JldHJpZXM6IFPhu5EgbOG6p24gdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIHThu5FpIMSRYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIOG7nyB0cmFuZyBjaOG7pyBjaMawYQogICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJBhbmcgdMOsbSBjw6FjaCBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgSW5zdGFncmFtLi4uIikKICAgICAgICAKICAgICAgICAjIFRo4butIGzhuqFpIHRvw6BuIGLhu5kgcXXDoSB0csOsbmggdOG7kWkgxJFhIG1heF9yZXRyaWVzIGzhuqduCiAgICAgICAgZm9yIHJldHJ5IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgIyBUaOG7rSBi4bqlbSBuw7p0IGJhY2sgdOG7kWkgxJFhIG1heF9iYWNrX2NvdW50IGzhuqduCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG1heF9iYWNrX2NvdW50KToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgc2FmZV9zbGVlcCByZXR1cm4gdmFsdWUgxJHhu4MgY8OzIHRo4buDIHRob8OhdCBz4bubbQogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgxKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJOaOG6rW4gxJHGsOG7o2MgecOqdSBj4bqndSBk4burbmcgdHJvbmcgcXXDoSB0csOsbmggYmFja190b19ob21lIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIHbhu4EgdHJhbmcgY2jhu6cgY2jGsGEKICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgc2F1IHtpKzF9IGzhuqduIGLhuqVtIGJhY2sgKGzhuqduIHRo4butIHtyZXRyeSsxfSkiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHbhuqtuIGtow7RuZyB24buBIMSRxrDhu6NjIHRyYW5nIGNo4bunLCBraWxsIGFwcCB2w6AgbeG7nyBs4bqhaQogICAgICAgICAgICBpZiByZXRyeSA8IG1heF9yZXRyaWVzIC0gMTogICMgQ2jhu4kgbG9nIGPhuqNuaCBiw6FvIG7hur91IGPDsm4gbOG6p24gdGjhu60gdGnhur9wIHRoZW8KICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJLaMO0bmcgdGjhu4MgduG7gSB0cmFuZyBjaOG7pyBzYXUge21heF9iYWNrX2NvdW50fSBs4bqnbiBi4bqlbSBiYWNrLCB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAgKGzhuqduIHRo4butIHtyZXRyeSsxfS97bWF4X3JldHJpZXN9KS4uLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB24buBIHRyYW5nIGNo4bunIHNhdSB7bWF4X2JhY2tfY291bnR9IGzhuqduIGLhuqVtIGJhY2sgKGzhuqduIHRo4butIGN14buRaSB7cmV0cnkrMX0ve21heF9yZXRyaWVzfSkuLi4iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHNhZmVfc2xlZXAgcmV0dXJuIHZhbHVlIMSR4buDIGPDsyB0aOG7gyB0aG/DoXQgc+G7m20KICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgyKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBxdcOhIHRyw6xuaCBiYWNrX3RvX2hvbWUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttICAKICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCg1KToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBxdcOhIHRyw6xuaCBiYWNrX3RvX2hvbWUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICBpZiBub3Qgc2VsZi52YWxpZGF0ZV9hcHBfbm90X2Jhbm5lZCgpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgeGVtIGPDsyDhu58gdHJhbmcgY2jhu6cga2jDtG5nCiAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHF1YXkgduG7gSB0cmFuZyBjaOG7pyBzYXUga2hpIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcCAobOG6p24gdGjhu60ge3JldHJ5KzF9KSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgbmdheSBj4bqjIHNhdSB7bWF4X3JldHJpZXN9IGzhuqduIHRo4butIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcCIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIAoKICAgIAogICAgZGVmIG1hcF9nb2xpa2VfYWNjb3VudHMoc2VsZiwgZ29saWtlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSwgZGV2aWNlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgw4FuaCB44bqhIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSB2w6BvIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBnb2xpa2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgR29MaWtlIEFQSQogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gxJHDoyDDoW5oIHjhuqEKICAgICAgICAiIiIKICAgICAgICBtYXBwZWRfYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBDaHXhuqluIGjDs2EgZOG7ryBsaeG7h3UgdOG7qyBHb0xpa2UKICAgICAgICAgICAgZ29saWtlX2RhdGEgPSB7fQogICAgICAgICAgICBmb3IgYWNjIGluIGdvbGlrZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICMgVHLDrWNoIHh14bqldCB0aMO0bmcgdGluIHThu6sgdMOgaSBraG/huqNuIEdvTGlrZQogICAgICAgICAgICAgICAgZ29saWtlX2FjY291bnQgPSB7CiAgICAgICAgICAgICAgICAgICAgImdvbGlrZV9pZCI6IGFjYy5nZXQoImlkIiksCiAgICAgICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogYWNjLmdldCgiaW5zdGFncmFtX2Z1bGxfbmFtZSIpIG9yIGFjYy5nZXQoImluc3RhZ3JhbV91c2VybmFtZSIpLAogICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfaWQiOiBhY2MuZ2V0KCJpbnN0YWdyYW1faWQiKSwKICAgICAgICAgICAgICAgICAgICAidW5pcXVlX3VzZXJuYW1lIjogYWNjLmdldCgiaW5zdGFncmFtX3VzZXJuYW1lIiksCiAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGFjYy5nZXQoInByb2ZpbGVfcGljX3VybCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU+G7rSBk4bulbmcgdW5pcXVlX3VzZXJuYW1lIGzDoG0ga2jDs2EgxJHhu4MgZOG7hSDDoW5oIHjhuqEKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZ29saWtlX2FjY291bnRbInVuaXF1ZV91c2VybmFtZSJdCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBnb2xpa2VfZGF0YVt1c2VybmFtZS5sb3dlcigpXSA9IGdvbGlrZV9hY2NvdW50CiAgICAgICAgICAgIAogICAgICAgICAgICAjIMOBbmggeOG6oSB24bubaSB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGZvciBkZXZpY2VfYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGRldmljZV9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgaW4gZ29saWtlX2RhdGE6CiAgICAgICAgICAgICAgICAgICAgIyDEkMOjIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB0cm9uZyBkYW5oIHPDoWNoIEdvTGlrZQogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICAgICAgZ29saWtlX2luZm8gPSBnb2xpa2VfZGF0YVt1c2VybmFtZV0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJnb2xpa2VfaWQiOiBnb2xpa2VfaW5mb1siZ29saWtlX2lkIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICJpc19nb2xpa2VfbGlua2VkIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGdvbGlrZV9pbmZvWyJhdmF0YXJfdGh1bWIiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoImF2YXRhcl90aHVtYiIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGdvbGlrZV9pbmZvWyJ1bmlxdWVfaWQiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoInVuaXF1ZV9pZCIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogZ29saWtlX2luZm9bIm5pY2tuYW1lIl0gb3IgZGV2aWNlX2FjY291bnQuZ2V0KCJuaWNrbmFtZSIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gSUQgdMOgaSBraG/huqNuIHRyb25nIERCCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGRldmljZV9hY2NvdW50LmdldCgiaWQiKQogICAgICAgICAgICAgICAgICAgIGlmIGFjY291bnRfaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHbDoG8gREIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdsOgbyBkZXZpY2VfYWNjb3VudAogICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfYWNjb3VudC51cGRhdGUodXBkYXRlX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZF9hY2NvdW50cy5hcHBlbmQoZGV2aWNlX2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDDoW5oIHjhuqEgdMOgaSBraG/huqNuIEluc3RhZ3JhbToge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gbWFwcGVkX2FjY291bnRzCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIMOhbmggeOG6oSB0w6BpIGtob+G6o24gSW5zdGFncmFtIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICBkZWYgZ2V0X3JlcG9ydF9wYXlsb2FkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBU4bqhbyBwYXlsb2FkIGNobyB2aeG7h2MgYsOhbyBjw6FvIGhvw6BuIHRow6BuaCBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBQYXlsb2FkIGNobyBBUEkgYsOhbyBjw6FvCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgIAogICAgICAgIGlmIG5vdCBnb2xpa2VfaWQgb3Igbm90IGpvYl9pZDoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIlRoaeG6v3UgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24gaG/hurdjIGpvYiDEkeG7gyB04bqhbyBwYXlsb2FkIGLDoW8gY8OhbyIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJpbnN0YWdyYW1fdXNlcnNfYWR2ZXJ0aXNpbmdfaWQiOiBqb2JfaWQsCiAgICAgICAgICAgICJpbnN0YWdyYW1fYWNjb3VudF9pZCI6IGdvbGlrZV9pZCwKICAgICAgICAgICAgImFzeW5jIjogVHJ1ZSwKICAgICAgICAgICAgImRhdGEiOiBOb25lCiAgICAgICAgfSAgICAKICAgICAgICAgIAogICAgCiAgICAKICAgIGRlZiBleGVjdXRlX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiwgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDA6IENoxrBhIHRo4buxYyBoaeG7h24KICAgICAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAyOiBUaOG6pXQgYuG6oWksIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgICAgICAgICAzOiBUaOG6pXQgYuG6oWksIMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgICAgICA0OiBUaOG6pXQgYuG6oWksIHnDqnUgY+G6p3UgxJFhbmcgY2jhu50KICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgICAgIC0gc3VjY2VzcyAoYm9vbCk6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgIGpvYl9saW5rID0gam9iLmdldCgibGluayIsICIiKQogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl9pZH0gbG/huqFpIHtqb2JfdHlwZX0gduG7m2kgbGluayB7am9iX2xpbmt9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBsb+G6oWkgam9iIMSRxrDhu6NjIGjhu5cgdHLhu6MKICAgICAgICAgICAgaWYgam9iX3R5cGUgbm90IGluIFsiZm9sbG93IiwgImxpa2UiXToKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIkxv4bqhaSBqb2Ige2pvYl90eXBlfSBraMO0bmcgxJHGsOG7o2MgaOG7lyB0cuG7oyIKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IDIsCiAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBqb2IgdGhlbyBsb+G6oWkKICAgICAgICAgICAgam9iX3N0YXR1cyA9IDAgICMgTeG6t2MgxJHhu4tuaCBsw6AgY2jGsGEgbMOgbQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgam9iX3R5cGUgPT0gImZvbGxvdyI6CiAgICAgICAgICAgICAgICBqb2Jfc3RhdHVzID0gc2VsZi5fcGVyZm9ybV9mb2xsb3dfam9iKGpvYl9saW5rKQogICAgICAgICAgICBlbGlmIGpvYl90eXBlID09ICJsaWtlIjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2xpa2Vfam9iKGpvYl9saW5rKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqhbyBr4bq/dCBxdeG6oyB0cuG6oyB24buBIGThu7FhIHRyw6puIGpvYl9zdGF0dXMKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0X2Zyb21fc3RhdHVzKGpvYl9zdGF0dXMsIGpvYl90eXBlKQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBtZXNzYWdlID0gZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2I6IHtzdHIoZSl9IgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgbWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDIsIG1lc3NhZ2UsIEZhbHNlKQogICAgCiAgICBkZWYgX2NyZWF0ZV9qb2JfcmVzdWx0X2Zyb21fc3RhdHVzKHNlbGYsIGpvYl9zdGF0dXM6IGludCwgam9iX3R5cGU6IHN0cikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVOG6oW8ga+G6v3QgcXXhuqMgam9iIHThu6sgc3RhdHVzIGNvZGUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBqb2Jfc3RhdHVzOiBNw6MgdHLhuqFuZyB0aMOhaSBqb2IgdOG7qyBfcGVyZm9ybV94eHhfam9iCiAgICAgICAgICAgIGpvYl90eXBlOiBMb+G6oWkgam9iIChmb2xsb3csIGxpa2UpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyBqb2IKICAgICAgICAiIiIKICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICBtZXNzYWdlID0gZiLEkMOjIGhvw6BuIHRow6BuaCBqb2Ige2pvYl90eXBlfSB0aMOgbmggY8O0bmciCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8obWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDEsIG1lc3NhZ2UsIFRydWUpCiAgICAgICAgZWxpZiBqb2Jfc3RhdHVzID09IDI6ICAjIEtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgbWVzc2FnZSA9IGYiS2jDtG5nIHRo4buDIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZyDEkeG7gyB0aOG7sWMgaGnhu4duIGpvYiB7am9iX3R5cGV9IgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgyLCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gMzogICMgQuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBi4buLIHVuZm9sbG93L3VubGlrZSB0cm9uZyBqb2Ige2pvYl90eXBlfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB1bmZvbGxvdyDEkeG7gyBKb2JTZXJ2aWNlIHjhu60gbMO9CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgzLCBtZXNzYWdlLCBGYWxzZSwgdW5mb2xsb3c9VHJ1ZSkKICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gNDogICMgWcOqdSBj4bqndSDEkWFuZyBjaOG7nQogICAgICAgICAgICBtZXNzYWdlID0gZiJZw6p1IGPhuqd1IMSRYW5nIGNo4budIHRyb25nIGpvYiB7am9iX3R5cGV9IgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCg0LCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gNTogICMgR+G7rWkgecOqdSBj4bqndSBjaOG7nSBkdXnhu4d0CiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIkfhu61pIHnDqnUgY+G6p3UgY2jhu50gZHV54buHdCB7am9iX3R5cGV9IgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCg1LCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gNjogICMgxJDhuqF0IGdp4bubaSBo4bqhbiBob+G6t2MgYuG7iyBraMOzYQogICAgICAgICAgICBtZXNzYWdlID0gZiJKb2Ige2pvYl90eXBlfSBi4buLIGjhu6d5IGRvIMSR4bqhdCBnaeG7m2kgaOG6oW4gaG/hurdjIHTDoGkga2hv4bqjbiBi4buLIGtow7NhIgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCg2LCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICBlbHNlOiAgIyBUcuG6oW5nIHRow6FpIGtow7RuZyB4w6FjIMSR4buLbmgKICAgICAgICAgICAgbWVzc2FnZSA9IGYiVHLhuqFuZyB0aMOhaSBraMO0bmcgeMOhYyDEkeG7i25oIGtoaSB0aOG7sWMgaGnhu4duIGpvYiB7am9iX3R5cGV9IChzdGF0dXM6IHtqb2Jfc3RhdHVzfSkiCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgwLCBtZXNzYWdlLCBGYWxzZSkKICAgIAogICAgZGVmIF9wZXJmb3JtX2ZvbGxvd19qb2Ioc2VsZiwgcHJvZmlsZV9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBmb2xsb3cgdHLDqm4gSW5zdGFncmFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIMSR4bq/biB0cmFuZyBjw6EgbmjDom4gY+G6p24gZm9sbG93CiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGludDogVHLhuqFuZyB0aMOhaSBqb2IgKDA6IGNoxrBhIGzDoG0sIDE6IGhvw6BuIHRow6BuaCwgMjogbOG7l2ksIDM6IGLhu4sgdW5mb2xsb3cpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVHLDrWNoIHh14bqldCB1c2VybmFtZSB04burIFVSTAogICAgICAgICAgICBpbXBvcnQgcmUKICAgICAgICAgICAgaW1wb3J0IHJhbmRvbQogICAgICAgICAgICB1c2VybmFtZV9tYXRjaCA9IHJlLnNlYXJjaChyJ2luc3RhZ3JhbVwuY29tLyhbXi9dKyknLCBwcm9maWxlX2xpbmspCiAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZV9tYXRjaDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIHRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBsaW5rOiB7cHJvZmlsZV9saW5rfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWVfbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiAxIHRyb25nIDIgY8OhY2g6IHTDrG0ga2nhur9tIGhv4bq3YyBt4bufIHRy4buxYyB0aeG6v3AgbGluawogICAgICAgICAgICBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBGYWxzZV0pOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdHJhbmcgY8OhIG5ow6JuIGLhurFuZyBjw6FjaCB0w6xtIGtp4bq/bToge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAjIEPDoWNoIDE6IFTDrG0ga2nhur9tIHVzZXJuYW1lIChjw6FjaCBjxakpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyDEkMOzbmcgY8OhYyBkaWFsb2cgbuG6v3UgY8OzCiAgICAgICAgICAgICAgICAgICAgZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iRGlhbG9nIikKICAgICAgICAgICAgICAgICAgICBpZiBkaWFsb2c6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVGFwIHbDoG8ga2h1IHbhu7FjIHRy4buRbmcgxJHhu4MgxJHDs25nIGRpYWxvZwogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwKGludCh3aWR0aCowLjIpLCBpbnQoaGVpZ2h0KjAuMikpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxLjUpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gMS41cwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTeG7nyB0cmFuZyB0w6xtIGtp4bq/bSAKICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBkdW1wIG3DoG4gaMOsbmgsIHRo4butIG3hu58gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWFyY2hfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3NlYXJjaF90YWIiKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VhcmNoX3RhYjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0YWIgVMOsbSBraeG6v20sIHRo4butIG3hu58gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX3RhYikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAycwogICAgICAgICAgICAgICAgICAgIHNlYXJjaF90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9zZWFyY2hfdGFiIikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VhcmNoX3RhYiBvciBub3Qgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChzZWFyY2hfdGFiKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpIAoKICAgICAgICAgICAgICAgICAgICAjIE5o4bqlbiB2w6BvIHRoYW5oIHTDrG0ga2nhur9tCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oIGtoaSB0w6xtIMO0IG5o4bqtcCwgdGjhu60gbeG7nyBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg0KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaW5wdXQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9zZWFyY2hfZWRpdF90ZXh0IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VhcmNoX2lucHV0OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX3RhYikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpIAogICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfaW5wdXQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX3NlYXJjaF9lZGl0X3RleHQiKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWFyY2hfaW5wdXQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgw7Qgbmjhuq1wIHTDrG0ga2nhur9tLCB0aOG7rSBt4bufIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3AiKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwcm9maWxlX2xpbmssc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDQpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBYw7NhIG7hu5lpIGR1bmcgdMOsbSBraeG6v20gaGnhu4duIHThuqFpIG7hur91IGPDswogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfaW5wdXQpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE5o4bqtcCB1c2VybmFtZSBj4bqnbiB0w6xtIHbhu5tpIGvDvSB04buxIEAgcGjDrWEgdHLGsOG7m2MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5pbnB1dF90ZXh0KGYie3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gNXMgxJHhu4Mga+G6v3QgcXXhuqMgdMOsbSBraeG6v20gaGnhu4duIMSR4bqneSDEkeG7pwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBr4bq/dCBxdeG6oyB0aGVvIHJlc291cmNlLWlkIGPhu6UgdGjhu4MKICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpICAjIFRob8OhdCB0w6xtIGtp4bq/bQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBkdW1wIG3DoG4gaMOsbmgga+G6v3QgcXXhuqMgdMOsbSBraeG6v20sIHRo4butIG3hu58gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdXNlcl9yZXN1bHQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcm93X3NlYXJjaF91c2VyX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgICAgICBpZiB1c2VyX3Jlc3VsdDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfcmVzdWx0KQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlLWlkLCB0aOG7rSB0w6xtIHRoZW8ga+G6v3QgcXXhuqMgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdF9mb3VuZCA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQocmVzdWx0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUubG93ZXIoKSBpbiByZXN1bHRfdGV4dC5sb3dlcigpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihyZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0X2ZvdW5kID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZXN1bHRfZm91bmQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB0cm9uZyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHTDrG0ga2nhur9tIHTDoGkga2hv4bqjbjoge3N0cihlKX0iKQogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgY8OzIGzhu5dpLCBz4butIGThu6VuZyBwaMawxqFuZyB0aOG7qWMgbeG7nyBsaW5rCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDQpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gNHMKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgQ8OhY2ggMjogTeG7nyB0cuG7sWMgdGnhur9wIFVSTCB0aMO0bmcgcXVhIGhlbHBlci5vcGVuX3VybCgpCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTeG7nyB0cmFuZyBjw6EgbmjDom4gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cDoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSB0aMOqbSBjaG8gdHJhbmcgaOG7kyBzxqEgdOG6o2kgeG9uZwogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgRm9sbG93IHRoZW8gcmVzb3VyY2UtaWQgY2jDrW5oIHjDoWMKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBkdW1wIG3DoG4gaMOsbmgga2hpIHTDrG0gbsO6dCBmb2xsb3ciKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Byb2ZpbGVfaGVhZGVyX2ZvbGxvd19idXR0b24iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgdGhlbyByZXNvdXJjZS1pZCwgdGjhu60gdMOsbSB0aGVvIHRleHQKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkgdGhlbyByZXNvdXJjZS1pZCwgdGjhu60gdMOsbSB0aGVvIHRleHQiKQogICAgICAgICAgICAgICAgIyBUw6xtIG7DunQgdGhlbyB0ZXh0CiAgICAgICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCBraGkgdMOsbSBs4bqhaSBuw7p0IGZvbGxvdyIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcHJvZmlsZV9oZWFkZXJfZm9sbG93X2J1dHRvbiIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICMgVMOsbSBuw7p0IHRoZW8gdGV4dAogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsiVGhlbyBkw7VpIiwgIkZvbGxvdyIsICLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIiwgIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXQogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD10ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IHRoZW8gZMO1aSBzYXUgbmhp4buBdSBs4bqnbiB0aOG7rSIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0ZXh0IGPhu6dhIG7DunQKICAgICAgICAgICAgYnV0dG9uX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGZvbGxvd19idXR0b24pCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiB7YnV0dG9uX3RleHR9IikKICAgICAgICAgICAgIyBO4bq/dSB0ZXh0IGPhu6dhIG7DunQgbMOgIG51bGwsIHRo4butIGzhuqV5IHRleHQgdOG7qyBjw6FjIGVsZW1lbnQgY29uCiAgICAgICAgICAgIGlmIG5vdCBidXR0b25fdGV4dCBvciBidXR0b25fdGV4dCA9PSAibnVsbCIgb3IgYnV0dG9uX3RleHQuc3RyaXAoKSA9PSAiIjoKICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIGPDoWMgZWxlbWVudCBjb24gY8OzIHRleHQKICAgICAgICAgICAgICAgIGNoaWxkX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9jaGlsZF9lbGVtZW50cyhmb2xsb3dfYnV0dG9uKQogICAgICAgICAgICAgICAgaWYgY2hpbGRfZWxlbWVudHM6CiAgICAgICAgICAgICAgICAgICAgZm9yIGNoaWxkIGluIGNoaWxkX2VsZW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF90ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChjaGlsZCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2hpbGRfdGV4dCBhbmQgY2hpbGRfdGV4dCAhPSAibnVsbCIgYW5kIGNoaWxkX3RleHQuc3RyaXAoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbl90ZXh0ID0gY2hpbGRfdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkzhuqV5IMSRxrDhu6NjIHRleHQgdOG7qyBlbGVtZW50IGNvbjoge2J1dHRvbl90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IHbhuqtuIGtow7RuZyBjw7MgdGV4dCwgdGjhu60gbOG6pXkgdOG7qyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgIGlmIG5vdCBidXR0b25fdGV4dCBvciBidXR0b25fdGV4dCA9PSAibnVsbCIgb3IgYnV0dG9uX3RleHQuc3RyaXAoKSA9PSAiIjoKICAgICAgICAgICAgICAgICAgICBidXR0b25fdGV4dCA9IGZvbGxvd19idXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTOG6pXkgdGV4dCB04burIGNvbnRlbnQtZGVzYzoge2J1dHRvbl90ZXh0fSIpCiAgICAgICAgICAgICMgTuG6v3UgbMOgICLEkGFuZyB0aGVvIGTDtWkiIGhv4bq3YyAiRm9sbG93aW5nIiB0aMOsIMSRw6MgZm9sbG93IHLhu5NpCiAgICAgICAgICAgIGlmIGJ1dHRvbl90ZXh0IGluIFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdGhlbyBkw7VpIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgbMOgICLEkMOjIHnDqnUgY+G6p3UiIGhv4bq3YyAiUmVxdWVzdGVkIiB0aMOsIMSRw6MgecOqdSBj4bqndSBmb2xsb3cgcuG7k2kKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiA1CiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGzDoCAiVGhlbyBkw7VpIiBob+G6t2MgIkZvbGxvdyIgdGjDrCBjbGljayB2w6BvIG7DunQKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyJUaGVvIGTDtWkiLCAiRm9sbG93Il06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIGNsaWNrIHbDoG8gbsO6dCB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAycwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBkaWFsb2cgaGnhu4duIGzDqm4ga2jDtG5nCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIHRo4buDIGtp4buDbSB0cmEgZGlhbG9nLCBuaMawbmcgY8OzIHRo4buDIMSRw6MgdGhlbyBkw7VpIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB0cuG6oW5nIHRow6FpIG7DunQKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGlhbG9nX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9kaWFsb2dfY29udGFpbmVyIikKICAgICAgICAgICAgICAgIGlmIGRpYWxvZ19jb250YWluZXI6CiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gIlRo4butIGzhuqFpIHNhdSIga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgcmV0cnlfdGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iVGjhu60gbOG6oWkgc2F1IikKICAgICAgICAgICAgICAgICAgICBpZiByZXRyeV90ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJKb2Iga2jDtG5nIGhvw6BuIHRow6BuaCwgYuG7iyBnaeG7m2kgaOG6oW4gdGhlbyBkw7VpICh0aOG7rSBs4bqhaSBzYXUpIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gIlnDqnUgY+G6p3UgY+G7p2EgYuG6oW4gxJFhbmcgY2jhu50iIGtow7RuZwogICAgICAgICAgICAgICAgICAgIHdhaXRpbmdfdGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iWcOqdSBj4bqndSBj4bunYSBi4bqhbiDEkWFuZyBjaOG7nSIpCiAgICAgICAgICAgICAgICAgICAgaWYgd2FpdGluZ190ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJIb8OgbiB0aMOgbmgsIHnDqnUgY+G6p3UgdGhlbyBkw7VpIMSRYW5nIGNo4budIGR1eeG7h3QiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgbMOgIGRpYWxvZyBraMOhYywgYuG6pW0gT0sgbGnDqm4gdOG7pWMKICAgICAgICAgICAgICAgICAgICBzZWxmLl9kaXNtaXNzX2FsbF9kaWFsb2dzKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgY+G6p24geMOhYyBuaOG6rW4gdGhlbyBkw7VpIGtow7RuZyAodMOgaSBraG/huqNuIHJpw6puZyB0xrApCiAgICAgICAgICAgICAgICBjb25maXJtX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9sYXlvdXRfY29udGFpbmVyX2JvdHRvbV9zaGVldCIpCiAgICAgICAgICAgICAgICBpZiBjb25maXJtX2NvbnRhaW5lcjoKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCAiVGhlbyBkw7VpIiB0cm9uZyBjb250YWluZXIKICAgICAgICAgICAgICAgICAgICBjb25maXJtX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9IlRoZW8gZMO1aSIsY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXciKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBjb25maXJtX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1fZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iRm9sbG93IixjbGFzc19uYW1lPSJhbmRyb2lkLnZpZXcuVmlldyIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGNvbmZpcm1fZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNvbmZpcm1fZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB0ZXh0IHNhdSBraGkgbmjhuqVuIHRoZW8gZMO1aQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIHRo4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBuw7p0LCBuaMawbmcgY8OzIHRo4buDIMSRw6MgdGhlbyBkw7VpIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHVwZGF0ZWRfZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9wcm9maWxlX2hlYWRlcl9mb2xsb3dfYnV0dG9uIikKICAgICAgICAgICAgICAgIGlmIG5vdCB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIGzhuqFpIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwgIlRoZW8gZMO1aSIsICJGb2xsb3ciXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCB0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHVwZGF0ZWRfZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVGV4dCBj4bunYSBuw7p0IGZvbGxvdyBzYXUga2hpIGLhuqVtOiB7dXBkYXRlZF90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0ZXh0IGPhu6dhIG7DunQgbMOgIG51bGwsIHRo4butIGzhuqV5IHRleHQgdOG7qyBjw6FjIGVsZW1lbnQgY29uCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfdGV4dCBvciB1cGRhdGVkX3RleHQgPT0gIm51bGwiIG9yIHVwZGF0ZWRfdGV4dC5zdHJpcCgpID09ICIiOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gdOG6pXQgY+G6oyBjw6FjIGVsZW1lbnQgY29uIGPDsyB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9jaGlsZF9lbGVtZW50cyh1cGRhdGVkX2ZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoaWxkX2VsZW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGNoaWxkIGluIGNoaWxkX2VsZW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGNoaWxkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoaWxkX3RleHQgYW5kIGNoaWxkX3RleHQgIT0gIm51bGwiIGFuZCBjaGlsZF90ZXh0LnN0cmlwKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfdGV4dCA9IGNoaWxkX3RleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkzhuqV5IMSRxrDhu6NjIHRleHQgdOG7qyBlbGVtZW50IGNvbiBzYXUga2hpIGLhuqVtOiB7dXBkYXRlZF90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIE7hur91IHbhuqtuIGtow7RuZyBjw7MgdGV4dCwgdGjhu60gbOG6pXkgdOG7qyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfdGV4dCBvciB1cGRhdGVkX3RleHQgPT0gIm51bGwiIG9yIHVwZGF0ZWRfdGV4dC5zdHJpcCgpID09ICIiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF90ZXh0ID0gdXBkYXRlZF9mb2xsb3dfYnV0dG9uLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTOG6pXkgdGV4dCB04burIGNvbnRlbnQtZGVzYyBzYXUga2hpIGLhuqVtOiB7dXBkYXRlZF90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGPDoWMgdHLGsOG7nW5nIGjhu6NwIGtow6FjIG5oYXUKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX3RleHQgaW4gWyLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIl06CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkZvbGxvdyB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBn4butaSB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIlRoZW8gZMO1aSIsICJGb2xsb3ciXToKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIHRow7RuZyBiw6FvICJZw6p1IGPhuqd1IGPhu6dhIGLhuqFuIMSRYW5nIGNo4budIiBraMO0bmcKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxLjUpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEtow7RuZyB0aOG7gyBraeG7g20gdHJhIHRp4bq/cCwgZ2nhuqMgxJHhu4tuaCBsw6AgxJHDoyBn4butaSB5w6p1IGPhuqd1IHRoZW8gZMO1aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB3YWl0aW5nX3RleHQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9IlnDqnUgY+G6p3UgY+G7p2EgYuG6oW4gxJFhbmcgY2jhu50iKQogICAgICAgICAgICAgICAgICAgICAgICBpZiB3YWl0aW5nX3RleHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kaXNtaXNzX2FsbF9kaWFsb2dzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCwgecOqdSBj4bqndSB0aGVvIGTDtWkgxJFhbmcgY2jhu50gZHV54buHdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogCgogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiRm9sbG93IGtow7RuZyB0aMOgbmggY8O0bmcsIHRleHQgY+G7p2EgbsO6dCBsw6A6IHt1cGRhdGVkX3RleHR9IikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCwgY8OzIHRo4buDIMSRw6MgZm9sbG93IHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGZvbGxvdyBzYXUga2hpIG5o4bqlbiwgZ2nhuqMgxJHhu4tuaCDEkcOjIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVGV4dCBj4bunYSBuw7p0IGtow7RuZyBraOG7m3AgduG7m2kgJ1RoZW8gZMO1aScgaG/hurdjICdGb2xsb3cnOiB7YnV0dG9uX3RleHR9IikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGpvYiBmb2xsb3c6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKICAgIAogICAgZGVmIF9wZXJmb3JtX2xpa2Vfam9iKHNlbGYsIHBvc3RfbGluazogc3RyKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IgbGlrZSBiw6BpIMSRxINuZyB0csOqbiBJbnN0YWdyYW0KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwb3N0X2xpbms6IExpbmsgxJHhur9uIGLDoGkgxJHEg25nIGPhuqduIGxpa2UKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBUcuG6oW5nIHRow6FpIGpvYiAoMDogY2jGsGEgbMOgbSwgMTogaG/DoG4gdGjDoG5oLCAyOiBs4buXaSwgMzogYuG7iyB1bmxpa2UpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIGLDoGkgxJHEg25nIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3A6IHtwb3N0X2xpbmt9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyB0cuG7sWMgdGnhur9wIFVSTCB0aMO0bmcgcXVhIGhlbHBlci5vcGVuX3VybCgpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHBvc3RfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSB0cmFuZyBiw6BpIMSRxINuZyB04bqjaSB4b25nIHbhu5tpIHRo4budaSBnaWFuIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoNCwgNikgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0LTZzCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBjaOG7nSB7d2FpdF90aW1lfXMgxJHhu4MgdHJhbmcgdOG6o2kgeG9uZy4uLiIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZ14buRdCBuaOG6uSBsw6puIHRyw6puIGtob+G6o25nIDEgbuG7rWEgbcOgbiBow6xuaCDEkeG7gyBoaeG7g24gdGjhu4sgbsO6dCBsaWtlCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlZ14buRdCBuaOG6uSDEkeG7gyBoaeG7g24gdGjhu4sgbsO6dCBsaWtlIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KSAgIyBUxINuZyB0aOG7nWkgZ2lhbiBjaOG7nSBsw6puIDEuNXMKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGxpa2UgdGhlbyByZXNvdXJjZS1pZAogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCBraGkgdMOsbSBuw7p0IGxpa2UiKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9yb3dfZmVlZF9idXR0b25fbGlrZSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSwgdGjhu60gdnXhu5F0IGzhuqduIG7hu69hCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UsIHRo4butIHZ14buRdCBs4bqnbiBu4buvYSIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oIGtoaSB0w6xtIGzhuqFpIG7DunQgbGlrZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Jvd19mZWVkX2J1dHRvbl9saWtlIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHbhuqtuIGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlLWlkLCB0aOG7rSB0w6xtIHRoZW8gY29udGVudC1kZXNjCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlRo4butIHTDrG0gbsO6dCBsaWtlIHRoZW8gY29udGVudC1kZXNjIikKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow61jaCIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAjIFRo4butIHTDrG0gduG7m2kgdGV4dCB0aeG6v25nIEFuaAogICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9Ikxpa2UiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSB24bqrbiBraMO0bmcgdMOsbSB0aOG6pXksIGLDoW8gbOG7l2kKICAgICAgICAgICAgaWYgbm90IGxpa2VfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2Ugc2F1IG5oaeG7gXUgbOG6p24gdGjhu60iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgbGlrZSBjaMawYSBi4bqxbmcgdGh14buZYyB0w61uaCBzZWxlY3RlZAogICAgICAgICAgICBpc19zZWxlY3RlZCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHNlbGVjdGVkIGtow7RuZyBjw7MgZ2nDoSB0cuG7iywgdGjhu60gdMOsbSBuw7p0ICJC4buPIHRow61jaCIgaG/hurdjICJVbmxpa2UiCiAgICAgICAgICAgIGlmIG5vdCBpc19zZWxlY3RlZDoKICAgICAgICAgICAgICAgIHVubGlrZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iQuG7jyB0aMOtY2giKQogICAgICAgICAgICAgICAgaWYgbm90IHVubGlrZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgdW5saWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJVbmxpa2UiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpc19zZWxlY3RlZCA9IGJvb2wodW5saWtlX2J1dHRvbikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IMSRw6MgbGlrZSBy4buTaSB0aMOsIGhvw6BuIHRow6BuaAogICAgICAgICAgICBpZiBpc19zZWxlY3RlZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgbGlrZSBiw6BpIHZp4bq/dCBuw6B5IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIExpa2UgYsOgaSB2aeG6v3QKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiTmjhuqVuIG7DunQgbGlrZSIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gMnMKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gxJHDoyBsaWtlIHRow6BuaCBjw7RuZyBjaMawYQogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAjIEtow7RuZyB0aOG7gyBraeG7g20gdHJhLCBnaeG6oyDEkeG7i25oIMSRw6MgbGlrZSB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0aOG7gyBraeG7g20gdHJhIGzhuqFpIHRy4bqhbmcgdGjDoWkgbGlrZSwgZ2nhuqMgxJHhu4tuaCB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBjaGVja191bmxpa2UgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iQuG7jyB0aMOtY2giKQogICAgICAgICAgICBpZiBub3QgY2hlY2tfdW5saWtlOgogICAgICAgICAgICAgICAgY2hlY2tfdW5saWtlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlVubGlrZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIGLhurFuZyByZXNvdXJjZS1pZCB2w6Agc2VsZWN0ZWQKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3VubGlrZToKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uX2FmdGVyID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Jvd19mZWVkX2J1dHRvbl9saWtlIikKICAgICAgICAgICAgICAgIGlmIGxpa2VfYnV0dG9uX2FmdGVyIGFuZCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uX2FmdGVyKToKICAgICAgICAgICAgICAgICAgICBjaGVja191bmxpa2UgPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgY2hlY2tfdW5saWtlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIGLDoGkgdmnhur90IHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyB4w6FjIG5o4bqtbiDEkcOjIGxpa2UgYsOgaSB2aeG6v3QiKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGxpa2U6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgCiAgICBkZWYgX2NhcmVfc3dpcGVfZmVlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJWdeG7kXQgYuG6o25nIHRpbiBJbnN0YWdyYW0gduG7m2kgdGjhu51pIGdpYW4gMi01IHBow7p0LCBjw7MgdGjhu4MgbGlrZSBiw6BpIG7hur91IGThu6tuZyBsw6J1IiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgIyBSYW5kb20gdGjhu51pIGdpYW4gdnXhu5F0IHThu6sgMzAtMTIwIGdpw6J5CiAgICAgICAgICAgIHRvdGFsX3RpbWUgPSByYW5kb20ucmFuZGludCgzMCwgMTIwKSAgIyAzMC0xMjAgZ2nDonkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkLhuq90IMSR4bqndSB2deG7kXQgYuG6o25nIHRpbiB0cm9uZyB7dG90YWxfdGltZX0gZ2nDonkiKQogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIHN3aXBlX2NvdW50ID0gMAogICAgICAgICAgICBsaWtlX2NvdW50ID0gMAogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgKHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSkgPCB0b3RhbF90aW1lOgogICAgICAgICAgICAgICAgc3dpcGVfY291bnQgKz0gMQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgIyBUaOG7nWkgZ2lhbiBk4burbmcgbmfhuqt1IG5oacOqbiB04burIDEtMTUgZ2nDonkKICAgICAgICAgICAgICAgIHBhdXNlX3RpbWUgPSByYW5kb20ucmFuZGludCgxLCAxNSkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiVnXhu5F0IGzhuqduIHtzd2lwZV9jb3VudH0sIGThu6tuZyB7cGF1c2VfdGltZX1zIikKICAgICAgICAgICAgICAgICMgTuG6v3UgZOG7q25nIGzDonUgaMahbiA4cyB0aMOsIGPDsyAyJSBjaGFuY2UgbGlrZSBiw6BpCiAgICAgICAgICAgICAgICBpZiBwYXVzZV90aW1lID4gOCBhbmQgcmFuZG9tLnJhbmRpbnQoMSwgMTAwKSA8PSAyOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlRo4butIGxpa2UgYsOgaSB2aeG6v3QgbsOgeS4uLiIpCiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCBsaWtlIHRyb25nIGZlZWQKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9yb3dfZmVlZF9idXR0b25fbGlrZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsaWtlX2J1dHRvbiBhbmQgbm90IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWtlX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBsaWtlIGLDoGkgdmnhur90ICh04buVbmc6IHtsaWtlX2NvdW50fSBsaWtlcykiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGjDqm0gdGjhu51pIGdpYW4gY2jhu50gc2F1IGtoaSBsaWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDIpKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJLaMO0bmcgdGjhu4MgbGlrZSBiw6BpOiB7ZX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEThu6tuZyB0aGVvIHRo4budaSBnaWFuIMSRw6MgcmFuZG9tCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKHBhdXNlX3RpbWUpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgZWxhcHNlZCA9IHRpbWUudGltZSgpIC0gc3RhcnRfdGltZQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiSG/DoG4gdGjDoG5oIHZ14buRdCBmZWVkOiB7c3dpcGVfY291bnR9IGzhuqduIHZ14buRdCwge2xpa2VfY291bnR9IGxpa2VzIHRyb25nIHtlbGFwc2VkOi4xZn1zIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHZ14buRdCBmZWVkOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgX2NhcmVfd2F0Y2hfcmVlbHMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiTMaw4bubdCByZWVsIHbhu5tpIHRo4budaSBnaWFuIGThu6tuZyByYW5kb20gdsOgIGPDsyB0aOG7gyBsaWtlIHZpZGVvIG7hur91IGThu6tuZyBsw6J1IiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqvdCDEkeG6p3UgbMaw4bubdCByZWVsLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cgdHLGsOG7m2MKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw7MgdGFiIHJlZWwga2jDtG5nCiAgICAgICAgICAgIHJlZWxfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0aW1lb3V0PTUsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvY2xpcHNfdGFiIikKICAgICAgICAgICAgaWYgbm90IHJlZWxfdGFiOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IHRhYiBSZWVsIChjbGlwc190YWIpIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihyZWVsX3RhYikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgIAogICAgICAgICAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgdG90YWxfd2FpdCA9IHJhbmRvbS5yYW5kaW50KDMwLCAxMjApICAjIDMwLTEyMCBnacOieQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVOG7lW5nIHRo4budaSBnaWFuIGzGsOG7m3QgcmVlbCBz4bq9IGzDoCB7dG90YWxfd2FpdH0gZ2nDonkiKQogICAgICAgICAgICAKICAgICAgICAgICAgZWxhcHNlZCA9IDAKICAgICAgICAgICAgc3dpcGVfY291bnQgPSAwCiAgICAgICAgICAgIGxpa2VfY291bnQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICB3aGlsZSBlbGFwc2VkIDwgdG90YWxfd2FpdDoKICAgICAgICAgICAgICAgIHN3aXBlX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYixJBhbmcgdnXhu5F0IHJlZWwgbOG6p24gdGjhu6kge3N3aXBlX2NvdW50fSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBhdXRob3IgaW5mbyBjb21wb25lbnQgxJHhu4MgeMOhYyDEkeG7i25oIMSRaeG7g20gYuG6r3QgxJHhuqd1IHZ14buRdAogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGF1dGhvcl9pbmZvID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChyZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2NsaXBzX2F1dGhvcl9pbmZvX2NvbXBvbmVudCIsIHRpbWVvdXQ9MikKICAgICAgICAgICAgICAgICAgICBpZiBhdXRob3JfaW5mbzoKICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSB04buNYSDEkeG7mSB0cnVuZyB0w6JtIGPhu6dhIGF1dGhvciBpbmZvIGNvbXBvbmVudAogICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJfeCwgY2VudGVyX3kgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9jZW50ZXIoYXV0aG9yX2luZm8pCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIFRow6ptIHJhbmRvbSBvZmZzZXQgxJHhu4MgdHLDoW5oIHRyw7luZyBs4bq3cCAowrExMCUgdGhlbyBjaGnhu4F1IG5nYW5nKQogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRfeCA9IHJhbmRvbS5yYW5kaW50KC1pbnQoY2VudGVyX3ggKiAwLjEpLCBpbnQoY2VudGVyX3ggKiAwLjEpKQogICAgICAgICAgICAgICAgICAgICAgICBzdGFydF94ID0gY2VudGVyX3ggKyBvZmZzZXRfeAogICAgICAgICAgICAgICAgICAgICAgICBzdGFydF95ID0gY2VudGVyX3kKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgxJBp4buDbSBr4bq/dCB0aMO6YzogdnXhu5F0IGzDqm4gNTAwcHgKICAgICAgICAgICAgICAgICAgICAgICAgZW5kX3ggPSBzdGFydF94ICsgcmFuZG9tLnJhbmRpbnQoLTEwLCAxMCkgICMgVGjDqm0gY2jDunQgcmFuZG9tIGNobyB04buxIG5oacOqbgogICAgICAgICAgICAgICAgICAgICAgICBlbmRfeSA9IHN0YXJ0X3kgLSA1MDAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgVOG7kWMgxJHhu5kgcmFuZG9tIG5oxrAgdGF5IHZ14buRdCAoMzAwLTgwMG1zKQogICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHJhbmRvbS5yYW5kaW50KDMwMCwgODAwKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJTd2lwZSBjdXN0b20gdOG7qyAoe3N0YXJ0X3h9LHtzdGFydF95fSkgxJHhur9uICh7ZW5kX3h9LHtlbmRfeX0pIHRyb25nIHtkdXJhdGlvbn1tcyIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlKHN0YXJ0X3gsIHN0YXJ0X3ksIGVuZF94LCBlbmRfeSwgZHVyYXRpb24pCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWxsYmFjayB24buBIHN3aXBlX3VwIG3hurdjIMSR4buLbmggbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IGF1dGhvciBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCJLaMO0bmcgdMOsbSB0aOG6pXkgYXV0aG9yIGluZm8sIGTDuW5nIHN3aXBlX3VwIG3hurdjIMSR4buLbmgiKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIHN3aXBlX2Vycm9yOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiTOG7l2kga2hpIHN3aXBlIGN1c3RvbToge3N3aXBlX2Vycm9yfSwgZMO5bmcgc3dpcGVfdXAgbeG6t2MgxJHhu4tuaCIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRo4budaSBnaWFuIHhlbSB2aWRlbyByYW5kb20gdOG7qyAyLTEwcwogICAgICAgICAgICAgICAgdmlkZW9fdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDE1KQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJYZW0gdmlkZW8gbsOgeSB7dmlkZW9fdGltZX0gZ2nDonkuLi4iKQogICAgICAgICAgICAgICAgIyBO4bq/dSBk4burbmcgbMOidSBoxqFuIDhzIHRow6wgY8OzIDUlIGNoYW5jZSBsaWtlIHZpZGVvCiAgICAgICAgICAgICAgICBpZiB2aWRlb190aW1lID4gOCBhbmQgcmFuZG9tLnJhbmRpbnQoMSwgMTAwKSA8PSA1OgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgIyBDaOG7nSBt4buZdCBjaMO6dCDEkeG7gyB2aWRlbyBsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIG7DunQgbGlrZSB0cm9uZyByZWVsCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIG7DunQgbGlrZSB0aGVvIGPDoWMgcmVzb3VyY2UtaWQga2jDoWMgbmhhdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvbGlrZV9idXR0b24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGxpa2VfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow61jaCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgbGlrZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iTGlrZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxpa2VfYnV0dG9uIGFuZCBub3Qgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVGjhu60gbGlrZSB2aWRlbyByZWVsIG7DoHkuLi4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWtlX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBsaWtlIHZpZGVvIHJlZWwgKHThu5VuZzoge2xpa2VfY291bnR9IGxpa2VzKSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBYZW0gdGjDqm0gMi0xMHMgc2F1IGtoaSBsaWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDEwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiWGVtIHRow6ptIHtleHRyYV90aW1lfXMgc2F1IGtoaSBsaWtlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKGV4dHJhX3RpbWUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgaG/hurdjIMSRw6MgbGlrZSBy4buTaSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiS2jDtG5nIHRo4buDIGR1bXAgc2NyZWVuIMSR4buDIHTDrG0gbsO6dCBsaWtlIikKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiS2jDtG5nIHRo4buDIGxpa2UgdmlkZW8gcmVlbDoge2V9IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBE4burbmcgdGhlbyB0aOG7nWkgZ2lhbiDEkcOjIHJhbmRvbQogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCh2aWRlb190aW1lKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZWxhcHNlZCA9IHRpbWUudGltZSgpIC0gc3RhcnRfdGltZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgZm9yY2Ugc3RvcAogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgwLjEpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlThu5VuZyBz4buRIGzhuqduIHZ14buRdDoge3N3aXBlX2NvdW50fSwge2xpa2VfY291bnR9IGxpa2VzIikKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsxrDhu5t0IHhvbmcgY8OhYyByZWVsLCBxdWF5IGzhuqFpIHRyYW5nIGNo4bunLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IlRyYW5nIGNo4bunIiwgdGltZW91dD01KToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBxdWF5IGzhuqFpIHRyYW5nIGNo4bunIHNhdSBraGkgbMaw4bubdCByZWVsLiIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBsxrDhu5t0IHJlZWw6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9jYXJlX3ZpZXdfc3RvcmllcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJYZW0gc3RvcnkgMy01IHN0b3J5IHbhu5tpIHThu5FjIMSR4buZIG5n4bqrdSBuaGnDqm4iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICAjIEtp4buDbSB0cmEgdGjhu51pIGdpYW4geGVtIHN0b3J5IGN14buRaSBjw7luZyB04burIGFjY291bnQKICAgICAgICAgICAgbGFzdF92aWV3X3N0b3JpZXMgPSBhY2NvdW50LmdldCgibGFzdF92aWV3X3N0b3JpZXMiLCAwKQogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIGlmIGxhc3Rfdmlld19zdG9yaWVzID4gMCBhbmQgKGN1cnJlbnRfdGltZSAtIGxhc3Rfdmlld19zdG9yaWVzKSA8IDEwODAwOiAgIyAzIHRp4bq/bmcgPSAxMDgwMCBnacOieQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQ2jGsGEgxJHhu6cgMyB0aeG6v25nIGvhu4MgdOG7qyBs4bqnbiB4ZW0gc3RvcnkgY3Xhu5FpLCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgc3RvcnkgdGh1bWJuYWlscyB0aGVvIHJlc291cmNlLWlkCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICBzdG9yeV90aHVtYnMgPSBbXQogICAgICAgICAgICBpZiBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgc3RvcnlfdGh1bWJzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYXZhdGFyX2ltYWdlX3ZpZXciKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIG7hur91IGPDsyDDrXQgbmjhuqV0IDIgc3RvcnkgdGjDrCBt4bubaSBsw6BtCiAgICAgICAgICAgIGlmIGxlbihzdG9yeV90aHVtYnMpIDwgMjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJLaMO0bmcgxJHhu6cgc3RvcnkgxJHhu4MgeGVtIChjaOG7iSBjw7Mge2xlbihzdG9yeV90aHVtYnMpfSBzdG9yeSksIGLhu48gcXVhIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJhbmRvbSBjaOG7jW4gc3RvcnkgdOG7qyB0aOG7qSAyIMSR4bq/biBjdeG7kWkKICAgICAgICAgICAgc3RhcnRfaW5kZXggPSByYW5kb20ucmFuZGludCgxLCBsZW4oc3RvcnlfdGh1bWJzKSAtIDEpCiAgICAgICAgICAgIHNlbGVjdGVkX3N0b3J5ID0gc3RvcnlfdGh1bWJzW3N0YXJ0X2luZGV4XQogICAgICAgICAgICAKICAgICAgICAgICAgIyBC4bqlbSB2w6BvIHN0b3J5IMSRxrDhu6NjIGNo4buNbgogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VsZWN0ZWRfc3RvcnkpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBYZW0gMy04IHN0b3J5IHbhu5tpIHThu5FjIMSR4buZIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgbnVtX3N0b3JpZXMgPSByYW5kb20ucmFuZGludCgzLCA4KQogICAgICAgICAgICBmb3IgXyBpbiByYW5nZShudW1fc3Rvcmllcyk6CiAgICAgICAgICAgICAgICAjIFRo4budaSBnaWFuIHhlbSBzdG9yeTogbmfhuq9uIGhv4bq3YyBkw6BpIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgICAgIHdhaXQgPSByYW5kb20udW5pZm9ybSgxLjAsIDMuMCkgaWYgcmFuZG9tLmNob2ljZShbVHJ1ZSwgRmFsc2VdKSBlbHNlIHJhbmRvbS51bmlmb3JtKDMuMCwgNS4wKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXQpCiAgICAgICAgICAgICAgICAjIENodXnhu4NuIHNhbmcgc3RvcnkgdGnhur9wIHRoZW8gYuG6sW5nIGPDoWNoIGLhuqVtIHbDoG8gduG7iyB0csOtIG5n4bqrdSBuaGnDqm4g4bufIGdp4buvYSBtw6BuIGjDrG5oCiAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3JpZ2h0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGhvw6F0IHN0b3J5IHZpZXdlcgogICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRo4budaSBnaWFuIHhlbSBzdG9yeSBjdeG7kWkgY8O5bmcgdsOgbyBhY2NvdW50CiAgICAgICAgICAgIGlmIGFjY291bnQgYW5kICJpZCIgaW4gYWNjb3VudDoKICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudFsiaWQiXSwgeyJsYXN0X3ZpZXdfc3RvcmllcyI6IGN1cnJlbnRfdGltZSwgImlzX3N5bmMiOiBGYWxzZX0pCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSB4ZW0gc3Rvcnk6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfY2FyZV92aWV3X25vdGlmaWNhdGlvbnMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiTeG7nyB0YWIgdGjDtG5nIGLDoW8gdsOgIGN14buZbiBuaOG6uSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIELGsOG7m2MgMTogS2nhu4NtIHRyYSBjw7Mgbm90aWZpY2F0aW9uIGJhZGdlIGtow7RuZwogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBub3RpZmljYXRpb25fYmFkZ2UgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvbGVkX2JhZGdlIikKICAgICAgICAgICAgaWYgbm90IG5vdGlmaWNhdGlvbl9iYWRnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyBjw7Mgbm90aWZpY2F0aW9uIGJhZGdlLCBi4buPIHF1YSB4ZW0gdGjDtG5nIGLDoW8iKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAyOiBC4bqlbSB2w6BvIG5vdGlmaWNhdGlvbiB0YWIKICAgICAgICAgICAgbm90aWZpY2F0aW9uX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9ub3RpZmljYXRpb24iKQogICAgICAgICAgICBpZiBub3Qgbm90aWZpY2F0aW9uX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBub3RpZmljYXRpb24gdGFiIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihub3RpZmljYXRpb25fdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMiwgMykpICAjIMSQ4buNYyAyLTNzCiAgICAgICAgICAgIAogICAgICAgICAgICAjIELGsOG7m2MgMzogUmFuZG9tIHjhu60gbMO9CiAgICAgICAgICAgIGlmIHJhbmRvbS5jaG9pY2UoW1RydWUsIEZhbHNlXSk6CiAgICAgICAgICAgICAgICAjIFTDrG0gdsOgIGLhuqVtIHbDoG8gc3Rvcnkgcm93CiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgc3Rvcnlfcm93cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iYWN0aXZpdHlfZmVlZF9uZXdzZmVlZF9zdG9yeV9yb3ciKQogICAgICAgICAgICAgICAgICAgIGlmIHN0b3J5X3Jvd3MgYW5kIGxlbihzdG9yeV9yb3dzKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiBpbmRleCB04burIDEtMyAoaG/hurdjIMOtdCBoxqFuIG7hur91IGtow7RuZyDEkeG7pykKICAgICAgICAgICAgICAgICAgICAgICAgbWF4X2luZGV4ID0gbWluKDMsIGxlbihzdG9yeV9yb3dzKSAtIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG1heF9pbmRleCA+PSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfaW5kZXggPSByYW5kb20ucmFuZGludCgxLCBtYXhfaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9zdG9yeSA9IHN0b3J5X3Jvd3Nbc2VsZWN0ZWRfaW5kZXhdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VsZWN0ZWRfc3RvcnkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMywgNCkpICAjIENo4budIDMtNHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiAxLTMgbOG6p24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHJhbmRvbS5yYW5kaW50KDEsIDMpKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDIpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBSYW5kb20gdnXhu5F0IGzDqm4gaG/hurdjIGtow7RuZwogICAgICAgICAgICAgICAgaWYgcmFuZG9tLmNob2ljZShbVHJ1ZSwgRmFsc2VdKToKICAgICAgICAgICAgICAgICAgICAjIFZ14buRdCBsw6puIDEtMyBs4bqnbgogICAgICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHJhbmRvbS5yYW5kaW50KDEsIDMpKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMSwgMikpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIELGsOG7m2MgNDogUXVheSBs4bqhaSBob21lCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHhlbSB0aMO0bmcgYsOhbzoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHBlcmZvcm1fY2FyZShzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiTGVnYWN5IG1ldGhvZCAtIHJlZGlyZWN0cyB0byBTbWFydCBDYXJlIFN5c3RlbSBmb3IgY29uc2lzdGVuY3kiIiIKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQ2h1eeG7g24gaMaw4bubbmcgcGVyZm9ybV9jYXJlIEluc3RhZ3JhbSBzYW5nIFNtYXJ0IENhcmUgU3lzdGVtIGNobyB0w6BpIGtob+G6o246IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIDEgdHJvbmcgMyBTbWFydCBDYXJlIG1ldGhvZHMgxJHhu4MgdMawxqFuZyB0aMOtY2ggduG7m2kgbGVnYWN5CiAgICAgICAgICAgIHNtYXJ0X2NhcmVfYWN0aW9ucyA9IFsKICAgICAgICAgICAgICAgIHNlbGYuX2NhcmVfc3dpcGVfZmVlZCwKICAgICAgICAgICAgICAgIHNlbGYuX2NhcmVfd2F0Y2hfcmVlbHMsIAogICAgICAgICAgICAgICAgc2VsZi5fY2FyZV92aWV3X25vdGlmaWNhdGlvbnMKICAgICAgICAgICAgXQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIGFjdGlvbgogICAgICAgICAgICBzZWxlY3RlZF9hY3Rpb24gPSByYW5kb20uY2hvaWNlKHNtYXJ0X2NhcmVfYWN0aW9ucykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBTbWFydCBDYXJlIGFjdGlvbgogICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRfYWN0aW9uKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBTbWFydCBDYXJlIGNobyBJbnN0YWdyYW06IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgZGVmIHBlcmZvcm1fcG9zdF9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDEg25nIOG6o25oIGNobyBJbnN0YWdyYW0gduG7m2kga2nhu4NtIHRyYSB0aOG7nWkgZ2lhbiBkZWxheQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nIMSRxINuZyDhuqNuaCBob+G6t2MgxJHDoyDEkcSDbmcgZ+G6p24gxJHDonkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFjYyA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgICAgIGFjY291bnRfaWQgPSBhY2NvdW50LmdldCgnaWQnKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHRo4budaSBnaWFuIHBvc3QgZ+G6p24gbmjhuqV0CiAgICAgICAgICAgIGRlbGF5X21pbnV0ZXMgPSBzZWxmLmdldF9jb25maWcoImRlbGF5X3Bvc3RfdmlkZW9fbWludXRlIikKICAgICAgICAgICAgaWYgZGVsYXlfbWludXRlcyBhbmQgYWNjb3VudF9pZDoKICAgICAgICAgICAgICAgIGxhc3RfcG9zdF90aW1lID0gc2VsZi5kYi5nZXRfYWNjb3VudF9sYXN0X3Bvc3RfdGltZShhY2NvdW50X2lkLCBzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAgICAgY3VycmVudF90aW1lID0gaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBsYXN0X3Bvc3RfdGltZToKICAgICAgICAgICAgICAgICAgICB0aW1lX2RpZmZfbWludXRlcyA9IChjdXJyZW50X3RpbWUgLSBsYXN0X3Bvc3RfdGltZSkgLyA2MAogICAgICAgICAgICAgICAgICAgIGlmIHRpbWVfZGlmZl9taW51dGVzIDwgZGVsYXlfbWludXRlczoKICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nX21pbnV0ZXMgPSBkZWxheV9taW51dGVzIC0gdGltZV9kaWZmX21pbnV0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjfSDEkcOjIMSRxINuZyDhuqNuaCBn4bqnbiDEkcOieSwgY+G6p24gY2jhu50gdGjDqm0ge3JlbWFpbmluZ19taW51dGVzOi4xZn0gcGjDunQiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBUcuG6oyB24buBIFRydWUgxJHhu4Mga2jDtG5nIGNvaSBsw6AgbOG7l2kKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgxJHEg25nIOG6o25oIGNobyB0w6BpIGtob+G6o246IHthY2N9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAxOiDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunIEluc3RhZ3JhbQogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyB2w6BvIHRyYW5nIGNo4bunIEluc3RhZ3JhbSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAyOiBSYW5kb20gc+G7kSBsxrDhu6NuZyDhuqNuaCB2w6AgdOG6o2kgduG7gQogICAgICAgICAgICBpbWFnZV9jb3VudCA9IHJhbmRvbS5yYW5kaW50KDEsIDUpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJSYW5kb20ge2ltYWdlX2NvdW50fSDhuqNuaCDEkeG7gyDEkcSDbmcgYsOgaSIpCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmhlbHBlci5kb3dubG9hZF9pbWFnZShjb3VudD1pbWFnZV9jb3VudCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJU4bqjaSDhuqNuaCB0aOG6pXQgYuG6oWksIGLhu48gcXVhIMSRxINuZyBiw6BpIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIELGsOG7m2MgMzogTmjhuqVuIG7DunQgdOG6oW8gYsOgaSB2aeG6v3QgKGNyZWF0aW9uX3RhYiBob+G6t2MgbsO6dCArKQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqlbSBuw7p0IHThuqFvIGLDoGkgdmnhur90Li4uIikKICAgICAgICAgICAgYWRkX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9jcmVhdGlvbl90YWIiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgIGlmIG5vdCBhZGRfYnV0dG9uOgogICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIG7DunQgKyDhu58gduG7iyB0csOtIGtow6FjCiAgICAgICAgICAgICAgICBhZGRfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChyZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfYnV0dG9uc19jb250YWluZXJfbGVmdCIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgICAgIGlmIG5vdCBhZGRfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICMgVGjhu60gY8OhYyBjw6FjaCB0w6xtIGtow6FjCiAgICAgICAgICAgICAgICAgICAgYWRkX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSJOZXcgcG9zdCIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgICAgICAgICBpZiBub3QgYWRkX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgYWRkX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSJBZGQiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBhZGRfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgdOG6oW8gYsOgaSB2aeG6v3QiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAjIENo4budIGNhbWVyYSBkZXN0aW5hdGlvbiBmZWVkCiAgICAgICAgICAgIGNhbWVyYV9kZXN0ID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0aW1lb3V0PTUsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvY2FtX2Rlc3RfZmVlZCIpCiAgICAgICAgICAgIGlmIG5vdCBjYW1lcmFfZGVzdDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBjYW1fZGVzdF9mZWVkIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUw6xtIHRo4bqleSB0aMOsIGNsaWNrCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoY2FtZXJhX2Rlc3QpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGltYWdlX2NvdW50ID4gMToKICAgICAgICAgICAgICAgICMgQsaw4bubYyA0OiBC4bqlbSAiQ0jhu4xOIE5ISeG7gFUiIG7hur91IGPhuqduIGNo4buNbiBuaGnhu4F1IOG6o25oCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqlbSAnQ0jhu4xOIE5ISeG7gFUnLi4uIikKICAgICAgICAgICAgICAgIG11bHRpX3NlbGVjdF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHRleHQ9IkNI4buMTiBOSEnhu4BVIiwgdGltZW91dD0zKQogICAgICAgICAgICAgICAgaWYgbm90IG11bHRpX3NlbGVjdF9idXR0b246CiAgICAgICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIHRoZW8gY29udGVudC1kZXNjCiAgICAgICAgICAgICAgICAgICAgbXVsdGlfc2VsZWN0X2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSJOw7p0IGNo4buNbiBuaGnhu4F1IiwgdGltZW91dD0zKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBtdWx0aV9zZWxlY3RfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAjIFRo4butIHTDrG0gdGhlbyByZXNvdXJjZS1pZAogICAgICAgICAgICAgICAgICAgICAgICBtdWx0aV9zZWxlY3RfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChyZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL211bHRpX3NlbGVjdF9zbGlkZV9idXR0b25fYWx0IiwgdGltZW91dD0zKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgbXVsdGlfc2VsZWN0X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0ICdDSOG7jE4gTkhJ4buAVSciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBCxrDhu5tjIDU6IENo4buNbiDhuqNuaCB0aGVvIHPhu5EgbMaw4bujbmcgxJHDoyByYW5kb20KICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJDaOG7jW4ge2ltYWdlX2NvdW50fSDhuqNuaCB04burIHRoxrAgdmnhu4duLi4uIikKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCDEkeG7gyB0w6xtIOG6o25oIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGdhbGxlcnlfaXRlbXMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9nYWxsZXJ5X2dyaWRfaXRlbV90aHVtYm5haWwiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgZ2FsbGVyeV9pdGVtczoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkg4bqjbmggbsOgbyB0cm9uZyB0aMawIHZp4buHbiIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQ2jhu41uIHPhu5EgbMaw4bujbmcg4bqjbmggdGhlbyB5w6p1IGPhuqd1ICh04buRaSDEkWEgbMOgIHPhu5Eg4bqjbmggY8OzIHPhurVuKQogICAgICAgICAgICAgICAgIyBC4buPIHF1YSDhuqNuaCDEkeG6p3UgdGnDqm4gdsOsIEluc3RhZ3JhbSDEkcOjIHThu7EgxJHhu5luZyBjaOG7jW4KICAgICAgICAgICAgICAgIGl0ZW1zX3RvX3NlbGVjdCA9IG1pbihpbWFnZV9jb3VudCwgbGVuKGdhbGxlcnlfaXRlbXMpKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHtsZW4oZ2FsbGVyeV9pdGVtcyl9IOG6o25oLCBz4bq9IGNo4buNbiB7aXRlbXNfdG9fc2VsZWN0fSDhuqNuaCAoYuG7jyBxdWEg4bqjbmggxJHhuqd1IHRpw6puIMSRw6MgxJHGsOG7o2MgY2jhu41uIHThu7EgxJHhu5luZykiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIELhuq90IMSR4bqndSB04burIOG6o25oIHRo4bupIDIgKGluZGV4IDEpIHbDrCDhuqNuaCDEkeG6p3UgdGnDqm4gxJHDoyDEkcaw4bujYyBjaOG7jW4gdOG7sSDEkeG7mW5nCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgxLCBpdGVtc190b19zZWxlY3QpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihnYWxsZXJ5X2l0ZW1zW2ldKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY2jhu41uIOG6o25oIHtpKzF9L3tpdGVtc190b19zZWxlY3R9IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlThu5VuZyBj4buZbmcgxJHDoyBjaOG7jW4ge2l0ZW1zX3RvX3NlbGVjdH0g4bqjbmggKDEg4bqjbmggdOG7sSDEkeG7mW5nICsge2l0ZW1zX3RvX3NlbGVjdC0xfSDhuqNuaCB0aOG7pyBjw7RuZykiKQoKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgxJDhu5FpIHbhu5tpIDEg4bqjbmgsIGNo4buJIGPhuqduIGNo4buNbiDhuqNuaCDEkeG6p3UgdGnDqm4KICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkNo4buNbiDhuqNuaCDEkeG6p3UgdGnDqm4gdHJvbmcgdGjGsCB2aeG7h24uLi4iKQogICAgICAgICAgICAgICAgIyBLaMO0bmcgY+G6p24gd2FpdF90b190YXBfZWxlbWVudCBjaG8geHBhdGggcGjhu6ljIHThuqFwLCBkw7luZyBmaW5kX2VsZW1lbnQgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oIMSR4buDIHTDrG0g4bqjbmgiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0g4bqjbmggxJHhuqd1IHRpw6puIHRyb25nIGdhbGxlcnkKICAgICAgICAgICAgICAgIGZpcnN0X2ltYWdlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5JbWFnZVZpZXciKQogICAgICAgICAgICAgICAgaWYgbm90IGZpcnN0X2ltYWdlOgogICAgICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSB0aGVvIHJlc291cmNlLWlkCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeV9pdGVtcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2dhbGxlcnlfZ3JpZF9pdGVtX3RodW1ibmFpbCIpCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FsbGVyeV9pdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfaW1hZ2UgPSBnYWxsZXJ5X2l0ZW1zWzBdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBmaXJzdF9pbWFnZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkg4bqjbmggdHJvbmcgdGjGsCB2aeG7h24iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRhcCB2w6BvIOG6o25oIMSR4bqndSB0acOqbgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGZpcnN0X2ltYWdlKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDIpKQoKICAgICAgICAgICAgIyBCxrDhu5tjIDY6IELhuqVtIG7DunQgTmV4dAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqlbSBuw7p0IE5leHQuLi4iKQogICAgICAgICAgICBuZXh0X2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9uZXh0X2J1dHRvbl90ZXh0dmlldyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCBuZXh0X2J1dHRvbjoKICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSBuw7p0IE5leHQgYuG6sW5nIHRleHQKICAgICAgICAgICAgICAgIG5leHRfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudCh0ZXh0PSJUaeG6v3AiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICBpZiBub3QgbmV4dF9idXR0b246CiAgICAgICAgICAgICAgICAgICAgbmV4dF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVGnhur9wIiwgdGltZW91dD01KQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBuZXh0X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgVGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgIyBCxrDhu5tjIDc6IE5o4bqlbiBUaeG6v3AgbOG6p24gbuG7r2EgKGLhu48gcXVhIGVkaXQpCiAgICAgICAgICAgIG5leHRfYnV0dG9uMiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQodGV4dD0iVGnhur9wIiwgdGltZW91dD01KQogICAgICAgICAgICBpZiBub3QgbmV4dF9idXR0b24yOgogICAgICAgICAgICAgICAgbmV4dF9idXR0b24yID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IlRp4bq/cCIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgaWYgbmV4dF9idXR0b24yOgogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDIsIDMpKQogICAgICAgICAgICAKICAgICAgICAgICAgdmFsaWRhdGVfbmV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJUaeG6v3AiKQoKICAgICAgICAgICAgaWYgdmFsaWRhdGVfbmV4dDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyB1cCBiw6BpIHZp4bq/dCwgQuG6pW0gVGnhur9wIGtow7RuZyDEkcaw4bujYyIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iSOG7p3kiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA4OiBUaMOqbSBjYXB0aW9uICh0w7l5IGNo4buNbikKICAgICAgICAgICAgY2FwdGlvbl9maWVsZCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJXcml0ZSBhIGNhcHRpb24uLi4iKQogICAgICAgICAgICBpZiBub3QgY2FwdGlvbl9maWVsZDoKICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSB0aGVvIGPDoWNoIGtow6FjCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkgCiAgICAgICAgICAgICAgICBpZiBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgIGNhcHRpb25fZmllbGQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9IldyaXRlIGEgY2FwdGlvbi4uLiIpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGNhcHRpb25fZmllbGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBmaWVsZCBjaOG7qWEgdOG7qyAiY2FwdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgYWxsX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkVkaXRUZXh0IikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gYWxsX2VsZW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnQuZ2V0KCJ0ZXh0IiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpbnQgPSBlbGVtZW50LmdldCgiaGludCIsICIiKS5sb3dlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAiY2FwdGlvbiIgaW4gdGV4dCBvciAiY2FwdGlvbiIgaW4gaGludDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uX2ZpZWxkID0gZWxlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGlmIGNhcHRpb25fZmllbGQ6CiAgICAgICAgICAgICAgICAjIFJhbmRvbSB0aMOqbSBjYXB0aW9uIGhv4bq3YyBraMO0bmcgKDcwJSBjxqEgaOG7mWkgY8OzIGNhcHRpb24pCiAgICAgICAgICAgICAgICBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBUcnVlLCBUcnVlLCBUcnVlLCBUcnVlLCBUcnVlLCBUcnVlLCBGYWxzZSwgRmFsc2UsIEZhbHNlXSk6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIMSQ4buNYyBjYXB0aW9ucyB04burIGZpbGUgdGVtcGxhdGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbl9maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpLCAidGVtcGxhdGUiLCAiY2FwdGlvbnNfaW5zdGFncmFtLnR4dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGNhcHRpb25fZmlsZV9wYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihjYXB0aW9uX2ZpbGVfcGF0aCwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25zID0gW2xpbmUuc3RyaXAoKSBmb3IgbGluZSBpbiBmLnJlYWRsaW5lcygpIGlmIGxpbmUuc3RyaXAoKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FwdGlvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfY2FwdGlvbiA9IHJhbmRvbS5jaG9pY2UoY2FwdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNhcHRpb25fZmllbGQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudHlwZV90ZXh0KHNlbGVjdGVkX2NhcHRpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdGjDqm0gY2FwdGlvbjoge3NlbGVjdGVkX2NhcHRpb259IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiRmlsZSBjYXB0aW9ucyB0cuG7kW5nIikKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRmFsbGJhY2sgduG7gSBlbW9qaSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgZmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tfY2FwdGlvbnMgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIvCfjJ8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICLinKgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn5mCIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAi8J+TuCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIvCfkqsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn4y4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAi8J+OiSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIvCfkp0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoY2FwdGlvbl9maWVsZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudHlwZV90ZXh0KHJhbmRvbS5jaG9pY2UoZmFsbGJhY2tfY2FwdGlvbnMpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgZmlsZSBjYXB0aW9ucywgc+G7rSBk4bulbmcgZW1vamkgZmFsbGJhY2siKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSDEkeG7jWMgZmlsZSBjYXB0aW9uczoge2V9IikKICAgICAgICAgICAgICAgICAgICAgICAgIyBGYWxsYmFjayB24buBIGVtb2ppIG7hur91IGPDsyBs4buXaQogICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja19jYXB0aW9ucyA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn4yfIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICLinKgiLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn5mCIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn5O4IgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihjYXB0aW9uX2ZpZWxkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50eXBlX3RleHQocmFuZG9tLmNob2ljZShmYWxsYmFja19jYXB0aW9ucykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgIyBCxrDhu5tjIDk6IE5o4bqlbiBDaGlhIHPhursgxJHhu4MgxJHEg25nIGLDoGkKICAgICAgICAgICAgc2hhcmVfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudCh0ZXh0PSJDaGlhIHPhursiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgIGlmIG5vdCBzaGFyZV9idXR0b246CiAgICAgICAgICAgICAgICBzaGFyZV9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iQ2hpYSBz4bq7IiwgdGltZW91dD01KQogICAgICAgICAgICAgICAgaWYgbm90IHNoYXJlX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBDaGlhIHPhursiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgzLCA1KSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAxMDogS2nhu4NtIHRyYSDEkcSDbmcgdGjDoG5oIGPDtG5nIHbDoCBxdWF5IHbhu4EgaG9tZQogICAgICAgICAgICAjIEPDsyB0aOG7gyBjw7MgcG9wdXAgIlBvc3Qgc2hhcmVkIiBob+G6t2MgdOG7sSDEkeG7mW5nIHbhu4EgZmVlZAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBva19idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHRleHQ9Ik9LIiwgdGltZW91dD0zKQogICAgICAgICAgICAgICAgaWYgbm90IG9rX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHRleHQ9IlhvbmciLCB0aW1lb3V0PTMpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFF1YXkgduG7gSB0cmFuZyBjaOG7pwogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzGsHUgdGjhu51pIGdpYW4gxJHEg25nIOG6o25oIHRow6BuaCBjw7RuZyB2w6BvIERCCiAgICAgICAgICAgIGlmIGFjY291bnRfaWQ6CiAgICAgICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2xhc3RfcG9zdF90aW1lKGFjY291bnRfaWQsIHNlbGYuYXBwX25hbWUsIGN1cnJlbnRfdGltZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMSDbmcg4bqjbmggdGjDoG5oIGPDtG5nIGNobyB0w6BpIGtob+G6o246IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgxJHEg25nIOG6o25oOiB7ZX0iKQogICAgICAgICAgICAjIFRo4butIHF1YXkgduG7gSB0cmFuZyBjaOG7pyBu4bq/dSBjw7MgbOG7l2kKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgZGVmIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoKHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBjw6FjIHRoYW8gdMOhYyBVSSDEkeG7gyBjaHV54buDbiB0w6BpIGtob+G6o24gSW5zdGFncmFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogYm9vbCwKICAgICAgICAgICAgICAgICdyZWFzb24nOiBzdHIgKG7hur91IHRo4bqldCBi4bqhaSksCiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IHN0cgogICAgICAgICAgICB9CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IHRow7RuZyB0aW4gdGFyZ2V0IGFjY291bnQKICAgICAgICAgICAgdGFyZ2V0X3VzZXJuYW1lID0gdGFyZ2V0X2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKQogICAgICAgICAgICBpZiBub3QgdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnaW52YWxpZF9hY2NvdW50JywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdUYXJnZXQgYWNjb3VudCBraMO0bmcgY8OzIHVuaXF1ZV91c2VybmFtZScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICduYXZpZ2F0aW9uX2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgxJHhur9uIHRyYW5nIGNo4bunIEluc3RhZ3JhbScKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNraeG7g20gdHJhIMSRw7puZyB1c2VybmFtZSBy4buTaSB0aMOsIHJldHVybiB0cnVlCiAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PWYiQHt0YXJnZXRfdXNlcm5hbWV9Iik6CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGYixJDDoyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBJbnN0YWdyYW06IHt0YXJnZXRfdXNlcm5hbWV9IgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBOaOG6pW4gdsOgbyB0YWIgIlRyYW5nIGPDoSBuaMOibiIKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHByb2ZpbGVfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcHJvZmlsZV90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IHRhYiBUcmFuZyBjw6EgbmjDom4iKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ3VpX2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFRyYW5nIGPDoSBuaMOibicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE5o4bqlcCB2w6BvIHRhYiBUcmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB1c2VybmFtZSB04burIHRpw6p1IMSR4buBIGzhu5tuIHRyb25nIGFjdGlvbiBiYXIKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX2xhcmdlX3RpdGxlX2F1dG9fc2l6ZSIKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICB1c2VybmFtZV90aXRsZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfdGl0bGUiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZV90aXRsZToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAgICAgdXNlcm5hbWVfdGl0bGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9sYXJnZV90aXRsZV9hdXRvX3NpemUiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IHRpw6p1IMSR4buBIHVzZXJuYW1lIikKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICd1aV9lcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiAnS2jDtG5nIHTDrG0gdGjhuqV5IHRpw6p1IMSR4buBIHVzZXJuYW1lJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdGnDqnUgxJHhu4EgdXNlcm5hbWUgxJHhu4MgbeG7nyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIodXNlcm5hbWVfdGl0bGUpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0w6puIHTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgdGFyZ2V0X3VzZXJuYW1lID0gdGFyZ2V0X2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB0cuG7sWMgdGnhur9wIHTDoGkga2hv4bqjbiB0aGVvIHRleHQgKGPDoWNoIMSRxqFuIGdp4bqjbiBuaOG6pXQpCiAgICAgICAgICAgIGFjY291bnRzX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHRhcmdldF9pdGVtID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChhY2NvdW50c194bWwsIHRleHQ9dGFyZ2V0X3VzZXJuYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXksIHZ14buRdCBsw6puIHbDoCB0w6xtIGzhuqFpCiAgICAgICAgICAgIGlmIG5vdCB0YXJnZXRfaXRlbToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IOG7nyBs4bqnbiDEkeG6p3UsIHZ14buRdCBsw6puIHbDoCB0w6xtIGzhuqFpIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEzhuqV5IGzhuqFpIFhNTCB2w6AgdMOsbSBs4bqhaQogICAgICAgICAgICAgICAgYWNjb3VudHNfeG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIHRhcmdldF9pdGVtID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChhY2NvdW50c194bWwsIHRleHQ9dGFyZ2V0X3VzZXJuYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHRhcmdldF9pdGVtOgogICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIHRoZW8gY29udGVudC1kZXNjIChjw7MgdGjhu4MgY2jhu6lhIHRow7RuZyBiw6FvKQogICAgICAgICAgICAgICAgdGFyZ2V0X2l0ZW1zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKGFjY291bnRzX3htbCwgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXdHcm91cCIpCiAgICAgICAgICAgICAgICBmb3IgaXRlbSBpbiB0YXJnZXRfaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgY29udGVudF9kZXNjID0gaXRlbS5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgICAgIGlmIHRhcmdldF91c2VybmFtZSBpbiBjb250ZW50X2Rlc2MgYW5kICJUaMOqbSB0w6BpIGtob+G6o24iIG5vdCBpbiBjb250ZW50X2Rlc2MgYW5kICJUcnVuZyB0w6JtIHTDoGkga2hv4bqjbiIgbm90IGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2l0ZW0gPSBpdGVtCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdGFyZ2V0X2l0ZW06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gdHJvbmcgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gSW5zdGFncmFtIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDEkMOhbmggZOG6pXUgdMOgaSBraG/huqNuIGzDoCBi4buLIHbDtCBoaeG7h3UgaMOzYSB0cm9uZyBEQgogICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudCh0YXJnZXRfYWNjb3VudFsiaWQiXSwgewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiZGlzYWJsZWQiLAogICAgICAgICAgICAgICAgICAgICJkaXNhYmxlX3JlYXNvbiI6ICJUw6BpIGtob+G6o24ga2jDtG5nIGPDsyB0csOqbiB0aGnhur90IGLhu4siLAogICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOaOG6pW4gQmFjayDEkeG7gyDEkcOzbmcgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUXVheSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdhY2NvdW50X25vdF9mb3VuZCcsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ0tow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gdHJvbmcgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gSW5zdGFncmFtJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdMOgaSBraG/huqNuIG3hu6VjIHRpw6p1CiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih0YXJnZXRfaXRlbSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoNSk6ICAjIMSQ4bujaSBjaHV54buDbiB0w6BpIGtob+G6o24gaG/DoG4gdOG6pXQKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBzd2l0Y2hfdG9fYWNjb3VudCIpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnaW50ZXJydXB0ZWQnLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ0Lhu4sgZOG7q25nIHRyb25nIHF1w6EgdHLDrG5oIGNodXnhu4NuIHTDoGkga2hv4bqjbicKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjaHV54buDbiB0w6BpIGtob+G6o24gdGjDoG5oIGPDtG5nIGNoxrBhCiAgICAgICAgICAgIGN1cnJlbnRfdXNlcm5hbWUgPSBzZWxmLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBjdXJyZW50X3VzZXJuYW1lID09IHRhcmdldF91c2VybmFtZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgc2FuZyB7dGFyZ2V0X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogVHJ1ZSwgCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ8SQw6MgY2h1eeG7g24gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyBzYW5nIHt0YXJnZXRfdXNlcm5hbWV9JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiLEkMOjIGLhuqVtIHbDoG8gdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IG5oxrBuZyBraeG7g20gdHJhIGzhuqFpIHRo4bqleSDEkWFuZyDEkcSDbmcgbmjhuq1wIGzDoCB7Y3VycmVudF91c2VybmFtZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ3N3aXRjaF92ZXJpZmljYXRpb25fZmFpbGVkJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGYnxJDDoyBi4bqlbSB2w6BvIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSBuaMawbmcga2nhu4NtIHRyYSBs4bqhaSB0aOG6pXkgxJFhbmcgxJHEg25nIG5o4bqtcCBsw6Age2N1cnJlbnRfdXNlcm5hbWV9JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGNodXnhu4NuIHTDoGkga2hv4bqjbiBJbnN0YWdyYW0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gcXVheSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICdyZWFzb24nOiAnZXhjZXB0aW9uJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZidM4buXaSBraGkgY2h1eeG7g24gdMOgaSBraG/huqNuIEluc3RhZ3JhbToge3N0cihlKX0nCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHIgaG/hurdjIE5vbmU6IFVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wLCBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgIyBDw6FjaCAxOiDEkOG7jWMgdOG7qyBhdmF0YXJfaW1hZ2VfdmlldyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGF2YXRhcl92aWV3ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2F2YXRhcl9pbWFnZV92aWV3IikKICAgICAgICAgICAgaWYgYXZhdGFyX3ZpZXc6CiAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2MgPSBhdmF0YXJfdmlldy5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgIyBjb250ZW50LWRlc2MgZOG6oW5nOiAiVGluIGPhu6dhIG5nb3RoaXllbjI2MDEwMDU5LCAwLzEsIENoxrBhIHhlbSIKICAgICAgICAgICAgICAgIGlmIGNvbnRlbnRfZGVzYyBhbmQgIlRpbiBj4bunYSAiIGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gY29udGVudF9kZXNjLnNwbGl0KCJUaW4gY+G7p2EgIiwgMSlbMV0uc3BsaXQoIiwiLCAxKVswXS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbOG6pXkgdXNlcm5hbWUgdOG7qyB0cmFuZyBjaOG7pzoge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgY+G6r3QgY2h14buXaSBs4bqleSB1c2VybmFtZSB04burIGNvbnRlbnQtZGVzYzoge2V9IikKCiAgICAgICAgICAgICMgQ8OhY2ggMjogTuG6v3Uga2jDtG5nIHRow6BuaCBjw7RuZyDhu58gY8OhY2ggMSwgdGjhu60gdsOgbyB0cmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIGzhuqV5IMSRxrDhu6NjIHVzZXJuYW1lIHThu6sgdHJhbmcgY2jhu6csIHRo4butIHbDoG8gdHJhbmcgY8OhIG5ow6JuIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVuIHbDoG8gdGFiICJUcmFuZyBjw6EgbmjDom4iCiAgICAgICAgICAgIHByb2ZpbGVfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgIGlmIG5vdCBwcm9maWxlX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgxJDhu41jIHVzZXJuYW1lIHThu6sgdGnDqnUgxJHhu4EgbOG7m24gdHJvbmcgYWN0aW9uIGJhcgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgdXNlcm5hbWVfdGl0bGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfbGFyZ2VfdGl0bGVfYXV0b19zaXplIgogICAgICAgICAgICApCiAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZV90aXRsZToKICAgICAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl90aXRsZSIKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLCAKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfbGFyZ2VfdGl0bGVfYXV0b19zaXplIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodXNlcm5hbWVfdGl0bGUpCiAgICAgICAgICAgICAgICAjIFF1YXkgbOG6oWkgdHJhbmcgY2jhu6cKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGzhuqV5IHVzZXJuYW1lIHThu6sgdHJhbmcgY8OhIG5ow6JuOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiB1c2VybmFtZQoKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgdGnDqnUgxJHhu4EsIHRo4butIHTDrG0gYmnhu4N1IHTGsOG7o25nIHRyYW5nIGPDoSBuaMOibiBraMOhYwogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGnDqnUgxJHhu4EgdXNlcm5hbWUsIHRo4butIHTDrG0gdGhlbyBjw6FjaCBraMOhYyIpCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IHVzZXJuYW1lIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wIikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgZGVmIGdldF9qb2JfcGFyYW1zKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aGFtIHPhu5EgxJHhu4MgZ+G7jWkgQVBJIGzhuqV5IGpvYiBjaG8gSW5zdGFncmFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFRoYW0gc+G7kQogICAgICAgICIiIgogICAgICAgIGdvbGlrZV9pZCA9IGFjY291bnQuZ2V0KCJnb2xpa2VfaWQiKQogICAgICAgIGlmIG5vdCBnb2xpa2VfaWQ6CiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiaW5zdGFncmFtX2FjY291bnRfaWQiOiBnb2xpa2VfaWQsCiAgICAgICAgICAgICJkYXRhIjogIm51bGwiCiAgICAgICAgfQogICAgCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAjIENBUkUgQUNUSU9OUyBJTVBMRU1FTlRBVElPTiAoQUJTVFJBQ1QgTUVUSE9EUyBGUk9NIEJBU0UpCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBwZXJmb3JtX25ld3NmZWVkX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIHZ14buRdCBuZXdzZmVlZCBJbnN0YWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgbWV0aG9kIGPDsyBz4bq1biBfY2FyZV9zd2lwZV9mZWVkCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3N3aXBlX2ZlZWQoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fcmVlbHNfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24geGVtIHJlZWxzIEluc3RhZ3JhbSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBT4butIGThu6VuZyBtZXRob2QgY8OzIHPhurVuIF9jYXJlX3dhdGNoX3JlZWxzCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3dhdGNoX3JlZWxzKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBwZXJmb3JtX3JlZWxzX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX25vdGlmaWNhdGlvbl9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB4ZW0gdGjDtG5nIGLDoW8gSW5zdGFncmFtIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFPhu60gZOG7pW5nIG1ldGhvZCBjw7Mgc+G6tW4gX2NhcmVfdmlld19ub3RpZmljYXRpb25zCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3ZpZXdfbm90aWZpY2F0aW9ucyhhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9ub3RpZmljYXRpb25fYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fcHJvZmlsZV9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB4ZW0gcHJvZmlsZSBJbnN0YWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTmF2aWdhdGUgxJHhur9uIHByb2ZpbGUgdGFiCiAgICAgICAgICAgIHByb2ZpbGVfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCgKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcHJvZmlsZV90YWIiLCB0aW1lb3V0PTUKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBwcm9maWxlX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihwcm9maWxlX3RhYikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgzLCA3KSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBTY3JvbGwgdHJvbmcgcHJvZmlsZQogICAgICAgICAgICAgICAgc2Nyb2xsX2NvdW50ID0gcmFuZG9tLnJhbmRpbnQoMiwgNSkKICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHNjcm9sbF9jb3VudCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDIpKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9wcm9maWxlX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX2V4cGxvcmVfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24ga2jDoW0gcGjDoSBJbnN0YWdyYW0gKEV4cGxvcmUvU2VhcmNoIHRhYikiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTmF2aWdhdGUgxJHhur9uIHNlYXJjaC9leHBsb3JlIHRhYgogICAgICAgICAgICBzZWFyY2hfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCgKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvc2VhcmNoX3RhYiIsIHRpbWVvdXQ9NQogICAgICAgICAgICApCiAgICAgICAgICAgIGlmIHNlYXJjaF90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX3RhYikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFNjcm9sbCB0cm9uZyBleHBsb3JlIGZlZWQKICAgICAgICAgICAgICAgIHNjcm9sbF9jb3VudCA9IHJhbmRvbS5yYW5kaW50KDUsIDE1KQogICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2Uoc2Nyb2xsX2NvdW50KToKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDMpKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9leHBsb3JlX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX3NlYXJjaF9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB0w6xtIGtp4bq/bSBJbnN0YWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTmF2aWdhdGUgxJHhur9uIHNlYXJjaCB0YWIKICAgICAgICAgICAgc2VhcmNoX3RhYiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoCiAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3NlYXJjaF90YWIiLCB0aW1lb3V0PTUKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBzZWFyY2hfdGFiOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF90YWIpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHNlYXJjaCBib3gKICAgICAgICAgICAgICAgIHNlYXJjaF9ib3ggPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9zZWFyY2hfZWRpdF90ZXh0IiwgdGltZW91dD01CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpZiBzZWFyY2hfYm94OgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfYm94KQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgR2nhuqMgbOG6rXAgc2VhcmNoCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoX3Rlcm1zID0gWyJ0cmF2ZWwiLCAiZm9vZCIsICJmYXNoaW9uIiwgInBob3RvZ3JhcGh5IiwgImFydCJdCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoX3Rlcm0gPSByYW5kb20uY2hvaWNlKHNlYXJjaF90ZXJtcykKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5pbnB1dF90ZXh0KHNlYXJjaF90ZXJtKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2VudGVyKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFNjcm9sbCBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgICAgIHNjcm9sbF9jb3VudCA9IHJhbmRvbS5yYW5kaW50KDMsIDgpCiAgICAgICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2Uoc2Nyb2xsX2NvdW50KToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxLCAyKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9zZWFyY2hfYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAjIEFQUCBNQU5BR0VNRU5UIElNUExFTUVOVEFUSU9OIChBQlNUUkFDVCBNRVRIT0RTIEZST00gQkFTRSkKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgZGVmIG9wZW5fYXBwKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiTeG7nyBJbnN0YWdyYW0gYXBwIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gYXBwIMSRw6MgbeG7nyBjaMawYQogICAgICAgICAgICBjdXJyZW50X3BhY2thZ2UgPSBzZWxmLmhlbHBlci5nZXRfY3VycmVudF9wYWNrYWdlKCkKICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRfcGFja2FnZSA9PSBzZWxmLmFwcF9wYWNrYWdlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBvcGVuX2FwcCBJbnN0YWdyYW06IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZW5zdXJlX2hvbWVfc2NyZWVuKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIixJDhuqNtIGLhuqNvIMSRYW5nIOG7nyBtw6BuIGjDrG5oIGhvbWUgSW5zdGFncmFtIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIELGsOG7m2MgMTogS2nhu4NtIHRyYSBhcHAgY8OzIMSRYW5nIG3hu58ga2jDtG5nCiAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJBcHAgSW5zdGFncmFtIGNoxrBhIG3hu58gKGhp4buHbiB04bqhaToge2N1cnJlbnRfcGFja2FnZX0pLCDEkWFuZyBt4bufIGFwcC4uLiIpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5vcGVuX2FwcCgpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgbeG7nyBJbnN0YWdyYW0gYXBwIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAyOiBLaeG7g20gdHJhIHhlbSDEkcOjIOG7nyBob21lIHNjcmVlbiBjaMawYQogICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygixJDDoyDhu58gbcOgbiBow6xuaCBob21lIEluc3RhZ3JhbSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCxrDhu5tjIDM6IE7hur91IGNoxrBhIOG7nyBob21lIHNjcmVlbiwgc+G7rSBk4bulbmcgbWV0aG9kIGPDsyBz4bq1biBiYWNrX3RvX2hvbWUKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQ2jGsGEg4bufIG3DoG4gaMOsbmggaG9tZSwgxJFhbmcgbmF2aWdhdGUgduG7gSBob21lLi4uIikKICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCAnYmFja190b19ob21lJyk6CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBGYWxsYmFjazogdMOsbSB2w6AgdGFwIGhvbWUgdGFiCiAgICAgICAgICAgICAgICBob21lX3RhYiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9mZWVkX3RhYiIsIHRpbWVvdXQ9NQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaWYgaG9tZV90YWI6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfdGFiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gxJHDoyB24buBIGhvbWUgY2jGsGEKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pc19ob21lX3NjcmVlbigpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBob21lIHRhYiIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBlbnN1cmVfaG9tZV9zY3JlZW4gSW5zdGFncmFtOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fc3RvcnlfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEFjdGlvbiByacOqbmcgY+G7p2EgSW5zdGFncmFtOiBYZW0gc3RvcmllcwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiWGVtIHN0b3JpZXMgSW5zdGFncmFtIGNobyB7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIOG7nyBob21lIHNjcmVlbgogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyDEkeG6o20gYuG6o28gaG9tZSBzY3JlZW4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0ga2h1IHbhu7FjIHN0b3JpZXMg4bufIMSR4bqndSBmZWVkCiAgICAgICAgICAgIHN0b3J5X3NlbGVjdG9ycyA9IFsKICAgICAgICAgICAgICAgIHsiY29udGVudF9kZXNjIjogIllvdXIgc3RvcnkifSwKICAgICAgICAgICAgICAgIHsiY29udGVudF9kZXNjIjogIlN0b3J5In0sCiAgICAgICAgICAgICAgICB7InRleHQiOiAiVGluIGPhu6dhIGLhuqFuIn0sCiAgICAgICAgICAgICAgICB7InRleHQiOiAiWW91ciBzdG9yeSJ9LAogICAgICAgICAgICAgICAgeyJyZXNvdXJjZV9pZCI6ICJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcmVlbF9yaW5nX3ZpZXcifQogICAgICAgICAgICBdCiAgICAgICAgICAgIAogICAgICAgICAgICBzdG9yeV9mb3VuZCA9IEZhbHNlCiAgICAgICAgICAgIGZvciBzZWxlY3RvciBpbiBzdG9yeV9zZWxlY3RvcnM6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KCoqc2VsZWN0b3IsIHRpbWVvdXQ9Myk6CiAgICAgICAgICAgICAgICAgICAgIyBUYXAgdsOgbyBzdG9yeSDEkeG6p3UgdGnDqm4KICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KCoqc2VsZWN0b3IpCiAgICAgICAgICAgICAgICAgICAgaWYgZWxlbWVudDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGVsZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5X2ZvdW5kID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGNsaWNrIHbDoG8gc3RvcnkiKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHN0b3J5X2ZvdW5kOgogICAgICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgc3Rvcnkgc2VsZWN0b3IsIHRo4butIHRhcCB2w6BvIHbDuW5nIHN0b3J5IHRow7RuZyB0aMaw4budbmcKICAgICAgICAgICAgICAgICMgU3RvcmllcyB0aMaw4budbmcg4bufIMSR4bqndSBmZWVkLCB0cm9uZyB2w7luZyBuZ2FuZwogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IHN0b3J5IHNlbGVjdG9yLCB0aOG7rSB0YXAgdsOgbyB2w7luZyBzdG9yeSIpCiAgICAgICAgICAgICAgICAjIFRhcCB2w6BvIHbDuW5nIHN0b3J5IChwaOG6p24gdHLDqm4gY+G7p2EgbcOgbiBow6xuaCkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9zY3JlZW4oMjAwLCAyMDApICAjIFbDuW5nIHN0b3J5IHRoxrDhu51uZyDhu58gxJHDonkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBt4bufIHN0b3J5IGtow7RuZwogICAgICAgICAgICAgICAgc3RvcnlfaW5kaWNhdG9ycyA9IFsKICAgICAgICAgICAgICAgICAgICB7ImNvbnRlbnRfZGVzYyI6ICJQYXVzZSJ9LAogICAgICAgICAgICAgICAgICAgIHsiY29udGVudF9kZXNjIjogIk5leHQgc3RvcnkifSwKICAgICAgICAgICAgICAgICAgICB7InRleHQiOiAiWW91ciBzdG9yeSJ9LAogICAgICAgICAgICAgICAgICAgIHsicmVzb3VyY2VfaWQiOiAiY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3JlZWxfdmlld2VyX21lZGlhX2xheW91dCJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBpbmRpY2F0b3IgaW4gc3RvcnlfaW5kaWNhdG9yczoKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KCoqaW5kaWNhdG9yLCB0aW1lb3V0PTIpOgogICAgICAgICAgICAgICAgICAgICAgICBzdG9yeV9mb3VuZCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN0b3J5X2ZvdW5kOgogICAgICAgICAgICAgICAgIyBYZW0gc3RvcmllcyB0cm9uZyBt4buZdCBraG/huqNuZyB0aOG7nWkgZ2lhbgogICAgICAgICAgICAgICAgc3RvcnlfY291bnQgPSByYW5kb20ucmFuZGludCgyLCA1KSAgIyBYZW0gMi01IHN0b3JpZXMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc3RvcnlfY291bnQpOgogICAgICAgICAgICAgICAgICAgICMgWGVtIHN0b3J5IGhp4buHbiB04bqhaQogICAgICAgICAgICAgICAgICAgIHZpZXdfZHVyYXRpb24gPSByYW5kb20udW5pZm9ybSgzLCA4KSAgIyAzLTggZ2nDonkgbeG7l2kgc3RvcnkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiWGVtIHN0b3J5IHtpKzF9L3tzdG9yeV9jb3VudH0gdHJvbmcge3ZpZXdfZHVyYXRpb246LjFmfSBnacOieSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDw7MgdGjhu4MgdMawxqFuZyB0w6FjIG5o4bq5IHbhu5tpIHN0b3J5CiAgICAgICAgICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC4yOiAgIyAyMCUgY8ahIGjhu5lpIHTGsMahbmcgdMOhYwogICAgICAgICAgICAgICAgICAgICAgICAjIFRhcCBuaOG6uSDhu58gZ2nhu69hIG3DoG4gaMOsbmggKGtow7RuZyBwaOG6o2kgdsO5bmcgY2h1eeG7g24gc3RvcnkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9zY3JlZW4ocmFuZG9tLnJhbmRpbnQoMzAwLCA3MDApLCByYW5kb20ucmFuZGludCg0MDAsIDgwMCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHZpZXdfZHVyYXRpb24pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaHV54buDbiBzYW5nIHN0b3J5IHRp4bq/cCB0aGVvICh0YXAgYsOqbiBwaOG6o2kgbcOgbiBow6xuaCkKICAgICAgICAgICAgICAgICAgICBpZiBpIDwgc3RvcnlfY291bnQgLSAxOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfc2NyZWVuKDgwMCwgNDAwKSAgIyBUYXAgYsOqbiBwaOG6o2kgxJHhu4MgbmV4dCBzdG9yeQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBRdWF5IHbhu4EgZmVlZCBi4bqxbmcgY8OhY2ggbmjhuqVuIGJhY2sgaG/hurdjIHN3aXBlIGRvd24KICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmdvX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJIb8OgbiB0aMOgbmggeGVtIHN0b3JpZXMgSW5zdGFncmFtIGNobyB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgc3RvcmllcyDEkeG7gyB4ZW0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgeGVtIHN0b3JpZXMgSW5zdGFncmFtOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIEZhbHNl').decode('utf-8'))
