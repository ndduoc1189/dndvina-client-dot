import base64
exec(base64.b64decode('#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo script để test các hàm find_child_elements và find_child_element mới
"""

import sys
import os

# Thêm thư mục gốc vào Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.helper_service import HelperService
import config

def demo_find_child_elements():
    """
    Demo cách sử dụng find_child_elements và find_child_element
    """
    print("🔍 Demo Find Child Elements")
    print("=" * 50)
    
    # Khởi tạo HelperService
    helper = HelperService()
    
    print("📱 Lấy thông tin màn hình hiện tại...")
    
    # 1. Demo tìm tất cả element con với class cụ thể
    print("\n1️⃣  Tìm element cha (ví dụ: ViewGroup hoặc LinearLayout)")
    parent_elements = helper.find_all_elements(class_name="android.widget.ViewGroup")
    
    if not parent_elements:
        parent_elements = helper.find_all_elements(class_name="android.widget.LinearLayout")
    
    if not parent_elements:
        parent_elements = helper.find_all_elements(class_name="android.widget.RelativeLayout")
    
    if parent_elements:
        parent = parent_elements[0]  # Lấy element cha đầu tiên
        parent_class = parent.get("class", "Unknown")
        parent_id = parent.get("resource-id", "No ID")
        print(f"✅ Tìm thấy element cha: {parent_class}")
        print(f"   Resource ID: {parent_id}")
        print(f"   Bounds: {parent.get('bounds', 'Unknown')}")
        
        # 2. Tìm tất cả element con có class cụ thể
        print(f"\n2️⃣  Tìm tất cả element con với class 'android.widget.TextView'")
        child_text_views = helper.find_child_elements(parent, class_name="android.widget.TextView")
        
        print(f"📋 Tìm thấy {len(child_text_views)} TextView con:")
        for i, child in enumerate(child_text_views[:5]):  # Chỉ hiển thị 5 element đầu
            text = child.get("text", "")
            resource_id = child.get("resource-id", "No ID")
            print(f"   {i+1}. Text: '{text}' | ID: {resource_id}")
        
        if len(child_text_views) > 5:
            print(f"   ... và {len(child_text_views) - 5} element khác")
        
        # 3. Tìm element con đầu tiên với điều kiện cụ thể
        print(f"\n3️⃣  Tìm element con đầu tiên có text không rỗng")
        first_child_with_text = helper.find_child_element(parent, class_name="android.widget.TextView")
        
        if first_child_with_text:
            text = first_child_with_text.get("text", "")
            print(f"✅ Tìm thấy: '{text}'")
        else:
            print("❌ Không tìm thấy element con phù hợp")
        
        # 4. Demo tìm element con với class khác
        print(f"\n4️⃣  Tìm tất cả Button con")
        child_buttons = helper.find_child_elements(parent, class_name="android.widget.Button")
        
        print(f"🔘 Tìm thấy {len(child_buttons)} Button con:")
        for i, button in enumerate(child_buttons):
            text = button.get("text", "")
            content_desc = button.get("content-desc", "")
            display_text = text or content_desc or "No text"
            print(f"   {i+1}. '{display_text}'")
        
        # 5. Demo tìm GridView (như yêu cầu của user)
        print(f"\n5️⃣  Tìm tất cả GridView con")
        child_gridviews = helper.find_child_elements(parent, class_name="android.widget.GridView")
        
        if child_gridviews:
            print(f"📊 Tìm thấy {len(child_gridviews)} GridView con:")
            for i, gridview in enumerate(child_gridviews):
                resource_id = gridview.get("resource-id", "No ID")
                bounds = gridview.get("bounds", "Unknown")
                print(f"   {i+1}. ID: {resource_id} | Bounds: {bounds}")
        else:
            print("📊 Không tìm thấy GridView con nào")
            
    else:
        print("❌ Không tìm thấy element cha phù hợp để demo")
        print("💡 Thử mở một ứng dụng có giao diện phức tạp hơn")

def demo_specific_search():
    """
    Demo tìm kiếm cụ thể với nhiều điều kiện
    """
    print("\n🎯 Demo Tìm Kiếm Cụ Thể")
    print("=" * 50)
    
    helper = HelperService()
    
    # Tìm tất cả element có thể click
    print("1️⃣  Tìm tất cả element có clickable='true'")
    clickable_elements = helper.find_all_elements(visible_to_user=True)
    clickable_count = 0
    
    for element in clickable_elements:
        if element.get("clickable") == "true":
            clickable_count += 1
    
    print(f"🖱️  Tìm thấy {clickable_count} element có thể click")
    
    # Tìm element cha có nhiều con nhất
    print("\n2️⃣  Tìm element cha có nhiều element con nhất")
    all_elements = helper.find_all_elements()
    
    if all_elements:
        max_children = 0
        best_parent = None
        
        for element in all_elements[:10]:  # Chỉ test 10 element đầu để tránh quá chậm
            children = helper.find_child_elements(element)
            if len(children) > max_children:
                max_children = len(children)
                best_parent = element
        
        if best_parent:
            parent_class = best_parent.get("class", "Unknown")
            parent_id = best_parent.get("resource-id", "No ID")
            print(f"👑 Element cha có nhiều con nhất: {parent_class}")
            print(f"   Resource ID: {parent_id}")
            print(f"   Số lượng con: {max_children}")
        else:
            print("❌ Không tìm thấy element cha phù hợp")

if __name__ == "__main__":
    try:
        print("🚀 Bắt đầu demo Find Child Elements")
        demo_find_child_elements()
        demo_specific_search()
        print("\n✅ Demo hoàn thành!")
        
    except KeyboardInterrupt:
        print("\n\n⏹️  Demo bị dừng bởi người dùng")
    except Exception as e:
        print(f"\n❌ Lỗi trong quá trình demo: {e}")
        import traceback
        traceback.print_exc()
').decode('utf-8'))
