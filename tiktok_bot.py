import base64
exec(base64.b64decode('from services.helper_service import HelperService
import time
import random
import json
import os
from typing import Dict, Any
from datetime import datetime

class TikTokBot:
    """
    Bot tự động tương tác với TikTok
    """
    
    def __init__(self, base_url: str = "http://10.1.0.189:8990/"):
        self.controller = HelperService(base_url)
        self.package_name = "com.ss.android.ugc.trill"
        self.stats = {
            "videos_watched": 0,
            "videos_liked": 0,
            "comments_made": 0,
            "profiles_visited": 0,
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    
    def launch_tiktok(self) -> bool:
        """
        Mở ứng dụng TikTok và đảm bảo đã vào màn hình chính
        """
        print("Đang mở TikTok...")
        result = self.controller.open_app(self.package_name)
        
        if result["status"] != "success":
            print("Không thể mở TikTok!")
            return False
        
        # Chờ đợi cho đến khi nút "Trang chủ" xuất hiện
        print("Đang chờ màn hình chính TikTok...")
        home_button = self.controller.wait_for_element(content_desc="Trang chủ")
        
        if not home_button:
            print("Không tìm thấy màn hình chính TikTok!")
            return False
        
        # Kiểm tra xem nút Trang chủ có được chọn không
        if not self.controller.is_element_selected(home_button):
            print("Đang nhấp vào nút Trang chủ...")
            self.controller.tap_element(home_button.get("bounds"))
            time.sleep(2)
        
        print("Đã vào màn hình chính TikTok thành công!")
        return True
    
    def watch_videos(self, count: int = 10, like_probability: float = 0.3,
                   comment_probability: float = 0.1, follow_probability: float = 0.05) -> None:
        """
        Xem một số lượng video, với xác suất thích, bình luận và theo dõi
        """
        print(f"Bắt đầu xem {count} video...")
        
        for i in range(count):
            print(f"Đang xem video thứ {i+1}/{count}...")
            
            # Xem video trong khoảng 5-15 giây
            view_time = random.uniform(5, 15)
            time.sleep(view_time)
            
            # Thích video với xác suất like_probability
            if random.random() < like_probability:
                self._like_current_video()
            
            # Bình luận với xác suất comment_probability
            if random.random() < comment_probability:
                self._comment_on_video()
            
            # Theo dõi người dùng với xác suất follow_probability
            if random.random() < follow_probability:
                self._follow_user()
            
            # Vuốt lên để xem video tiếp theo
            print("Chuyển sang video tiếp theo...")
            self.controller.swipe_up()
            time.sleep(2)  # Đợi video tải
            
            self.stats["videos_watched"] += 1
    
    def _like_current_video(self) -> bool:
        """
        Thích video đang xem
        """
        print("Đang thích video...")
        
        # Tìm nút thích (có thể là biểu tượng trái tim)
        like_button = self.controller.find_element(content_desc="Thích")
        
        if like_button:
            # Kiểm tra xem video đã được thích chưa
            if not self.controller.is_element_selected(like_button):
                self.controller.tap_element(like_button.get("bounds"))
                print("Đã thích video!")
                self.stats["videos_liked"] += 1
                return True
            else:
                print("Video đã được thích từ trước!")
                return False
        
        print("Không tìm thấy nút thích!")
        return False
    
    def _comment_on_video(self) -> bool:
        """
        Bình luận vào video đang xem
        """
        print("Đang bình luận video...")
        
        # Danh sách bình luận ngẫu nhiên
        comments = [
            "Hay quá! 👍",
            "Video rất thú vị",
            "Cảm ơn vì đã chia sẻ",
            "Tuyệt vời! 😍",
            "Rất hữu ích",
            "Chia sẻ hay lắm",
            "Quá đỉnh! 🔥",
            "Cảm ơn bạn",
            "Thích video này",
            "Rất hay! ❤️"
        ]
        
        # Tìm nút bình luận
        comment_button = self.controller.find_element(content_desc="Bình luận")
        
        if comment_button:
            # Nhấp vào nút bình luận
            self.controller.tap_element(comment_button.get("bounds"))
            time.sleep(2)
            
            # Tìm ô nhập bình luận
            comment_input = self.controller.find_element(text="Thêm bình luận...")
            
            if comment_input:
                # Nhấp vào ô nhập bình luận
                self.controller.tap_element(comment_input.get("bounds"))
                time.sleep(1)
                
                # Nhập bình luận ngẫu nhiên
                comment = random.choice(comments)
                self.controller.input_text(comment)
                time.sleep(1)
                
                # Tìm nút gửi
                send_button = self.controller.find_element(text="Gửi")
                
                if send_button:
                    self.controller.tap_element(send_button.get("bounds"))
                    print(f"Đã bình luận: '{comment}'")
                    self.stats["comments_made"] += 1
                    
                    # Đóng phần bình luận
                    time.sleep(2)
                    self.controller.press_back()
                    return True
            
            # Nếu không thành công, quay lại màn hình video
            self.controller.press_back()
        
        print("Không thể bình luận!")
        return False
    
    def _follow_user(self) -> bool:
        """
        Theo dõi người dùng của video đang xem
        """
        print("Đang theo dõi người dùng...")
        
        # Tìm nút theo dõi hoặc tên người dùng
        profile_element = self.controller.find_element(content_desc="Hồ sơ người dùng")
        
        if profile_element:
            # Nhấp vào hồ sơ người dùng
            self.controller.tap_element(profile_element.get("bounds"))
            time.sleep(3)
            
            # Kiểm tra nút theo dõi
            follow_button = self.controller.find_element(text="Theo dõi")
            
            if follow_button:
                self.controller.tap_element(follow_button.get("bounds"))
                print("Đã theo dõi người dùng!")
                self.stats["profiles_visited"] += 1
                
                # Quay lại màn hình video
                time.sleep(1)
                self.controller.press_back()
                return True
            else:
                # Có thể đã theo dõi rồi hoặc không tìm thấy nút
                print("Không thể theo dõi hoặc đã theo dõi từ trước!")
                self.controller.press_back()
                return False
        
        print("Không tìm thấy hồ sơ người dùng!")
        return False
    
    def explore_trending(self) -> None:
        """
        Khám phá tab Xu hướng
        """
        print("Đang chuyển đến tab Khám phá...")
        
        # Tìm tab Khám phá
        discover_tab = self.controller.find_element(content_desc="Khám phá")
        
        if discover_tab:
            self.controller.tap_element(discover_tab.get("bounds"))
            time.sleep(3)
            
            print("Đang khám phá các xu hướng...")
            
            # Vuốt xuống để xem các xu hướng
            for i in range(3):
                self.controller.swipe_down()
                time.sleep(2)
            
            # Chọn một xu hướng ngẫu nhiên
            trending_items = self.controller.find_all_elements(class_name="android.widget.FrameLayout")
            
            if trending_items and len(trending_items) > 2:
                # Chọn một item ngẫu nhiên (bỏ qua các phần tử đầu tiên vì có thể là UI khác)
                random_item = random.choice(trending_items[2:])
                self.controller.tap_element(random_item.get("bounds"))
                time.sleep(3)
                
                # Xem một vài video trong xu hướng
                self.watch_videos(count=3)
                
                # Quay lại tab Khám phá
                self.controller.press_back()
        else:
            print("Không tìm thấy tab Khám phá!")
    
    def search_hashtag(self, hashtag: str) -> None:
        """
        Tìm kiếm và xem video theo hashtag
        """
        print(f"Đang tìm kiếm hashtag #{hashtag}...")
        
        # Tìm tab Khám phá (thường có chức năng tìm kiếm)
        discover_tab = self.controller.find_element(content_desc="Khám phá")
        
        if discover_tab:
            self.controller.tap_element(discover_tab.get("bounds"))
            time.sleep(2)
            
            # Tìm ô tìm kiếm
            search_box = self.controller.find_element(text="Tìm kiếm")
            
            if search_box:
                self.controller.tap_element(search_box.get("bounds"))
                time.sleep(1)
                
                # Nhập hashtag
                self.controller.input_text(hashtag)
                time.sleep(1)
                
                # Nhấn Enter để tìm kiếm
                self.controller.input_text("\n")
                time.sleep(3)
                
                # Tìm và nhấp vào kết quả hashtag
                hashtag_result = self.controller.find_element(text=f"#{hashtag}")
                
                if hashtag_result:
                    self.controller.tap_element(hashtag_result.get("bounds"))
                    time.sleep(3)
                    
                    # Xem một số video với hashtag này
                    print(f"Đang xem video với hashtag #{hashtag}...")
                    self.watch_videos(count=5)
                    
                    # Quay lại màn hình chính
                    self.controller.press_back()
                    self.controller.press_back()
                else:
                    print(f"Không tìm thấy kết quả cho hashtag #{hashtag}!")
                    self.controller.press_back()
            else:
                print("Không tìm thấy ô tìm kiếm!")
        else:
            print("Không tìm thấy tab Khám phá!")
    
    def save_stats(self, file_path: str = "tiktok_bot_stats.json") -> None:
        """
        Lưu thống kê hoạt động của bot
        """
        self.stats["end_time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(self.stats, f, indent=4)
        
        print(f"Đã lưu thống kê vào file {file_path}")
        print(f"Tổng số video đã xem: {self.stats['videos_watched']}")
        print(f"Tổng số video đã thích: {self.stats['videos_liked']}")
        print(f"Tổng số bình luận đã đăng: {self.stats['comments_made']}")
        print(f"Tổng số hồ sơ đã truy cập: {self.stats['profiles_visited']}")

# Chạy bot TikTok
if __name__ == "__main__":
    bot = TikTokBot()
    
    try:
        # Khởi động TikTok
        if bot.launch_tiktok():
            # Xem một số video trên For You Page
            bot.watch_videos(count=5)
            
            # Khám phá tab xu hướng
            bot.explore_trending()
            
            # Tìm kiếm và xem video theo hashtag
            bot.search_hashtag("vietnam")
            
            # Quay lại For You Page và xem thêm video
            if bot.launch_tiktok():  # Đảm bảo quay lại màn hình chính
                bot.watch_videos(count=5)
    except Exception as e:
        print(f"Lỗi: {e}")
    finally:
        # Lưu thống kê
        bot.save_stats()
        print("Bot đã hoàn thành công việc!")').decode('utf-8'))
