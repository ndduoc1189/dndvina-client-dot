import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsCmZyb20gam9icy5qb2JfYmFzZSBpbXBvcnQgQmFzZUpvYgoKY2xhc3MgVGlrdG9rSm9iKEJhc2VKb2IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSkKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbCIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gInRpa3RvayIKICAgICAgICAKICAgICAgICAjIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnIGNobyBUaWtUb2sKICAgICAgICBzZWxmLl9kZWZhdWx0X2NvbmZpZy51cGRhdGUoewogICAgICAgICAgICAiYWN0aW9uX3dlaWdodHMiOiB7CiAgICAgICAgICAgICAgICAibmV3c2ZlZWQiOiAxMCwgICAgICAjIDEwJSB2deG7kXQgYuG6o25nIHRpbiAow610IGjGoW4gdsOsIFRpa1RvayBjaOG7pyB54bq/dSBsw6AgdmlkZW8pCiAgICAgICAgICAgICAgICAicmVlbHMiOiAyNSwgICAgICAgICAjIDI1JSB4ZW0gdmlkZW8gKGNow61uaCBj4bunYSBUaWtUb2spIAogICAgICAgICAgICAgICAgIm5vdGlmaWNhdGlvbiI6IDgsICAgIyA4JSB4ZW0gdGjDtG5nIGLDoW8KICAgICAgICAgICAgICAgICJwcm9maWxlIjogMTIsICAgICAgICMgMTIlIHhlbSBwcm9maWxlCiAgICAgICAgICAgICAgICAiam9iIjogMjAsICAgICAgICAgICAjIDIwJSBsw6BtIGpvYiAoZ2nhu68gbmd1ecOqbikKICAgICAgICAgICAgICAgICJleHBsb3JlIjogMTUsICAgICAgICMgMTUlIGtow6FtIHBow6EgKGNhbyBoxqFuIHbDrCBUaWtUb2sgaGF5IHN1Z2dlc3QpCiAgICAgICAgICAgICAgICAic2VhcmNoIjogNSwgICAgICAgICAjIDUlIHTDrG0ga2nhur9tICjDrXQgaMahbiB2w6wgVGlrVG9rIGThu7FhIHbDoG8gYWxnb3JpdGhtKQogICAgICAgICAgICAgICAgInBvc3QiOiA1ICAgICAgICAgICAgIyA1JSB4ZW0gbGl2ZXN0cmVhbSAoYWN0aW9uIHJpw6puZyBj4bunYSBUaWtUb2spCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZWxheV9wb3N0X3ZpZGVvX21pbnV0ZSI6IDE0NDAsICAjIFRo4budaSBnaWFuIGNo4budIGdp4buvYSBjw6FjIGzhuqduIMSRxINuZyB2aWRlbyAocGjDunQpIC0gMSBnaeG7nQogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgIyBDYWNoZSBjaG8gY3VycmVudCB1c2VybmFtZSDEkeG7gyB0csOhbmggY2hlY2sgcXXDoSBuaGnhu4F1CiAgICAgICAgc2VsZi5fY2FjaGVkX3VzZXJuYW1lID0gTm9uZQogICAgICAgIHNlbGYuX3VzZXJuYW1lX2NhY2hlX3RpbWUgPSAwCiAgICAgICAgc2VsZi5fdXNlcm5hbWVfY2FjaGVfdHRsID0gNjAgICMgQ2FjaGUgNjAgZ2nDonkKICAgIAogICAgZGVmIGdldF9zdXBwb3J0ZWRfYWN0aW9ucyhzZWxmKSAtPiBMaXN0W3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgT3ZlcnJpZGUgZGFuaCBzw6FjaCBhY3Rpb25zIMSRxrDhu6NjIFRpa1RvayBo4buXIHRy4bujCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtzdHJdOiBEYW5oIHPDoWNoIGFjdGlvbnMgVGlrVG9rIGjhu5cgdHLhu6MKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmdldF9hY3Rpb25fd2VpZ2h0cygpLmtleXMoKSkKICAgICAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrdG9rIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKCiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgZW5zdXJlX2hvbWVfc2NyZWVuKCkgdGhheSB2w6wgY2jhu4kgd2FpdF9mb3JfZWxlbWVudAogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6o2kgbcOgbiBow6xuaCBjaMOtbmggVGlrVG9rIHNhdSAyMCBnacOieSIpCiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCAiSOG7kyBzxqEiIHbDoCBuaOG6pXAgdsOgbwogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBtZW51IGjhu5Mgc8ahIMSR4buDIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfbWVudSgpOgogICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IFhNTCBtw6BuIGjDrG5oIHNhdSBraGkgbeG7nyBtZW51CiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgYWRkX2FjY291bnRfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow6ptIHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBhZGRfYWNjb3VudF9idXR0b246CiAgICAgICAgICAgICAgICAjIFTDrG0gZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gKFJlY3ljbGVyVmlldykgLSBsw6AgY2hhIGPhu6dhIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgIHJlY3ljbGVyX3ZpZXcgPSBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIFJlY3ljbGVyVmlldwogICAgICAgICAgICAgICAgYWxsX3JlY3ljbGVyX3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWR4LnJlY3ljbGVydmlldy53aWRnZXQuUmVjeWNsZXJWaWV3IgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gUmVjeWNsZXJWaWV3IGNo4bupYSBjw6FjIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgZm9yIHJ2IGluIGFsbF9yZWN5Y2xlcl92aWV3czoKICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMocnYpCiAgICAgICAgICAgICAgICAgICAgYWRkX2FjY291bnRfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGFkZF9hY2NvdW50X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGFkZF9hY2NvdW50X2J1dHRvbiBjw7MgbuG6sW0gdHJvbmcgcmVjeWNsZXJfdmlldyBraMO0bmcKICAgICAgICAgICAgICAgICAgICBpZiAocnZfYm91bmRzWzBdIDw9IGFkZF9hY2NvdW50X2JvdW5kc1swXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzFdIDw9IGFkZF9hY2NvdW50X2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzJdID49IGFkZF9hY2NvdW50X2JvdW5kc1syXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzNdID49IGFkZF9hY2NvdW50X2JvdW5kc1szXSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3ljbGVyX3ZpZXcgPSBydgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiByZWN5Y2xlcl92aWV3OgogICAgICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIG7DunQgKEJ1dHRvbikgdHJvbmcgUmVjeWNsZXJWaWV3IGLhurFuZyBjbGFzcyB0aGF5IHbDrCByZXNvdXJjZS1pZAogICAgICAgICAgICAgICAgICAgIGFjY291bnRfYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgYnV0dG9uIGluIGFjY291bnRfYnV0dG9uczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBC4buPIHF1YSBuw7p0ICJUaMOqbSB0w6BpIGtob+G6o24iCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICJUaMOqbSB0w6BpIGtob+G6o24iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgTOG6pXkgdMOqbiB0w6BpIGtob+G6o24gdOG7qyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBidXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIFRleHRWaWV3IHRyb25nIGJ1dHRvbiBi4bqxbmcgY2xhc3MgdGhheSB2w6wgcmVzb3VyY2UtaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEzhu41jIHRleHR2aWV3IHRoZW8gYm91bmRzIMSR4buDIHTDrG0gxJHDum5nIGPDoWkgdGh14buZYyB24buBIGJ1dHRvbiBuw6B5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0diBpbiB0ZXh0dmlld3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dl9ib3VuZHNbMF0gPj0gYnV0dG9uX2JvdW5kc1swXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbM10gPD0gYnV0dG9uX2JvdW5kc1szXSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgxJHhu4Mga2jDtG5nIGzhuqV5IHBo4bqjaSB0ZXh0IHLhu5duZyBob+G6t2MgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRleHQgYW5kIHRleHQgIT0gIm51bGwiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBC4buPIHF1YSBuw7p0ICLEkMOzbmciCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lID09ICLEkMOzbmciOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIGPDsyDEkWFuZyDEkcSDbmcgbmjhuq1wIGtow7RuZwogICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBk4bqldSBraeG7g20gdHJvbmcgYnV0dG9uIGLhurFuZyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2ttYXJrcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2M9IkThuqV1IGtp4buDbSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBk4bqldSBraeG7g20gY8OzIHRodeG7mWMgduG7gSBidXR0b24gbsOgeSBraMO0bmcKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uX2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhidXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBjaGVjayBpbiBjaGVja21hcmtzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGNoZWNrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrX2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1sxXSA+PSBidXR0b25fYm91bmRzWzFdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEPFqW5nIGPDsyB0aOG7gyBraeG7g20gdHJhIHRodeG7mWMgdMOtbmggc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgic2VsZWN0ZWQiKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHVzZXJuYW1lIGjhu6NwIGzhu4cgdHLGsOG7m2Mga2hpIHRow6ptIHbDoG8gZGFuaCBzw6FjaAogICAgICAgICAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBhbmQgdXNlcm5hbWUgIT0gIm51bGwiIGFuZCB1c2VybmFtZS5zdHJpcCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBM4buNYyB0aMOqbSBjw6FjIHTDqm4ga2jDtG5nIHBo4bqjaSB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lIG5vdCBpbiBbIkPDoGkgxJHhurd0IiwgIkPDoGkgxJHhurd0IHTDoGkga2hv4bqjbiIsICJUw7l5IGNo4buNbiIsICJNZW51Il06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfdXNlcm5hbWUiOiB1c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImFjdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19sb2dpbiI6IGlzX2N1cnJlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZChhY2NvdW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFF1YXkgbOG6oWkgbcOgbiBow6xuaCBjaMOtbmgKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBhY2NvdW50cwogICAgCiAgICBkZWYgcGVyZm9ybV9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIlRo4buxYyBoaeG7h24gY8O0bmcgdmnhu4djIHbhu5tpIHTDoGkga2hv4bqjbiBUaWtUb2siIiIKICAgICAgICAjIFPhu60gZOG7pW5nIHBoxrDGoW5nIHRo4bupYyBj4bunYSBs4bubcCBjaGEKICAgICAgICBzdXBlcigpLnBlcmZvcm1fam9iKGFjY291bnQpCiAgICAgICAgCiAgICBkZWYgcGVyZm9ybV9jYXJlKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKToKICAgICAgICAiIiIKICAgICAgICBOdcO0aSB0w6BpIGtob+G6o24gVGlrVG9rIC0gTGVnYWN5IG1ldGhvZCwgc+G7rSBk4bulbmcgU21hcnQgQ2FyZSBt4bubaQogICAgICAgIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IGNodXnhu4NuIGjGsOG7m25nIHNhbmcgU21hcnQgQ2FyZSBtZXRob2RzCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIG51w7RpIHTDoGkga2hv4bqjbiBUaWtUb2s6IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0gKGxlZ2FjeSBtZXRob2QpIikKICAgICAgICAKICAgICAgICAjIFPhu60gZOG7pW5nIFNtYXJ0IENhcmUgbWV0aG9kIHRoYXkgdsOsIG1pbmkgY2FyZSBjxakKICAgICAgICBpbXBvcnQgcmFuZG9tCiAgICAgICAgY2FyZV9tZXRob2RzID0gWyJfY2FyZV9zd2lwZV9mZWVkIiwgIl9jYXJlX3dhdGNoX3ZpZGVvcyJdCiAgICAgICAgc2VsZWN0ZWRfbWV0aG9kID0gcmFuZG9tLmNob2ljZShjYXJlX21ldGhvZHMpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBtZXRob2QgPSBnZXRhdHRyKHNlbGYsIHNlbGVjdGVkX21ldGhvZCkKICAgICAgICAgICAgc3VjY2VzcyA9IG1ldGhvZChhY2NvdW50KQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTGVnYWN5IGNhcmUgdXNpbmcge3NlbGVjdGVkX21ldGhvZH06IHsnc3VjY2VzcycgaWYgc3VjY2VzcyBlbHNlICdmYWlsZWQnfSIpCiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkxlZ2FjeSBjYXJlIGVycm9yOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIGRlZiBwZXJmb3JtX21pbmlfY2FyZShzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIG1pbmkgY2FyZSBjaG8gdMOgaSBraG/huqNuIFRpa1RvazoKICAgICAgICAxLiBW4buBIHRyYW5nIGNo4bunLCB4w6FjIG5o4bqtbiB0YWIgxJHhu4EgeHXhuqV0CiAgICAgICAgMi4gTMaw4bubdCDEkeG7gSB4deG6pXQgdHJvbmcgMi0zIHBow7p0CiAgICAgICAgMy4gTmfhuqt1IG5oacOqbiBi4bqlbSB2w6BvIEjhu5lwIHRoxrAsIGThu6tuZyAyLTVzLCB2deG7kXQgbMOqbiwgcXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgbWluaSBjYXJlIGNobyB0w6BpIGtob+G6o24gVGlrVG9rOiB7YWNjb3VudFsndW5pcXVlX3VzZXJuYW1lJ119IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMS4gxJDhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cgdsOgIHjDoWMgbmjhuq1uIHRhYiDEkeG7gSB4deG6pXQKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB2w6AgY2xpY2sgdsOgbyB0YWIgIkTDoG5oIGNobyBi4bqhbiIgKHRhYiDEkeG7gSB4deG6pXQpCiAgICAgICAgICAgIGZvcl95b3VfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkTDoG5oIGNobyBi4bqhbiIpCiAgICAgICAgICAgIGlmIG5vdCBmb3JfeW91X3RhYjoKICAgICAgICAgICAgICAgIGZvcl95b3VfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iRMOgbmggY2hvIGLhuqFuIikKICAgICAgICAgICAgaWYgbm90IGZvcl95b3VfdGFiOgogICAgICAgICAgICAgICAgZm9yX3lvdV90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iRm9yIFlvdSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgZm9yX3lvdV90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgxJHhu4EgeHXhuqV0LCDEkWFuZyBjbGljayB2w6BvLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihmb3JfeW91X3RhYikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IHRhYiDEkeG7gSB4deG6pXQsIGdp4bqjIMSR4buLbmggxJFhbmcg4bufIHRhYiDEkcO6bmciKQoKICAgICAgICAgICAgIyAyLiBMxrDhu5t0IMSR4buBIHh14bqldCB0cm9uZyAxLTMgcGjDunQKICAgICAgICAgICAgc2Nyb2xsX2R1cmF0aW9uID0gcmFuZG9tLnJhbmRpbnQoNjAsIDE4MCkgICMgMS0zIHBow7p0CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgbMaw4bubdCDEkeG7gSB4deG6pXQgdHJvbmcge3Njcm9sbF9kdXJhdGlvbn0gZ2nDonkuLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIHZpZGVvX2NvdW50ID0gMAogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgKHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSkgPCBzY3JvbGxfZHVyYXRpb246CiAgICAgICAgICAgICAgICAjIEzGsOG7m3QgbMOqbiDEkeG7gyBjaHV54buDbiB2aWRlbyB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgdmlkZW9fY291bnQgKz0gMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE5naOG7iSBuZ+G6q3Ugbmhpw6puIDMtOCBnacOieSBnaeG7r2EgY8OhYyB2aWRlbyAobmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQpCiAgICAgICAgICAgICAgICB3YXRjaF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMywgOCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF90aW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJhbmRvbSBjw7MgMTAlIGto4bqjIG7Eg25nIGLhuqVtIGxpa2UgdmlkZW8KICAgICAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kb20oKSA8IDAuMTogICMgMTAlIGNoYW5jZQogICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgICAgICAgICAgICAgaWYgbGlrZV9idXR0b24gYW5kIG5vdCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUmFuZG9tIGxpa2UgdmlkZW8gdHJvbmcga2hpIG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUmFuZG9tIGPDsyA1JSBraOG6oyBuxINuZyBi4bqlbSBzaGFyZQogICAgICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC4wNTogICMgNSUgY2hhbmNlCiAgICAgICAgICAgICAgICAgICAgc2hhcmVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iQ2hpYSBz4bq7IikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2hhcmVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJTaGFyZSIpCiAgICAgICAgICAgICAgICAgICAgaWYgc2hhcmVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJSYW5kb20gY2xpY2sgc2hhcmUgdHJvbmcga2hpIG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzaGFyZV9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAjIE5o4bqlbiBiYWNrIMSR4buDIMSRw7NuZyBkaWFsb2cgc2hhcmUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbMaw4bubdCB7dmlkZW9fY291bnR9IHZpZGVvIHRyb25nIHtzY3JvbGxfZHVyYXRpb259IGdpw6J5IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMy4gTmfhuqt1IG5oacOqbiBi4bqlbSB2w6BvIEjhu5lwIHRoxrAgKDUwJSBraOG6oyBuxINuZykKICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC41OiAgIyA1MCUgY2hhbmNlCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJSYW5kb20gdHJ1eSBj4bqtcCBI4buZcCB0aMawLi4uIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBjbGljayB2w6BvIEjhu5lwIHRoxrAKICAgICAgICAgICAgICAgIGluYm94X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9Ikjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgaWYgaW5ib3hfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IEjhu5lwIHRoxrAsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihpbmJveF9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBE4burbmcgbOG6oWkgMi01IGdpw6J5CiAgICAgICAgICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMiwgNSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiROG7q25nIGzhuqFpIHt3YWl0X3RpbWV9IGdpw6J5IHRyb25nIEjhu5lwIHRoxrAuLi4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiB0cm9uZyBI4buZcCB0aMawCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVnXhu5F0IGzDqm4gdHJvbmcgSOG7mXAgdGjGsC4uLiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlF1YXkgbOG6oWkgdHJhbmcgY2jhu6cgdOG7qyBI4buZcCB0aMawLi4uIikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5iYWNrX3RvX2hvbWUoKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIHF1YXkgduG7gSB0cmFuZyBjaOG7pyB04burIEjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBI4buZcCB0aMawIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlNraXAgdHJ1eSBj4bqtcCBI4buZcCB0aMawIGzhuqduIG7DoHkiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gduG7gSB0cmFuZyBjaOG7pyBjdeG7kWkgY8O5bmcKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgxJHhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cgc2F1IG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkhvw6BuIHRow6BuaCBtaW5pIGNhcmUgY2hvIHTDoGkga2hv4bqjbiBUaWtUb2s6IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIG1pbmkgY2FyZSBjaG8gdMOgaSBraG/huqNuIFRpa1Rvazoge2FjY291bnRbJ3VuaXF1ZV91c2VybmFtZSddfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhu5EgZ+G6r25nIHbhu4EgdHJhbmcgY2jhu6cgbuG6v3UgY8OzIGzhu5dpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3Jlc3RhcnRfYXBwKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDDs25nIGFwcCB2w6AgbeG7nyBs4bqhaQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQYW5nIMSRw7NuZyBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDDs25nIGFwcAogICAgICAgICAgICBzZWxmLmhlbHBlci5mb3JjZV9zdG9wX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBs4bqhaSBhcHAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJBhbmcgbeG7nyBs4bqhaSBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu50gYXBwIHThuqNpIHhvbmcKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgYXBwIMSRw6MgbeG7nyB0aMOgbmggY8O0bmcgY2jGsGEKICAgICAgICAgICAgaWYgc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfYXBwKCkgPT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgcmVzdGFydCBhcHAgVGlrVG9rIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIlJlc3RhcnQgYXBwIFRpa1RvayB0aOG6pXQgYuG6oWkiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIHJlc3RhcnQgYXBwIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9zY3JvbGxfZm9yX3lvdV9mZWVkKHNlbGYsIGR1cmF0aW9uX3NlY29uZHM6IGludCkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBMxrDhu5t0IGZlZWQgxJHhu4EgeHXhuqV0IHRyb25nIGtob+G6o25nIHRo4budaSBnaWFuIG5o4bqldCDEkeG7i25oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZHVyYXRpb25fc2Vjb25kczogVGjhu51pIGdpYW4gbMaw4bubdCAoZ2nDonkpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBzY3JvbGxfY291bnQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUgPCBkdXJhdGlvbl9zZWNvbmRzOgogICAgICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiDEkeG7gyBjaHV54buDbiB2aWRlbyB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2Nyb2xsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOZ2jhu4kgbmfhuqt1IG5oacOqbiAyLTYgZ2nDonkgbmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQgeGVtIHZpZGVvCiAgICAgICAgICAgICAgICB3YXRjaF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMiwgNikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF90aW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJhbmRvbSB0aOG7iW5oIHRob+G6o25nIGThu6tuZyBsw6J1IGjGoW4gKG5oxrAgxJFhbmcgeGVtIHZpZGVvIHRow7ogduG7iykKICAgICAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kaW50KDEsIDEwKSA9PSAxOiAgIyAxMCUgeMOhYyBzdeG6pXQKICAgICAgICAgICAgICAgICAgICBsb25nX3dhdGNoX3RpbWUgPSByYW5kb20ucmFuZGludCg4LCAxNSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiROG7q25nIHhlbSB2aWRlbyBsw6J1IGjGoW46IHtsb25nX3dhdGNoX3RpbWV9cyIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKGxvbmdfd2F0Y2hfdGltZSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBMb2cgdGnhur9uIHRyw6xuaCBt4buXaSAzMCBnacOieQogICAgICAgICAgICAgICAgZWxhcHNlZCA9IHRpbWUudGltZSgpIC0gc3RhcnRfdGltZQogICAgICAgICAgICAgICAgaWYgZWxhcHNlZCA+IDAgYW5kIGludChlbGFwc2VkKSAlIDMwID09IDAgYW5kIHNjcm9sbF9jb3VudCA+IDA6CiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nID0gZHVyYXRpb25fc2Vjb25kcyAtIGVsYXBzZWQKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBsxrDhu5t0IHtzY3JvbGxfY291bnR9IHZpZGVvLCBjw7JuIGzhuqFpIHtpbnQocmVtYWluaW5nKX1zIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJIb8OgbiB0aMOgbmggbMaw4bubdCDEkeG7gSB4deG6pXQ6IHtzY3JvbGxfY291bnR9IHZpZGVvIHRyb25nIHtkdXJhdGlvbl9zZWNvbmRzfXMiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzGsOG7m3QgZmVlZCDEkeG7gSB4deG6pXQiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9pbnRlcmFjdF93aXRoX2luYm94KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVMawxqFuZyB0w6FjIHbhu5tpIEjhu5lwIHRoxrA6IGLhuqVtIHbDoG8sIGThu6tuZyAyLTVzLCB2deG7kXQgbMOqbgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVMOsbSBuw7p0IEjhu5lwIHRoxrAKICAgICAgICAgICAgaW5ib3hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iSOG7mXAgdGjGsCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgaW5ib3hfYnV0dG9uOgogICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgaW5ib3hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9Ikjhu5lwIHRoxrAiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGluYm94X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IEjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENsaWNrIHbDoG8gSOG7mXAgdGjGsAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkGFuZyBjbGljayB2w6BvIEjhu5lwIHRoxrAiKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaW5ib3hfYnV0dG9uKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBE4burbmcgbOG6oWkgMi01IGdpw6J5CiAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDUpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJE4burbmcgdHJvbmcgSOG7mXAgdGjGsCB7d2FpdF90aW1lfXMiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiB0cm9uZyBI4buZcCB0aMawCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlZ14buRdCBsw6puIHRyb25nIEjhu5lwIHRoxrAiKQogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSB0aGFvIHTDoWMgdnXhu5F0IGzDqm4gdGjDqm0gMS0yIGzhuqduIG7hu69hCiAgICAgICAgICAgIGFkZGl0aW9uYWxfc3dpcGVzID0gcmFuZG9tLnJhbmRpbnQoMSwgMikKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoYWRkaXRpb25hbF9zd2lwZXMpOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDAuNSwgMS41KSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCB0xrDGoW5nIHTDoWMgduG7m2kgSOG7mXAgdGjGsCIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgdMawxqFuZyB0w6FjIHbhu5tpIEjhu5lwIHRoxrAiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ2V0X2F2YWlsYWJsZV9qb2JzKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBkYW5oIHPDoWNoIGPDoWMgam9iIGto4bqjIGThu6VuZyB04burIEdvTGlrZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIGpvYiBob+G6t2MgbGlzdCBy4buXbmcgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBzZWxmLmdvbGlrZV9zZXJ2aWNlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGzhuqV5IGpvYjogR29MaWtlU2VydmljZSBjaMawYSDEkcaw4bujYyBjdW5nIGPhuqVwIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBH4buNaSBBUEkgbOG6pXkgam9iCiAgICAgICAgICAgIGpvYl91cmwgPSBzZWxmLmdldF9qb2JzX3VybCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIHRoYW0gc+G7kQogICAgICAgICAgICBwYXJhbXMgPSBzZWxmLmdldF9qb2JfcGFyYW1zKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3Qoam9iX3VybCwgIkdFVCIsIHBhcmFtcykKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICBqb2JfZGF0YSA9IHJlc3BvbnNlLmdldCgiZGF0YSIsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBqb2JfZGF0YToKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSBqb2IKICAgICAgICAgICAgICAgICAgICBqb2IgPSBzZWxmLm1hcF9qb2JfZGF0YShqb2JfZGF0YSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0w6xtIHRo4bqleSBqb2Ige2pvYlsnaWQnXX0gbG/huqFpIHtqb2JbJ3R5cGUnXX0gY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudFsndW5pcXVlX3VzZXJuYW1lJ119IikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2pvYl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggam9iIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBleGVjdXRlX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiwgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDA6IENoxrBhIHRo4buxYyBoaeG7h24KICAgICAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAyOiBUaOG6pXQgYuG6oWksIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgICAgICAgICAzOiBUaOG6pXQgYuG6oWksIMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgICAgICA0OiBUaOG6pXQgYuG6oWksIHnDqnUgY+G6p3UgxJFhbmcgY2jhu50KICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgICAgIC0gc3VjY2VzcyAoYm9vbCk6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgIGpvYl9saW5rID0gam9iLmdldCgibGluayIsICIiKQogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl9pZH0gbG/huqFpIHtqb2JfdHlwZX0gduG7m2kgbGluayB7am9iX2xpbmt9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBsb+G6oWkgam9iIMSRxrDhu6NjIGjhu5cgdHLhu6MKICAgICAgICAgICAgaWYgam9iX3R5cGUgbm90IGluIFsiZm9sbG93IiwgImxpa2UiXToKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIkxv4bqhaSBqb2Ige2pvYl90eXBlfSBraMO0bmcgxJHGsOG7o2MgaOG7lyB0cuG7oyIKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IDIsCiAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBqb2IgdGhlbyBsb+G6oWkKICAgICAgICAgICAgam9iX3N0YXR1cyA9IDAgICMgTeG6t2MgxJHhu4tuaCBsw6AgY2jGsGEgbMOgbQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgam9iX3R5cGUgPT0gImZvbGxvdyI6CiAgICAgICAgICAgICAgICBqb2Jfc3RhdHVzID0gc2VsZi5fcGVyZm9ybV9mb2xsb3dfam9iKGpvYl9saW5rKQogICAgICAgICAgICBlbGlmIGpvYl90eXBlID09ICJsaWtlIjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2xpa2Vfam9iKGpvYl9saW5rKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKCiAgICAgICAgICAgICMgVOG6oW8ga+G6v3QgcXXhuqMgdHLhuqMgduG7gSBk4buxYSB0csOqbiBqb2Jfc3RhdHVzCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdF9mcm9tX3N0YXR1cyhqb2Jfc3RhdHVzLCBqb2JfdHlwZSkKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbWVzc2FnZSA9IGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iOiB7c3RyKGUpfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgyLCBtZXNzYWdlLCBGYWxzZSkKICAgIAogICAgZGVmIF9jcmVhdGVfam9iX3Jlc3VsdF9mcm9tX3N0YXR1cyhzZWxmLCBqb2Jfc3RhdHVzOiBpbnQsIGpvYl90eXBlOiBzdHIpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFThuqFvIGvhur90IHF14bqjIGpvYiB04burIHN0YXR1cyBjb2RlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX3N0YXR1czogTcOjIHRy4bqhbmcgdGjDoWkgam9iIHThu6sgX3BlcmZvcm1feHh4X2pvYgogICAgICAgICAgICBqb2JfdHlwZTogTG/huqFpIGpvYiAoZm9sbG93LCBsaWtlKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgam9iCiAgICAgICAgIiIiCiAgICAgICAgaWYgam9iX3N0YXR1cyA9PSAxOiAgIyBUaMOgbmggY8O0bmcKICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBob8OgbiB0aMOgbmggam9iIHtqb2JfdHlwZX0gdGjDoG5oIGPDtG5nIgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgxLCBtZXNzYWdlLCBUcnVlKQogICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAyOiAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIktow7RuZyB0aOG7gyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcgxJHhu4MgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl90eXBlfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY3JlYXRlX2pvYl9yZXN1bHQoMiwgbWVzc2FnZSwgRmFsc2UpCiAgICAgICAgZWxpZiBqb2Jfc3RhdHVzID09IDM6ICAjIELhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIsSQ4buRaSB0xrDhu6NuZyDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlIgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHVuZm9sbG93IMSR4buDIEpvYlNlcnZpY2UgeOG7rSBsw70KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDMsIG1lc3NhZ2UsIEZhbHNlLCB1bmZvbGxvdz1UcnVlKQogICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSA0OiAgIyBZw6p1IGPhuqd1IMSRYW5nIGNo4budCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlnDqnUgY+G6p3UgxJFhbmcgY2jhu50gdHJvbmcgam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDQsIG1lc3NhZ2UsIEZhbHNlKQogICAgICAgIGVsc2U6ICAjIFRo4bqldCBi4bqhaSBob+G6t2MgdHLhuqFuZyB0aMOhaSBraMOhYwogICAgICAgICAgICBtZXNzYWdlID0gZiJUaOG7sWMgaGnhu4duIGpvYiB7am9iX3R5cGV9IHRo4bqldCBi4bqhaSB24bubaSB0cuG6oW5nIHRow6FpIHtqb2Jfc3RhdHVzfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KGpvYl9zdGF0dXMgaWYgam9iX3N0YXR1cyA+IDAgZWxzZSAwLCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICAgICAgCiAgICBkZWYgX2NoZWNrX2FjY291bnRfc3RhdHVzX2RpYWxvZyhzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgZGlhbG9nICJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIgdsOgIHjhu60gbMO9IG7hur91IGPDswogICAgICAgIFNhdSBraGkgYuG6pW0gT0ssIGtp4buDbSB0cmEgeGVtIGPDsyB24buBIHRyYW5nIGNo4bunIGtow7RuZyB2w6Agc3luYyBhY2NvdW50cwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgY8OzIGRpYWxvZyB2w6AgY+G6p24gbmfhu6tuZyBob+G6oXQgxJHhu5luZyB0w6BpIGtob+G6o24sIEZhbHNlIG7hur91IGtow7RuZyBjw7MgZGlhbG9nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENo4budIG3hu5l0IGNow7p0IMSR4buDIGRpYWxvZyBjw7MgdGjhu4MgeHXhuqV0IGhp4buHbgogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBkaWFsb2cgY8OzIHRleHQgIlRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIgogICAgICAgICAgICBzdGF0dXNfZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN0YXR1c19kaWFsb2c6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJQaMOhdCBoaeG7h24gZGlhbG9nICdUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiciKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gZWxlbWVudCBjw7MgcmVzb3VyY2UtaWQ9ImFuZHJvaWQ6aWQvbWVzc2FnZSIKICAgICAgICAgICAgICAgIG1lc3NhZ2VfZWxlbWVudCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChyZXNvdXJjZV9pZD0iYW5kcm9pZDppZC9tZXNzYWdlIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbWVzc2FnZV9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQobWVzc2FnZV9lbGVtZW50KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVGjDtG5nIGLDoW8gdHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o246IHttZXNzYWdlX3RleHR9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEzGsHUgdGjDtG5nIGLDoW8gdsOgbyBkYXRhYmFzZSBob+G6t2MgbG9nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJDUklUSUNBTDogVMOgaSBraG/huqNuIGLhu4sgaOG6oW4gY2jhur8gLSB7bWVzc2FnZV90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBjbGljayBuw7p0IE9LL8SQw7NuZyDEkeG7gyDEkcOzbmcgZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgb2tfY2xpY2tlZCA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgb2tfYnV0dG9ucyA9IFsiT0siLCAixJDDs25nIiwgIlTDtGkgaGnhu4N1IiwgIsSQ4buTbmcgw70iXQogICAgICAgICAgICAgICAgICAgIGZvciBidG5fdGV4dCBpbiBva19idXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICBva19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD1idG5fdGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgb2tfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG9rX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLhuqVtIG7DunQgJ3tidG5fdGV4dH0nIMSR4buDIMSRw7NuZyBkaWFsb2ciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tfY2xpY2tlZCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgb2tfY2xpY2tlZDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBDaOG7nSA1IGdpw6J5IHbDoCBraeG7g20gdHJhIHRyYW5nIGNo4bunIHRyb25nIDUgbOG6p24KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQ2jhu50gNXMgdsOgIGtp4buDbSB0cmEgdHJhbmcgY2jhu6cgdHJvbmcgNSBs4bqnbi4uLiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaG9tZV9zY3JlZW5fZGV0ZWN0ZWQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZSg1KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJLaeG7g20gdHJhIHRyYW5nIGNo4bunIGzhuqduIHthdHRlbXB0ICsgMX0vNSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIMSRw6MgduG7gSB0cmFuZyBjaOG7pyAtIGPDsyBraOG6oyBuxINuZyB0w6BpIGtob+G6o24gYuG7iyBsb2dvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbWVfc2NyZWVuX2RldGVjdGVkID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhvbWVfc2NyZWVuX2RldGVjdGVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIHN5bmMgYWNjb3VudHMgxJHhu4Mga2nhu4NtIHRyYSBhY2NvdW50IGPDsyBjw7JuIHRyb25nIGRhbmggc8OhY2gga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIHN5bmMgYWNjb3VudHMgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbi4uLiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBoaeG7h24gdOG6oWkgdOG7qyB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2RldmljZV9hY2NvdW50cyA9IHNlbGYuZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lcyA9IHthY2MuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikubG93ZXIoKSBmb3IgYWNjIGluIGN1cnJlbnRfZGV2aWNlX2FjY291bnRzfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrVG9rIHThu6sgREIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYl9hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD1zZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw6FjIHTDoGkga2hv4bqjbiB0cm9uZyBEQiBjw7MgY8OybiB04buTbiB04bqhaSB0csOqbiB0aGnhur90IGLhu4sga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGRiX2FjY291bnQgaW4gZGJfYWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiX3VzZXJuYW1lID0gZGJfYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRiX3VzZXJuYW1lIGFuZCBkYl91c2VybmFtZSBub3QgaW4gY3VycmVudF91c2VybmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBraMO0bmcgY8OybiB04buTbiB04bqhaSB0csOqbiB0aGnhur90IGLhu4sgLSDEkcOhbmggZOG6pXUgbmfhu6tuZyBob+G6oXQgxJHhu5luZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlTDoGkga2hv4bqjbiB7ZGJfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSBraMO0bmcgY8OybiB0cm9uZyBkYW5oIHPDoWNoIHRoaeG6v3QgYuG7iyAtIMSRw6FuaCBk4bqldSBuZ+G7q25nIGhv4bqhdCDEkeG7mW5nIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJpbmFjdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVhc29uIjogIlTDoGkga2hv4bqjbiBi4buLIGxvZyBvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChkYl9hY2NvdW50WyJpZCJdLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIMSRw6FuaCBk4bqldSB0w6BpIGtob+G6o24ge2RiX2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gbmfhu6tuZyBob+G6oXQgxJHhu5luZyB24bubaSBsw70gZG86IFTDoGkga2hv4bqjbiBi4buLIGxvZyBvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU3luYyBs4bqhaSBhY2NvdW50cyBt4bubaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3luY19hY2NvdW50c190b19kYigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIHN5bmNfZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKHN5bmNfZXJyb3IsICJM4buXaSBraGkgc3luYyBhY2NvdW50cyBzYXUga2hpIHBow6F0IGhp4buHbiBkaWFsb2cgdHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIlTDrG0gdGjhuqV5IGRpYWxvZyAnVHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24nIG5oxrBuZyBraMO0bmcgdMOsbSB0aOG6pXkgbWVzc2FnZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGtp4buDbSB0cmEgZGlhbG9nIHRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9wZXJmb3JtX2ZvbGxvd19qb2Ioc2VsZiwgcHJvZmlsZV9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBmb2xsb3cgdHLDqm4gVGlrVG9rCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIMSR4bq/biB0cmFuZyBjw6EgbmjDom4gY+G6p24gZm9sbG93IChk4bqhbmc6IGh0dHBzOi8vd3d3LnRpa3Rvay5jb20vQHVzZXJuYW1lKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiBi4buLIHVuZm9sbG93LCA0OiB5w6p1IGPhuqd1IGNo4budLCA1OiBn4butaSB5w6p1IGPhuqd1KQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBVUkwgVGlrVG9rIMSR4buDIHPhu60gZOG7pW5nIGNobyBsb2dnaW5nCiAgICAgICAgICAgIHVzZXJuYW1lX21hdGNoID0gcmUuc2VhcmNoKHIndGlrdG9rXC5jb20vQChbXi8/XSspJywgcHJvZmlsZV9saW5rKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfbWF0Y2g6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB0csOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgbGluazoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB1c2VybmFtZSA9IHVzZXJuYW1lX21hdGNoLmdyb3VwKDEpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gdHJhbmcgY8OhIG5ow6JuCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfcGFnZShwcm9maWxlX2xpbmspOgogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu50gdGjDqm0gY2hvIHRyYW5nIGjhu5Mgc8ahIHThuqNpIHhvbmcKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCBGb2xsb3cgdGhlbyBjw6FjIGPDoWNoIGtow6FjIG5oYXUKICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IE5vbmUKICAgICAgICAgICAgIyBM4bqleSBYTUwgbeG7mXQgbOG6p24gxJHhu4Mgc28gc8OhbmgKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCgogICAgICAgICAgICAjIEPDoWNoIDE6IFTDrG0gdGhlbyB0ZXh0IHRp4bq/bmcgVmnhu4d0IHbDoCB0aeG6v25nIEFuaAogICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwiR+G7rWkg8J+RiyJdCiAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgIGlmIGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgICMgQ8OhY2ggMjogVMOsbSB0aGVvIGNvbnRlbnQtZGVzYyBu4bq/dSBjaMawYSB0w6xtIHRo4bqleQogICAgICAgICAgICBpZiBub3QgZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgIGZvbGxvd19kZXNjcyA9IFsiVGhlbyBkw7VpIiwgIkZvbGxvdyIsICLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIl0KICAgICAgICAgICAgICAgIGZvciBkZXNjIGluIGZvbGxvd19kZXNjczoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9ZGVzYykKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICAjIFRo4butIGzhuqFpIHThuqV0IGPhuqMgY8OhYyBjw6FjaAogICAgICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgdGhlbyBkw7VpIHNhdSBuaGnhu4F1IGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRleHQgY+G7p2EgbsO6dAogICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgYnV0dG9uX3Jlc291cmNlX2lkID0gZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiAne2J1dHRvbl90ZXh0fScsIHJlc291cmNlLWlkOiAne2J1dHRvbl9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaQogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCJH4butaSDwn5GLIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aGVvIGTDtWkgdMOgaSBraG/huqNuIHt1c2VybmFtZX0gdOG7qyB0csaw4bubYyIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiA1CiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGzDoCAiVGhlbyBkw7VpIiBob+G6t2MgIkZvbGxvdyIgdGjDrCBjbGljayB2w6BvIG7DunQKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyJUaGVvIGTDtWkiLCAiRm9sbG93Il06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIGNsaWNrIHbDoG8gbsO6dCB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg0KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nICJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgIGlmIHNlbGYuX2NoZWNrX2FjY291bnRfc3RhdHVzX2RpYWxvZygpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJUw6BpIGtob+G6o24gYuG7iyBo4bqhbiBjaOG6vywgbmfhu6tuZyBob+G6oXQgxJHhu5luZyB2w6AgaOG7p3kgam9iIikKICAgICAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gbmfhu6tuZyBob+G6oXQgxJHhu5luZwogICAgICAgICAgICAgICAgICAgICMgVHLhuqMgduG7gSBzdGF0dXMgMiDEkeG7gyBiw6FvIGzhu5dpIHbDoCBo4buneSBqb2IKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFZ14buRdCB4deG7kW5nIDEgbOG6p24gxJHhu4MgcmVmcmVzaCB0cuG6oW5nIHRow6FpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgZGlhbG9nIGhp4buHbiBsw6puIGtow7RuZwogICAgICAgICAgICAgICAgIyBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgICMgaWYgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICMgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgY+G6o25oIGLDoW8gaG/hurdjIGdp4bubaSBo4bqhbgogICAgICAgICAgICAgICAgIyAgICAgZGlhbG9ncyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzY3JlZW5feG1sLCBjbGFzc19uYW1lPSJhbmRyb2lkLmFwcC5EaWFsb2ciKQogICAgICAgICAgICAgICAgIyAgICAgZm9yIGRpYWxvZyBpbiBkaWFsb2dzOgogICAgICAgICAgICAgICAgIyAgICAgICAgIGRpYWxvZ190ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChkaWFsb2cpCiAgICAgICAgICAgICAgICAjICAgICAgICAgaWYgYW55KGtleXdvcmQgaW4gZGlhbG9nX3RleHQubG93ZXIoKSBmb3Iga2V5d29yZCBpbiBbInRo4butIGzhuqFpIHNhdSIsICJnaeG7m2kgaOG6oW4iLCAibGltaXQiLCAidHJ5IGFnYWluIl0pOgogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAjIFTDrG0gdsOgIG5o4bqlbiBuw7p0IE9LL8SQw7NuZwogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICBva19idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIpCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIGZvciBidG4gaW4gb2tfYnV0dG9uczoKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgIGJ0bl90ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChidG4pCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICAgICBpZiBidG5fdGV4dCBhbmQgYnRuX3RleHQubG93ZXIoKSBpbiBbIm9rIiwgIsSRw7NuZyIsICJ0w7RpIGhp4buDdSIsICLEkeG7k25nIMO9Il06CiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ0bikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJKb2Iga2jDtG5nIGhvw6BuIHRow6BuaCwgYuG7iyBnaeG7m2kgaOG6oW4gdGhlbyBkw7VpIikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgcmV0dXJuIDMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIHRleHQgc2F1IGtoaSBuaOG6pW4gdGhlbyBkw7VpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGzhuqFpIG7DunQgZm9sbG93IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAtIMawdSB0acOqbiB0aGVvIHJlc291cmNlLWlkIG7hur91IGPDswogICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGPDsyByZXNvdXJjZV9pZCwgdMOsbSB0aGVvIHJlc291cmNlX2lkIHRyxrDhu5tjCiAgICAgICAgICAgICAgICBpZiBidXR0b25fcmVzb3VyY2VfaWQ6CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHJlc291cmNlX2lkPWJ1dHRvbl9yZXNvdXJjZV9pZCkKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gbOG6oWkgbsO6dCBmb2xsb3cgdGhlbyByZXNvdXJjZS1pZDoge2J1dHRvbl9yZXNvdXJjZV9pZH0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlX2lkIGhv4bq3YyBraMO0bmcgY8OzIHJlc291cmNlX2lkLCB0w6xtIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCAixJDDoyB5w6p1IGPhuqd1IiwgIlJlcXVlc3RlZCIsICJUaGVvIGTDtWkiLCAiRm9sbG93Il0KICAgICAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBmb2xsb3dfdGV4dHM6CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgRmFsbGJhY2s6IHTDrG0gdGhlbyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgIGlmIG5vdCB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgZm9sbG93X2Rlc2NzID0gWyJUaGVvIGTDtWkiLCAiRm9sbG93IiwgIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciXQogICAgICAgICAgICAgICAgICAgIGZvciBkZXNjIGluIGZvbGxvd19kZXNjczoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz1kZXNjKQogICAgICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF90ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh1cGRhdGVkX2ZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9yZXNvdXJjZV9pZCA9IHVwZGF0ZWRfZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlNhdSBraGkgY2xpY2sgZm9sbG93OiB0ZXh0PSd7dXBkYXRlZF90ZXh0fScsIHJlc291cmNlLWlkPSd7dXBkYXRlZF9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgICAgICAgICAjIFRyaW0gd2hpdGVzcGFjZSB04burIHVwZGF0ZWRfdGV4dAogICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfdGV4dCA9IHVwZGF0ZWRfdGV4dC5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGPDoWMgdHLGsOG7nW5nIGjhu6NwIGtow6FjIG5oYXUKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX3RleHQgaW4gWyLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIiwgIk5o4bqvbiB0aW4iLCAiTWVzc2FnZSIsIkfhu61pIPCfkYsiXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiRm9sbG93IHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsixJDDoyB5w6p1IGPhuqd1IiwgIlJlcXVlc3RlZCJdOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGfhu61pIHnDqnUgY+G6p3UgdGhlbyBkw7VpIHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsiVGhlbyBkw7VpIiwgIkZvbGxvdyJdOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkZvbGxvdyBraMO0bmcgdGjDoG5oIGPDtG5nLCB0ZXh0IGPhu6dhIG7DunQgduG6q24gbMOgOiB7dXBkYXRlZF90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJGb2xsb3cga2jDtG5nIHRow6BuaCBjw7RuZywgdGV4dCBj4bunYSBuw7p0IGzDoDoge3VwZGF0ZWRfdGV4dH0iKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBuw7p0LCBjw7MgdGjhu4MgxJHDoyBmb2xsb3cgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgZm9sbG93IHNhdSBraGkgbmjhuqVuLCBnaeG6oyDEkeG7i25oIMSRw6MgdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJUZXh0IGPhu6dhIG7DunQga2jDtG5nIGto4bubcCB24bubaSAnVGhlbyBkw7VpJyBob+G6t2MgJ0ZvbGxvdyc6IHtidXR0b25fdGV4dH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGZvbGxvdzoge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgogICAgCiAgICBkZWYgX29wZW5fcHJvZmlsZV9wYWdlKHNlbGYsIHByb2ZpbGVfbGluazogc3RyKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE3hu58gdHJhbmcgcHJvZmlsZSBUaWtUb2sgYuG6sW5nIHTDrG0ga2nhur9tIGhv4bq3YyBsaW5rIHRy4buxYyB0aeG6v3AKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm9maWxlX2xpbms6IExpbmsgxJHhur9uIHRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBVUkwgVGlrVG9rCiAgICAgICAgICAgIHVzZXJuYW1lX21hdGNoID0gcmUuc2VhcmNoKHIndGlrdG9rXC5jb20vQChbXi8/XSspJywgcHJvZmlsZV9saW5rKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfbWF0Y2g6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB0csOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgbGluazoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZV9tYXRjaC5ncm91cCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIDEgdHJvbmcgMiBjw6FjaDogdMOsbSBraeG6v20gaG/hurdjIG3hu58gdHLhu7FjIHRp4bq/cCBsaW5rCiAgICAgICAgICAgIGlmIHJhbmRvbS5jaG9pY2UoW1RydWUsIEZhbHNlXSk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTeG7nyB0cmFuZyBjw6EgbmjDom4gYuG6sW5nIGPDoWNoIHTDrG0ga2nhur9tOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgICMgVGjhu60gbeG7nyBi4bqxbmcgdMOsbSBraeG6v20KICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHVzZXJuYW1lKToKICAgICAgICAgICAgICAgICAgICAjIE7hur91IHTDrG0ga2nhur9tIHRo4bqldCBi4bqhaSwgZmFsbGJhY2sgc2FuZyBt4bufIGxpbmsKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIGtp4bq/bSB0aOG6pXQgYuG6oWksIG3hu58gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEPDoWNoIDI6IE3hu58gdHLhu7FjIHRp4bq/cCBVUkwgdGjDtG5nIHF1YSBoZWxwZXIub3Blbl91cmwoKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdHJhbmcgY8OhIG5ow6JuIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3A6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIHbDoG8gxJHDum5nIHByb2ZpbGUga2jDtG5nIGLhurFuZyBjw6FjaCB0w6xtIGJ1dHRvbiBjw7MgdGV4dCA9IEB1c2VybmFtZQogICAgICAgICAgICAjIFTDrG0gYnV0dG9uIGPDsyB0ZXh0IGNow61uaCB4w6FjIGLhurFuZyBAdXNlcm5hbWUgKFRpa1RvayBsdcO0biBjw7MgQCB0csaw4bubYyB1c2VybmFtZSkKICAgICAgICAgICAgYXRfdXNlcm5hbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9ZiJAe3VzZXJuYW1lfSIpCiAgICAgICAgICAgIGlmIGF0X3VzZXJuYW1lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHjDoWMgbmjhuq1uIHbDoG8gxJHDum5nIHByb2ZpbGUgY+G7p2Ege3VzZXJuYW1lfSAodMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0OiAnQHt1c2VybmFtZX0nKSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0ID0gJ0B7dXNlcm5hbWV9JyB0csOqbiBtw6BuIGjDrG5oLCBjw7MgdGjhu4Mga2jDtG5nIHbDoG8gxJHDum5nIHByb2ZpbGUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIG3hu58gdHJhbmcgcHJvZmlsZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHNlbGYsIHVzZXJuYW1lOiBzdHIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTeG7nyB0cmFuZyBwcm9maWxlIFRpa1RvayBi4bqxbmcgY8OhY2ggdMOsbSBraeG6v20gdXNlcm5hbWUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1c2VybmFtZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIGPhuqduIHTDrG0KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUw6xtIHRhYiB0w6xtIGtp4bq/bSAtIHRo4butIHBoxrDGoW5nIHBow6FwIHRy4buxYyB0aeG6v3AgdHLGsOG7m2MKICAgICAgICAgICAgc2VhcmNoX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IlTDrG0ga2nhur9tIikKICAgICAgICAgICAgaWYgc2VhcmNoX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IHRhYiB0w6xtIGtp4bq/bSB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSwgZMO5bmcgcGjGsMahbmcgcGjDoXAgYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSB0YWIgVMOsbSBraeG6v20gdHLhu7FjIHRp4bq/cCwgdGjhu60gcGjGsMahbmcgcGjDoXAgYWx0ZXJuYXRpdmUiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIER1bXAgWE1MIG3hu5l0IGzhuqduIMSR4buDIHjhu60gbMO9CiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBYTUwgbcOgbiBow6xuaCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBjw6FjIHRleHQgdGhheSB0aOG6vyB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlX3RleHRzID0gWyJC4bqhbiBiw6giLCAixJBhbmcgZm9sbG93IiwgIkTDoG5oIGNobyBi4bqhbiJdCiAgICAgICAgICAgICAgICBmb3VuZF9lbGVtZW50ID0gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBhbHRlcm5hdGl2ZV90ZXh0czoKICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBlbGVtZW50OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgdGV4dCB0aGFtIGNoaeG6v3UgJ3t0ZXh0fScgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRfZWxlbWVudCA9IGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IGZvdW5kX2VsZW1lbnQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0ZXh0IHRoYW0gY2hp4bq/dSBuw6BvIHRyb25nIFhNTCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBlbGVtZW50IGNoYQogICAgICAgICAgICAgICAgcGFyZW50X2VsZW1lbnQgPSBzZWxmLmhlbHBlci5maW5kX3BhcmVudF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBmb3VuZF9lbGVtZW50KQogICAgICAgICAgICAgICAgaWYgbm90IHBhcmVudF9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdMOsbSB0aOG6pXkgZWxlbWVudCBjaGEgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZ3JhbmRfZWxlbWVudCA9IHNlbGYuaGVscGVyLmZpbmRfcGFyZW50X2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHBhcmVudF9lbGVtZW50KQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBncmFuZF9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHTDrG0gdGjhuqV5IGdyYW5kX2VsZW1lbnQgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOtbmggdG/DoW4gdOG7jWEgxJHhu5kgdsOgIGNsaWNrCiAgICAgICAgICAgICAgICBib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoZ3JhbmRfZWxlbWVudCkKICAgICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gYm91bmRzCiAgICAgICAgICAgICAgICB4ID0geDIgKyA1MAogICAgICAgICAgICAgICAgeSA9ICh5MSArIHkyKSAvLyAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw61uaCB0b8OhbiB04buNYSDEkeG7mSB0YWIgdMOsbSBraeG6v206IHg9e3h9LCB5PXt5fSAodOG7qyBib3VuZHMgY2hhOiB7Ym91bmRzfSkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIELhuqVtIHbDoG8gdOG7jWEgxJHhu5kgxJHDoyB0w61uaAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIHbDoG8gxJHGsOG7o2MgdHJhbmcgdMOsbSBraeG6v20ga2jDtG5nCiAgICAgICAgICAgIHNlYXJjaF9pbnB1dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5FZGl0VGV4dCIpCiAgICAgICAgICAgIGlmIG5vdCBzZWFyY2hfaW5wdXQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHbDoG8gdHJhbmcgdMOsbSBraeG6v20gLSBraMO0bmcgdMOsbSB0aOG6pXkgw7Qgbmjhuq1wIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6rXAgdXNlcm5hbWUgY+G6p24gdMOsbQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2lucHV0KQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBow6BtIGlucHV0X3RleHQgbeG7mXQgbOG6p24gZHV5IG5o4bqldAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgbmjhuq1wIHRleHQ6ICd7dXNlcm5hbWV9JyIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmlucHV0X3RleHQoZiJ7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg2KQoKICAgICAgICAgICAgIyBUw6xtIG7DunQgVMOsbSBraeG6v20gdsOgIGNsaWNrCiAgICAgICAgICAgIHNlYXJjaF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIiwgdGV4dD0iVMOsbSBraeG6v20iKQogICAgICAgICAgICBpZiBzZWFyY2hfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVMOsbSB0aOG6pXkgbsO6dCAnVMOsbSBraeG6v20nLCDEkWFuZyBjbGljay4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgJ1TDrG0ga2nhur9tJyIpCiAgICAgICAgICAgICAgICAjIFRo4buxYyBoaeG7h24gc2VhcmNoIHbhu5tpIGVudGVyIGtleQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfZW50ZXIoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHRhYiAiTmfGsOG7nWkgZMO5bmciIHbDoCBjbGljayB2w6BvIG7DsyAtIMSR4bujaSB04buRaSDEkWEgMTBzCiAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJOZ8aw4budaSBkw7luZyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCB1c2VyX3RhYjoKICAgICAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjb250ZW50X2Rlc2M9Ik5nxrDhu51pIGTDuW5nIiwgdGltZW91dD02KQoKICAgICAgICAgICAgaWYgdXNlcl90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgTmfGsOG7nWkgZMO5bmcsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIE5nxrDhu51pIGTDuW5nIHNhdSAxMHMiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBUZXh0VmlldyBjw7MgdGV4dCBjaMOtbmggeMOhYyBi4bqxbmcgdXNlcm5hbWUgKGtow7RuZyBjw7MgQCkgLSDEkeG7o2kgdOG7kWkgxJFhIDZzCiAgICAgICAgICAgIHVzZXJuYW1lX2VsZW1lbnQgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9dXNlcm5hbWUsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IiwgdGltZW91dD02KQoKICAgICAgICAgICAgaWYgdXNlcm5hbWVfZWxlbWVudDoKICAgICAgICAgICAgICAgICMgQ2xpY2sgdsOgbyBlbGVtZW50IMSR4bqndSB0acOqbiB0w6xtIMSRxrDhu6NjCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt1c2VybmFtZX0sIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJuYW1lX2VsZW1lbnQpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB0cm9uZyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSBzYXUgMTBzIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdMOsbSBraeG6v20gdMOgaSBraG/huqNuOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3BlcmZvcm1fbGlrZV9qb2Ioc2VsZiwgcG9zdF9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBsaWtlIHZpZGVvIHRyw6puIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBvc3RfbGluazogTGluayDEkeG6v24gdmlkZW8gY+G6p24gbGlrZQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiDEkcOjIGxpa2UgdHLGsOG7m2MgxJHDsykKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwoKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIHZpZGVvIFRpa1RvayBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wOiB7cG9zdF9saW5rfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gdHLhu7FjIHRp4bq/cCBVUkwgdGjDtG5nIHF1YSBoZWxwZXIub3Blbl91cmwoKQogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwb3N0X2xpbmssc2VsZi5hcHBfcGFja2FnZSkKCiAgICAgICAgICAgICMgUmFuZG9tIG5naOG7iSAzLTEwIGdpw6J5IG5oxrAgbmfGsOG7nWkgZMO5bmcgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICB3YWl0X3RpbWUgPSByYW5kb20ucmFuZGludCgzLCAxMCkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIG5naOG7iSB7d2FpdF90aW1lfXMgbmjGsCBuZ8aw4budaSBkw7luZyB0aMO0bmcgdGjGsOG7nW5nLi4uIikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXRfdGltZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGxpa2UgYuG6sW5nIGNvbnRlbnQtZGVzYyAiVGjDrWNoIHZpZGVvLiIKICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgdHLDqm4gbcOgbiBow6xuaCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0aMO0bmcgdGluIG7DunQgbGlrZSBiYW4gxJHhuqd1CiAgICAgICAgICAgIGluaXRpYWxfY29udGVudF9kZXNjID0gbGlrZV9idXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9yZXNvdXJjZV9pZCA9IGxpa2VfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9zZWxlY3RlZCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVHLhuqFuZyB0aMOhaSBuw7p0IGxpa2UgYmFuIMSR4bqndTogc2VsZWN0ZWQ9e2luaXRpYWxfc2VsZWN0ZWR9LCBjb250ZW50LWRlc2M9J3tpbml0aWFsX2NvbnRlbnRfZGVzY30nLCByZXNvdXJjZS1pZD0ne2luaXRpYWxfcmVzb3VyY2VfaWR9JyIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgxJHDoyBsaWtlIHThu6sgdHLGsOG7m2MKICAgICAgICAgICAgaWYgaW5pdGlhbF9zZWxlY3RlZCBvciAiQuG7jyB0aMOtY2giIGluIGluaXRpYWxfY29udGVudF9kZXNjIG9yICJVbmxpa2UiIGluIGluaXRpYWxfY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVmlkZW8gxJHDoyDEkcaw4bujYyBsaWtlIHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmVzdWx0ID0gMyAgIyDEkMOjIGxpa2UgdHLGsOG7m2MgxJHDswogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGxpa2UgdmlkZW8KICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuX2F0dGVtcHRfbGlrZV92aWRlbyhsaWtlX2J1dHRvbikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2F1IGtoaSBsaWtlIHhvbmcsIHZ14buRdCByYW5kb20gMi01IHZpZGVvIHLhu5NpIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgcmVzdWx0ID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgc2VsZi5fc2Nyb2xsX3ZpZGVvc19hbmRfcmV0dXJuX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2IgbGlrZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgoKICAgIGRlZiBfZmluZF9saWtlX2J1dHRvbihzZWxmKToKICAgICAgICAiIiJUw6xtIG7DunQgbGlrZSB0csOqbiB2aWRlbyBUaWtUb2siIiIKICAgICAgICAjIFRo4butIGPDoWMgY8OhY2ggdMOsbSBraMOhYyBuaGF1IGNobyBuw7p0IGxpa2UKICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IlRow61jaCIpCiAgICAgICAgaWYgbm90IGxpa2VfYnV0dG9uOgogICAgICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9Ikxpa2UiKQogICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgIyBUw6xtIHRoZW8gcmVzb3VyY2UtaWQgaG/hurdjIHhwYXRoCiAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHJlc291cmNlX2lkPSJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGw6aWQvbGlrZV9idXR0b24iKQogICAgICAgIHJldHVybiBsaWtlX2J1dHRvbgoKICAgIGRlZiBfYXR0ZW1wdF9saWtlX3ZpZGVvKHNlbGYsIGxpa2VfYnV0dG9uKToKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIGxpa2UgdmlkZW8sIMawdSB0acOqbiBi4bqlbSByYW5kb20gdOG7jWEgxJHhu5ksIGZhbGxiYWNrIHNhbmcgYuG6pW0gbsO6dCBsaWtlIiIiCiAgICAgICAgIyBM4bqleSBrw61jaCB0aMaw4bubYyBtw6BuIGjDrG5oIMSR4buDIHTDrW5oIHThu41hIMSR4buZIHJhbmRvbQogICAgICAgIHdpZHRoLCBoZWlnaHQgPSBzZWxmLmhlbHBlci5nZXRfc2NyZWVuX3NpemUoKQogICAgICAgIAogICAgICAgICMgVGjhu60gYuG6pW0gcmFuZG9tIHThu41hIMSR4buZIHRyxrDhu5tjIChkb3VibGUgY2xpY2spCiAgICAgICAgeCA9IGludCh3aWR0aCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICB5ID0gaW50KGhlaWdodCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVGjhu60gZG91YmxlIGNsaWNrIHThuqFpIHThu41hIMSR4buZICh7eH0sIHt5fSkgxJHhu4MgbGlrZSB2aWRlbyIpCiAgICAgICAgCiAgICAgICAgIyBUaOG7sWMgaGnhu4duIGRvdWJsZSBjbGljawogICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjEpCiAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAjIENo4budIGFuaW1hdGlvbgogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBxdeG6oyBzYXUgZG91YmxlIGNsaWNrCiAgICAgICAgaWYgc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0ixJDDoyB0aMOtY2ggdmlkZW8iKToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIHZpZGVvIHRow6BuaCBjw7RuZyBi4bqxbmcgZG91YmxlIGNsaWNrIikKICAgICAgICAgICAgcmV0dXJuIDEKCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSBkb3VibGUgY2xpY2sga2jDtG5nIHRow6BuaCBjw7RuZywgYuG6pW0gdHLhu7FjIHRp4bq/cCB2w6BvIG7DunQgbGlrZQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkRvdWJsZSBjbGljayBjaMawYSBsaWtlIMSRxrDhu6NjLCBi4bqlbSB0cuG7sWMgdGnhur9wIHbDoG8gbsO6dCBsaWtlIikKICAgICAgICAKICAgICAgICAjIEzhuqV5IGzhuqFpIHRow7RuZyB0aW4gbsO6dCBsaWtlIG3hu5tpIG5o4bqldAogICAgICAgIGN1cnJlbnRfbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBub3QgY3VycmVudF9saWtlX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgbGlrZSDEkeG7gyBi4bqlbSB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAKICAgICAgICAjIELhuqVtIHbDoG8gbsO6dCBsaWtlCiAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnQoY3VycmVudF9saWtlX2J1dHRvbikKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMgc2F1IGtoaSBi4bqlbSBuw7p0CiAgICAgICAgbGlrZV9idXR0b25fZmluYWwgPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBsaWtlX2J1dHRvbl9maW5hbDoKICAgICAgICAgICAgaXNfc2VsZWN0ZWRfZmluYWwgPSBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uX2ZpbmFsKQogICAgICAgICAgICBjb250ZW50X2Rlc2NfZmluYWwgPSBsaWtlX2J1dHRvbl9maW5hbC5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICByZXNvdXJjZV9pZF9maW5hbCA9IGxpa2VfYnV0dG9uX2ZpbmFsLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJTYXUga2hpIGLhuqVtIG7DunQgbGlrZTogc2VsZWN0ZWQ9e2lzX3NlbGVjdGVkX2ZpbmFsfSwgY29udGVudC1kZXNjPSd7Y29udGVudF9kZXNjX2ZpbmFsfScsIHJlc291cmNlLWlkPSd7cmVzb3VyY2VfaWRfZmluYWx9JyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBpc19zZWxlY3RlZF9maW5hbCBvciAiQuG7jyB0aMOtY2giIGluIGNvbnRlbnRfZGVzY19maW5hbCBvciAiVW5saWtlIiBpbiBjb250ZW50X2Rlc2NfZmluYWw6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGxpa2UgdmlkZW8gdGjDoG5oIGPDtG5nIGLhurFuZyBjbGljayBuw7p0IikKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgbGlrZSB2aWRlbyBzYXUga2hpIHRo4butIGPhuqMgMiBjw6FjaCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgxJHhu4Mga2nhu4NtIHRyYSwgZ2nhuqMgxJHhu4tuaCB0aMOgbmggY8O0bmcKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgbGlrZSDEkeG7gyBraeG7g20gdHJhLCBnaeG6oyDEkeG7i25oIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiAxCgogICAgZGVmIF9zY3JvbGxfdmlkZW9zX2FuZF9yZXR1cm5faG9tZShzZWxmKToKICAgICAgICAiIiJWdeG7kXQgcmFuZG9tIDItNSB2aWRlbyBy4buTaSB24buBIHRyYW5nIGNo4bunIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFJhbmRvbSBz4buRIGzGsOG7o25nIHZpZGVvIHPhur0gdnXhu5F0ICgyLTUpCiAgICAgICAgICAgIG51bV92aWRlb3MgPSByYW5kb20ucmFuZGludCgyLCA1KQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU+G6vSB2deG7kXQgcXVhIHtudW1fdmlkZW9zfSB2aWRlbyB0csaw4bubYyBraGkgduG7gSB0cmFuZyBjaOG7pyIpCiAgICAgICAgICAgIAogICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG51bV92aWRlb3MpOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVnXhu5F0IHZpZGVvIHRo4bupIHtpKzF9L3tudW1fdmlkZW9zfSIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmdo4buJIHJhbmRvbSAyLTQgZ2nDonkgbmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQKICAgICAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDQpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCB2deG7kXQgdmlkZW8sIMSRYW5nIHF1YXkgduG7gSB0cmFuZyBjaOG7pyIpCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB2deG7kXQgdmlkZW86IHtzdHIoZSl9IikKICAgICAgICAgICAgIyBW4bqrbiBj4buRIGfhuq9uZyB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9wYXJhbXMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRoYW0gc+G7kSDEkeG7gyBn4buNaSBBUEkgbOG6pXkgam9iIGNobyBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZDoKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJhY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiZGF0YSI6ICJudWxsIgogICAgICAgIH0KICAgICAgICAKICAgIGRlZiBzeW5jX2FjY291bnRzX3RvX2RiKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMSQ4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgdsOgbyBkYXRhYmFzZQogICAgICAgIEdoaSDEkcOoIHBoxrDGoW5nIHRo4bupYyBj4bunYSBs4bubcCBjaGEgxJHhu4MgxJHhuqNtIGLhuqNvIGNo4buJIGPDsyBt4buZdCB0w6BpIGtob+G6o24gxJHGsOG7o2MgxJHDoW5oIGThuqV1IGzDoCDEkWFuZyBsb2dpbgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6t3QgbOG6oWkgdHLhuqFuZyB0aMOhaSBsb2dpbiBjaG8gdOG6pXQgY+G6oyB0w6BpIGtob+G6o24gVGlrVG9rIHRyb25nIERCCiAgICAgICAgICAgIHNlbGYuZGIucmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHMgPSBzZWxmLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRldmljZV9pZCB04burIGRhdGFiYXNlCiAgICAgICAgICAgIGFuZHJvaWRfaWQgPSBzZWxmLmRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gaGnhu4duIGPDsyB0cm9uZyBEQiBjaG8gYXBwIG7DoHkKICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9c2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gc2V0IGPDoWMgdW5pcXVlX3VzZXJuYW1lIHThu6sgdGhp4bq/dCBi4buLIMSR4buDIGThu4Ugc28gc8OhbmgKICAgICAgICAgICAgZGV2aWNlX3VzZXJuYW1lcyA9IHNldCgpCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfdXNlcm5hbWVzLmFkZCh1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gdHJvbmcgREIgbcOgIGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iyAtPiDEkcOhbmggZOG6pXUgbG9nb3V0CiAgICAgICAgICAgIGZvciBleGlzdGluZ19hY2NvdW50IGluIGV4aXN0aW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgZXhpc3RpbmdfdXNlcm5hbWUgPSBleGlzdGluZ19hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX3VzZXJuYW1lIGFuZCBleGlzdGluZ191c2VybmFtZSBub3QgaW4gZGV2aWNlX3VzZXJuYW1lczoKICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBjw7MgdHJvbmcgREIgbmjGsG5nIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIC0+IGxvZ291dAogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSAhPSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7ZXhpc3RpbmdfdXNlcm5hbWV9IGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iywgxJHDoW5oIGThuqV1IGxvZ291dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoZXhpc3RpbmdfYWNjb3VudFsiaWQiXSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJsb2dvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImluYWN0aXZlX3JlYXNvbiI6ICJUw6BpIGtob+G6o24ga2jDtG5nIGPDsm4gdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19sb2dpbiI6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgaG/hurdjIHRow6ptIG3hu5tpIHbDoG8gREIKICAgICAgICAgICAgZm9yIGFjY291bnQgaW4gZGV2aWNlX2FjY291bnRzOgogICAgICAgICAgICAgICAgIyBUaMOqbSB0aMO0bmcgdGluIGFwcCB2w6AgZGV2aWNlX2lkCiAgICAgICAgICAgICAgICBhY2NvdW50WyJhcHAiXSA9IHNlbGYuYXBwX25hbWUKICAgICAgICAgICAgICAgIGFjY291bnRbImRldmljZV9pZCJdID0gYW5kcm9pZF9pZAogICAgICAgICAgICAgICAgIyDEkMOhbmggZOG6pXUgbMOgIGNoxrBhIMSR4buTbmcgYuG7mSDEkeG7gyBn4butaSBsw6puIHNlcnZlcgogICAgICAgICAgICAgICAgYWNjb3VudFsiaXNfc3luYyJdID0gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHTDoGkga2hv4bqjbiDEkcOjIHThu5NuIHThuqFpIGNoxrBhIGThu7FhIHbDoG8gdW5pcXVlX3VzZXJuYW1lICsgYXBwCiAgICAgICAgICAgICAgICBleGlzdGluZ19hY2NvdW50ID0gc2VsZi5kYi5nZXRfYWNjb3VudF9ieV91bmlxdWVfdXNlcm5hbWUoc2VsZi5hcHBfbmFtZSwgYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBleGlzdGluZ19hY2NvdW50OgogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbiBoaeG7h24gY8OzIC0gY2jhu4kgxJHhu5NuZyBi4buZIHRy4bqhbmcgdGjDoWkgbG9naW4vbG9nb3V0CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGV4aXN0aW5nX2FjY291bnRbImlkIl0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gYuG7iyBk4buvIGxp4buHdSBj4bqtcCBuaOG6rXQgdOG7kWkgdGhp4buDdQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAiaXNfbG9naW4iOiBhY2NvdW50LmdldCgiaXNfbG9naW4iLCBGYWxzZSksCiAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGFjY291bnQuZ2V0KCJsYXN0X3VwZGF0ZSIsIGludCh0aW1lLnRpbWUoKSkpLAogICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBu4bq/dSB0w6BpIGtob+G6o24gdHJvbmcgREIgxJFhbmcg4bufIHRy4bqhbmcgdGjDoWkgbG9nb3V0IG5oxrBuZyB4deG6pXQgaGnhu4duIGzhuqFpIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSA9PSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXNldCB04burIGxvZ291dCB24buBIGFjdGl2ZSB2w6AgeMOzYSBpbmFjdGl2ZV9yZWFzb24KICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGFbInN0YXR1cyJdID0gImFjdGl2ZSIKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGFbImluYWN0aXZlX3JlYXNvbiJdID0gIiIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSDEkcOjIHh14bqldCBoaeG7h24gbOG6oWkgdHLDqm4gdGhp4bq/dCBi4buLLCByZXNldCB04burIGxvZ291dCB24buBIGFjdGl2ZSIpCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSDEkcOjIGFjdGl2ZSB0aMOsIGdp4buvIG5ndXnDqm4gc3RhdHVzLCBraMO0bmcgdGhheSDEkeG7lWkgZ8OsIGtow6FjCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSDEkcSDbmcgbmjhuq1wIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gdHJvbmcge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSB0w6BpIGtob+G6o24gbeG7m2kgduG7m2kgdHLhuqFuZyB0aMOhaSBhY3RpdmUgdsOgIHVzZXJfaWQKICAgICAgICAgICAgICAgICAgICBhY2NvdW50WyJzdGF0dXMiXSA9ICJhY3RpdmUiCiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSB1c2VyX2lkIHThu6sgY29uZmlnICjEkcOjIMSRxrDhu6NjIMSR4buNYyBraGkga2jhu59pIMSR4buZbmcgYXBwKQogICAgICAgICAgICAgICAgICAgIHVzZXJfaWQgPSBzZWxmLmRiLmdldCgidXNlcl9pZCIpCiAgICAgICAgICAgICAgICAgICAgaWYgdXNlcl9pZDoKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsidXNlcl9pZCJdID0gdXNlcl9pZAogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuYWRkX2FjY291bnQoYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aMOqbSB0w6BpIGtob+G6o24gbeG7m2kge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gY2hvIHtzZWxmLmFwcF9uYW1lfSB24bubaSB1c2VyX2lkOiB7dXNlcl9pZH0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBkZXZpY2VfYWNjb3VudHMKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSDEkeG7k25nIGLhu5kgdMOgaSBraG/huqNuIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgIHJldHVybiBbXQoKICAgIGRlZiBtYXBfZ29saWtlX2FjY291bnRzKHNlbGYsIGdvbGlrZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0sIGRldmljZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0pIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMOBbmggeOG6oSB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZ29saWtlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSBBUEkKICAgICAgICAgICAgZGV2aWNlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggdMOgaSBraG/huqNuIMSRw6Mgw6FuaCB44bqhCiAgICAgICAgIiIiCiAgICAgICAgbWFwcGVkX2FjY291bnRzID0gW10KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgQ2h14bqpbiBow7NhIGThu68gbGnhu4d1IHThu6sgR29MaWtlCiAgICAgICAgICAgIGdvbGlrZV9kYXRhID0ge30KICAgICAgICAgICAgZm9yIGFjYyBpbiBnb2xpa2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdGjDtG5nIHRpbiB04burIHTDoGkga2hv4bqjbiBHb0xpa2UKICAgICAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50ID0gewogICAgICAgICAgICAgICAgICAgICJnb2xpa2VfaWQiOiBhY2MuZ2V0KCJpZCIpLAogICAgICAgICAgICAgICAgICAgICJuaWNrbmFtZSI6IGFjYy5nZXQoIm5pY2tuYW1lIiksCiAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGFjYy5nZXQoInVuaXF1ZV9pZCIpLAogICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfdXNlcm5hbWUiOiBhY2MuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKSwKICAgICAgICAgICAgICAgICAgICAiYXZhdGFyX3RodW1iIjogYWNjLmdldCgiYXZhdGFyX3RodW1iIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBT4butIGThu6VuZyB1bmlxdWVfdXNlcm5hbWUgbMOgbSBraMOzYSDEkeG7gyBk4buFIMOhbmggeOG6oQogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBnb2xpa2VfYWNjb3VudFsidW5pcXVlX3VzZXJuYW1lIl0KICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIGdvbGlrZV9kYXRhW3VzZXJuYW1lLmxvd2VyKCldID0gZ29saWtlX2FjY291bnQKICAgICAgICAgICAgCiAgICAgICAgICAgICMgw4FuaCB44bqhIHbhu5tpIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgZm9yIGRldmljZV9hY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZGV2aWNlX2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikubG93ZXIoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBpbiBnb2xpa2VfZGF0YToKICAgICAgICAgICAgICAgICAgICAjIMSQw6MgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHRyb25nIGRhbmggc8OhY2ggR29MaWtlCiAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB04burIEdvTGlrZSB2w6BvIHTDoGkga2hv4bqjbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICBnb2xpa2VfaW5mbyA9IGdvbGlrZV9kYXRhW3VzZXJuYW1lXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4KICAgICAgICAgICAgICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImdvbGlrZV9pZCI6IGdvbGlrZV9pbmZvWyJnb2xpa2VfaWQiXSwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX2dvbGlrZV9saW5rZWQiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAiYXZhdGFyX3RodW1iIjogZ29saWtlX2luZm9bImF2YXRhcl90aHVtYiJdIG9yIGRldmljZV9hY2NvdW50LmdldCgiYXZhdGFyX3RodW1iIiwgIiIpLAogICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogZ29saWtlX2luZm9bInVuaXF1ZV9pZCJdIG9yIGRldmljZV9hY2NvdW50LmdldCgidW5pcXVlX2lkIiwgIiIpLAogICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBJRCB0w6BpIGtob+G6o24gdHJvbmcgREIKICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2lkID0gZGV2aWNlX2FjY291bnQuZ2V0KCJpZCIpCiAgICAgICAgICAgICAgICAgICAgaWYgYWNjb3VudF9pZDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdsOgbyBEQgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRfaWQsIHVwZGF0ZV9kYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB2w6BvIGRldmljZV9hY2NvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9hY2NvdW50LnVwZGF0ZSh1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkX2FjY291bnRzLmFwcGVuZChkZXZpY2VfYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIMOhbmggeOG6oSB0w6BpIGtob+G6o24gVGlrVG9rOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBtYXBwZWRfYWNjb3VudHMKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgw6FuaCB44bqhIHTDoGkga2hv4bqjbiBUaWtUb2siKQogICAgICAgICAgICByZXR1cm4gW10KICAgIAogICAgZGVmIF9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIMSQaeG7gXUgaMaw4bubbmcgxJHhur9uIHRhYiBo4buTIHPGoSBUaWtUb2sKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB2w6AgYuG6pW0gdsOgbyBuw7p0ICJI4buTIHPGoSIKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHByb2ZpbGVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9Ikjhu5Mgc8ahIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBwcm9maWxlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBI4buTIHPGoSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIocHJvZmlsZV9idXR0b24pCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHbDoCB44butIGzDvSBkaWFsb2cgIktow7RuZyBjaG8gcGjDqXAiIG7hur91IGPDswogICAgICAgICAgICBub3RfYWxsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9Iktow7RuZyBjaG8gcGjDqXAiKQogICAgICAgICAgICBpZiBub3RfYWxsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZyAnS2jDtG5nIGNobyBwaMOpcCcsIMSRYW5nIGNsaWNrIMSR4buDIMSRw7NuZy4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIobm90X2FsbG93X2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQoKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHbDoCB44butIGzDvSBkaWFsb2cgIkzGsHUgbOG6oWkgxJHEg25nIG5o4bqtcCBs4bqnbiBzYXUiIG7hur91IGPDswogICAgICAgICAgICBzYXZlX2xvZ2luX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJMxrB1IHRow7RuZyB0aW4gxJHEg25nIG5o4bqtcCIpCiAgICAgICAgICAgIGlmIHNhdmVfbG9naW5fYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZyAnTMawdSBs4bqhaSDEkcSDbmcgbmjhuq1wIGzhuqduIHNhdScsIMSRYW5nIGNsaWNrIMSR4buDIMSRw7NuZy4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2F2ZV9sb2dpbl9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCgogICAgICAgICAgICAjIFZ14buRdCBsw6puIDEgbOG6p24gxJHhu4MgdOG6o2kgxJHhuqd5IMSR4bunIG7hu5lpIGR1bmcKICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSDEkWnhu4F1IGjGsOG7m25nIMSR4bq/biB0YWIgaOG7kyBzxqEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfbWVudShzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE3hu58gbWVudSBo4buTIHPGoSAoZGFuaCBzw6FjaCB0w6BpIGtob+G6o24pCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiAxIGzhuqduIMSR4buDIGzDoG0gbeG7m2kgZ2lhbyBkaeG7h24gdHLGsOG7m2Mga2hpIHTDrG0gbsO6dCBtZW51CiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAjIFTDrG0gbsO6dCBtZW51IGjhu5Mgc8ahCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBtZW51X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJNZW51IGjhu5Mgc8ahIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBtZW51X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBNZW51IGjhu5Mgc8ahIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdOG7jWEgxJHhu5kgY+G7p2EgbsO6dCBtZW51IHbDoCBjbGljayB24bubaSDEkeG7mSBs4buHY2ggbmfhuqt1IG5oacOqbgogICAgICAgICAgICBib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMobWVudV9idXR0b24pCiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gYm91bmRzCiAgICAgICAgICAgIHkgPSAoKHkyIC0geTEpIC8vIDIpICsgeTEKICAgICAgICAgICAgeCA9IHgyIC8vIDIKICAgICAgICAgICAgeCArPSByYW5kb20ucmFuZGludCgtMTAsIDEwKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQoKICAgICAgICAgICAgIyBraeG7g20gdHJhIGRpYWxvZyB0ZXh0PSJGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuIgoKICAgICAgICAgICAgZm9sbG93X2ZyaWVuZHNfZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkZvbGxvdyBi4bqhbiBiw6ggY+G7p2EgYuG6oW4iKQogICAgICAgICAgICBpZiBmb2xsb3dfZnJpZW5kc19kaWFsb2c6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nICdGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuJywgxJFhbmcgY2xpY2sgxJHhu4MgxJHDs25nLi4uIikKICAgICAgICAgICAgICAgIGNsb3NlX2RpYWxvZyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IsSQw7NuZyIpCiAgICAgICAgICAgICAgICBpZiBjbG9zZV9kaWFsb2c6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNsb3NlX2RpYWxvZykKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbeG7nyBtZW51IGjhu5Mgc8ahIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgZGVmIGlzX2hvbWVfc2NyZWVuKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0gY8OzIMSRYW5nIOG7nyBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvayBraMO0bmcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRYW5nIOG7nyB0cmFuZyBjaOG7pywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgcGFja2FnZSBoaeG7h24gdOG6oWkgdHLGsOG7m2MgdGnDqm4KICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OzIGRpYWxvZyBraMO0bmcKICAgICAgICAgICAgeG1sX3NjcmVlbiA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGRpYWxvZ19jb250YWluZXIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHhtbF9zY3JlZW4sIHJlc291cmNlX2lkPSJjb20uYW5kcm9pZC5wYWNrYWdlaW5zdGFsbGVyOmlkL2RpYWxvZ19jb250YWluZXIiKQogICAgICAgICAgICBpZiBkaWFsb2dfY29udGFpbmVyOgogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGV4dCAiduG7iyB0csOtIiB0cm9uZyB4bWxfc2NyZWVuIGtow7RuZwogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZywgxJFhbmcgeOG7rSBsw70uLi4iKQogICAgICAgICAgICAgICAgZGVueV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHhtbF9zY3JlZW4sIHJlc291cmNlX2lkPSJjb20uYW5kcm9pZC5wYWNrYWdlaW5zdGFsbGVyOmlkL3Blcm1pc3Npb25fZGVueV9idXR0b24iKQogICAgICAgICAgICAgICAgaWYgInbhu4sgdHLDrSIgaW4geG1sX3NjcmVlbiBhbmQgZGVueV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGRlbnlfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjbG9zZV9kaWFsb2cgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciKQogICAgICAgICAgICAgICAgICAgIGlmIGNsb3NlX2RpYWxvZzoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNsb3NlX2RpYWxvZykKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCgogICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OzIG7DunQgIlRyYW5nIGNo4bunIiDEkcaw4bujYyBjaOG7jW4gKHNlbGVjdGVkPXRydWUpIHRyb25nIHRoYW5oIHRhYiBraMO0bmcKICAgICAgICAgICAgaG9tZV90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIGlmIGhvbWVfdGFiOgogICAgICAgICAgICAgICAgaWYgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChob21lX3RhYik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIHRo4bqleSB0YWIgIlRyYW5nIGNo4bunIiBuaMawbmcgY2jGsGEgxJHGsOG7o2MgY2jhu41uLCBjbGljayB2w6BvIMSRw7MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBjw6FjIHnhur91IHThu5EgY+G7p2EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkga2nhu4NtIHRyYSBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZW5zdXJlX2hvbWVfc2NyZWVuKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvawogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBwYWNrYWdlIGhp4buHbiB04bqhaSB0csaw4bubYyB0acOqbgogICAgICAgICAgICBjdXJyZW50X3BhY2thZ2UgPSBzZWxmLmhlbHBlci5nZXRfY3VycmVudF9wYWNrYWdlKCkKICAgICAgICAgICAgaWYgY3VycmVudF9wYWNrYWdlICE9IHNlbGYuYXBwX3BhY2thZ2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQXBwIGhp4buHbiB04bqhaSAoe2N1cnJlbnRfcGFja2FnZX0pIGtow7RuZyBwaOG6o2kgVGlrVG9rLCBt4bufIGFwcCBUaWtUb2suLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxMCkgICMgVMSDbmcgbMOqbiAxMCBnacOieSDEkeG7gyBhcHAga2jhu59pIMSR4buZbmcgaG/DoG4gdG/DoG4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHBvcHVwIFBJTiB0cm9uZyA1cyBzYXUga2hpIG3hu58gYXBwCiAgICAgICAgICAgICAgICBzZWxmLl9jaGVja19waW5fcG9wdXAoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFZhbGlkYXRlIGFwcCBraMO0bmcgYuG7iyBiYW5uZWQgc2F1IGtoaSBt4bufCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi52YWxpZGF0ZV9hcHBfbm90X2Jhbm5lZCgpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJBcHAgVGlrVG9rIGPDsyB24bqlbiDEkeG7gSAoYmFubmVkL2PhuqNuaCBiw6FvKSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciLCB0aW1lb3V0PTMpCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyDhu58gdHJhbmcgY2jhu6cgY2jGsGEKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyDhu58gdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBjaMawYSwgY+G7kSBn4bqvbmcgduG7gSB0cmFuZyBjaOG7pwogICAgICAgICAgICByZXR1cm4gc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIMSR4bqjbSBi4bqjbyB24buBIHRyYW5nIGNo4bunIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgdmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIGtow7RuZyBjw7MgdMOgaSBraG/huqNuIG7DoG8gYuG7iyBiYW5uZWQKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nIGPhuqNuaCBiw6FvIGNodW5nCiAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyAiQ+G6rXAgbmjhuq10IENow61uaCBzw6FjaCBxdXnhu4FuIHJpw6puZyB0xrAiCiAgICAgICAgcHJpdmFjeV91cGRhdGVfZWxlbWVudHMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIHRleHQ9IkPhuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawIgogICAgICAgICkKCiAgICAgICAgaWYgcHJpdmFjeV91cGRhdGVfZWxlbWVudHM6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBkaWFsb2cgJ0Phuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawJywgxJFhbmcgeOG7rSBsw70uLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgIsSQw6MgaGnhu4N1IiB2w6AgYuG6pW0gdHLhu7FjIHRp4bq/cAogICAgICAgICAgICB1bmRlcnN0YW5kX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSLEkMOjIGhp4buDdSIpCiAgICAgICAgICAgIGlmIHVuZGVyc3RhbmRfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVuZGVyc3RhbmRfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSB24bubaSBjw6FjIHRleHQga2jDoWMKICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIFsiVGnhur9wIHThu6VjIiwgIsSQ4buTbmcgw70iLCAiQ29udGludWUiLCAiQWdyZWUiLCAiQ2jhuqVwIG5o4bqtbiIsICJBY2NlcHQiXToKICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD10ZXh0KQogICAgICAgICAgICAgICAgICAgIGlmIGJ1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIlRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIgogICAgICAgIGFjY291bnRfc3RhdHVzX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICB0ZXh0PSJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIKICAgICAgICApCgogICAgICAgIGlmIGFjY291bnRfc3RhdHVzX2VsZW1lbnRzOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nIMSRxINuZyB4deG6pXQgdMOgaSBraG/huqNuLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGPDsyBpZCBsw6AgYnV0dG9uMSB2w6AgYuG6pW0KICAgICAgICAgICAgYnV0dG9uMSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChyZXNvdXJjZV9pZD0iYW5kcm9pZDppZC9idXR0b24xIikKICAgICAgICAgICAgaWYgYnV0dG9uMToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihidXR0b24xKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEwKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCgogICAgICAgICMgVMOsbSBkaWFsb2cgY+G6o25oIGLDoW8gYuG6sW5nIElEIGhv4bq3YyBjb250ZW50LWRlc2MgY8OzIGNo4bupYSAiY+G6o25oIGLDoW8iLCAibOG7l2kiLCAidGjDtG5nIGLDoW8iCiAgICAgICAgYWxlcnRfZGlhbG9ncyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC5hcHAuRGlhbG9nIgogICAgICAgICkKICAgICAgICAKICAgICAgICBmb3IgZGlhbG9nIGluIGFsZXJ0X2RpYWxvZ3M6CiAgICAgICAgICAgICMgVMOsbSB0ZXh0IHRyb25nIGRpYWxvZwogICAgICAgICAgICB0ZXh0X3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgdGV4dF92aWV3IGluIHRleHRfdmlld3M6CiAgICAgICAgICAgICAgICB0ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh0ZXh0X3ZpZXcpCiAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCBhbnkoa2V5d29yZCBpbiB0ZXh0Lmxvd2VyKCkgZm9yIGtleXdvcmQgaW4gWyJj4bqjbmggYsOhbyIsICJs4buXaSIsICJ0aMO0bmcgYsOhbyIsICJi4buLIGtow7NhIiwgInZpIHBo4bqhbSJdKToKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggY+G6o25oIGLDoW8gaGnhu4duIHThuqFpIHThu6sgZGIKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzID0gc2VsZi5kYi5nZXQoImxvZ3Mtd2FybmluZy1tZXNzYWdlIiwgW10pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSBj4bqjbmggYsOhbyBt4bubaQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MuYXBwZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgInRpbWUiOiBkYXRldGltZS5kYXRldGltZS5ub3coKS5pc29mb3JtYXQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3MiOiB0ZXh0CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIENo4buJIGdp4buvIGzhuqFpIHThu5FpIMSRYSAyMCBsb2cgZ+G6p24gbmjhuqV0CiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGN1cnJlbnRfd2FybmluZ3MpID4gMjA6CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MgPSBjdXJyZW50X3dhcm5pbmdzWy0yMDpdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBMxrB1IGzhuqFpIHbDoG8gZGIKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgibG9ncy13YXJuaW5nLW1lc3NhZ2UiLCBjdXJyZW50X3dhcm5pbmdzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiLEkMOjIGzGsHUgY+G6o25oIGLDoW8gVGlrVG9rOiB7dGV4dH0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBuw7p0IE9LIGhv4bq3YyDEkMOzbmcgxJHhu4MgxJHDs25nIGRpYWxvZwogICAgICAgICAgICAgICAgICAgIGJ1dHRvbnMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGJ1dHRvbiBpbiBidXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBidXR0b25fdGV4dCBhbmQgYnV0dG9uX3RleHQubG93ZXIoKSBpbiBbIm9rIiwgIsSRw7NuZyIsICJ0w7RpIGhp4buDdSIsICLEkeG7k25nIMO9Il06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBDw7MgY+G6o25oIGLDoW8gdGjDrCByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gVHJ1ZSAgIyBLaMO0bmcgY8OzIGPhuqNuaCBiw6FvCiAgICAKICAgIGRlZiBfaGFuZGxlX2RpYWxvZ3NfYW5kX25hdmlnYXRlX2hvbWUoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgT3ZlcnJpZGUgxJHhu4MgeOG7rSBsw70gZGlhbG9nIHNwZWNpZmljIGPhu6dhIFRpa1RvayB2w6AgbmF2aWdhdGUgduG7gSBob21lCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoIsSQYW5nIHjhu60gbMO9IFRpa1RvayBkaWFsb2dzIHbDoCBuYXZpZ2F0ZSB24buBIGhvbWUuLi4iKQogICAgICAgIAogICAgICAgICMgWOG7rSBsw70gY8OhYyBkaWFsb2cgVGlrVG9rIHNwZWNpZmljCiAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyAiQ+G6rXAgbmjhuq10IENow61uaCBzw6FjaCBxdXnhu4FuIHJpw6puZyB0xrAiCiAgICAgICAgdW5kZXJzdGFuZF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0ixJDDoyBoaeG7g3UiKQogICAgICAgIGlmIHVuZGVyc3RhbmRfYnV0dG9uOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOzbmcgZGlhbG9nICfEkMOjIGhp4buDdSciKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIodW5kZXJzdGFuZF9idXR0b24pCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIkzGsHUgdGjDtG5nIHRpbiDEkcSDbmcgbmjhuq1wIgogICAgICAgIHNhdmVfbG9naW5fYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkzGsHUgdGjDtG5nIHRpbiDEkcSDbmcgbmjhuq1wIikKICAgICAgICBpZiBzYXZlX2xvZ2luX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDs25nIGRpYWxvZyAnTMawdSB0aMO0bmcgdGluIMSRxINuZyBuaOG6rXAnIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNhdmVfbG9naW5fYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nICJGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuIgogICAgICAgIGNsb3NlX2ZyaWVuZHNfZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0ixJDDs25nIikKICAgICAgICBpZiBjbG9zZV9mcmllbmRzX2RpYWxvZzoKICAgICAgICAgICAgZm9sbG93X2ZyaWVuZHNfZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkZvbGxvdyBi4bqhbiBiw6ggY+G7p2EgYuG6oW4iKQogICAgICAgICAgICBpZiBmb2xsb3dfZnJpZW5kc19kaWFsb2c6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOzbmcgZGlhbG9nICdGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuJyIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoY2xvc2VfZnJpZW5kc19kaWFsb2cpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAKICAgICAgICAjIFNhdSBraGkgeOG7rSBsw70gZGlhbG9nLCB0aOG7rSBuYXZpZ2F0ZSB24buBIGhvbWUKICAgICAgICBpZiBub3Qgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAjIFTDrG0gbsO6dCAiVHJhbmcgY2jhu6ciCiAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlRyYW5nIGNo4bunIikKICAgICAgICAgICAgaWYgbm90IGhvbWVfYnV0dG9uOgogICAgICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIGlmIG5vdCBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkhvbWUiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGhvbWVfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQuG6pW0gbsO6dCBUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgRmFsbGJhY2s6IG5o4bqlbiBiYWNrIG3hu5l0IHbDoGkgbOG6p24KICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKDMpOgogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAKICAgIGRlZiBiYWNrX3RvX2hvbWUoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBRdWF5IHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rIHThu6sgYuG6pXQga+G7syBtw6BuIGjDrG5oIG7DoG8KICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZyB24buBIHRyYW5nIGNo4bunCiAgICAgICAgIiIiCiAgICAgICAgbWF4X2F0dGVtcHRzID0gNQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlF1YXkgduG7gSB0cmFuZyBjaOG7pyBUaWtUb2siKQogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKG1heF9hdHRlbXB0cyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyDhu58gdHJhbmcgY2jhu6cgY2jGsGEKICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIOG7nyB0cmFuZyBjaOG7pyBUaWtUb2siKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBwYWNrYWdlIGhp4buHbiB04bqhaSB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbiB0aGFvIHTDoWMKICAgICAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICAgICAgaWYgY3VycmVudF9wYWNrYWdlICE9IHNlbGYuYXBwX3BhY2thZ2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkFwcCBoaeG7h24gdOG6oWkgKHtjdXJyZW50X3BhY2thZ2V9KSBraMO0bmcgcGjhuqNpIFRpa1RvaywgbeG7nyBs4bqhaSBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxMCkgICMgVMSDbmcgbMOqbiAxMCBnacOieSDEkeG7gyBhcHAga2jhu59pIMSR4buZbmcgaG/DoG4gdG/DoG4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgc2F1IGtoaSBt4bufIGFwcAogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCAiVHJhbmcgY2jhu6ciIOG7nyBib3R0b20gbmF2aWdhdGlvCiAgICAgICAgICAgICAgICBob21lX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgICAgICBpZiBub3QgaG9tZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgICAgICBpZiBub3QgaG9tZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iSG9tZSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSBuw7p0IGhvbWUsIHRo4butIG5o4bqlbiBiYWNrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgY+G7kSBn4bqvbmcgduG7gSB0cmFuZyBjaOG7pyAobOG6p24ge2F0dGVtcHQgKyAxfSk6IHtlfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHF1YXkgduG7gSB0cmFuZyBjaOG7pyBUaWtUb2sgc2F1IG5oaeG7gXUgbOG6p24gdGjhu60iKQogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgc3dpdGNoX2FjY291bnQoc2VsZiwgdGFyZ2V0X2FjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBUaWtUb2sga2jDoWMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXJnZXRfYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogYm9vbCwKICAgICAgICAgICAgICAgICdyZWFzb24nOiBzdHIgKG7hur91IHRo4bqldCBi4bqhaSksCiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IHN0cgogICAgICAgICAgICB9CiAgICAgICAgIiIiCiAgICAgICAgdGFyZ2V0X3VzZXJuYW1lID0gdGFyZ2V0X2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBUaWtUb2s6IHt0YXJnZXRfdXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgSW52YWxpZGF0ZSB1c2VybmFtZSBjYWNoZSBraGkgYuG6r3QgxJHhuqd1IHN3aXRjaAogICAgICAgICAgICBzZWxmLmludmFsaWRhdGVfdXNlcm5hbWVfY2FjaGUoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunIChyZXRyeSBtZWNoYW5pc20pCiAgICAgICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKDMpOiAgIyBUaOG7rSAzIGzhuqduCiAgICAgICAgICAgICAgICBpZiBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIGF0dGVtcHQgPT0gMjogICMgTOG6p24gY3Xhu5FpIGPDuW5nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgxJHhur9uIHRyYW5nIGNo4bunIFRpa1RvayBzYXUgMyBs4bqnbiB0aOG7rSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnbmF2aWdhdGlvbl9lcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ0tow7RuZyB0aOG7gyDEkeG6v24gdHJhbmcgY2jhu6cgVGlrVG9rIHNhdSBuaGnhu4F1IGzhuqduIHRo4butJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlRo4butIGzhuqduIHthdHRlbXB0ICsgMX06IEtow7RuZyB0aOG7gyDEkeG6v24gdHJhbmcgY2jhu6csIHRo4butIGzhuqFpLi4uIikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVsOgbyB0cmFuZyBo4buTIHPGoQogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICduYXZpZ2F0aW9uX2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgdsOgbyB0cmFuZyBo4buTIHPGoSBUaWtUb2snCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICNraeG7g20gdHJhIMSRw7puZyB1c2VybmFtZSBy4buTaSB0aMOsIHJldHVybiB0cnVlCiAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PWYiQHt0YXJnZXRfdXNlcm5hbWV9Iik6CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGYixJDDoyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBUaWtUb2s6IHt0YXJnZXRfdXNlcm5hbWV9IgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiAxIGzhuqduCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBtZW51IGjhu5Mgc8ahCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfbWVudSgpOgogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ3VpX2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgbeG7nyBtZW51IGjhu5Mgc8ahIFRpa1RvaycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGFkZF9hY2NvdW50X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJUaMOqbSB0w6BpIGtob+G6o24iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGFkZF9hY2NvdW50X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbWVudSB0w6BpIGtob+G6o24iKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ3VpX2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdMOsbSB0aOG6pXkgbWVudSB0w6BpIGtob+G6o24gVGlrVG9rJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB0w6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24KICAgICAgICAgICAgYWNjb3VudF9idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgdGFyZ2V0X2l0ZW0gPSBOb25lCiAgICAgICAgICAgIGZvciBidXR0b24gaW4gYWNjb3VudF9idXR0b25zOgogICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIlRow6ptIHTDoGkga2hv4bqjbiIgb3IgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIsSQw7NuZyI6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYnV0dG9uLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgICAgICBpZiBub3QgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgdGV4dHZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uX2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhidXR0b24pCiAgICAgICAgICAgICAgICAgICAgZm9yIHR2IGluIHRleHR2aWV3czoKICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKHR2KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHZfYm91bmRzWzBdID49IGJ1dHRvbl9ib3VuZHNbMF0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMV0gPj0gYnV0dG9uX2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzNdIDw9IGJ1dHRvbl9ib3VuZHNbM10pOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCB0ZXh0ICE9ICJudWxsIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2l0ZW0gPSBidXR0b24KICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdGFyZ2V0X2l0ZW06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gdHJvbmcgZGFuaCBzw6FjaCIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHTDoGkga2hv4bqjbiBsw6AgYuG7iyB2w7QgaGnhu4d1IGjDs2EgdHJvbmcgREIKICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQodGFyZ2V0X2FjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImRpc2FibGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGlzYWJsZV9yZWFzb24iOiAiVMOgaSBraG/huqNuIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpLAogICAgICAgICAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmjhuqVuIEJhY2sgxJHhu4MgxJHDs25nIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFF1YXkgduG7gSB0cmFuZyBjaOG7pwogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnYWNjb3VudF9ub3RfZm91bmQnLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZidLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHRyb25nIGRhbmggc8OhY2ggVGlrVG9rJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdMOgaSBraG/huqNuIG3hu6VjIHRpw6p1CiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih0YXJnZXRfaXRlbSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBzYWZlX3NsZWVwIHJldHVybiB2YWx1ZSDEkeG7gyBjw7MgdGjhu4MgdGhvw6F0IHPhu5ttCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoNik6ICAjIMSQ4bujaSBjaHV54buDbiB0w6BpIGtob+G6o24gaG/DoG4gdOG6pXQKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIk5o4bqtbiDEkcaw4bujYyB5w6p1IGPhuqd1IGThu6tuZyB0cm9uZyBzd2l0Y2hfdG9fYWNjb3VudCIpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnaW50ZXJydXB0ZWQnLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ0Lhu4sgZOG7q25nIHRyb25nIHF1w6EgdHLDrG5oIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2snCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgY2h1eeG7g24gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyBjaMawYQogICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lID0gc2VsZi5nZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgY3VycmVudF91c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBjaHV54buDbiB0w6BpIGtob+G6o24gdGjDoG5oIGPDtG5nIHNhbmcge3RhcmdldF91c2VybmFtZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IFRydWUsIAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZifEkMOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgc2FuZyB7dGFyZ2V0X3VzZXJuYW1lfScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYixJDDoyBi4bqlbSB2w6BvIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSBuaMawbmcga2nhu4NtIHRyYSBs4bqhaSB0aOG6pXkgxJFhbmcgxJHEg25nIG5o4bqtcCBsw6Age2N1cnJlbnRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdzd2l0Y2hfdmVyaWZpY2F0aW9uX2ZhaWxlZCcsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ8SQw6MgYuG6pW0gdsOgbyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gbmjGsG5nIGtp4buDbSB0cmEgbOG6oWkgdGjhuqV5IMSRYW5nIMSRxINuZyBuaOG6rXAgbMOgIHtjdXJyZW50X3VzZXJuYW1lfScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyBxdWF5IHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdleGNlcHRpb24nLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ0zhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rOiB7c3RyKGUpfScKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgIGRlZiBfcGVyZm9ybV9hY2NvdW50X3N3aXRjaChzZWxmLCB0YXJnZXRfYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gY8OhYyB0aGFvIHTDoWMgVUkgxJHhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhcmdldF9hY2NvdW50OiBUw6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24gxJHhur9uCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGJvb2wsCiAgICAgICAgICAgICAgICAncmVhc29uJzogc3RyIChu4bq/dSB0aOG6pXQgYuG6oWkpLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBzdHIKICAgICAgICAgICAgfQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc3dpdGNoX3Jlc3VsdCA9IHNlbGYuc3dpdGNoX2FjY291bnQodGFyZ2V0X2FjY291bnQpCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3dpdGNoX3Jlc3VsdCwgZGljdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gc3dpdGNoX3Jlc3VsdAogICAgICAgICAgICBlbGlmIHN3aXRjaF9yZXN1bHQ6CiAgICAgICAgICAgICAgICByZXR1cm4geydzdWNjZXNzJzogVHJ1ZSwgJ21lc3NhZ2UnOiAnQ2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvayB0aMOgbmggY8O0bmcnfQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ3N3aXRjaF9mYWlsZWQnLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ0tow7RuZyB0aOG7gyBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rJwogICAgICAgICAgICAgICAgfQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rIikKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdleGNlcHRpb24nLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ0zhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2s6IHtzdHIoZSl9JwogICAgICAgICAgICB9CiAgICAKICAgIGRlZiBnZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoc2VsZikgLT4gT3B0aW9uYWxbc3RyXToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB1c2VybmFtZSBj4bunYSB0w6BpIGtob+G6o24gVGlrVG9rIMSRYW5nIMSRxINuZyBuaOG6rXAgKHbhu5tpIGNhY2hlKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0ciBob+G6t2MgTm9uZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAsIGhv4bq3YyBOb25lIG7hur91IGtow7RuZyBjw7MKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjYWNoZSB0csaw4bubYwogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBpZiAoc2VsZi5fY2FjaGVkX3VzZXJuYW1lIGFuZCAKICAgICAgICAgICAgICAgIGN1cnJlbnRfdGltZSAtIHNlbGYuX3VzZXJuYW1lX2NhY2hlX3RpbWUgPCBzZWxmLl91c2VybmFtZV9jYWNoZV90dGwpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJT4butIGThu6VuZyBjYWNoZWQgdXNlcm5hbWU6IHtzZWxmLl9jYWNoZWRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYWNoZWRfdXNlcm5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBhcHAgY8OzIMSRYW5nIG3hu58ga2jDtG5nIHRyxrDhu5tjCiAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCJBcHAgVGlrVG9rIGNoxrBhIG3hu58sIGtow7RuZyB0aOG7gyBs4bqleSB1c2VybmFtZSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgIyBMxrB1IHRy4bqhbmcgdGjDoWkgaGnhu4duIHThuqFpIChraMO0bmcgZm9yY2UgduG7gSBob21lIMSR4buDIHRyw6FuaCBjb25mbGljdCkKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVHLGsOG7m2MgdGnDqm4gdGjhu60gdMOsbSB1c2VybmFtZSDhu58gbcOgbiBow6xuaCBoaeG7h24gdOG6oWkKICAgICAgICAgICAgdXNlcm5hbWUgPSBzZWxmLl9leHRyYWN0X3VzZXJuYW1lX2Zyb21fc2NyZWVuKHNjcmVlbl94bWwpCiAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgY2FjaGUKICAgICAgICAgICAgICAgIHNlbGYuX2NhY2hlZF91c2VybmFtZSA9IHVzZXJuYW1lCiAgICAgICAgICAgICAgICBzZWxmLl91c2VybmFtZV9jYWNoZV90aW1lID0gY3VycmVudF90aW1lCiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5LCB0aOG7rSBuYXZpZ2F0ZSDEkeG6v24gcHJvZmlsZSAoY2jhu4kga2hpIGPhuqduIHRoaeG6v3QpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYigpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVnXhu5F0IHh14buRbmcgdsOgIGNo4budCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKSAgIyBHaeG6o20gdGjhu51pIGdpYW4gY2jhu50KCiAgICAgICAgICAgICAgICAjIFTDrG0gdXNlcm5hbWUgdHJvbmcgdHJhbmcgaOG7kyBzxqEKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBzZWxmLl9leHRyYWN0X3VzZXJuYW1lX2Zyb21fc2NyZWVuKHNjcmVlbl94bWwpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pyBuaGFuaAogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIkzhuqV5IHVzZXJuYW1lIHThu6sgcHJvZmlsZToge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgY2FjaGUKICAgICAgICAgICAgICAgICAgICBzZWxmLl9jYWNoZWRfdXNlcm5hbWUgPSB1c2VybmFtZQogICAgICAgICAgICAgICAgICAgIHNlbGYuX3VzZXJuYW1lX2NhY2hlX3RpbWUgPSBjdXJyZW50X3RpbWUKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIGzhuqV5IHVzZXJuYW1lIHThu6sgcHJvZmlsZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIG5hdmlnYXRlIHByb2ZpbGUgxJHhu4MgbOG6pXkgdXNlcm5hbWU6IHtlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIGzhuqV5IHVzZXJuYW1lOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgaW52YWxpZGF0ZV91c2VybmFtZV9jYWNoZShzZWxmKToKICAgICAgICAiIiJYw7NhIGNhY2hlIHVzZXJuYW1lIChn4buNaSBraGkgc3dpdGNoIGFjY291bnQpIiIiCiAgICAgICAgc2VsZi5fY2FjaGVkX3VzZXJuYW1lID0gTm9uZQogICAgICAgIHNlbGYuX3VzZXJuYW1lX2NhY2hlX3RpbWUgPSAwCiAgICAKICAgIGRlZiBfZXh0cmFjdF91c2VybmFtZV9mcm9tX3NjcmVlbihzZWxmLCBzY3JlZW5feG1sOiBzdHIpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgRXh0cmFjdCB1c2VybmFtZSB04burIFhNTCBtw6BuIGjDrG5oIGhp4buHbiB04bqhaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHNjcmVlbl94bWw6IFhNTCBj4bunYSBtw6BuIGjDrG5oCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIFVzZXJuYW1lIGhv4bq3YyBOb25lCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFTDrG0gdHJvbmcgY8OhYyBCdXR0b24gY8OzIHRo4buDIGNo4bupYSB1c2VybmFtZQogICAgICAgICAgICBidXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIGJ1dHRvbiBpbiBidXR0b25zOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoYnV0dG9uKQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dC5zdGFydHN3aXRoKCJAIikgYW5kIGxlbih0ZXh0KSA+IDE6CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0WzE6XSAgIyBC4buPIGvDvSB04buxIEAKICAgICAgICAgICAgICAgICAgICBpZiBsZW4odXNlcm5hbWUpID4gMjogICMgVXNlcm5hbWUgaOG7o3AgbOG7hwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjhu60gdMOsbSB0cm9uZyBUZXh0VmlldwogICAgICAgICAgICB0ZXh0X3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgdGV4dF92aWV3IGluIHRleHRfdmlld3M6CiAgICAgICAgICAgICAgICB0ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh0ZXh0X3ZpZXcpCiAgICAgICAgICAgICAgICBpZiB0ZXh0IGFuZCB0ZXh0LnN0YXJ0c3dpdGgoIkAiKSBhbmQgbGVuKHRleHQpID4gMToKICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHRbMTpdICAjIELhu48ga8O9IHThu7EgQAogICAgICAgICAgICAgICAgICAgIGlmIGxlbih1c2VybmFtZSkgPiAyOiAgIyBVc2VybmFtZSBo4bujcCBs4buHCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VybmFtZQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kgZXh0cmFjdCB1c2VybmFtZToge2V9IikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09IFNNQVJUIENBUkUgTUVUSE9EUyAoxJDhu5NuZyBuaOG6pXQgduG7m2kgSW5zdGFncmFtKSA9PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBfY2FyZV9zd2lwZV9mZWVkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIkzGsOG7m3QgZmVlZCBUaWtUb2sgbmjhurkgbmjDoG5nIC0gdMawxqFuZyDEkcawxqFuZyBJbnN0YWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuq90IMSR4bqndSBsxrDhu5t0IGZlZWQgVGlrVG9rLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICMgQuG6pW0gdsOgbyBjaOG7ryDEkOG7gSB4deG6pXQgaG/hurdjIETDoG5oIGNobyBi4bqhbgogICAgICAgICAgICBidG5fZm9yeW91ID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSLEkOG7gSB4deG6pXQiLCB0aW1lb3V0PTIpCiAgICAgICAgICAgIGlmIG5vdCBidG5fZm9yeW91OgogICAgICAgICAgICAgICAgYnRuX2ZvcnlvdSA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQodGV4dD0iRMOgbmggY2hvIGLhuqFuIiwgdGltZW91dD0yKQogICAgICAgICAgICBpZiBidG5fZm9yeW91OgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ0bl9mb3J5b3UpCgogICAgICAgICAgICAjIEzGsOG7m3QgNS0xMCB2aWRlbyBuZ+G6q3Ugbmhpw6puCiAgICAgICAgICAgIG51bV9zd2lwZXMgPSByYW5kb20ucmFuZGludCg1LCAxMCkKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobnVtX3N3aXBlcyk6CiAgICAgICAgICAgICAgICAjIFRo4budaSBnaWFuIHhlbSBuZ+G6q3Ugbmhpw6puIDItNSBnacOieQogICAgICAgICAgICAgICAgd2F0Y2hfdGltZSA9IHJhbmRvbS51bmlmb3JtKDIsIDUpCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIkzGsOG7m3QgdmlkZW8ge2krMX0ve251bV9zd2lwZXN9LCB4ZW0ge3dhdGNoX3RpbWU6LjFmfXMiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhdGNoX3RpbWUpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQ8OzIDEwJSBraOG6oyBuxINuZyBsaWtlIHZpZGVvIGtoaSB4ZW0gPj0gMyBnacOieSAoZ2nhuqNtIHThu6sgMTUlKQogICAgICAgICAgICAgICAgaWYgd2F0Y2hfdGltZSA+PSAzIGFuZCByYW5kb20ucmFuZG9tKCkgPCAwLjEwOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGlrZV9idXR0b24gYW5kIG5vdCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGjhu60gZG91YmxlIHRhcCDEkeG7gyBsaWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBpbnQod2lkdGggKiByYW5kb20udW5pZm9ybSgwLjUsIDAuNikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gaW50KGhlaWdodCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYixJDDoyBsaWtlIHZpZGVvIHtpKzF9IHRyb25nIGNhcmUgZmVlZCIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzICAjIELhu48gcXVhIGzhu5dpIGxpa2UsIHRp4bq/cCB04bulYyB4ZW0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgZm9yY2Ugc3RvcAogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcCgwLjEpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbMaw4bubdCB7bnVtX3N3aXBlc30gdmlkZW8gVGlrVG9rIikKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunIHNhdSBraGkgY2FyZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIGzGsOG7m3QgZmVlZCBUaWtUb2s6IHtlfSIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9jYXJlX3dhdGNoX3ZpZGVvcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJYZW0gdmlkZW8gVGlrVG9rIHRyb25nIHRo4budaSBnaWFuIGTDoGkgLSB0xrDGoW5nIMSRxrDGoW5nIHdhdGNoX3JlZWxzIEluc3RhZ3JhbSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQuG6r3QgxJHhuqd1IHhlbSB2aWRlbyBUaWtUb2suLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICB0b3RhbF93YXRjaF90aW1lID0gcmFuZG9tLnJhbmRpbnQoNjAsIDE1MCkgICMgMS0yLjUgcGjDunQKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlPhur0geGVtIHZpZGVvIFRpa1RvayB0cm9uZyB7dG90YWxfd2F0Y2hfdGltZX0gZ2nDonkiKQogICAgICAgICAgICAKICAgICAgICAgICAgdmlkZW9fY291bnQgPSAwCiAgICAgICAgICAgIHdoaWxlICh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpIDwgdG90YWxfd2F0Y2hfdGltZToKICAgICAgICAgICAgICAgIHZpZGVvX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBYZW0gdmlkZW8gaGnhu4duIHThuqFpCiAgICAgICAgICAgICAgICB3YXRjaF9kdXJhdGlvbiA9IHJhbmRvbS5yYW5kaW50KDMsIDEyKSAgIyAzLTEyIGdpw6J5IG3hu5dpIHZpZGVvCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIlhlbSB2aWRlbyB7dmlkZW9fY291bnR9IHRyb25nIHt3YXRjaF9kdXJhdGlvbn1zIikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF9kdXJhdGlvbikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBDw7MgMjUlIGto4bqjIG7Eg25nIGxpa2UgdmlkZW8ga2hpIHhlbSA+PSA1IGdpw6J5IChnaeG6o20gdOG7qyAyMCUpCiAgICAgICAgICAgICAgICBpZiB3YXRjaF9kdXJhdGlvbiA+PSA1IGFuZCByYW5kb20ucmFuZG9tKCkgPCAwLjI1OgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGlrZV9idXR0b24gYW5kIG5vdCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGjhu60gZG91YmxlIHRhcCDEkeG7gyBsaWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBpbnQod2lkdGggKiByYW5kb20udW5pZm9ybSgwLjUsIDAuNikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gaW50KGhlaWdodCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYixJDDoyBsaWtlIHZpZGVvIHt2aWRlb19jb3VudH0gdHJvbmcgY2FyZSB3YXRjaCIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzICAjIELhu48gcXVhIGzhu5dpIGxpa2UsIHRp4bq/cCB04bulYyB4ZW0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBWdeG7kXQgc2FuZyB2aWRlbyB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGZvcmNlIHN0b3AKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoMC4xKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHhlbSB7dmlkZW9fY291bnR9IHZpZGVvIFRpa1RvayB0cm9uZyB7aW50KHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSl9cyIpCiAgICAgICAgICAgICMgVuG7gSB0cmFuZyBjaOG7pyBzYXUga2hpIGNhcmUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSB4ZW0gdmlkZW8gVGlrVG9rOiB7ZX0iKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBfY2FyZV92aWV3X25vdGlmaWNhdGlvbnMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiWGVtIHRow7RuZyBiw6FvIFRpa1RvayAtIHTGsMahbmcgxJHGsMahbmcgSW5zdGFncmFtIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqvdCDEkeG6p3UgeGVtIHRow7RuZyBiw6FvIFRpa1Rvay4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHbDoCBi4bqlbSB2w6BvIEjhu5lwIHRoxrAgKGluYm94KQogICAgICAgICAgICBpbmJveF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KAogICAgICAgICAgICAgICAgdGltZW91dD01LAogICAgICAgICAgICAgICAgY29udGVudF9kZXNjPSJI4buZcCB0aMawIgogICAgICAgICAgICApIG9yIHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoCiAgICAgICAgICAgICAgICB0aW1lb3V0PTUsCiAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLnNzLmFuZHJvaWQudWdjLnRyaWxsOmlkL2N1OSIgICMgVGlrVG9rIGluYm94IGJ1dHRvbgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgaW5ib3hfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgSOG7mXAgdGjGsCBUaWtUb2siKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaW5ib3hfYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgWGVtIHRow7RuZyBiw6FvIHRyb25nIDEwLTIwIGdpw6J5CiAgICAgICAgICAgIHZpZXdfdGltZSA9IHJhbmRvbS5yYW5kaW50KDEwLCAyMCkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJYZW0gdGjDtG5nIGLDoW8gdHJvbmcge3ZpZXdfdGltZX1zIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVnXhu5F0IGzDqm4geHXhu5FuZyDEkeG7gyB4ZW0gdGjDtG5nIGLDoW8KICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNCkpOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDMpKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHZpZXdfdGltZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIHhlbSB0aMO0bmcgYsOhbyBUaWtUb2siKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgeGVtIHRow7RuZyBiw6FvIFRpa1Rvazoge2V9IikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT0gRU5EIFNNQVJUIENBUkUgTUVUSE9EUyA9PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBfY2hlY2tfcGluX3BvcHVwKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgcG9wdXAgUElOIHbDoCBuaOG6rXAgbcOjIFBJTiBu4bq/dSBjw7MKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCJLaeG7g20gdHJhIHBvcHVwIFBJTiBUaWtUb2sgdHJvbmcgNSBnacOieS4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFPhu60gZOG7pW5nIHdhaXRfZm9yX2VsZW1lbnQgxJHhu4Mga2nhu4NtIHRyYSBwb3B1cCB0cm9uZyA1IGdpw6J5CiAgICAgICAgICAgIHBpbl9wb3B1cCA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2M9IkLhuqFuIMSRw6Mgc+G6tW4gc8OgbmcgxJHDs25nIFRpa1Rvaz8iLAogICAgICAgICAgICAgICAgdGltZW91dD01CiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHBpbl9wb3B1cDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBwb3B1cCBQSU4gVGlrVG9rLCDEkWFuZyBuaOG6rXAgbcOjLi4uIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBi4bqlbSB2w6BvIHPhu5EgIjEiIAogICAgICAgICAgICAgICAgZGlnaXRfMSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSIxIikKICAgICAgICAgICAgICAgIGlmIGRpZ2l0XzE6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGRpZ2l0XzEpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE5o4bqtcCBtw6MgUElOIDEyMzQKICAgICAgICAgICAgICAgICAgICBmb3IgZGlnaXQgaW4gWyIxIiwiMiIsICIzIiwgIjQiXToKICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRfZWxlbWVudCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudHModGV4dD1kaWdpdCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZGlnaXRfZWxlbWVudCBhbmQgbGVuKGRpZ2l0X2VsZW1lbnQpID4gMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihkaWdpdF9lbGVtZW50W2xlbihkaWdpdF9lbGVtZW50KS0xXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHTDrG0gdGjhuqV5IHPhu5Ege2RpZ2l0fSB0cm9uZyBwb3B1cCBQSU4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHRleHQ9IlF1YXkgbOG6oWkgdGlrdG9rIiwgdGltZW91dD01KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6Mgbmjhuq1wIG3DoyBQSU4gMTIzNCIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAjIENo4budIHBvcHVwIMSRw7NuZwoKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiVMOsbSB0aOG6pXkgcG9wdXAgUElOIG5oxrBuZyBraMO0bmcgdMOsbSB0aOG6pXkgc+G7kSAxIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCJLaMO0bmcgY8OzIHBvcHVwIFBJTiIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIGtp4buDbSB0cmEgcG9wdXAgUElOOiB7ZX0iKQogICAgCiAgICBkZWYgcGVyZm9ybV9wb3N0X2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkMSDbmcgdmlkZW8gY2hvIFRpa1RvayB24bubaSBraeG7g20gdHJhIHRo4budaSBnaWFuIGRlbGF5CiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcgxJHEg25nIHZpZGVvIGhv4bq3YyDEkcOjIMSRxINuZyBn4bqnbiDEkcOieQogICAgICAgICIiIgoKICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgYWNjID0gYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsICdVbmtub3duJykKICAgICAgICBhY2NvdW50X2lkID0gYWNjb3VudC5nZXQoJ2lkJykKICAgICAgICAKICAgICAgICBpZiBhY2MgPT0gIm5kZDExODkwIjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIHRo4budaSBnaWFuIHBvc3QgZ+G6p24gbmjhuqV0CiAgICAgICAgZGVsYXlfbWludXRlcyA9IHNlbGYuZ2V0X2NvbmZpZygiZGVsYXlfcG9zdF92aWRlb19taW51dGUiKQogICAgICAgIGlmIGRlbGF5X21pbnV0ZXMgYW5kIGFjY291bnRfaWQ6CiAgICAgICAgICAgIGxhc3RfcG9zdF90aW1lID0gc2VsZi5kYi5nZXRfYWNjb3VudF9sYXN0X3Bvc3RfdGltZShhY2NvdW50X2lkLCBzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBsYXN0X3Bvc3RfdGltZToKICAgICAgICAgICAgICAgIHRpbWVfZGlmZl9taW51dGVzID0gKGN1cnJlbnRfdGltZSAtIGxhc3RfcG9zdF90aW1lKSAvIDYwCiAgICAgICAgICAgICAgICBpZiB0aW1lX2RpZmZfbWludXRlcyA8IGRlbGF5X21pbnV0ZXM6CiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nX21pbnV0ZXMgPSBkZWxheV9taW51dGVzIC0gdGltZV9kaWZmX21pbnV0ZXMKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHthY2N9IMSRw6MgxJHEg25nIHZpZGVvIGfhuqduIMSRw6J5LCBj4bqnbiBjaOG7nSB0aMOqbSB7cmVtYWluaW5nX21pbnV0ZXM6LjFmfSBwaMO6dCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgVHLhuqMgduG7gSBUcnVlIMSR4buDIGtow7RuZyBjb2kgbMOgIGzhu5dpCiAgICAgICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgxJHEg25nIHZpZGVvIGNobyBUaWtUb2sgdMOgaSBraG/huqNuOiB7YWNjfSIpCgogICAgICAgICMgQsaw4bubYyAxOiBC4bqlbSBxdWF5CiAgICAgICAgbmV4dF9idXR0b24yID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IlF1YXkiLCB0aW1lb3V0PTUpCiAgICAgICAgaWYgbm90IG5leHRfYnV0dG9uMjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IFF1YXkgxJHhu4MgxJHEg25nIHZpZGVvIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgIyBCxrDhu5tjIDIgYuG6pW0gY2hvIHBow6lwCiAgICAgICAgd2hpbGUgc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChyZXNvdXJjZV9pZD0iY29tLmFuZHJvaWQucGFja2FnZWluc3RhbGxlcjppZC9wZXJtaXNzaW9uX2FsbG93X2J1dHRvbiIsIHRpbWVvdXQ9NSk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuqVtIG7DunQgY2hvIHBow6lwLi4uIikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCgogICAgICAgICNCxrDhu5tjIDMgYuG6pW0gdsOgbyBi4buZIHPGsHUgdOG6rXAKICAgICAgICByZWNvcmRfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjb250ZW50X2Rlc2M9IlF1YXkgdmlkZW8iLCB0aW1lb3V0PTEwKQogICAgICAgIGlmIG5vdCByZWNvcmRfYnV0dG9uOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgJ1F1YXkgdmlkZW8nIikKICAgICAgICAgICAgY2xvc2VfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IsSQw7NuZyIsIHRpbWVvdXQ9MikKICAgICAgICAgICAgaWYgY2xvc2VfYnV0dG9uOgogICAgICAgICAgICAgICAgY2xvc2VfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IsSQw7NuZyIsIHRpbWVvdXQ9MikKICAgICAgICAgICAgaWYgY2xvc2VfYnV0dG9uOgogICAgICAgICAgICAgICAgY2xvc2VfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IsSQw7NuZyIsIHRpbWVvdXQ9MikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgIyBCxrDhu5tjIDI6IFJhbmRvbSBz4buRIGzGsOG7o25nIOG6o25oIHbDoCB04bqjaSB24buBCiAgICAgICAgaW1hZ2VfY291bnQgPSByYW5kb20ucmFuZGludCgzLCA1KQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJSYW5kb20ge2ltYWdlX2NvdW50fSDhuqNuaCDEkeG7gyDEkcSDbmcgYsOgaSIpCiAgICAgICAgaWYgbm90IHNlbGYuaGVscGVyLmRvd25sb2FkX2ltYWdlKGNvdW50PWltYWdlX2NvdW50KToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiVOG6o2kg4bqjbmggdGjhuqV0IGLhuqFpLCBi4buPIHF1YSDEkcSDbmcgYsOgaSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQoKICAgICAgICAjIEzhuqV5IGJvdW5kcyBj4bunYSByZWNvcmRfYnV0dG9uIHbDoCB0w61uaCB0b8OhbiB04buNYSDEkeG7mQogICAgICAgIGJvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhyZWNvcmRfYnV0dG9uKQogICAgICAgIHgxLCB5MSwgeDIsIHkyID0gYm91bmRzCiAgICAgICAgeSA9ICh5MSArIHkyKSAvLyAyICAjIHkg4bufIGdp4buvYSBj4bunYSBlbGVtZW50CiAgICAgICAgeCA9IHgyICAjIHgg4bufIGPhuqFuaCBwaOG6o2kKICAgICAgICB0YXBfeCA9IHggKyA2MCAgIyB4ICsgNjAKICAgICAgICB0YXBfeSA9IHkKCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRhcCB2w6BvIHThu41hIMSR4buZICh7dGFwX3h9LCB7dGFwX3l9KSAtIGPhuqFuaCBwaOG6o2kgY+G7p2EgbsO6dCBRdWF5IHZpZGVvICsgNjBweCIpCiAgICAgICAgc2VsZi5oZWxwZXIudGFwKHRhcF94LCB0YXBfeSkKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAKICAgICAgICAjIELGsOG7m2MgNCBi4bqlbSBjaG8gcGjDqXAKICAgICAgICB3aGlsZSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHJlc291cmNlX2lkPSJjb20uYW5kcm9pZC5wYWNrYWdlaW5zdGFsbGVyOmlkL3Blcm1pc3Npb25fYWxsb3dfYnV0dG9uIiwgdGltZW91dD01KToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQuG6pW0gbsO6dCBjaG8gcGjDqXAuLi4iKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAKICAgICAgICAjIELGsOG7m2MgNSBjaOG7jW4g4bqjbmgKICAgICAgICAjIFTDrG0gR3JpZFZpZXcgxJHhu4MgY2jhu41uIOG6o25oCiAgICAgICAgZ3JpZF92aWV3ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkdyaWRWaWV3IikKICAgICAgICBpZiBub3QgZ3JpZF92aWV3OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IEdyaWRWaWV3IMSR4buDIGNo4buNbiDhuqNuaCIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICMgTOG6pXkgdOG6pXQgY+G6oyBjw6FjIGJ1dHRvbiBsw6AgY29uIGPhu6dhIEdyaWRWaWV3CiAgICAgICAgYnV0dG9uc19pbl9ncmlkID0gc2VsZi5oZWxwZXIuZmluZF9jaGlsZF9lbGVtZW50cyhncmlkX3ZpZXcsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIpCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHtsZW4oYnV0dG9uc19pbl9ncmlkKX0gYnV0dG9uIHRyb25nIEdyaWRWaWV3IikKICAgICAgICBpZiBub3QgYnV0dG9uc19pbl9ncmlkIG9yIGxlbihidXR0b25zX2luX2dyaWQpID09IDA6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIOG6o25oIG7DoG8gdHJvbmcgR3JpZFZpZXcgxJHhu4MgY2jhu41uIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgIyBDaOG7jW4gdOG7qyBpdGVtIHThu6sgMCDEkeG6v24gaW1hZ2VfY291bnQtMQogICAgICAgIGl0ZW1zX3RvX3NlbGVjdCA9IG1pbihpbWFnZV9jb3VudCwgbGVuKGJ1dHRvbnNfaW5fZ3JpZCkpCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkNo4buNbiB7aXRlbXNfdG9fc2VsZWN0fSDhuqNuaCB04burIEdyaWRWaWV3IikKICAgICAgICBmb3IgaSBpbiByYW5nZShpdGVtc190b19zZWxlY3QpOgogICAgICAgICAgICBidXR0b24gPSBidXR0b25zX2luX2dyaWRbaV0KICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJDaOG7jW4g4bqjbmggdGjhu6kge2krMX0iKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQoKICAgICAgICAjIFTDrG0gdsOgIGLhuqVtIG7DunQgQXV0b0N1dAogICAgICAgIG5leHRfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudCh0ZXh0PSJBdXRvQ3V0IiwgdGltZW91dD01KQogICAgICAgIGlmIG5vdCBuZXh0X2J1dHRvbjoKICAgICAgICAgICAgbmV4dF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iQXV0b0N1dCIsIHRpbWVvdXQ9NSkKICAgICAgICBpZiBub3QgbmV4dF9idXR0b246CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCAnQXV0b0N1dCcgc2F1IGtoaSBjaOG7jW4g4bqjbmgiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCgogICAgICAgICMgQ2jhu50gaGnhu4d1IOG7qW5nICLEkGFuZyB44butIGzDvS4uLiIgaG/DoG4gdOG6pXQKICAgICAgICB3YWl0X2NvdW50PTAKICAgICAgICB3aGlsZSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9IsSQYW5nIHjhu60gbMO9Li4uIiwgdGltZW91dD0yKSA6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQYW5nIHjhu60gbMO9Li4uIikKICAgICAgICAgICAgd2FpdF9jb3VudCArPSAxCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICBpZiB3YWl0X2NvdW50ID49IDIwMDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJDaOG7nSBxdcOhIGzDonUgY2hvIGhp4buHdSDhu6luZyAnxJBhbmcgeOG7rSBsw70uLi4nLCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBwYWNrYWdlIGhp4buHbiB04bqhaQogICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiUGFja2FnZSBoaeG7h24gdOG6oWkgKHtjdXJyZW50X3BhY2thZ2V9KSBraMO0bmcgxJHDum5nLCBt4bufIGzhuqFpIGFwcCBUaWtUb2suLi4iKQogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSBwYWNrYWdlIHNhdSBraGkgbeG7nyBhcHAKICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJW4bqrbiBraMO0bmcgbeG7nyDEkcaw4bujYyBhcHAgVGlrVG9rIMSRw7puZyBjw6FjaCwgcGFja2FnZSBoaeG7h24gdOG6oWk6IHtjdXJyZW50X3BhY2thZ2V9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBt4bufIGzhuqFpIGFwcCBUaWtUb2sgdGjDoG5oIGPDtG5nIikKCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBjw7MgdGV4dCAiTmjhuq10IGvDvSBj4bunYSBi4bqhbiIgdsOgICJ0aeG6v3AiIMSR4buDIHRp4bq/cCB04bulYwogICAgICAgIGRpYXJ5X3RleHQgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9Ik5o4bqtdCBrw70gY+G7p2EgYuG6oW4iLCB0aW1lb3V0PTUpCiAgICAgICAgY29udGludWVfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJUaeG6v3AiLCB0aW1lb3V0PTIpCgogICAgICAgIGlmIG5vdCBkaWFyeV90ZXh0IG9yIG5vdCBjb250aW51ZV9idXR0b246CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgJ05o4bqtdCBrw70gY+G7p2EgYuG6oW4nIGhv4bq3YyBuw7p0ICd0aeG6v3AnLCBraMO0bmcgdGjhu4MgdGnhur9wIHThu6VjIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICMgQ2jhu50gUmVjeWNsZXJWaWV3IHh14bqldCBoaeG7h24gdsOgIHRhcCB2w6BvIG7DswogICAgICAgIHJlY3ljbGVyX3ZpZXcgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWR4LnJlY3ljbGVydmlldy53aWRnZXQuUmVjeWNsZXJWaWV3IiwgdGltZW91dD01KQogICAgICAgIGlmIHJlY3ljbGVyX3ZpZXc6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IFJlY3ljbGVyVmlldywgxJFhbmcgdGFwIHbDoG8uLi4iKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIocmVjeWNsZXJfdmlldykKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEwKQoKICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoY29udGludWVfYnV0dG9uKQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQoKCiAgICAgICAgIyBLaeG7g20gdHJhIGPDsyB0ZXh0ICJUaMOqbSBtw7QgdOG6oy4uLiIgdsOgIGLhuqVtIHbDoG8gxJHDsyDEkeG7gyB0aMOqbSBoYXNodGFnCiAgICAgICAgYWRkX2Rlc2NyaXB0aW9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlRow6ptIG3DtCB04bqjLi4uIikKICAgICAgICBpZiBhZGRfZGVzY3JpcHRpb246CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5ICd0aMOqbSBtw7QgdOG6oy4uLicsIMSRYW5nIGLhuqVtIHbDoG8gxJHhu4MgdGjDqm0gaGFzaHRhZyIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihhZGRfZGVzY3JpcHRpb24pCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIDEgaGFzaHRhZyB04burIGRhbmggc8OhY2gKICAgICAgICAgICAgaGFzaHRhZ3MgPSBbCiAgICAgICAgICAgICAgICAiI3h1aHVvbmciLCAiI3Rpa3Rva3ZuIiwgIiN0cmVuZGluZyIsICIjbGlmZXZuIiwgIiNjdW9jc29uZyIsIAogICAgICAgICAgICAgICAgIiNhbW5oYWMiLCAiI3Rpbmh5ZXUiLCAiI25obyIsICIjdGhhbmh4dWFuIiwgIiNidW9uIiwgIiN2dWkiLCAKICAgICAgICAgICAgICAgICIjaGFuaHBodWMiLCAiI2NhbXh1YyIsICIjbmdheW1vaSIsICIjbXVhaGUiLCAiI3RodWdpYW4iLCAKICAgICAgICAgICAgICAgICIjY2hpbGwiLCAiI21vdG5nYXljdWF0b2kiCiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGVjdGVkX2hhc2h0YWcgPSByYW5kb20uY2hvaWNlKGhhc2h0YWdzKQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTmjhuq1wIGhhc2h0YWc6IHtzZWxlY3RlZF9oYXNodGFnfSIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmlucHV0X3RleHQoc2VsZWN0ZWRfaGFzaHRhZykKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2VudGVyKCkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5ICd0aMOqbSBtw7QgdOG6oy4uLicsIGLhu48gcXVhIGLGsOG7m2MgdGjDqm0gaGFzaHRhZyIpCgogICAgICAgICMgVMOsbSB2w6AgYuG6pW0gbsO6dCDEkMSDbmcKICAgICAgICBwb3N0X2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMSDbmciLCB0aW1lb3V0PTEwKQogICAgICAgIGlmIG5vdCBwb3N0X2J1dHRvbjoKICAgICAgICAgICAgcG9zdF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KHRleHQ9IsSQxINuZyIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgaWYgbm90IHBvc3RfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0ICfEkMSDbmcnIMSR4buDIGhvw6BuIHRow6BuaCDEkcSDbmcgdmlkZW8iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxMCkKICAgICAgICBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpCiAgICAgICAgCiAgICAgICAgIyBMxrB1IHRo4budaSBnaWFuIMSRxINuZyB2aWRlbyB0aMOgbmggY8O0bmcgdsOgbyBEQgogICAgICAgIGlmIGFjY291bnRfaWQ6CiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgc2VsZi5kYi5zZXRfYWNjb3VudF9sYXN0X3Bvc3RfdGltZShhY2NvdW50X2lkLCBzZWxmLmFwcF9uYW1lLCBjdXJyZW50X3RpbWUpCiAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkhvw6BuIHRow6BuaCDEkcSDbmcgdmlkZW8gY2hvIFRpa1RvayB0w6BpIGtob+G6o246IHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJ1Vua25vd24nKX0iKQogICAgICAgIHJldHVybiBUcnVlCiAgICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICMgQ0FSRSBBQ1RJT05TIElNUExFTUVOVEFUSU9OIChBQlNUUkFDVCBNRVRIT0RTIEZST00gQkFTRSkKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgZGVmIHBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24gdnXhu5F0IG5ld3NmZWVkL0ZvciBZb3UgZmVlZCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBT4butIGThu6VuZyBtZXRob2QgY8OzIHPhurVuIF9jYXJlX3N3aXBlX2ZlZWQKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NhcmVfc3dpcGVfZmVlZChhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9uZXdzZmVlZF9hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9yZWVsc19hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB4ZW0gdmlkZW8vcmVlbHMgKFRpa1RvayBt4bq3YyDEkeG7i25oIGzDoCB2aWRlbykiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgbWV0aG9kIGPDsyBz4bq1biBfY2FyZV93YXRjaF92aWRlb3MKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NhcmVfd2F0Y2hfdmlkZW9zKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBwZXJmb3JtX3JlZWxzX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX25vdGlmaWNhdGlvbl9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB4ZW0gdGjDtG5nIGLDoW8vaW5ib3giIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgbWV0aG9kIGPDsyBz4bq1biBfY2FyZV92aWV3X25vdGlmaWNhdGlvbnMKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NhcmVfdmlld19ub3RpZmljYXRpb25zKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBwZXJmb3JtX25vdGlmaWNhdGlvbl9hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9wcm9maWxlX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIHhlbSBwcm9maWxlIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE5hdmlnYXRlIMSR4bq/biBwcm9maWxlIHRhYgogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSB0aOG7nWkgZ2lhbiB4ZW0gcHJvZmlsZQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oNSwgMTUpKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9wcm9maWxlX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX2V4cGxvcmVfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24ga2jDoW0gcGjDoSAoRGlzY292ZXIgdGFiKSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBOYXZpZ2F0ZSDEkeG6v24gRGlzY292ZXIgdGFiIChu4bq/dSBjw7MpCiAgICAgICAgICAgIGRpc2NvdmVyX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoY29udGVudF9kZXNjPSJLaMOhbSBwaMOhIiwgdGltZW91dD01KQogICAgICAgICAgICBpZiBub3QgZGlzY292ZXJfYnV0dG9uOgogICAgICAgICAgICAgICAgZGlzY292ZXJfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJLaMOhbSBwaMOhIiwgdGltZW91dD01KQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgZGlzY292ZXJfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGRpc2NvdmVyX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFNjcm9sbCB0cm9uZyBkaXNjb3ZlciBmZWVkIC0gdGhheSBzd2lwZV9kb3duIGLhurFuZyBzd2lwZV91cAogICAgICAgICAgICAgICAgc2Nyb2xsX2NvdW50ID0gcmFuZG9tLnJhbmRpbnQoNSwgMTUpCiAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZShzY3JvbGxfY291bnQpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMSwgNSkpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBGYWxsYmFjazogc2Nyb2xsIEZvciBZb3UgZmVlZAogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucGVyZm9ybV9uZXdzZmVlZF9hY3Rpb24oYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHBlcmZvcm1fZXhwbG9yZV9hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9zZWFyY2hfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24gdMOsbSBraeG6v20iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVMOsbSBzZWFyY2ggYnV0dG9uCiAgICAgICAgICAgIHNlYXJjaF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVMOsbSBraeG6v20iLCB0aW1lb3V0PTUpCiAgICAgICAgICAgIGlmIG5vdCBzZWFyY2hfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VhcmNoX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQodGV4dD0iVMOsbSBraeG6v20iLCB0aW1lb3V0PTUpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzZWFyY2hfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBHaeG6oyBs4bqtcCB0w6xtIGtp4bq/bQogICAgICAgICAgICAgICAgc2VhcmNoX3Rlcm1zID0gWyJnYWl4aW5oIiwiZ2FpX3hpbmgiLCJob3RnaXJsIiwiaG90Z2lybHZuIiwidmlldG5hbWdpcmwiLCJwcmV0dHlnaXJsIiwKImN1dGVnaXJsIiwieGluaGdhaSIsIm1vZGVsIiwiaW5mbHVlbmNlciIsInNlbGZpZSIsIm1ha2V1cCIsInNraW5jYXJlIiwib290ZCIsImZhc2hpb24iLAoic3R5bGUiLCJoYWlyIiwiZ2xvd3VwIiwidmlyYWxnaXJsIiwidGlrdG9rZ2lybHMiLCJ0aWt0b2tnaXJsIiwidmlldG5hbWVzZSIsInBvcnRyYWl0IiwKImRhbmNlZ2lybCIsImNvc3BsYXlnaXJsIiwiY29sbGVnZWdpcmwiLCJzdHVkZW50Z2lybCIsImJlYXV0eSIsImJlYXV0aWZ1bCIsImN1dGUiLCJzbWlsZSJdCiAgICAgICAgICAgICAgICBzZWFyY2hfdGVybSA9IHJhbmRvbS5jaG9pY2Uoc2VhcmNoX3Rlcm1zKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gc2VhcmNoIGJveAogICAgICAgICAgICAgICAgc2VhcmNoX2JveCA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuRWRpdFRleHQiLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICBpZiBzZWFyY2hfYm94OgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfYm94KQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmlucHV0X3RleHQoc2VhcmNoX3Rlcm0pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIFR1eFRleHRMYXlvdXRWaWV3IHNhdSBraGkgbmjhuq1wIHRleHQKICAgICAgICAgICAgICAgICAgICB0dXhfdGV4dF9lbGVtZW50cyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudHMoY2xhc3NfbmFtZT0iY29tLmJ5dGVkYW5jZS50dXguaW5wdXQuVHV4VGV4dExheW91dFZpZXciKQogICAgICAgICAgICAgICAgICAgIGlmIHR1eF90ZXh0X2VsZW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkge2xlbih0dXhfdGV4dF9lbGVtZW50cyl9IGvhur90IHF14bqjIGfhu6NpIMO9IikKICAgICAgICAgICAgICAgICAgICAgICAgIyBDbGljayB2w6BvIGVsZW1lbnQgxJHhuqd1IHRpw6puICh0aMaw4budbmcgbMOgIHN1Z2dlc3Rpb24gxJHhuqd1IHRpw6puKQogICAgICAgICAgICAgICAgICAgICAgICAjIENsaWNrIHbDoG8gZWxlbWVudCBuZ+G6q3Ugbmhpw6puCiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbV9lbGVtZW50ID0gcmFuZG9tLmNob2ljZSh0dXhfdGV4dF9lbGVtZW50cykKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHJhbmRvbV9lbGVtZW50KQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19lbnRlcigpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgU2Nyb2xsIGvhur90IHF14bqjIHNlYXJjaCAtIHRoYXkgc3dpcGVfZG93biBi4bqxbmcgc3dpcGVfdXAKICAgICAgICAgICAgICAgICAgICBzY3JvbGxfY291bnQgPSByYW5kb20ucmFuZGludCgxLCA4KQogICAgICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHNjcm9sbF9jb3VudCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDIpKQogICAgICAgICAgICAgICAgICAgICAgICAjIFJhbmRvbSA1MCUgdGFwIHbDoG8gYW5kcm9pZC53aWRnZXQuR3JpZFZpZXcgdsOgIGThu6tuZyB04burIDEwLTMwcwogICAgICAgICAgICAgICAgICAgICAgICBpZiByYW5kb20ucmFuZG9tKCkgPCAwLjU6ICAjIDUwJSBwcm9iYWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZF92aWV3ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkdyaWRWaWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdyaWRfdmlldzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJSYW5kb20gdGFwIHbDoG8gR3JpZFZpZXcuLi4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihncmlkX3ZpZXcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMTAsIDMwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJE4burbmcge3dhaXRfdGltZX1zIHNhdSBraGkgdGFwIEdyaWRWaWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgRmFsbGJhY2sKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxMCwgMzApKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHBlcmZvcm1fc2VhcmNoX2FjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIAogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgIyBBUFAgTUFOQUdFTUVOVCBJTVBMRU1FTlRBVElPTiAoQUJTVFJBQ1QgTUVUSE9EUyBGUk9NIEJBU0UpCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBvcGVuX2FwcChzZWxmKSAtPiBib29sOgogICAgICAgICIiIk3hu58gVGlrVG9rIGFwcCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGFwcCDEkcOjIG3hu58gY2jGsGEKICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgIHJldHVybiBjdXJyZW50X3BhY2thZ2UgPT0gc2VsZi5hcHBfcGFja2FnZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgb3Blbl9hcHA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9saXZlX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBBY3Rpb24gcmnDqm5nIGPhu6dhIFRpa1RvazogWGVtIGxpdmVzdHJlYW0KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgdXNlcm5hbWUgPSBhY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlhlbSBsaXZlc3RyZWFtIFRpa1RvayBjaG8ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDhu58gaG9tZSBzY3JlZW4KICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgxJHhuqNtIGLhuqNvIGhvbWUgc2NyZWVuIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHbDoCBjbGljayB2w6BvIHRhYiBMSVZFIG7hur91IGPDswogICAgICAgICAgICBsaXZlX3RhYl9mb3VuZCA9IEZhbHNlCiAgICAgICAgICAgIGxpdmVfc2VsZWN0b3JzID0gWwogICAgICAgICAgICAgICAgeyJ0ZXh0IjogIkxJVkUifSwKICAgICAgICAgICAgICAgIHsidGV4dCI6ICJMaXZlIn0sCiAgICAgICAgICAgICAgICB7ImNvbnRlbnRfZGVzYyI6ICJMSVZFIn0sCiAgICAgICAgICAgICAgICB7ImNvbnRlbnRfZGVzYyI6ICJMaXZlIn0KICAgICAgICAgICAgXQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIHNlbGVjdG9yIGluIGxpdmVfc2VsZWN0b3JzOgogICAgICAgICAgICAgICAgaWYgc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCgqKnNlbGVjdG9yLCB0aW1lb3V0PTMpOgogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoKipzZWxlY3RvcikKICAgICAgICAgICAgICAgICAgICBpZiBlbGVtZW50OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZWxlbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZV90YWJfZm91bmQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgY2xpY2sgdsOgbyB0YWIgTElWRSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgbGl2ZV90YWJfZm91bmQ6CiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0YWIgTElWRSwgc2Nyb2xsIGRvd24gxJHhu4MgdMOsbSBsaXZlc3RyZWFtIHRyb25nIEZvciBZb3UKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSB0YWIgTElWRSwgdMOsbSBsaXZlc3RyZWFtIHRyb25nIEZvciBZb3UiKQogICAgICAgICAgICAgICAgc2Nyb2xsX2F0dGVtcHRzID0gMAogICAgICAgICAgICAgICAgbWF4X3Njcm9sbHMgPSA1CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHdoaWxlIHNjcm9sbF9hdHRlbXB0cyA8IG1heF9zY3JvbGxzOgogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIGxpdmUgaW5kaWNhdG9yIGtow7RuZyAoZOG6pXUgaGnhu4d1IGxpdmVzdHJlYW0pCiAgICAgICAgICAgICAgICAgICAgbGl2ZV9pbmRpY2F0b3JzID0gWwogICAgICAgICAgICAgICAgICAgICAgICB7InRleHQiOiAiTElWRSJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7ImNvbnRlbnRfZGVzYyI6ICJMSVZFIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsidGV4dCI6ICLEkWFuZyBwaMOhdCB0cuG7sWMgdGnhur9wIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsidGV4dCI6ICJ2aWV3ZXJzIn0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm91bmRfbGl2ZSA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZm9yIGluZGljYXRvciBpbiBsaXZlX2luZGljYXRvcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoKippbmRpY2F0b3IsIHRpbWVvdXQ9MSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZF9saXZlID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVMOsbSB0aOG6pXkgbGl2ZXN0cmVhbSB0cm9uZyBGb3IgWW91IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgZm91bmRfbGl2ZToKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFNjcm9sbCBkb3duIMSR4buDIHTDrG0gdmlkZW8gdGnhur9wIHRoZW8KICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMiwgNCkpCiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsX2F0dGVtcHRzICs9IDEKICAgICAgICAgICAgCiAgICAgICAgICAgICMgWGVtIGxpdmVzdHJlYW0gdHJvbmcgbeG7mXQga2hv4bqjbmcgdGjhu51pIGdpYW4gbmfhuqt1IG5oacOqbgogICAgICAgICAgICB3YXRjaF9kdXJhdGlvbiA9IHJhbmRvbS51bmlmb3JtKDEwLCAzMCkgICMgMTAtMzAgZ2nDonkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlhlbSBsaXZlc3RyZWFtIHRyb25nIHt3YXRjaF9kdXJhdGlvbjouMWZ9IGdpw6J5IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ8OzIHRo4buDIHRo4buxYyBoaeG7h24gbeG7mXQgc+G7kSB0xrDGoW5nIHTDoWMgbmjhurkKICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC4zOiAgIyAzMCUgY8ahIGjhu5lpIHTGsMahbmcgdMOhYwogICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25fYWN0aW9ucyA9IFsKICAgICAgICAgICAgICAgICAgICBsYW1iZGE6IHNlbGYuaGVscGVyLnRhcF9zY3JlZW4ocmFuZG9tLnJhbmRpbnQoMjAwLCA4MDApLCByYW5kb20ucmFuZGludCg0MDAsIDgwMCkpLCAgIyBUYXAgbmfhuqt1IG5oacOqbgogICAgICAgICAgICAgICAgICAgIGxhbWJkYTogTm9uZSAgIyBLaMO0bmcgbMOgbSBnw6wKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYWN0aW9uID0gcmFuZG9tLmNob2ljZShpbnRlcmFjdGlvbl9hY3Rpb25zKQogICAgICAgICAgICAgICAgYWN0aW9uKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTbGVlcCDEkeG7gyB4ZW0gbGl2ZXN0cmVhbQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2F0Y2hfZHVyYXRpb24pCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiSG/DoG4gdGjDoG5oIHhlbSBsaXZlc3RyZWFtIFRpa1RvayBjaG8ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgeGVtIGxpdmVzdHJlYW0gVGlrVG9rOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIEZhbHNl').decode('utf-8'))
