import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdCwgT3B0aW9uYWwsIENhbGxhYmxlCmZyb20gYWJjIGltcG9ydCBBQkMsIGFic3RyYWN0bWV0aG9kCmltcG9ydCB1dGlscwpmcm9tIHV0aWxzIGltcG9ydCBMb2dMZXZlbCwgTG9nZ2VyCmltcG9ydCB1cmxsaWIucGFyc2UKaW1wb3J0IHJhbmRvbQppbXBvcnQgY29uZmlnCiMgVOG6oW8gbG9nZ2VyIGNobyBCYXNlSm9iCmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoIkJhc2VKb2IiKQoKY2xhc3MgQmFzZUpvYihBQkMpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyID0gaGVscGVyX3NlcnZpY2UKICAgICAgICBzZWxmLmdvbGlrZV9zZXJ2aWNlID0gZ29saWtlX3NlcnZpY2UKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gIiIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gIiIKICAgICAgICAjIEjDoG0gc2xlZXAgbeG6t2MgxJHhu4tuaCBsw6AgdGltZS5zbGVlcAogICAgICAgIHNlbGYuX3NsZWVwX2Z1bmMgPSB0aW1lLnNsZWVwCiAgICAgICAgIyBU4bqhbyBsb2dnZXIgY2hvIGluc3RhbmNlIGPhu6UgdGjhu4MKICAgICAgICBzZWxmLmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoZiJKb2Iue3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgCiAgICAgICAgIyBEaWN0aW9uYXJ5IMSR4buDIGzGsHUgc+G7kSBs4bqnbiB1bmZvbGxvdy91bmxpa2UgdOG6oW0gdGjhu51pIHRoZW8gYWNjb3VudF9pZAogICAgICAgIHNlbGYudW5mb2xsb3dfY291bnRzID0ge30KICAgICAgICAKICAgICAgICAjIFByb3h5IHNlcnZpY2Ugc+G6vSDEkcaw4bujYyBzZXQgc2F1IGtoaSBraOG7n2kgdOG6oW8KICAgICAgICBzZWxmLnByb3h5X3NlcnZpY2UgPSBOb25lCiAgICAgICAgCiAgICBkZWYgc2V0X3Byb3h5X3NlcnZpY2Uoc2VsZiwgcHJveHlfc2VydmljZSk6CiAgICAgICAgIiIiCiAgICAgICAgVGhp4bq/dCBs4bqtcCBwcm94eSBzZXJ2aWNlIGNobyBqb2IgaGFuZGxlcgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb3h5X3NlcnZpY2U6IFByb3h5U2VydmljZSBpbnN0YW5jZQogICAgICAgICIiIgogICAgICAgIHNlbGYucHJveHlfc2VydmljZSA9IHByb3h5X3NlcnZpY2UKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aGnhur90IGzhuq1wIHByb3h5IHNlcnZpY2UgY2hvIHtzZWxmLl9fY2xhc3NfXy5fX25hbWVfX30iKQogICAgICAgIAogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIkzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgcGFzcwoKICAgICAgICAKICAgIGRlZiBzeW5jX2FjY291bnRzX3RvX2RiKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMSQ4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgdsOgbyBkYXRhYmFzZQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHMgPSBzZWxmLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRldmljZV9pZCB04burIGRhdGFiYXNlCiAgICAgICAgICAgIGFuZHJvaWRfaWQgPSBzZWxmLmRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gaGnhu4duIGPDsyB0cm9uZyBEQiBjaG8gYXBwIG7DoHkKICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9c2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gc2V0IGPDoWMgdW5pcXVlX3VzZXJuYW1lIHThu6sgdGhp4bq/dCBi4buLIMSR4buDIGThu4Ugc28gc8OhbmgKICAgICAgICAgICAgZGV2aWNlX3VzZXJuYW1lcyA9IHNldCgpCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfdXNlcm5hbWVzLmFkZCh1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gdHJvbmcgREIgbcOgIGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iyAtPiDEkcOhbmggZOG6pXUgbG9nb3V0CiAgICAgICAgICAgIGZvciBleGlzdGluZ19hY2NvdW50IGluIGV4aXN0aW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgZXhpc3RpbmdfdXNlcm5hbWUgPSBleGlzdGluZ19hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX3VzZXJuYW1lIGFuZCBleGlzdGluZ191c2VybmFtZSBub3QgaW4gZGV2aWNlX3VzZXJuYW1lczoKICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBjw7MgdHJvbmcgREIgbmjGsG5nIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIC0+IGxvZ291dAogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSAhPSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7ZXhpc3RpbmdfdXNlcm5hbWV9IGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iywgxJHDoW5oIGThuqV1IGxvZ291dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoZXhpc3RpbmdfYWNjb3VudFsiaWQiXSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJsb2dvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImluYWN0aXZlX3JlYXNvbiI6ICJUw6BpIGtob+G6o24ga2jDtG5nIGPDsm4gdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IGhv4bq3YyB0aMOqbSBt4bubaSB2w6BvIERCCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICMgVGjDqm0gdGjDtG5nIHRpbiBhcHAgdsOgIGRldmljZV9pZAogICAgICAgICAgICAgICAgYWNjb3VudFsiYXBwIl0gPSBzZWxmLmFwcF9uYW1lCiAgICAgICAgICAgICAgICBhY2NvdW50WyJkZXZpY2VfaWQiXSA9IGFuZHJvaWRfaWQKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IGzDoCBjaMawYSDEkeG7k25nIGLhu5kgxJHhu4MgZ+G7rWkgbMOqbiBzZXJ2ZXIKICAgICAgICAgICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gxJHDoyB04buTbiB04bqhaSBjaMawYSBk4buxYSB2w6BvIHVuaXF1ZV91c2VybmFtZSArIGFwcAogICAgICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudCA9IHNlbGYuZGIuZ2V0X2FjY291bnRfYnlfdW5pcXVlX3VzZXJuYW1lKHNlbGYuYXBwX25hbWUsIGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgZXhpc3RpbmdfYWNjb3VudDoKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24gaGnhu4duIGPDswogICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBleGlzdGluZ19hY2NvdW50WyJpZCJdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIG7hur91IHTDoGkga2hv4bqjbiB0cm9uZyBEQiDEkWFuZyDhu58gdHLhuqFuZyB0aMOhaSBsb2dvdXQgbmjGsG5nIHh14bqldCBoaeG7h24gbOG6oWkgdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICAgICAgaWYgZXhpc3RpbmdfYWNjb3VudC5nZXQoInN0YXR1cyIpID09ICJsb2dvdXQiOgogICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50WyJzdGF0dXMiXSA9ICJhY3RpdmUiICAjIFJlc2V0IHbhu4EgYWN0aXZlIGtoaSB0w6xtIHRo4bqleSBs4bqhaSB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsiaW5hY3RpdmVfcmVhc29uIl0gPSAiIiAgIyBYw7NhIGzDvSBkbyBpbmFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IMSRw6MgeHXhuqV0IGhp4buHbiBs4bqhaSB0csOqbiB0aGnhur90IGLhu4ssIHJlc2V0IHThu6sgbG9nb3V0IHbhu4EgYWN0aXZlIikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIEdp4buvIG5ndXnDqm4gdHLhuqFuZyB0aMOhaSBoaeG7h24gdOG6oWkgbuG6v3Uga2jDtG5nIHBo4bqjaSBsb2dvdXQvZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsic3RhdHVzIl0gPSBleGlzdGluZ19hY2NvdW50LmdldCgic3RhdHVzIiwgImFjdGl2ZSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCBhY2NvdW50KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgVGjDqm0gdMOgaSBraG/huqNuIG3hu5tpIHbhu5tpIHRy4bqhbmcgdGjDoWkgYWN0aXZlCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsic3RhdHVzIl0gPSAiYWN0aXZlIgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuYWRkX2FjY291bnQoYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aMOqbSB0w6BpIGtob+G6o24gbeG7m2kge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIGRldmljZV9hY2NvdW50cwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgZGVmIGlzX2dvbGlrZV9hdXRoZW50aWNhdGVkKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjw7MgdGjDtG5nIHRpbiB4w6FjIHRo4buxYyBHb0xpa2UgY2jGsGEKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRw6MgeMOhYyB0aOG7sWMsIEZhbHNlIG7hur91IGNoxrBhCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2hlYWRlcnMgPSBzZWxmLmRiLmdldCgiZ29saWtlX2hlYWRlcnMiLCB7fSkKICAgICAgICByZXR1cm4gYm9vbChnb2xpa2VfaGVhZGVycyBhbmQgImF1dGhvcml6YXRpb24iIGluIGdvbGlrZV9oZWFkZXJzKQogICAgCiAgICBkZWYgYXBpX3JlcXVlc3Qoc2VsZiwgdXJsOiBzdHIsIG1ldGhvZDogc3RyID0gIkdFVCIsIHBheWxvYWQ6IERpY3Rbc3RyLCBBbnldID0gTm9uZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEfhu41pIEFQSSBHb0xpa2UgdGjDtG5nIHF1YSBHb0xpa2VTZXJ2aWNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdXJsOiBVUkwgY+G7p2EgQVBJCiAgICAgICAgICAgIG1ldGhvZDogUGjGsMahbmcgdGjhu6ljIEhUVFAgKEdFVCBob+G6t2MgUE9TVCkKICAgICAgICAgICAgcGF5bG9hZDogROG7ryBsaeG7h3UgZ+G7rWkgxJFpIChjaG8gUE9TVCByZXF1ZXN0KQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0IGhv4bq3YyBOb25lOiBL4bq/dCBxdeG6oyBBUEkgbuG6v3UgdGjDoG5oIGPDtG5nLCBOb25lIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBzZWxmLmdvbGlrZV9zZXJ2aWNlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBn4buNaSBBUEk6IEdvTGlrZVNlcnZpY2UgY2jGsGEgxJHGsOG7o2MgY3VuZyBj4bqlcCBjaG8ge3NlbGYuYXBwX25hbWV9IGpvYiIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICMgWOG7rSBsw70gcGF5bG9hZCBjaG8gR0VUIHJlcXVlc3QgLSB0aMOqbSB2w6BvIFVSTAogICAgICAgIGlmIG1ldGhvZC51cHBlcigpID09ICJHRVQiIGFuZCBwYXlsb2FkOgogICAgICAgICAgICAjIFThuqFvIHF1ZXJ5IHN0cmluZyB04burIHBheWxvYWQKICAgICAgICAgICAgcXVlcnlfcGFyYW1zID0gW10KICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gcGF5bG9hZC5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcXVlcnlfcGFyYW1zLmFwcGVuZChmInt1cmxsaWIucGFyc2UucXVvdGUoa2V5KX09e3VybGxpYi5wYXJzZS5xdW90ZShzdHIodmFsdWUpKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBxdWVyeSBzdHJpbmcgdsOgbyBVUkwKICAgICAgICAgICAgaWYgcXVlcnlfcGFyYW1zOgogICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gIiYiIGlmICI/IiBpbiB1cmwgZWxzZSAiPyIKICAgICAgICAgICAgICAgIHVybCA9IGYie3VybH17c2VwYXJhdG9yfXsnJicuam9pbihxdWVyeV9wYXJhbXMpfSIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhurd0IHBheWxvYWQgduG7gSBOb25lIHbDrCDEkcOjIMSRxrBhIHbDoG8gVVJMCiAgICAgICAgICAgIHBheWxvYWQgPSBOb25lCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHNlbGYuZ29saWtlX3NlcnZpY2UuYXBpX3JlcXVlc3QodXJsLCBtZXRob2QsIHBheWxvYWQpCiAgICAKICAgIGRlZiBnZXRfZ29saWtlX2FjY291bnRzKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIMSRw6MgxJHEg25nIGvDvSB24bubaSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gR29MaWtlCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQxrDhu51uZyBk4bqrbiBBUEkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgdXJsID0gZiJ7c2VsZi5nZXRfYWNjb3VudF91cmwoKX0iCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3QodXJsKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgIGFjY291bnRzID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgW10pCiAgICAgICAgICAgICAgICByZXR1cm4gYWNjb3VudHMKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gR29MaWtlIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBtYXBfZ29saWtlX2FjY291bnRzKHNlbGYsIGdvbGlrZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0sIGRldmljZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0pIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMOBbmggeOG6oSB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZ29saWtlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSBBUEkKICAgICAgICAgICAgZGV2aWNlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggdMOgaSBraG/huqNuIMSRw6Mgw6FuaCB44bqhCiAgICAgICAgIiIiCiAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgbeG6t2MgxJHhu4tuaCwgY+G6p24gb3ZlcnJpZGUg4bufIGzhu5twIGNvbgogICAgICAgIHJldHVybiBbXQogICAgCiAgICBkZWYgZmV0Y2hfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGjDtG5nIHRpbiBqb2IgdOG7qyBHb0xpa2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0IGhv4bq3YyBOb25lOiBUaMO0bmcgdGluIGpvYiBu4bq/dSBjw7MsIE5vbmUgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkMaw4budbmcgZOG6q24gQVBJIGzhuqV5IGpvYgogICAgICAgICAgICB1cmwgPSBmIntzZWxmLmdldF9qb2JzX3VybCgpfSIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGhhbSBz4buRIHTDuXkgdGhlbyBsb+G6oWkgYXBwCiAgICAgICAgICAgIHBhcmFtcyA9IHNlbGYuZ2V0X2pvYl9wYXJhbXMoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdCh1cmwsICJHRVQiLCBwYXJhbXMpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2UuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgam9iID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGpvYjoKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSBqb2IKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5tYXBfam9iX2RhdGEoam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGpvYiIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAKICAgIGRlZiBtYXBfam9iX2RhdGEoc2VsZiwgam9iX2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaHXhuqluIGjDs2EgZOG7ryBsaeG7h3Ugam9iIHThu6sgQVBJCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX2RhdGE6IEThu68gbGnhu4d1IGpvYiB04burIEFQSQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogROG7ryBsaeG7h3Ugam9iIMSRw6MgY2h14bqpbiBow7NhCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImFwcCI6IHNlbGYuYXBwX25hbWUsCiAgICAgICAgICAgICJpZCI6IGpvYl9kYXRhLmdldCgiaWQiKSwKICAgICAgICAgICAgImxpbmsiOiBqb2JfZGF0YS5nZXQoImxpbmsiKSwKICAgICAgICAgICAgInR5cGUiOiBqb2JfZGF0YS5nZXQoInR5cGUiKSwKICAgICAgICAgICAgIm9iamVjdF9pZCI6IGpvYl9kYXRhLmdldCgib2JqZWN0X2lkIiksCiAgICAgICAgICAgICJwcmljZV9hZnRlcl9jb3N0Ijogam9iX2RhdGEuZ2V0KCJwcmljZV9hZnRlcl9jb3N0IiksCiAgICAgICAgICAgICJzdGF0dXMiOiAiaWRsZSIsICAjIFN0YXR1cyBt4bq3YyDEkeG7i25oIGzDoCBpZGxlCiAgICAgICAgICAgICJyYXdfZGF0YSI6IGpvYl9kYXRhICAjIEzGsHUgbOG6oWkgZOG7ryBsaeG7h3UgZ+G7kWMgxJHhu4MgdGhhbSBraOG6o28ga2hpIGPhuqduCiAgICAgICAgfQogICAgCiAgICBkZWYgdmFsaWRhdGVfam9iX2JlZm9yZV9leGVjdXRpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgdsOgIHZhbGlkYXRlIGpvYiB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHZhbGlkYXRpb246CiAgICAgICAgICAgICAgICAtIHZhbGlkIChib29sKTogVHJ1ZSBu4bq/dSBqb2IgaOG7o3AgbOG7hywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgICAgICAgICAtIHNob3VsZF9za2lwIChib29sKTogVHJ1ZSBu4bq/dSBuw6puIHNraXAgam9iLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAgICAgICAgIC0gcmVhc29uIChzdHIpOiBMw70gZG8ga2jDtG5nIGjhu6NwIGzhu4cgaG/hurdjIHNraXAKICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8gY2hpIHRp4bq/dAogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX3R5cGUgPSBqb2IuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgam9iX3ByaWNlID0gam9iLmdldCgicHJpY2VfYWZ0ZXJfY29zdCIsIDApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgam9iIGZvbGxvdwogICAgICAgICAgICBpZiBqb2JfdHlwZSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgICMgMS4gS2nhu4NtIHRyYSBnacOhIHRp4buBbiBj4bunYSBqb2IgZm9sbG93CiAgICAgICAgICAgICAgICBtaW5fZm9sbG93X3ByaWNlID0gc2VsZi5kYi5nZXQoIm1pbl9mb2xsb3dfcHJpY2UiLCAzMCkgICMgTeG6t2MgxJHhu4tuaCAzMAogICAgICAgICAgICAgICAgaWYgam9iX3ByaWNlIDwgbWluX2ZvbGxvd19wcmljZToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAidmFsaWQiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBmIkpvYiBmb2xsb3cgY8OzIGdpw6Ege2pvYl9wcmljZX0gPCB7bWluX2ZvbGxvd19wcmljZX0sIHNraXAgam9iLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoyBi4buPIGtp4buDbSB0cmEga2jDs2EgZm9sbG93IHbDrCBraMO0bmcgY8OybiBnaeG7m2kgaOG6oW4gZm9sbG93CiAgICAgICAgICAgIAogICAgICAgICAgICAjIEpvYiBo4bujcCBs4buHCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAidmFsaWQiOiBUcnVlLAogICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogRmFsc2UsCiAgICAgICAgICAgICAgICAibWVzc2FnZSI6ICJKb2IgaOG7o3AgbOG7hyIKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB2YWxpZGF0ZSBqb2I6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJ2YWxpZCI6IEZhbHNlLAogICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogRmFsc2UsCiAgICAgICAgICAgICAgICAicmVhc29uIjogInZhbGlkYXRpb25fZXJyb3IiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBmIkzhu5dpIGtoaSB2YWxpZGF0ZSBqb2I6IHtzdHIoZSl9IgogICAgICAgICAgICB9CiAgICAKICAgIGRlZiBleGVjdXRlX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiwgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDA6IENoxrBhIHRo4buxYyBoaeG7h24KICAgICAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAyOiBUaOG6pXQgYuG6oWksIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgICAgICAgICAzOiBUaOG6pXQgYuG6oWksIMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgICAgIC0gc3VjY2VzcyAoYm9vbCk6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICAjIE3hurdjIMSR4buLbmgga2jDtG5nIGzDoG0gZ8OsLCBj4bqnbiBvdmVycmlkZSDhu58gbOG7m3AgY29uCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gam9iIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0iKQogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJzdGF0dXMiOiAwLAogICAgICAgICAgICAibWVzc2FnZSI6ICJDaMawYSB0aOG7sWMgaGnhu4duIGpvYiIsCiAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICB9CiAgICAKICAgIGRlZiByZXBvcnRfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldLCByZXN1bHQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIELDoW8gY8OhbyBr4bq/dCBxdeG6oyBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlc3VsdDogS+G6v3QgcXXhuqMgdGjhu7FjIGhp4buHbiBqb2IgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGLDoW8gY8OhbyB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgICAgICBqb2JfdHlwZSA9IGpvYi5nZXQoInR5cGUiLCAiIikKICAgICAgICAgICAgam9iX3N0YXR1cyA9IHJlc3VsdC5nZXQoInN0YXR1cyIsIDApCiAgICAgICAgICAgIGpvYl9zdWNjZXNzID0gcmVzdWx0LmdldCgic3VjY2VzcyIsIEZhbHNlKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHaGkgbOG6oWkgbOG7i2NoIHPhu60gam9iCiAgICAgICAgICAgIHNlbGYucmVjb3JkX2pvYl9oaXN0b3J5KGFjY291bnQsIGpvYiwgcmVzdWx0KQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGpvYl9pZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIElEIGpvYiDEkeG7gyBiw6FvIGPDoW8iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgam9iIHbDoCB44butIGzDvSB0xrDGoW5nIOG7qW5nCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHN0YXR1cyBsw6AgMiAobOG7l2kga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZyksIGjhu6d5IGpvYiB2w6AgYsOhbyBjw6FvIHRo4bqldCBi4bqhaQogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIHtqb2JfaWR9LCBraMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nLCBo4buneSBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBzdGF0dXMgbMOgIDMgKMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UpLCDEkeG6v20gc+G7kSBs4bqnbiB2w6AgdOG6oW0gZOG7q25nIHTDoGkga2hv4bqjbiBraGkgxJHhuqF0IDUgbOG6p24KICAgICAgICAgICAgaWYgam9iX3N0YXR1cyA9PSAzOgogICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGFjY291bnRbImlkIl0KICAgICAgICAgICAgICAgIGFjY291bnRfdXNlcm5hbWUgPSBhY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBI4buneSBqb2IgaGnhu4duIHThuqFpCiAgICAgICAgICAgICAgICBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBM4bqleSBz4buRIGzhuqduIHVuZm9sbG93L3VubGlrZSBoaeG7h24gdOG6oWkgdOG7qyBtZW1vcnkgdsOgIHTEg25nIGzDqm4gMQogICAgICAgICAgICAgICAgdW5mb2xsb3dfY291bnQgPSBzZWxmLnVuZm9sbG93X2NvdW50cy5nZXQoYWNjb3VudF9pZCwgMCkgKyAxCiAgICAgICAgICAgICAgICBzZWxmLnVuZm9sbG93X2NvdW50c1thY2NvdW50X2lkXSA9IHVuZm9sbG93X2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJQaMOhdCBoaeG7h24gYuG7iyB1bmZvbGxvdy91bmxpa2UgbOG6p24ge3VuZm9sbG93X2NvdW50fSwgdMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3UgxJHhuqF0IDUgbOG6p24gdGjDrCB04bqhbSBk4burbmcgdMOgaSBraG/huqNuIDI0aAogICAgICAgICAgICAgICAgaWYgdW5mb2xsb3dfY291bnQgPj0gNToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiVMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlIHt1bmZvbGxvd19jb3VudH0gbOG6p24gLSBU4bqhbSBk4burbmcgMjRoIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFThuqFtIGThu6tuZyB0w6BpIGtob+G6o24gMjRoIHbDoCByZXNldCBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXRfYWNjb3VudF9pbmFjdGl2ZSgKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCwgCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2xkb3duX21pbnV0ZXM9MTQ0MCwgICMgMjQgZ2nhu50gPSAxNDQwIHBow7p0CiAgICAgICAgICAgICAgICAgICAgICAgIGluYWN0aXZlX3JlYXNvbj1mIkLhu4sgcGjDoXQgaGnhu4duIHVuZm9sbG93L3VubGlrZSB7dW5mb2xsb3dfY291bnR9IGzhuqduIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFJlc2V0IGNvdW50ZXIgdHJvbmcgbWVtb3J5IHNhdSBraGkgdOG6oW0gZOG7q25nCiAgICAgICAgICAgICAgICAgICAgc2VsZi51bmZvbGxvd19jb3VudHNbYWNjb3VudF9pZF0gPSAwCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJUw6BpIGtob+G6o24ge2FjY291bnRfdXNlcm5hbWV9ICh7c2VsZi5hcHBfbmFtZX0pIGLhu4sgdOG6oW0gZOG7q25nIDI0aCBkbyB1bmZvbGxvdy91bmxpa2Uge3VuZm9sbG93X2NvdW50fSBs4bqnbiIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge2FjY291bnRfdXNlcm5hbWV9IGPDsm4gezUgLSB1bmZvbGxvd19jb3VudH0gbOG6p24gY+G6o25oIGLDoW8gdHLGsOG7m2Mga2hpIGLhu4sgdOG6oW0gZOG7q25nIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiWcOqdSBj4bqndSDEkWFuZyBjaOG7nSB0cm9uZyBqb2Ige2pvYl90eXBlfSwgaOG7p3kgam9iIikKICAgICAgICAgICAgICAgIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGpvYiB0aMOgbmggY8O0bmcsIGLDoW8gY8OhbyBr4bq/dCBxdeG6owogICAgICAgICAgICBpZiBqb2Jfc3VjY2VzczoKICAgICAgICAgICAgICAgICMgVVJMIEFQSSBiw6FvIGPDoW8gam9iCiAgICAgICAgICAgICAgICB1cmwgPSBmImFkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2NvbXBsZXRlLWpvYnMiCiAgICAgICAgICAgICAgICB1cmwgPSBmImFkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2NvbXBsZXRlLWpvYnMiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVOG6oW8gcGF5bG9hZCBjaG8gYsOhbyBjw6FvIGpvYgogICAgICAgICAgICAgICAgcGF5bG9hZCA9IHNlbGYuZ2V0X3JlcG9ydF9wYXlsb2FkKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIGlmIG5vdCBwYXlsb2FkOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6oW8gcGF5bG9hZCBjaG8gYsOhbyBjw6FvIGpvYiIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVGjhu60gZ+G7jWkgQVBJIHThu5FpIMSRYSAzIGzhuqduCiAgICAgICAgICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZSgzKToKICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3QodXJsLCAiUE9TVCIsIHBheWxvYWQpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgYsOhbyBjw6FvIGpvYiB7am9iX2lkfSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXNldCBjb3VudGVyIHVuZm9sbG93L3VubGlrZSB0cm9uZyBtZW1vcnkga2hpIGpvYiB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGFjY291bnRbImlkIl0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYWNjb3VudF9pZCBpbiBzZWxmLnVuZm9sbG93X2NvdW50cyBhbmQgc2VsZi51bmZvbGxvd19jb3VudHNbYWNjb3VudF9pZF0gPiAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51bmZvbGxvd19jb3VudHNbYWNjb3VudF9pZF0gPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIsSQw6MgcmVzZXQgdW5mb2xsb3dfY291bnQgduG7gSAwIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0iKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN0YXR1cyIpID09IDQwMDoKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbXNnID0gcmVzcG9uc2UuZ2V0KCdtZXNzYWdlJywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiW3thdHRlbXB0ICsgMX1dIELDoW8gY8OhbyBqb2IgbOG7l2k6IHtlcnJvcl9tc2d9LCB0aOG7rSBs4bqhaSBzYXUgNXMuLi4iKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiUGjhuqNuIGjhu5NpIGtow7RuZyBtb25nIMSR4bujaSBraGkgYsOhbyBjw6FvIGpvYjoge3Jlc3BvbnNlfSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIHRow6BuaCBjw7RuZyBzYXUgMyBs4bqnbiB0aOG7rSwgaOG7p3kgam9iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIHtqb2JfaWR9IHNhdSAzIGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgSm9iIGtow7RuZyB0aMOgbmggY8O0bmcsIGjhu6d5IGpvYgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkpvYiB7am9iX2lkfSBraMO0bmcgdGjDoG5oIGPDtG5nLCBo4buneSBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBnZXRfcmVwb3J0X3BheWxvYWQoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFThuqFvIHBheWxvYWQgY2hvIHZp4buHYyBiw6FvIGPDoW8gaG/DoG4gdGjDoG5oIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFBheWxvYWQgY2hvIEFQSSBiw6FvIGPDoW8KICAgICAgICAiIiIKICAgICAgICBnb2xpa2VfaWQgPSBhY2NvdW50LmdldCgiZ29saWtlX2lkIikKICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZCBvciBub3Qgam9iX2lkOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiVGhp4bq/dSB0aMO0bmcgdGluIHTDoGkga2hv4bqjbiBob+G6t2Mgam9iIMSR4buDIHThuqFvIHBheWxvYWQgYsOhbyBjw6FvIikKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJhZHNfaWQiOiBqb2JfaWQsCiAgICAgICAgICAgICJhY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiYXN5bmMiOiBUcnVlLAogICAgICAgICAgICAiZGF0YSI6IE5vbmUKICAgICAgICB9CiAgICAKICAgIGRlZiBnZXRfc2tpcF9wYXlsb2FkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBU4bqhbyBwYXlsb2FkIGNobyB2aeG7h2MgYuG7jyBxdWEvaOG7p3kgam9iCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogUGF5bG9hZCBjaG8gQVBJIHNraXAgam9iCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIpCiAgICAgICAgb2JqZWN0X2lkID0gam9iLmdldCgib2JqZWN0X2lkIikKICAgICAgICAKICAgICAgICBpZiBub3QgZ29saWtlX2lkIG9yIG5vdCBqb2JfaWQ6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJUaGnhur91IHRow7RuZyB0aW4gdMOgaSBraG/huqNuIGhv4bq3YyBqb2IgxJHhu4MgdOG6oW8gcGF5bG9hZCBo4buneSIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiYWRzX2lkIjogam9iX2lkLAogICAgICAgICAgICAiYWNjb3VudF9pZCI6IGdvbGlrZV9pZCwKICAgICAgICAgICAgIm9iamVjdF9pZCI6IG9iamVjdF9pZCwKICAgICAgICAgICAgInR5cGUiOiBqb2JfdHlwZQogICAgICAgIH0KICAgICAgICAKICAgIGRlZiBza2lwX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBC4buPIHF1YS9o4buneSBqb2IgaGnhu4duIHThuqFpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGjhu6d5IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBVUkwgQVBJIMSR4buDIHNraXAgam9iCiAgICAgICAgICAgIHVybCA9IGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L3NraXAtam9icyIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gcGF5bG9hZCBjaG8gdmnhu4djIHNraXAgam9iCiAgICAgICAgICAgIHBheWxvYWQgPSBzZWxmLmdldF9za2lwX3BheWxvYWQoYWNjb3VudCwgam9iKQogICAgICAgICAgICBpZiBub3QgcGF5bG9hZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6oW8gcGF5bG9hZCBjaG8gc2tpcCBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3QodXJsLCAiUE9TVCIsIHBheWxvYWQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2UuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgaOG7p3kgam9iIHtqb2IuZ2V0KCdpZCcpfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJI4buneSBqb2Ige2pvYi5nZXQoJ2lkJyl9IHRo4bqldCBi4bqhaToge3Jlc3BvbnNlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgaOG7p3kgam9iIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBkZWYgY2xvc2VfYXBwKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIMSQw7NuZyBhcHAKICAgICAgICAiIiIKICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgIGRlZiBnZXRfYXBpX2Jhc2VfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgZ+G7kWMgY+G7p2EgQVBJIEdvTGlrZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIGfhu5FjCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0iCiAgICAKICAgIGRlZiBnZXRfYWNjb3VudF91cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgdMOgaSBraG/huqNuIGPhu6dhIEdvTGlrZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSB0w6BpIGtob+G6o24KICAgICAgICAiIiIKICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfS1hY2NvdW50IgogICAgCiAgICBkZWYgZ2V0X2pvYnNfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGpvYnMgY+G7p2EgR29MaWtlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGpvYnMKICAgICAgICAiIiIKICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2pvYnMiCiAgICAKICAgIGRlZiBnZXRfam9iX3JlcG9ydF91cmwoc2VsZiwgam9iX2lkOiBzdHIpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGLDoW8gY8OhbyBqb2IgY+G7p2EgR29MaWtlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX2lkOiBJRCBj4bunYSBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGLDoW8gY8OhbyBqb2IKICAgICAgICAiIiIKICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfS9qb2JzL3tqb2JfaWR9L3JlcG9ydCIKICAgIAogICAgZGVmIGdldF9qb2JfcGFyYW1zKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aGFtIHPhu5EgxJHhu4MgZ+G7jWkgQVBJIGzhuqV5IGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBUaGFtIHPhu5EKICAgICAgICAiIiIKICAgICAgICAjIE3hurdjIMSR4buLbmgga2jDtG5nIGPDsyB0aGFtIHPhu5EsIGPhuqduIG92ZXJyaWRlIOG7nyBs4bubcCBjb24KICAgICAgICByZXR1cm4ge30KICAgIAogICAgZGVmIGdldF9hY2NvdW50c19mcm9tX2RldmljZShzZWxmKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiJQaMawxqFuZyB0aOG7qWMgY8ahIHPhu58gxJHhu4MgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24sIGPhuqduIG92ZXJyaWRlIOG7nyBjbGFzcyBjb24iIiIKICAgICAgICByZXR1cm4gW10KICAgIAogICAgZGVmIHNldF9zbGVlcF9mdW5jdGlvbihzZWxmLCBzbGVlcF9mdW5jOiBDYWxsYWJsZVtbZmxvYXRdLCBib29sXSk6CiAgICAgICAgIiIiCiAgICAgICAgxJDhurd0IGjDoG0gc2xlZXAgdMO5eSBjaOG7iW5oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2xlZXBfZnVuYzogSMOgbSBzbGVlcCBuaOG6rW4gbeG7mXQgdGhhbSBz4buRIGzDoCBz4buRIGdpw6J5IHbDoCB0cuG6oyB24buBIFRydWUgbuG6v3Ugc2xlZXAgxJHhu6cgdGjhu51pIGdpYW4sCiAgICAgICAgICAgICAgICAgICAgICAgIEZhbHNlIG7hur91IGLhu4sgZOG7q25nIGzhuqFpCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fc2xlZXBfZnVuYyA9IHNsZWVwX2Z1bmMKICAgICAgICAKICAgIGRlZiBzYWZlX3NsZWVwKHNlbGYsIHNlY29uZHM6IGZsb2F0KSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE5n4bunIGFuIHRvw6BuLCBjw7MgdGjhu4MgZOG7q25nIGzhuqFpIG5nYXkgbOG6rXAgdOG7qWMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBzZWNvbmRzOiBT4buRIGdpw6J5IGPhuqduIG5n4bunCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3Ugbmfhu6cgxJHhu6cgdGjhu51pIGdpYW4sIEZhbHNlIG7hur91IGLhu4sgZOG7q25nIGzhuqFpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3NsZWVwX2Z1bmMoc2Vjb25kcykKICAgIAogICAgZGVmIHN3aXRjaF90b19hY2NvdW50KHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBDaHV54buDbiDEkeG7lWkgc2FuZyB0w6BpIGtob+G6o24gbeG7pWMgdGnDqnUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXJnZXRfYWNjb3VudDogVMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuIMSR4bq/bgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGNodXnhu4NuIMSR4buVaSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIGNodXnhu4NuIMSR4buVaSBzYW5nIHTDoGkga2hv4bqjbiB7dGFyZ2V0X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAndW5rbm93bicpfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bq3dCB0aOG7nWkgZ2lhbiBjaOG7nSB04buRaSDEkWEgKGdpw6J5KQogICAgICAgICAgICB0aW1lb3V0ID0gNjAKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wCiAgICAgICAgICAgIGN1cnJlbnRfdXNlcm5hbWUgPSBzZWxmLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICAgICAgICAgIHRhcmdldF91c2VybmFtZSA9IHRhcmdldF9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgxJHDoyDEkcSDbmcgbmjhuq1wIMSRw7puZyB0w6BpIGtob+G6o24gcuG7k2ksIGtow7RuZyBj4bqnbiBjaHV54buDbiDEkeG7lWkKICAgICAgICAgICAgaWYgY3VycmVudF91c2VybmFtZSBhbmQgY3VycmVudF91c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDEkcSDbmcgbmjhuq1wIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSBy4buTaSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBjaMawYSDEkcSDbmcgbmjhuq1wIMSRw7puZyB0w6BpIGtob+G6o24sIHRo4buxYyBoaeG7h24gY2h1eeG7g24gxJHhu5VpCiAgICAgICAgICAgIHdoaWxlIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA8IHRpbWVvdXQ6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgbsOgeSBz4bq9IMSRxrDhu6NjIGdoaSDEkcOoIGLhu59pIGzhu5twIGNvbiB0w7l5IHRoZW8g4bupbmcgZOG7pW5nCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IHNlbGYuX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2godGFyZ2V0X2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgICAgICAgICAgICAgIyDEkOG7o2kgbeG7mXQgY2jDunQgxJHhu4Mg4bupbmcgZOG7pW5nIGxvYWQgeG9uZwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gxJHDoyBjaHV54buDbiDEkcO6bmcgdMOgaSBraG/huqNuIGNoxrBhCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld191c2VybmFtZSA9IHNlbGYuZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5ld191c2VybmFtZSBhbmQgbmV3X3VzZXJuYW1lID09IHRhcmdldF91c2VybmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGNodXnhu4NuIHNhbmcgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHEg25nIG5o4bqtcCB0cm9uZyBEQgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5yZXNldF9sb2dpbl9zdGF0dXNfYnlfYXBwKHNlbGYuYXBwX25hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KHRhcmdldF9hY2NvdW50WyJpZCJdLCB7ImlzX2xvZ2luIjogVHJ1ZSwgImlzX3N5bmMiOiBGYWxzZX0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSBjaMawYSB0aMOgbmggY8O0bmcsIMSR4bujaSBt4buZdCBjaMO6dCBy4buTaSB0aOG7rSBs4bqhaQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGNodXnhu4NuIHTDoGkga2hv4bqjbjoge3N0cihlKX0iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gc2F1IHt0aW1lb3V0fSBnacOieSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIGNodXnhu4NuIHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2goc2VsZiwgdGFyZ2V0X2FjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gY8OhYyB0aGFvIHTDoWMgVUkgxJHhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuCiAgICAgICAgUGjGsMahbmcgdGjhu6ljIG7DoHkgY+G6p24gxJHGsOG7o2MgZ2hpIMSRw6ggYuG7n2kgbOG7m3AgY29uCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgICMgUGjGsMahbmcgdGjhu6ljIGPGoSBz4bufIGNo4buJIGxvZyBj4bqjbmggYsOhbwogICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJQaMawxqFuZyB0aOG7qWMgX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2ggY2jGsGEgxJHGsOG7o2MgdHJp4buDbiBraGFpIGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIGRlZiBnZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoc2VsZikgLT4gT3B0aW9uYWxbc3RyXToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB1c2VybmFtZSBj4bunYSB0w6BpIGtob+G6o24gxJFhbmcgxJHEg25nIG5o4bqtcAogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0ciBob+G6t2MgTm9uZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAsIGhv4bq3YyBOb25lIG7hur91IGtow7RuZyBjw7MKICAgICAgICAiIiIKICAgICAgICAjIFBoxrDGoW5nIHRo4bupYyBjxqEgc+G7nyBjaOG7iSBsb2cgY+G6o25oIGLDoW8KICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiUGjGsMahbmcgdGjhu6ljIGdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSBjaMawYSDEkcaw4bujYyB0cmnhu4NuIGtoYWkgY2hvIHtzZWxmLl9fY2xhc3NfXy5fX25hbWVfX30iKQogICAgICAgIHJldHVybiBOb25lCiAgICAKICAgIGRlZiByZWNvcmRfam9iX2hpc3Rvcnkoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0sIHJlc3VsdDogRGljdFtzdHIsIEFueV0pIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBHaGkgbOG6oWkgbOG7i2NoIHPhu60gam9iIHbDoG8gZGF0YWJhc2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlc3VsdDogS+G6v3QgcXXhuqMgdGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVVUlEIGPhu6dhIGLhuqNuIGdoaSBs4buLY2ggc+G7rSBqb2IgaG/hurdjIGNodeG7l2kgcuG7l25nIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBkZXZpY2VfaWQKICAgICAgICAgICAgZGV2aWNlX2lkID0gc2VsZi5kYi5nZXRfb3JfY3JlYXRlX2RldmljZV9pZCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENodeG6qW4gYuG7iyBk4buvIGxp4buHdSBqb2IgaGlzdG9yeQogICAgICAgICAgICBqb2JfZGF0YSA9IHsKICAgICAgICAgICAgICAgICJhY2NvdW50X3V1aWQiOiBhY2NvdW50LmdldCgiYWNjb3VudF91dWlkIiwgIiIpLAogICAgICAgICAgICAgICAgImRldmljZV9pZCI6IGRldmljZV9pZCwKICAgICAgICAgICAgICAgICJhcHAiOiBzZWxmLmFwcF9uYW1lLAogICAgICAgICAgICAgICAgImpvYl9pZCI6IGpvYi5nZXQoImlkIiwgIiIpLAogICAgICAgICAgICAgICAgImpvYl90eXBlIjogam9iLmdldCgidHlwZSIsICIiKSwKICAgICAgICAgICAgICAgICJvYmplY3RfaWQiOiBqb2IuZ2V0KCJvYmplY3RfaWQiLCAiIiksCiAgICAgICAgICAgICAgICAibGluayI6IGpvYi5nZXQoImxpbmsiLCAiIiksCiAgICAgICAgICAgICAgICAic3RhdHVzIjogcmVzdWx0LmdldCgic3RhdHVzIiwgMCksCiAgICAgICAgICAgICAgICAic3VjY2VzcyI6IHJlc3VsdC5nZXQoInN1Y2Nlc3MiLCBGYWxzZSksCiAgICAgICAgICAgICAgICAicHJpY2UiOiBqb2IuZ2V0KCJwcmljZV9hZnRlcl9jb3N0IiwgMCksCiAgICAgICAgICAgICAgICAiZXJyb3JfbWVzc2FnZSI6IHJlc3VsdC5nZXQoIm1lc3NhZ2UiLCAiIikgaWYgbm90IHJlc3VsdC5nZXQoInN1Y2Nlc3MiLCBGYWxzZSkgZWxzZSAiIiwKICAgICAgICAgICAgICAgICJjcmVhdGVkX2F0IjogaW50KHRpbWUudGltZSgpKSwKICAgICAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UgICMgxJDhuqNtIGLhuqNvIHRy4bqhbmcgdGjDoWkgbMOgIGNoxrBhIMSR4buTbmcgYuG7mQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzGsHUgdsOgbyBkYXRhYmFzZQogICAgICAgICAgICBqb2JfdXVpZCA9IHNlbGYuZGIuYWRkX2pvYl9oaXN0b3J5KGpvYl9kYXRhKQogICAgICAgICAgICBpZiBqb2JfdXVpZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYixJDDoyBsxrB1IGzhu4tjaCBz4butIGpvYiB7am9iLmdldCgnaWQnKX0gdsOgbyBkYXRhYmFzZSB24bubaSBVVUlEOiB7am9iX3V1aWR9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJLaMO0bmcgdGjhu4MgbMawdSBs4buLY2ggc+G7rSBqb2Ige2pvYi5nZXQoJ2lkJyl9IHbDoG8gZGF0YWJhc2UiKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIGpvYl91dWlkCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBnaGkgbOG7i2NoIHPhu60gam9iIikKICAgICAgICAgICAgcmV0dXJuICIiCgogICAgZGVmIHJlcG9ydF9qb2JfY29tcGxldGVkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldLCByZXBvcnRfZGF0YTogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIELDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlcG9ydF9kYXRhOiBE4buvIGxp4buHdSBiw6FvIGPDoW8KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIGLDoW8gY8OhbyB04burIEFQSQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBqb2JfaWQgdOG7qyBqb2IKICAgICAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgICAgICBpZiBub3Qgam9iX2lkOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBqb2JfaWQgdHJvbmcgam9iIikKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogIktow7RuZyB0w6xtIHRo4bqleSBqb2JfaWQgdHJvbmcgam9iIn0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIENodeG6qW4gYuG7iyBk4buvIGxp4buHdSBiw6FvIGPDoW8KICAgICAgICAgICAgcGF5bG9hZCA9IHsKICAgICAgICAgICAgICAgICJpZCI6IGpvYl9pZCwKICAgICAgICAgICAgICAgICJzdGF0dXMiOiBUcnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gZOG7ryBsaeG7h3UgYsOhbyBjw6FvIG7hur91IGPDswogICAgICAgICAgICBpZiByZXBvcnRfZGF0YToKICAgICAgICAgICAgICAgIHBheWxvYWQudXBkYXRlKHJlcG9ydF9kYXRhKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJIGLDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgKICAgICAgICAgICAgdXJsID0gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0vYWR2ZXJ0aXNpbmcvcHVibGlzaGVycy97c2VsZi5hcHBfbmFtZX0vY29tcGxldGUtam9icyIKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5nb2xpa2Vfc2VydmljZS5hcGlfcmVxdWVzdCh1cmwsIG1ldGhvZD0iUE9TVCIsIHBheWxvYWQ9cGF5bG9hZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgifQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLDoW8gY8OhbyBqb2Ige2pvYl9pZH0gaG/DoG4gdGjDoG5oIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgIm1lc3NhZ2UiOiAixJDDoyBiw6FvIGPDoW8gam9iIGhvw6BuIHRow6BuaCB0aMOgbmggY8O0bmciLCAiZGF0YSI6IHJlc3VsdH0KICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oIikKICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiBmIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oOiB7c3RyKGUpfSJ9CiAgICAgICAgICAgIAogICAgZGVmIHJlcG9ydF9qb2Jfc2tpcHBlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSwgcmVhc29uOiBzdHIgPSAiIikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgQsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWEKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlYXNvbjogTMO9IGRvIGLhu48gcXVhIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgYsOhbyBjw6FvIHThu6sgQVBJCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IGpvYl9pZCB04burIGpvYgogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIGlmIG5vdCBqb2JfaWQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IGpvYl9pZCB0cm9uZyBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiS2jDtG5nIHTDrG0gdGjhuqV5IGpvYl9pZCB0cm9uZyBqb2IifQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2h14bqpbiBi4buLIGThu68gbGnhu4d1IGLDoW8gY8OhbwogICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgImlkIjogam9iX2lkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gbMO9IGRvIG7hur91IGPDswogICAgICAgICAgICBpZiByZWFzb246CiAgICAgICAgICAgICAgICBwYXlsb2FkWyJyZWFzb24iXSA9IHJlYXNvbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhCiAgICAgICAgICAgIHVybCA9IGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L3NraXAtam9icyIKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5nb2xpa2Vfc2VydmljZS5hcGlfcmVxdWVzdCh1cmwsIG1ldGhvZD0iUE9TVCIsIHBheWxvYWQ9cGF5bG9hZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhIikKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIMSRw6MgYuG7iyBi4buPIHF1YSJ9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgYsOhbyBjw6FvIGpvYiB7am9iX2lkfSBi4buLIGLhu48gcXVhIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgIm1lc3NhZ2UiOiAixJDDoyBiw6FvIGPDoW8gam9iIGLhu4sgYuG7jyBxdWEgdGjDoG5oIGPDtG5nIiwgImRhdGEiOiByZXN1bHR9CiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgYsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWEiKQogICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAiZXJyb3IiLCAibWVzc2FnZSI6IGYiTOG7l2kga2hpIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhOiB7c3RyKGUpfSJ9CiAgICAKICAgIGRlZiBnZXRfYWNjb3VudF9saXN0X3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICIiIgogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0iCiAgICAgICAgCiAgICBkZWYgZ2V0X2FjY291bnRfZGV0YWlsX3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBjaGkgdGnhur90IHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBjaGkgdGnhur90IHTDoGkga2hv4bqjbgogICAgICAgICIiIgogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0tYWNjb3VudCIKICAgICAgICAKICAgIGRlZiBnZXRfam9iX2xpc3RfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGRhbmggc8OhY2ggam9iCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGRhbmggc8OhY2ggam9iCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2pvYnMiCiAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9yZXBvcnRfdXJsKHNlbGYsIGpvYl9pZDogc3RyKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBiw6FvIGPDoW8gam9iCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX2lkOiBJRCBj4bunYSBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGLDoW8gY8OhbyBqb2IKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0ve3NlbGYuYXBwX25hbWV9L2pvYnMve2pvYl9pZH0vcmVwb3J0Ig==').decode('utf-8'))
