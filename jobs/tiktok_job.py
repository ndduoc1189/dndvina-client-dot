import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsCmZyb20gam9icy5qb2JfYmFzZSBpbXBvcnQgQmFzZUpvYgoKY2xhc3MgVGlrdG9rSm9iKEJhc2VKb2IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSkKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbCIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gInRpa3RvayIKICAgICAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrdG9rIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBN4bufIOG7qW5nIGThu6VuZyBUaWtUb2sKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpICAjIMSQ4bujaSDhu6luZyBk4bulbmcgbeG7nwogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSBtw6BuIGjDrG5oIGNow61uaCB04bqjaQogICAgICAgICAgICBob21lX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6o2kgbcOgbiBow6xuaCBjaMOtbmggVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0ICJI4buTIHPGoSIgdsOgIG5o4bqlcCB2w6BvCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYigpOgogICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIG1lbnUgaOG7kyBzxqEgxJHhu4MgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgaWYgbm90IHNlbGYuX29wZW5fcHJvZmlsZV9tZW51KCk6CiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgWE1MIG3DoG4gaMOsbmggc2F1IGtoaSBt4bufIG1lbnUKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCAiVGjDqm0gdMOgaSBraG/huqNuIgogICAgICAgICAgICBhZGRfYWNjb3VudF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iVGjDqm0gdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGFkZF9hY2NvdW50X2J1dHRvbjoKICAgICAgICAgICAgICAgICMgVMOsbSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiAoUmVjeWNsZXJWaWV3KSAtIGzDoCBjaGEgY+G7p2EgbsO6dCAiVGjDqm0gdMOgaSBraG/huqNuIgogICAgICAgICAgICAgICAgcmVjeWNsZXJfdmlldyA9IE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgUmVjeWNsZXJWaWV3CiAgICAgICAgICAgICAgICBhbGxfcmVjeWNsZXJfdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZHgucmVjeWNsZXJ2aWV3LndpZGdldC5SZWN5Y2xlclZpZXciCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBSZWN5Y2xlclZpZXcgY2jhu6lhIGPDoWMgdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBmb3IgcnYgaW4gYWxsX3JlY3ljbGVyX3ZpZXdzOgogICAgICAgICAgICAgICAgICAgIHJ2X2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhydikKICAgICAgICAgICAgICAgICAgICBhZGRfYWNjb3VudF9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYWRkX2FjY291bnRfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gYWRkX2FjY291bnRfYnV0dG9uIGPDsyBu4bqxbSB0cm9uZyByZWN5Y2xlcl92aWV3IGtow7RuZwogICAgICAgICAgICAgICAgICAgIGlmIChydl9ib3VuZHNbMF0gPD0gYWRkX2FjY291bnRfYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbMV0gPD0gYWRkX2FjY291bnRfYm91bmRzWzFdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbMl0gPj0gYWRkX2FjY291bnRfYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHNbM10gPj0gYWRkX2FjY291bnRfYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgcmVjeWNsZXJfdmlldyA9IHJ2CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHJlY3ljbGVyX3ZpZXc6CiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgbsO6dCAoQnV0dG9uKSB0cm9uZyBSZWN5Y2xlclZpZXcgYuG6sW5nIGNsYXNzIHRoYXkgdsOsIHJlc291cmNlLWlkCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBidXR0b24gaW4gYWNjb3VudF9idXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICAjIELhu48gcXVhIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgiY29udGVudC1kZXNjIikgPT0gIlRow6ptIHTDoGkga2hv4bqjbiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSB0w6puIHTDoGkga2hv4bqjbiB04burIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gVGV4dFZpZXcgdHJvbmcgYnV0dG9uIGLhurFuZyBjbGFzcyB0aGF5IHbDrCByZXNvdXJjZS1pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuVGV4dFZpZXciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTOG7jWMgdGV4dHZpZXcgdGhlbyBib3VuZHMgxJHhu4MgdMOsbSDEkcO6bmcgY8OhaSB0aHXhu5ljIHbhu4EgYnV0dG9uIG7DoHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHR2IGluIHRleHR2aWV3czoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHModHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR2X2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMV0gPj0gYnV0dG9uX2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzJdIDw9IGJ1dHRvbl9ib3VuZHNbMl0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSDEkeG7gyBraMO0bmcgbOG6pXkgcGjhuqNpIHRleHQgcuG7l25nIGhv4bq3YyAibnVsbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dCAhPSAibnVsbCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIELhu48gcXVhIG7DunQgIsSQw7NuZyIKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgPT0gIsSQw7NuZyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gY8OzIMSRYW5nIMSRxINuZyBuaOG6rXAga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGThuqV1IGtp4buDbSB0cm9uZyBidXR0b24gYuG6sW5nIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgICAgICAgICBjaGVja21hcmtzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYz0iROG6pXUga2nhu4NtIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGThuqV1IGtp4buDbSBjw7MgdGh14buZYyB24buBIGJ1dHRvbiBuw6B5IGtow7RuZwogICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGNoZWNrIGluIGNoZWNrbWFya3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja19ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoY2hlY2spCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tfYm91bmRzWzBdID49IGJ1dHRvbl9ib3VuZHNbMF0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzJdIDw9IGJ1dHRvbl9ib3VuZHNbMl0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzWzNdIDw9IGJ1dHRvbl9ib3VuZHNbM10pOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ8WpbmcgY8OzIHRo4buDIGtp4buDbSB0cmEgdGh14buZYyB0w61uaCBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiBidXR0b24uZ2V0KCJzZWxlY3RlZCIpID09ICJ0cnVlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzX2N1cnJlbnQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgdXNlcm5hbWUgaOG7o3AgbOG7hyB0csaw4bubYyBraGkgdGjDqm0gdsOgbyBkYW5oIHPDoWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lIGFuZCB1c2VybmFtZSAhPSAibnVsbCIgYW5kIHVzZXJuYW1lLnN0cmlwKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEzhu41jIHRow6ptIGPDoWMgdMOqbiBraMO0bmcgcGjhuqNpIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgbm90IGluIFsiQ8OgaSDEkeG6t3QiLCAiQ8OgaSDEkeG6t3QgdMOgaSBraG/huqNuIiwgIlTDuXkgY2jhu41uIiwgIk1lbnUiXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiB1c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiYWN0aXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlzX2xvZ2luIjogaXNfY3VycmVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2VuYWJsZSI6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsZXZlbCI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuYXBwZW5kKGFjY291bnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSBtw6BuIGjDrG5oIGNow61uaAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrVG9rIikKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnRzCiAgICAKICAgIGRlZiBwZXJmb3JtX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiBjw7RuZyB2aeG7h2MgduG7m2kgdMOgaSBraG/huqNuIFRpa1RvayIiIgogICAgICAgICMgU+G7rSBk4bulbmcgcGjGsMahbmcgdGjhu6ljIGPhu6dhIGzhu5twIGNoYQogICAgICAgIHN1cGVyKCkucGVyZm9ybV9qb2IoYWNjb3VudCkKICAgICAgICAKICAgIGRlZiBwZXJmb3JtX2NhcmUoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIk51w7RpIHTDoGkga2hv4bqjbiBUaWtUb2siIiIKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgbnXDtGkgdMOgaSBraG/huqNuIFRpa1Rvazoge2FjY291bnRbJ3VuaXF1ZV91c2VybmFtZSddfSIpCiAgICAgICAgIyBQaOG6p24gY29kZSBudcO0aSB0w6BpIGtob+G6o24gc+G6vSDEkcaw4bujYyB0aMOqbSBzYXUKICAgICAgICAKICAgIGRlZiBnZXRfYXZhaWxhYmxlX2pvYnMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGRhbmggc8OhY2ggY8OhYyBqb2Iga2jhuqMgZOG7pW5nIHThu6sgR29MaWtlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggam9iIGhv4bq3YyBsaXN0IHLhu5duZyBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHNlbGYuZ29saWtlX3NlcnZpY2U6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgbOG6pXkgam9iOiBHb0xpa2VTZXJ2aWNlIGNoxrBhIMSRxrDhu6NjIGN1bmcgY+G6pXAiKQogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEfhu41pIEFQSSBs4bqleSBqb2IKICAgICAgICAgICAgam9iX3VybCA9IHNlbGYuZ2V0X2pvYnNfdXJsKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gdGhhbSBz4buRCiAgICAgICAgICAgIHBhcmFtcyA9IHNlbGYuZ2V0X2pvYl9wYXJhbXMoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdChqb2JfdXJsLCAiR0VUIiwgcGFyYW1zKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgIGpvYl9kYXRhID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGpvYl9kYXRhOgogICAgICAgICAgICAgICAgICAgICMgQ2h14bqpbiBow7NhIGThu68gbGnhu4d1IGpvYgogICAgICAgICAgICAgICAgICAgIGpvYiA9IHNlbGYubWFwX2pvYl9kYXRhKGpvYl9kYXRhKQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gdGjhuqV5IGpvYiB7am9iWydpZCddfSBsb+G6oWkge2pvYlsndHlwZSddfSBjaG8gdMOgaSBraG/huqNuIHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBbam9iXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBqb2IiKQogICAgICAgICAgICByZXR1cm4gW10KICAgIAogICAgZGVmIGV4ZWN1dGVfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iLCBiYW8gZ+G7k206CiAgICAgICAgICAgICAgICAtIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAgICAgMDogQ2jGsGEgdGjhu7FjIGhp4buHbgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgICAgIDQ6IFRo4bqldCBi4bqhaSwgecOqdSBj4bqndSDEkWFuZyBjaOG7nQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX3R5cGUgPSBqb2IuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgam9iX2xpbmsgPSBqb2IuZ2V0KCJsaW5rIiwgIiIpCiAgICAgICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyB0aOG7sWMgaGnhu4duIGpvYiB7am9iX2lkfSBsb+G6oWkge2pvYl90eXBlfSB24bubaSBsaW5rIHtqb2JfbGlua30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGxv4bqhaSBqb2IgxJHGsOG7o2MgaOG7lyB0cuG7owogICAgICAgICAgICBpZiBqb2JfdHlwZSBub3QgaW4gWyJmb2xsb3ciLCAibGlrZSJdOgogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYiTG/huqFpIGpvYiB7am9iX3R5cGV9IGtow7RuZyDEkcaw4bujYyBo4buXIHRy4bujIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogMiwKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGpvYiB0aGVvIGxv4bqhaQogICAgICAgICAgICBqb2Jfc3RhdHVzID0gMCAgIyBN4bq3YyDEkeG7i25oIGzDoCBjaMawYSBsw6BtCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBqb2JfdHlwZSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2ZvbGxvd19qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIGVsaWYgam9iX3R5cGUgPT0gImxpa2UiOgogICAgICAgICAgICAgICAgam9iX3N0YXR1cyA9IHNlbGYuX3BlcmZvcm1fbGlrZV9qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIGvhur90IHF14bqjIHRy4bqjIHbhu4EgZOG7sWEgdHLDqm4gam9iX3N0YXR1cwogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBob8OgbiB0aMOgbmggam9iIHtqb2JfdHlwZX0gdGjDoG5oIGPDtG5nIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBUcnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAyOiAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiJLaMO0bmcgdGjhu4MgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nIMSR4buDIHRo4buxYyBoaeG7h24gam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiBqb2Jfc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICAic3VjY2VzcyI6IEZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAzOiAgIyDEkMOjIGLhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiLEkOG7kWkgdMaw4bujbmcgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZSB0csaw4bubYyDEkcOzIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlOiAgIyBUaOG6pXQgYuG6oWkgaG/hurdjIHRy4bqhbmcgdGjDoWkga2jDoWMKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlRo4buxYyBoaeG7h24gam9iIHtqb2JfdHlwZX0gdGjhuqV0IGLhuqFpIHbhu5tpIHRy4bqhbmcgdGjDoWkge2pvYl9zdGF0dXN9IgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSkKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IGpvYl9zdGF0dXMsCiAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbWVzc2FnZSA9IGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iOiB7c3RyKGUpfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAic3RhdHVzIjogMiwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgIGRlZiBfcGVyZm9ybV9mb2xsb3dfam9iKHNlbGYsIHByb2ZpbGVfbGluazogc3RyKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IgZm9sbG93IHRyw6puIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb2ZpbGVfbGluazogTGluayDEkeG6v24gdHJhbmcgY8OhIG5ow6JuIGPhuqduIGZvbGxvdyAoZOG6oW5nOiBodHRwczovL3d3dy50aWt0b2suY29tL0B1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBUcuG6oW5nIHRow6FpIGpvYiAoMDogY2jGsGEgbMOgbSwgMTogaG/DoG4gdGjDoG5oLCAyOiBs4buXaSwgMzogYuG7iyB1bmZvbGxvdywgNDogecOqdSBj4bqndSBjaOG7nSwgNTogZ+G7rWkgecOqdSBj4bqndSkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgVVJMIFRpa1RvayDEkeG7gyBz4butIGThu6VuZyBjaG8gbG9nZ2luZwogICAgICAgICAgICB1c2VybmFtZV9tYXRjaCA9IHJlLnNlYXJjaChyJ3Rpa3Rva1wuY29tL0AoW14vP10rKScsIHByb2ZpbGVfbGluaykKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX21hdGNoOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgdHLDrWNoIHh14bqldCB1c2VybmFtZSB04burIGxpbms6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZV9tYXRjaC5ncm91cCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIHRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX3BhZ2UocHJvZmlsZV9saW5rKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgRm9sbG93IHRoZW8gY8OhYyBjw6FjaCBraMOhYyBuaGF1CiAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPDoWNoIDE6IFTDrG0gdGhlbyB0ZXh0IHRp4bq/bmcgVmnhu4d0IHbDoCB0aeG6v25nIEFuaAogICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl0KICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPDoWNoIDI6IFTDrG0gdGhlbyBjb250ZW50LWRlc2MKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBmb2xsb3dfZGVzY3MgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdCiAgICAgICAgICAgICAgICBmb3IgZGVzYyBpbiBmb2xsb3dfZGVzY3M6CiAgICAgICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9ZGVzYykKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSB04bqldCBj4bqjIGPDoWMgY8OhY2gKICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgdGhlbyBkw7VpIHNhdSBuaGnhu4F1IGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRleHQgY+G7p2EgbsO6dAogICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgYnV0dG9uX3Jlc291cmNlX2lkID0gZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiAne2J1dHRvbl90ZXh0fScsIHJlc291cmNlLWlkOiAne2J1dHRvbl9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaQogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHnDqnUgY+G6p3UgdGhlbyBkw7VpIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgbMOgICJUaGVvIGTDtWkiIGhv4bq3YyAiRm9sbG93IiB0aMOsIGNsaWNrIHbDoG8gbsO6dAogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIlRoZW8gZMO1aSIsICJGb2xsb3ciXToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlRo4buxYyBoaeG7h24gY2xpY2sgdsOgbyBuw7p0IHRoZW8gZMO1aSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTOG6pXkgcmVzb3VyY2VfaWQgY+G7p2EgYnV0dG9uIMSR4buDIGtp4buDbSB0cmEgbOG6oWkgc2F1CiAgICAgICAgICAgICAgICBidXR0b25fcmVzb3VyY2VfaWQgPSBmb2xsb3dfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICMgVnXhu5F0IHh14buRbmcgMSBs4bqnbiDEkeG7gyByZWZyZXNoIHRy4bqhbmcgdGjDoWkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBkaWFsb2cgaGnhu4duIGzDqm4ga2jDtG5nCiAgICAgICAgICAgICAgICAjIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgIyBpZiBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgIyAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyBj4bqjbmggYsOhbyBob+G6t2MgZ2nhu5tpIGjhuqFuCiAgICAgICAgICAgICAgICAjICAgICBkaWFsb2dzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQuYXBwLkRpYWxvZyIpCiAgICAgICAgICAgICAgICAjICAgICBmb3IgZGlhbG9nIGluIGRpYWxvZ3M6CiAgICAgICAgICAgICAgICAjICAgICAgICAgZGlhbG9nX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGRpYWxvZykKICAgICAgICAgICAgICAgICMgICAgICAgICBpZiBhbnkoa2V5d29yZCBpbiBkaWFsb2dfdGV4dC5sb3dlcigpIGZvciBrZXl3b3JkIGluIFsidGjhu60gbOG6oWkgc2F1IiwgImdp4bubaSBo4bqhbiIsICJsaW1pdCIsICJ0cnkgYWdhaW4iXSk6CiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICMgVMOsbSB2w6AgbmjhuqVuIG7DunQgT0svxJDDs25nCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIG9rX2J1dHRvbnMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoc2NyZWVuX3htbCwgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgZm9yIGJ0biBpbiBva19idXR0b25zOgogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgYnRuX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGJ0bikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgIGlmIGJ0bl90ZXh0IGFuZCBidG5fdGV4dC5sb3dlcigpIGluIFsib2siLCAixJHDs25nIiwgInTDtGkgaGnhu4N1IiwgIsSR4buTbmcgw70iXToKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnRuKQogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIkpvYiBraMO0bmcgaG/DoG4gdGjDoG5oLCBi4buLIGdp4bubaSBo4bqhbiB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICByZXR1cm4gMwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgdGV4dCBzYXUga2hpIG5o4bqlbiB0aGVvIGTDtWkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gbOG6oWkgbsO6dCBmb2xsb3cgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIC0gxrB1IHRpw6puIHRoZW8gcmVzb3VyY2UtaWQgbuG6v3UgY8OzCiAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3UgY8OzIHJlc291cmNlX2lkLCB0w6xtIHRoZW8gcmVzb3VyY2VfaWQgdHLGsOG7m2MKICAgICAgICAgICAgICAgIGlmIGJ1dHRvbl9yZXNvdXJjZV9pZDoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9YnV0dG9uX3Jlc291cmNlX2lkKQogICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdMOsbSBs4bqhaSBuw7p0IGZvbGxvdyB0aGVvIHJlc291cmNlLWlkOiB7YnV0dG9uX3Jlc291cmNlX2lkfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IHRoZW8gcmVzb3VyY2VfaWQgaG/hurdjIGtow7RuZyBjw7MgcmVzb3VyY2VfaWQsIHTDrG0gdGhlbyB0ZXh0CiAgICAgICAgICAgICAgICBpZiBub3QgdXBkYXRlZF9mb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwgIlRoZW8gZMO1aSIsICJGb2xsb3ciXQogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXBkYXRlZF9mb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBGYWxsYmFjazogdMOsbSB0aGVvIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfZGVzY3MgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdCiAgICAgICAgICAgICAgICAgICAgZm9yIGRlc2MgaW4gZm9sbG93X2Rlc2NzOgogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPWRlc2MpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHVwZGF0ZWRfZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3Jlc291cmNlX2lkID0gdXBkYXRlZF9mb2xsb3dfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU2F1IGtoaSBjbGljayBmb2xsb3c6IHRleHQ9J3t1cGRhdGVkX3RleHR9JywgcmVzb3VyY2UtaWQ9J3t1cGRhdGVkX3Jlc291cmNlX2lkfSciKQogICAgICAgICAgICAgICAgICAgICMgVHJpbSB3aGl0ZXNwYWNlIHThu6sgdXBkYXRlZF90ZXh0CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF90ZXh0ID0gdXBkYXRlZF90ZXh0LnN0cmlwKCkKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OhYyB0csaw4budbmcgaOG7o3Aga2jDoWMgbmhhdQogICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCAiTmjhuq9uIHRpbiIsICJNZXNzYWdlIl06CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkZvbGxvdyB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBn4butaSB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0aMOgbmggY8O0bmchIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUKICAgICAgICAgICAgICAgICAgICBlbGlmIHVwZGF0ZWRfdGV4dCBpbiBbIlRoZW8gZMO1aSIsICJGb2xsb3ciXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJGb2xsb3cga2jDtG5nIHRow6BuaCBjw7RuZywgdGV4dCBj4bunYSBuw7p0IHbhuqtuIGzDoDoge3VwZGF0ZWRfdGV4dH0iKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiRm9sbG93IGtow7RuZyB0aMOgbmggY8O0bmcsIHRleHQgY+G7p2EgbsO6dCBsw6A6IHt1cGRhdGVkX3RleHR9IikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCwgY8OzIHRo4buDIMSRw6MgZm9sbG93IHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGZvbGxvdyBzYXUga2hpIG5o4bqlbiwgZ2nhuqMgxJHhu4tuaCDEkcOjIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVGV4dCBj4bunYSBuw7p0IGtow7RuZyBraOG7m3AgduG7m2kgJ1RoZW8gZMO1aScgaG/hurdjICdGb2xsb3cnOiB7YnV0dG9uX3RleHR9IikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGpvYiBmb2xsb3c6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfcGFnZShzZWxmLCBwcm9maWxlX2xpbms6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBN4bufIHRyYW5nIHByb2ZpbGUgVGlrVG9rIGLhurFuZyB0w6xtIGtp4bq/bSBob+G6t2MgbGluayB0cuG7sWMgdGnhur9wCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIMSR4bq/biB0cmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgVVJMIFRpa1RvawogICAgICAgICAgICB1c2VybmFtZV9tYXRjaCA9IHJlLnNlYXJjaChyJ3Rpa3Rva1wuY29tL0AoW14vP10rKScsIHByb2ZpbGVfbGluaykKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX21hdGNoOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgdHLDrWNoIHh14bqldCB1c2VybmFtZSB04burIGxpbms6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWVfbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiAxIHRyb25nIDIgY8OhY2g6IHTDrG0ga2nhur9tIGhv4bq3YyBt4bufIHRy4buxYyB0aeG6v3AgbGluawogICAgICAgICAgICBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBGYWxzZV0pOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdHJhbmcgY8OhIG5ow6JuIGLhurFuZyBjw6FjaCB0w6xtIGtp4bq/bToge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAjIFRo4butIG3hu58gYuG6sW5nIHTDrG0ga2nhur9tCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX2J5X3NlYXJjaCh1c2VybmFtZSk6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIGtp4bq/bSB0aOG6pXQgYuG6oWksIGZhbGxiYWNrIHNhbmcgbeG7nyBsaW5rCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVMOsbSBraeG6v20gdGjhuqV0IGLhuqFpLCBt4bufIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3AiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluaykKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgQ8OhY2ggMjogTeG7nyB0cuG7sWMgdGnhur9wIFVSTCB0aMO0bmcgcXVhIGhlbHBlci5vcGVuX3VybCgpCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTeG7nyB0cmFuZyBjw6EgbmjDom4gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cDoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIHbDoG8gxJHDum5nIHByb2ZpbGUga2jDtG5nIGLhurFuZyBjw6FjaCB0w6xtIGJ1dHRvbiBjw7MgdGV4dCA9IEB1c2VybmFtZQogICAgICAgICAgICAjIFTDrG0gYnV0dG9uIGPDsyB0ZXh0IGNow61uaCB4w6FjIGLhurFuZyBAdXNlcm5hbWUgKFRpa1RvayBsdcO0biBjw7MgQCB0csaw4bubYyB1c2VybmFtZSkKICAgICAgICAgICAgYXRfdXNlcm5hbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9ZiJAe3VzZXJuYW1lfSIpCiAgICAgICAgICAgIGlmIGF0X3VzZXJuYW1lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHjDoWMgbmjhuq1uIHbDoG8gxJHDum5nIHByb2ZpbGUgY+G7p2Ege3VzZXJuYW1lfSAodMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0OiAnQHt1c2VybmFtZX0nKSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0ID0gJ0B7dXNlcm5hbWV9JyB0csOqbiBtw6BuIGjDrG5oLCBjw7MgdGjhu4Mga2jDtG5nIHbDoG8gxJHDum5nIHByb2ZpbGUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIG3hu58gdHJhbmcgcHJvZmlsZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHNlbGYsIHVzZXJuYW1lOiBzdHIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTeG7nyB0cmFuZyBwcm9maWxlIFRpa1RvayBi4bqxbmcgY8OhY2ggdMOsbSBraeG6v20gdXNlcm5hbWUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1c2VybmFtZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIGPhuqduIHTDrG0KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUw6xtIHRhYiB0w6xtIGtp4bq/bQogICAgICAgICAgICBzZWFyY2hfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVMOsbSBraeG6v20iKQogICAgICAgICAgICBpZiBub3Qgc2VhcmNoX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFTDrG0ga2nhur9tIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgVMOsbSDDtCBuaOG6rXAgdMOsbSBraeG6v20KICAgICAgICAgICAgc2VhcmNoX2lucHV0ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkVkaXRUZXh0IikKICAgICAgICAgICAgaWYgbm90IHNlYXJjaF9pbnB1dDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgw7Qgbmjhuq1wIHTDrG0ga2nhur9tIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6rXAgdXNlcm5hbWUgY+G6p24gdMOsbQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2lucHV0KQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIuaW5wdXRfdGV4dChmInt1c2VybmFtZX0iKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgQ2jhu50ga+G6v3QgcXXhuqMgdMOsbSBraeG6v20KCiAgICAgICAgICAgICMgVMOsbSBuw7p0IFTDrG0ga2nhur9tIHbDoCBjbGljawogICAgICAgICAgICBzZWFyY2hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9IlTDrG0ga2nhur9tIikKICAgICAgICAgICAgaWYgc2VhcmNoX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IG7DunQgJ1TDrG0ga2nhur9tJywgxJFhbmcgY2xpY2suLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0ICdUw6xtIGtp4bq/bSciKQogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIHNlYXJjaCB24bubaSBlbnRlciBrZXkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2VudGVyKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKSAKCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHRhYiAiTmfGsOG7nWkgZMO5bmciIHbDoCBjbGljayB2w6BvIG7DswogICAgICAgICAgICB1c2VyX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJOZ8aw4budaSBkw7luZyIpCiAgICAgICAgICAgIGlmIG5vdCB1c2VyX3RhYjoKICAgICAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iTmfGsOG7nWkgZMO5bmciKQoKICAgICAgICAgICAgaWYgdXNlcl90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgTmfGsOG7nWkgZMO5bmcsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIE5nxrDhu51pIGTDuW5nIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gVGV4dFZpZXcgY8OzIHRleHQgY2jDrW5oIHjDoWMgYuG6sW5nIHVzZXJuYW1lIChraMO0bmcgY8OzIEApCiAgICAgICAgICAgIHVzZXJuYW1lX2VsZW1lbnQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuVGV4dFZpZXciLHRleHQ9dXNlcm5hbWUpCgogICAgICAgICAgICBpZiB1c2VybmFtZV9lbGVtZW50OgogICAgICAgICAgICAgICAgIyBDbGljayB2w6BvIGVsZW1lbnQgxJHhuqd1IHRpw6puIHTDrG0gxJHGsOG7o2MKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSwgxJFhbmcgY2xpY2sgdsOgby4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIodXNlcm5hbWVfZWxlbWVudCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt1c2VybmFtZX0gdHJvbmcga+G6v3QgcXXhuqMgdMOsbSBraeG6v20iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdMOsbSBraeG6v20gdMOgaSBraG/huqNuOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3BlcmZvcm1fbGlrZV9qb2Ioc2VsZiwgcG9zdF9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBsaWtlIHZpZGVvIHRyw6puIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBvc3RfbGluazogTGluayDEkeG6v24gdmlkZW8gY+G6p24gbGlrZQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiDEkcOjIGxpa2UgdHLGsOG7m2MgxJHDsykKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdmlkZW8gVGlrVG9rIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3A6IHtwb3N0X2xpbmt9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyB0cuG7sWMgdGnhur9wIFVSTCB0aMO0bmcgcXVhIGhlbHBlci5vcGVuX3VybCgpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHBvc3RfbGluaykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIG5naOG7iSAzLTEwIGdpw6J5IG5oxrAgbmfGsOG7nWkgZMO5bmcgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICB3YWl0X3RpbWUgPSByYW5kb20ucmFuZGludCgzLCAxMCkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIG5naOG7iSB7d2FpdF90aW1lfXMgbmjGsCBuZ8aw4budaSBkw7luZyB0aMO0bmcgdGjGsOG7nW5nLi4uIikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXRfdGltZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGxpa2UgYuG6sW5nIGNvbnRlbnQtZGVzYyAiVGjDrWNoIHZpZGVvLiIKICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgdHLDqm4gbcOgbiBow6xuaCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0aMO0bmcgdGluIG7DunQgbGlrZSBiYW4gxJHhuqd1CiAgICAgICAgICAgIGluaXRpYWxfY29udGVudF9kZXNjID0gbGlrZV9idXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9yZXNvdXJjZV9pZCA9IGxpa2VfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9zZWxlY3RlZCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVHLhuqFuZyB0aMOhaSBuw7p0IGxpa2UgYmFuIMSR4bqndTogc2VsZWN0ZWQ9e2luaXRpYWxfc2VsZWN0ZWR9LCBjb250ZW50LWRlc2M9J3tpbml0aWFsX2NvbnRlbnRfZGVzY30nLCByZXNvdXJjZS1pZD0ne2luaXRpYWxfcmVzb3VyY2VfaWR9JyIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgxJHDoyBsaWtlIHThu6sgdHLGsOG7m2MKICAgICAgICAgICAgaWYgaW5pdGlhbF9zZWxlY3RlZCBvciAiQuG7jyB0aMOtY2giIGluIGluaXRpYWxfY29udGVudF9kZXNjIG9yICJVbmxpa2UiIGluIGluaXRpYWxfY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVmlkZW8gxJHDoyDEkcaw4bujYyBsaWtlIHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmVzdWx0ID0gMyAgIyDEkMOjIGxpa2UgdHLGsOG7m2MgxJHDswogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGxpa2UgdmlkZW8KICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuX2F0dGVtcHRfbGlrZV92aWRlbyhsaWtlX2J1dHRvbikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2F1IGtoaSBsaWtlIHhvbmcsIHZ14buRdCByYW5kb20gMi01IHZpZGVvIHLhu5NpIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgcmVzdWx0ID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgc2VsZi5fc2Nyb2xsX3ZpZGVvc19hbmRfcmV0dXJuX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2IgbGlrZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgoKICAgIGRlZiBfZmluZF9saWtlX2J1dHRvbihzZWxmKToKICAgICAgICAiIiJUw6xtIG7DunQgbGlrZSB0csOqbiBtw6BuIGjDrG5oIiIiCiAgICAgICAgIyBUw6xtIHRoZW8gY29udGVudC1kZXNjICJUaMOtY2ggdmlkZW8uIgogICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgIGFsbF9idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIpCiAgICAgICAgCiAgICAgICAgZm9yIGJ1dHRvbiBpbiBhbGxfYnV0dG9uczoKICAgICAgICAgICAgY29udGVudF9kZXNjID0gYnV0dG9uLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgIGlmIGNvbnRlbnRfZGVzYy5zdGFydHN3aXRoKCJUaMOtY2ggdmlkZW8uIik6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgbsO6dCBsaWtlIHbhu5tpIGNvbnRlbnQtZGVzYzogJ3tjb250ZW50X2Rlc2N9JyIpCiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uCiAgICAgICAgCiAgICAgICAgIyBGYWxsYmFjazogdMOsbSB0aGVvIGPDoWMgY8OhY2gga2jDoWMKICAgICAgICBsaWtlX2lkcyA9IFsKICAgICAgICAgICAgImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbDppZC9saWtlX2J0biIsCiAgICAgICAgICAgICJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGw6aWQvYnRuX2xpa2UiLCAKICAgICAgICAgICAgImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbDppZC9saWtlX2J1dHRvbiIKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgZm9yIGxpa2VfaWQgaW4gbGlrZV9pZHM6CiAgICAgICAgICAgIGJ1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChyZXNvdXJjZV9pZD1saWtlX2lkKQogICAgICAgICAgICBpZiBidXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgbsO6dCBsaWtlIHRoZW8gcmVzb3VyY2UtaWQ6IHtsaWtlX2lkfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uCiAgICAgICAgCiAgICAgICAgIyBUw6xtIHRoZW8gY29udGVudC1kZXNjIGtow6FjCiAgICAgICAgbGlrZV9kZXNjcyA9IFsiVGjDrWNoIiwgIkxpa2UiLCAiQuG7jyB0aMOtY2giLCAiVW5saWtlIl0KICAgICAgICBmb3IgZGVzYyBpbiBsaWtlX2Rlc2NzOgogICAgICAgICAgICBidXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPWRlc2MpCiAgICAgICAgICAgIGlmIGJ1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6xtIHRo4bqleSBuw7p0IGxpa2UgdGhlbyBjb250ZW50LWRlc2M6IHtkZXNjfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uCiAgICAgICAgCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgX2F0dGVtcHRfbGlrZV92aWRlbyhzZWxmLCBsaWtlX2J1dHRvbik6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiBsaWtlIHZpZGVvLCDGsHUgdGnDqm4gYuG6pW0gcmFuZG9tIHThu41hIMSR4buZLCBmYWxsYmFjayBzYW5nIGLhuqVtIG7DunQgbGlrZSIiIgogICAgICAgICMgTOG6pXkga8OtY2ggdGjGsOG7m2MgbcOgbiBow6xuaCDEkeG7gyB0w61uaCB04buNYSDEkeG7mSByYW5kb20KICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAKICAgICAgICAjIFRo4butIGLhuqVtIHJhbmRvbSB04buNYSDEkeG7mSB0csaw4bubYyAoZG91YmxlIGNsaWNrKQogICAgICAgIHggPSBpbnQod2lkdGggKiByYW5kb20udW5pZm9ybSgwLjYsIDAuNykpCiAgICAgICAgeSA9IGludChoZWlnaHQgKiByYW5kb20udW5pZm9ybSgwLjYsIDAuOCkpCiAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRo4butIGRvdWJsZSBjbGljayB04bqhaSB04buNYSDEkeG7mSAoe3h9LCB7eX0pIMSR4buDIGxpa2UgdmlkZW8iKQogICAgICAgIAogICAgICAgICMgVGjhu7FjIGhp4buHbiBkb3VibGUgY2xpY2sKICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC4xKQogICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKSAgIyBDaOG7nSBhbmltYXRpb24KICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMgc2F1IGRvdWJsZSBjbGljawogICAgICAgIGxpa2VfYnV0dG9uX2FmdGVyX2RvdWJsZSA9IHNlbGYuX2ZpbmRfbGlrZV9idXR0b24oKQogICAgICAgIGlmIGxpa2VfYnV0dG9uX2FmdGVyX2RvdWJsZToKICAgICAgICAgICAgaXNfc2VsZWN0ZWQgPSBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uX2FmdGVyX2RvdWJsZSkKICAgICAgICAgICAgY29udGVudF9kZXNjID0gbGlrZV9idXR0b25fYWZ0ZXJfZG91YmxlLmdldCgiY29udGVudC1kZXNjIiwgIiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU2F1IGRvdWJsZSBjbGljazogc2VsZWN0ZWQ9e2lzX3NlbGVjdGVkfSwgY29udGVudC1kZXNjPSd7Y29udGVudF9kZXNjfSciKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaXNfc2VsZWN0ZWQgb3IgIkLhu48gdGjDrWNoIiBpbiBjb250ZW50X2Rlc2Mgb3IgIlVubGlrZSIgaW4gY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIHZpZGVvIHRow6BuaCBjw7RuZyBi4bqxbmcgZG91YmxlIGNsaWNrIikKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSBkb3VibGUgY2xpY2sga2jDtG5nIHRow6BuaCBjw7RuZywgYuG6pW0gdHLhu7FjIHRp4bq/cCB2w6BvIG7DunQgbGlrZQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkRvdWJsZSBjbGljayBjaMawYSBsaWtlIMSRxrDhu6NjLCBi4bqlbSB0cuG7sWMgdGnhur9wIHbDoG8gbsO6dCBsaWtlIikKICAgICAgICAKICAgICAgICAjIEzhuqV5IGzhuqFpIHRow7RuZyB0aW4gbsO6dCBsaWtlIG3hu5tpIG5o4bqldAogICAgICAgIGN1cnJlbnRfbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBub3QgY3VycmVudF9saWtlX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgbGlrZSDEkeG7gyBi4bqlbSB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAKICAgICAgICAjIELhuqVtIHbDoG8gbsO6dCBsaWtlCiAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGN1cnJlbnRfbGlrZV9idXR0b24pCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIGvhur90IHF14bqjIHNhdSBraGkgYuG6pW0gbsO6dAogICAgICAgIGxpa2VfYnV0dG9uX2ZpbmFsID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgaWYgbGlrZV9idXR0b25fZmluYWw6CiAgICAgICAgICAgIGlzX3NlbGVjdGVkX2ZpbmFsID0gc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbl9maW5hbCkKICAgICAgICAgICAgY29udGVudF9kZXNjX2ZpbmFsID0gbGlrZV9idXR0b25fZmluYWwuZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgcmVzb3VyY2VfaWRfZmluYWwgPSBsaWtlX2J1dHRvbl9maW5hbC5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU2F1IGtoaSBi4bqlbSBuw7p0IGxpa2U6IHNlbGVjdGVkPXtpc19zZWxlY3RlZF9maW5hbH0sIGNvbnRlbnQtZGVzYz0ne2NvbnRlbnRfZGVzY19maW5hbH0nLCByZXNvdXJjZS1pZD0ne3Jlc291cmNlX2lkX2ZpbmFsfSciKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaXNfc2VsZWN0ZWRfZmluYWwgb3IgIkLhu48gdGjDrWNoIiBpbiBjb250ZW50X2Rlc2NfZmluYWwgb3IgIlVubGlrZSIgaW4gY29udGVudF9kZXNjX2ZpbmFsOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIHZpZGVvIHRow6BuaCBjw7RuZyBi4bqxbmcgY2xpY2sgbsO6dCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIGxpa2UgdmlkZW8gc2F1IGtoaSB0aOG7rSBj4bqjIDIgY8OhY2giKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBuw7p0IMSR4buDIGtp4buDbSB0cmEsIGdp4bqjIMSR4buLbmggdGjDoG5oIGPDtG5nCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgxJHhu4Mga2nhu4NtIHRyYSwgZ2nhuqMgxJHhu4tuaCB0aMOgbmggY8O0bmciKQogICAgICAgICAgICByZXR1cm4gMQoKICAgIGRlZiBfc2Nyb2xsX3ZpZGVvc19hbmRfcmV0dXJuX2hvbWUoc2VsZik6CiAgICAgICAgIiIiVnXhu5F0IHJhbmRvbSAyLTUgdmlkZW8gcuG7k2kgduG7gSB0cmFuZyBjaOG7pyIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBSYW5kb20gc+G7kSBsxrDhu6NuZyB2aWRlbyBz4bq9IHZ14buRdCAoMi01KQogICAgICAgICAgICBudW1fdmlkZW9zID0gcmFuZG9tLnJhbmRpbnQoMiwgNSkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlPhur0gdnXhu5F0IHF1YSB7bnVtX3ZpZGVvc30gdmlkZW8gdHLGsOG7m2Mga2hpIHbhu4EgdHJhbmcgY2jhu6ciKQogICAgICAgICAgICAKICAgICAgICAgICAgd2lkdGgsIGhlaWdodCA9IHNlbGYuaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShudW1fdmlkZW9zKToKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlZ14buRdCB2aWRlbyB0aOG7qSB7aSsxfS97bnVtX3ZpZGVvc30iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOZ2jhu4kgcmFuZG9tIDItNCBnacOieSBuaMawIG5nxrDhu51pIGTDuW5nIHRo4bqtdAogICAgICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMiwgNCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiSG/DoG4gdGjDoG5oIHZ14buRdCB2aWRlbywgxJFhbmcgcXVheSB24buBIHRyYW5nIGNo4bunIikKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHZ14buRdCB2aWRlbzoge3N0cihlKX0iKQogICAgICAgICAgICAjIFbhuqtuIGPhu5EgZ+G6r25nIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgIGRlZiBnZXRfam9iX3BhcmFtcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGhhbSBz4buRIMSR4buDIGfhu41pIEFQSSBs4bqleSBqb2IgY2hvIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBUaGFtIHPhu5EKICAgICAgICAiIiIKICAgICAgICBnb2xpa2VfaWQgPSBhY2NvdW50LmdldCgiZ29saWtlX2lkIikKICAgICAgICBpZiBub3QgZ29saWtlX2lkOgogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImFjY291bnRfaWQiOiBnb2xpa2VfaWQsCiAgICAgICAgICAgICJkYXRhIjogIm51bGwiCiAgICAgICAgfQogICAgICAgIAogICAgZGVmIHN5bmNfYWNjb3VudHNfdG9fZGIoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgxJDhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iyB2w6BvIGRhdGFiYXNlCiAgICAgICAgR2hpIMSRw6ggcGjGsMahbmcgdGjhu6ljIGPhu6dhIGzhu5twIGNoYSDEkeG7gyDEkeG6o20gYuG6o28gY2jhu4kgY8OzIG3hu5l0IHTDoGkga2hv4bqjbiDEkcaw4bujYyDEkcOhbmggZOG6pXUgbMOgIMSRYW5nIGxvZ2luCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIGxvZ2luIGNobyB04bqldCBj4bqjIHTDoGkga2hv4bqjbiBUaWtUb2sgdHJvbmcgREIKICAgICAgICAgICAgc2VsZi5kYi5yZXNldF9sb2dpbl9zdGF0dXNfYnlfYXBwKHNlbGYuYXBwX25hbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGRldmljZV9hY2NvdW50cyA9IHNlbGYuZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IGhv4bq3YyB0aMOqbSBt4bubaSB2w6BvIERCCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICMgVGjDqm0gdGjDtG5nIHRpbiBhcHAKICAgICAgICAgICAgICAgIGFjY291bnRbImFwcCJdID0gc2VsZi5hcHBfbmFtZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgdMOgaSBraG/huqNuIMSRw6MgdOG7k24gdOG6oWkgY2jGsGEKICAgICAgICAgICAgICAgIGV4aXN0aW5nX2FjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHMoCiAgICAgICAgICAgICAgICAgICAgYXBwPXNlbGYuYXBwX25hbWUsIAogICAgICAgICAgICAgICAgICAgIHN0YXR1cz0iYWN0aXZlIiBpZiBhY2NvdW50LmdldCgiaXNfbG9naW4iLCBGYWxzZSkgZWxzZSBOb25lCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSB0w6BpIGtob+G6o24gdHJvbmcgREIgZOG7sWEgdsOgbyB1bmlxdWVfdXNlcm5hbWUKICAgICAgICAgICAgICAgIGV4aXN0aW5nX2FjY291bnQgPSBOb25lCiAgICAgICAgICAgICAgICBmb3IgYWNjIGluIGV4aXN0aW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgICAgIGlmIGFjYy5nZXQoInVuaXF1ZV91c2VybmFtZSIpID09IGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKToKICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudCA9IGFjYwogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBleGlzdGluZ19hY2NvdW50OgogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBleGlzdGluZ19hY2NvdW50WyJpZCJdCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCBhY2NvdW50KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIFRow6ptIHTDoGkga2hv4bqjbiBt4bubaQogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuYWRkX2FjY291bnQoYWNjb3VudCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZGV2aWNlX2FjY291bnRzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgbWFwX2dvbGlrZV9hY2NvdW50cyhzZWxmLCBnb2xpa2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dLCBkZXZpY2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICDDgW5oIHjhuqEgdMOgaSBraG/huqNuIHThu6sgR29MaWtlIHbDoG8gdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgQVBJCiAgICAgICAgICAgIGRldmljZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiDEkcOjIMOhbmggeOG6oQogICAgICAgICIiIgogICAgICAgIG1hcHBlZF9hY2NvdW50cyA9IFtdCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSB04burIEdvTGlrZQogICAgICAgICAgICBnb2xpa2VfZGF0YSA9IHt9CiAgICAgICAgICAgIGZvciBhY2MgaW4gZ29saWtlX2FjY291bnRzOgogICAgICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHRow7RuZyB0aW4gdOG7qyB0w6BpIGtob+G6o24gR29MaWtlCiAgICAgICAgICAgICAgICBnb2xpa2VfYWNjb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICAiZ29saWtlX2lkIjogYWNjLmdldCgiaWQiKSwKICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiBhY2MuZ2V0KCJuaWNrbmFtZSIpLAogICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfaWQiOiBhY2MuZ2V0KCJ1bmlxdWVfaWQiKSwKICAgICAgICAgICAgICAgICAgICAidW5pcXVlX3VzZXJuYW1lIjogYWNjLmdldCgidW5pcXVlX3VzZXJuYW1lIiksCiAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGFjYy5nZXQoImF2YXRhcl90aHVtYiIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU+G7rSBk4bulbmcgdW5pcXVlX3VzZXJuYW1lIGzDoG0ga2jDs2EgxJHhu4MgZOG7hSDDoW5oIHjhuqEKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZ29saWtlX2FjY291bnRbInVuaXF1ZV91c2VybmFtZSJdCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBnb2xpa2VfZGF0YVt1c2VybmFtZS5sb3dlcigpXSA9IGdvbGlrZV9hY2NvdW50CiAgICAgICAgICAgIAogICAgICAgICAgICAjIMOBbmggeOG6oSB24bubaSB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGZvciBkZXZpY2VfYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGRldmljZV9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgaW4gZ29saWtlX2RhdGE6CiAgICAgICAgICAgICAgICAgICAgIyDEkMOjIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB0cm9uZyBkYW5oIHPDoWNoIEdvTGlrZQogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICAgICAgZ29saWtlX2luZm8gPSBnb2xpa2VfZGF0YVt1c2VybmFtZV0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJnb2xpa2VfaWQiOiBnb2xpa2VfaW5mb1siZ29saWtlX2lkIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICJpc19nb2xpa2VfbGlua2VkIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGdvbGlrZV9pbmZvWyJhdmF0YXJfdGh1bWIiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoImF2YXRhcl90aHVtYiIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGdvbGlrZV9pbmZvWyJ1bmlxdWVfaWQiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoInVuaXF1ZV9pZCIsICIiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gSUQgdMOgaSBraG/huqNuIHRyb25nIERCCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGRldmljZV9hY2NvdW50LmdldCgiaWQiKQogICAgICAgICAgICAgICAgICAgIGlmIGFjY291bnRfaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHbDoG8gREIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdsOgbyBkZXZpY2VfYWNjb3VudAogICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfYWNjb3VudC51cGRhdGUodXBkYXRlX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZF9hY2NvdW50cy5hcHBlbmQoZGV2aWNlX2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDDoW5oIHjhuqEgdMOgaSBraG/huqNuIFRpa1Rvazoge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gbWFwcGVkX2FjY291bnRzCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIMOhbmggeOG6oSB0w6BpIGtob+G6o24gVGlrVG9rIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBfbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkGnhu4F1IGjGsOG7m25nIMSR4bq/biB0YWIgaOG7kyBzxqEgVGlrVG9rCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdsOgIGLhuqVtIHbDoG8gbsO6dCAiSOG7kyBzxqEiCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBwcm9maWxlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJI4buTIHPGoSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcHJvZmlsZV9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgSOG7kyBzxqEiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB2w6AgeOG7rSBsw70gZGlhbG9nICJLaMO0bmcgY2hvIHBow6lwIiBu4bq/dSBjw7MKICAgICAgICAgICAgbm90X2FsbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJLaMO0bmcgY2hvIHBow6lwIikKICAgICAgICAgICAgaWYgbm90X2FsbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBkaWFsb2cgJ0tow7RuZyBjaG8gcGjDqXAnLCDEkWFuZyBjbGljayDEkeG7gyDEkcOzbmcuLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG5vdF9hbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB2w6AgeOG7rSBsw70gZGlhbG9nICJMxrB1IGzhuqFpIMSRxINuZyBuaOG6rXAgbOG6p24gc2F1IiBu4bq/dSBjw7MKICAgICAgICAgICAgc2F2ZV9sb2dpbl9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iTMawdSBs4bqhaSDEkcSDbmcgbmjhuq1wIGzhuqduIHNhdSIpCiAgICAgICAgICAgIGlmIHNhdmVfbG9naW5fYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZyAnTMawdSBs4bqhaSDEkcSDbmcgbmjhuq1wIGzhuqduIHNhdScsIMSRYW5nIGNsaWNrIMSR4buDIMSRw7NuZy4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2F2ZV9sb2dpbl9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCgogICAgICAgICAgICAjIFZ14buRdCBsw6puIDEgbOG6p24gxJHhu4MgdOG6o2kgxJHhuqd5IMSR4bunIG7hu5lpIGR1bmcKICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgxJFp4buBdSBoxrDhu5tuZyDEkeG6v24gdGFiIGjhu5Mgc8ahIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBfb3Blbl9wcm9maWxlX21lbnUoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBN4bufIG1lbnUgaOG7kyBzxqEgKGRhbmggc8OhY2ggdMOgaSBraG/huqNuKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJBp4buBdSBoxrDhu5tuZyDEkeG6v24gdGFiIGjhu5Mgc8ahCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9uYXZpZ2F0ZV90b19wcm9maWxlX3RhYigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCBtZW51IGjhu5Mgc8ahCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBtZW51X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJNZW51IGjhu5Mgc8ahIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBtZW51X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBNZW51IGjhu5Mgc8ahIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdOG7jWEgxJHhu5kgY+G7p2EgbsO6dCBtZW51IHbDoCBjbGljayB24bubaSDEkeG7mSBs4buHY2ggbmfhuqt1IG5oacOqbgogICAgICAgICAgICBib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMobWVudV9idXR0b24pCiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gYm91bmRzCiAgICAgICAgICAgIHkgPSAoKHkyIC0geTEpIC8vIDIpICsgeTEKICAgICAgICAgICAgeCA9IHgyIC8vIDIKICAgICAgICAgICAgeCArPSByYW5kb20ucmFuZGludCgtMTAsIDEwKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBt4bufIG1lbnUgaOG7kyBzxqEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgaXNfaG9tZV9zY3JlZW4oc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSBjw7MgxJFhbmcg4bufIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgVGlrVG9rIGhheSBraMO0bmcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRYW5nIOG7nyB0cmFuZyBjaOG7pywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OzIG7DunQgIlRyYW5nIGNo4bunIiDEkcaw4bujYyBjaOG7jW4gKHNlbGVjdGVkPXRydWUpIHRyb25nIHRoYW5oIHRhYiBraMO0bmcKICAgICAgICAgICAgaG9tZV90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIGlmIGhvbWVfdGFiOgogICAgICAgICAgICAgICAgaWYgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChob21lX3RhYik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6xtIHRo4bqleSB0YWIgIlRyYW5nIGNo4bunIiBuaMawbmcgY2jGsGEgxJHGsOG7o2MgY2jhu41uLCBjbGljayB2w6BvIMSRw7MKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBjw6FjIHnhur91IHThu5EgY+G7p2EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkga2nhu4NtIHRyYSBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBlbnN1cmVfaG9tZV9zY3JlZW4oc2VsZiwgbWF4X3JldHJpZXM6IGludCA9IDMpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvaywgbuG6v3Uga2jDtG5nIHRow6wga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgbWF4X3JldHJpZXM6IFPhu5EgbOG6p24gdGjhu60gdOG7kWkgxJFhCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAiIiIKICAgICAgICByZXRyeV9jb3VudCA9IDAKICAgICAgICAKICAgICAgICB3aGlsZSByZXRyeV9jb3VudCA8IG1heF9yZXRyaWVzOgogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gdHJhbmcgY2jhu6cga2jDtG5nCiAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcg4bufIHRyYW5nIGNo4bunLCDEkcOzbmcgdsOgIG3hu58gbOG6oWkgYXBwCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyBwaOG6o2kgdHJhbmcgY2jhu6cgVGlrVG9rLCBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAuLi4iKQogICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQogICAgICAgICAgICBpZiBub3Qgc2VsZi52YWxpZGF0ZV9hcHBfbm90X2Jhbm5lZCgpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIHJldHJ5X2NvdW50ICs9IDEKICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgbeG7nyB0cmFuZyBjaOG7pyBUaWtUb2sgc2F1IHttYXhfcmV0cmllc30gbOG6p24gdGjhu60iKQogICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgZGVmIHZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyBraMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIGLhu4sgYmFubmVkCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyBj4bqjbmggYsOhbyBjaHVuZwogICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIkPhuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawIgogICAgICAgIHByaXZhY3lfdXBkYXRlX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICB0ZXh0PSJD4bqtcCBuaOG6rXQgQ2jDrW5oIHPDoWNoIHF1eeG7gW4gcmnDqm5nIHTGsCIKICAgICAgICApCgogICAgICAgIGlmIHByaXZhY3lfdXBkYXRlX2VsZW1lbnRzOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nICdD4bqtcCBuaOG6rXQgQ2jDrW5oIHPDoWNoIHF1eeG7gW4gcmnDqm5nIHTGsCcsIMSRYW5nIHjhu60gbMO9Li4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0ICLEkMOjIGhp4buDdSIgdsOgIGLhuqVtIHRy4buxYyB0aeG6v3AKICAgICAgICAgICAgdW5kZXJzdGFuZF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0ixJDDoyBoaeG7g3UiKQogICAgICAgICAgICBpZiB1bmRlcnN0YW5kX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih1bmRlcnN0YW5kX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFRo4butIHTDrG0gduG7m2kgY8OhYyB0ZXh0IGtow6FjCiAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBbIlRp4bq/cCB04bulYyIsICLEkOG7k25nIMO9IiwgIkNvbnRpbnVlIiwgIkFncmVlIiwgIkNo4bqlcCBuaOG6rW4iLCAiQWNjZXB0Il06CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBidXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihidXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAKICAgICAgICAjIFTDrG0gZGlhbG9nIGPhuqNuaCBiw6FvIGLhurFuZyBJRCBob+G6t2MgY29udGVudC1kZXNjIGPDsyBjaOG7qWEgImPhuqNuaCBiw6FvIiwgImzhu5dpIiwgInRow7RuZyBiw6FvIgogICAgICAgIGFsZXJ0X2RpYWxvZ3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQuYXBwLkRpYWxvZyIKICAgICAgICApCiAgICAgICAgCiAgICAgICAgZm9yIGRpYWxvZyBpbiBhbGVydF9kaWFsb2dzOgogICAgICAgICAgICAjIFTDrG0gdGV4dCB0cm9uZyBkaWFsb2cKICAgICAgICAgICAgdGV4dF92aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIHRleHRfdmlldyBpbiB0ZXh0X3ZpZXdzOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodGV4dF92aWV3KQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgYW55KGtleXdvcmQgaW4gdGV4dC5sb3dlcigpIGZvciBrZXl3b3JkIGluIFsiY+G6o25oIGLDoW8iLCAibOG7l2kiLCAidGjDtG5nIGLDoW8iLCAiYuG7iyBraMOzYSIsICJ2aSBwaOG6oW0iXSk6CiAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIGPhuqNuaCBiw6FvIGhp4buHbiB04bqhaSB04burIGRiCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF93YXJuaW5ncyA9IHNlbGYuZGIuZ2V0KCJsb2dzLXdhcm5pbmctbWVzc2FnZSIsIFtdKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVGjDqm0gY+G6o25oIGLDoW8gbeG7m2kKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzIjogdGV4dAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaOG7iSBnaeG7ryBs4bqhaSB04buRaSDEkWEgMjAgbG9nIGfhuqduIG5o4bqldAogICAgICAgICAgICAgICAgICAgIGlmIGxlbihjdXJyZW50X3dhcm5pbmdzKSA+IDIwOgogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzID0gY3VycmVudF93YXJuaW5nc1stMjA6XQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTMawdSBs4bqhaSB2w6BvIGRiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImxvZ3Mtd2FybmluZy1tZXNzYWdlIiwgY3VycmVudF93YXJuaW5ncykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYixJDDoyBsxrB1IGPhuqNuaCBiw6FvIFRpa1Rvazoge3RleHR9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCBPSyBob+G6t2MgxJDDs25nIMSR4buDIMSRw7NuZyBkaWFsb2cKICAgICAgICAgICAgICAgICAgICBidXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBidXR0b24gaW4gYnV0dG9uczoKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgYW5kIGJ1dHRvbl90ZXh0Lmxvd2VyKCkgaW4gWyJvayIsICLEkcOzbmciLCAidMO0aSBoaeG7g3UiLCAixJHhu5NuZyDDvSJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgQ8OzIGPhuqNuaCBiw6FvIHRow6wgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIFRydWUgICMgS2jDtG5nIGPDsyBj4bqjbmggYsOhbwogICAgICAgIAogICAgZGVmIGJhY2tfdG9faG9tZShzZWxmLCBtYXhfYmFja19jb3VudDogaW50ID0gNSwgbWF4X3JldHJpZXM6IGludCA9IDEpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgUXVheSBs4bqhaSBtw6BuIGjDrG5oIHRyYW5nIGNo4bunIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1heF9iYWNrX2NvdW50OiBT4buRIGzhuqduIG5o4bqlbiBCYWNrIHThu5FpIMSRYSB0csaw4bubYyBraGkgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwCiAgICAgICAgICAgIG1heF9yZXRyaWVzOiBT4buRIGzhuqduIHRo4butIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcCB04buRaSDEkWEKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyDhu58gdHJhbmcgY2jhu6cgY2jGsGEKICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQYW5nIHTDrG0gY8OhY2ggcXVheSB24buBIHRyYW5nIGNo4bunIFRpa1Rvay4uLiIpCiAgICAgICAgCiAgICAgICAgIyBUaOG7rSBs4bqhaSB0b8OgbiBi4buZIHF1w6EgdHLDrG5oIHThu5FpIMSRYSBtYXhfcmV0cmllcyBs4bqnbgogICAgICAgIGZvciByZXRyeSBpbiByYW5nZShtYXhfcmV0cmllcyk6CiAgICAgICAgICAgICMgVGjhu60gYuG6pW0gbsO6dCBiYWNrIHThu5FpIMSRYSBtYXhfYmFja19jb3VudCBs4bqnbgogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShtYXhfYmFja19jb3VudCk6CiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgduG7gSB0cmFuZyBjaOG7pyBjaMawYQogICAgICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHF1YXkgduG7gSB0cmFuZyBjaOG7pyBzYXUge2krMX0gbOG6p24gYuG6pW0gYmFjayAobOG6p24gdGjhu60ge3JldHJ5KzF9KSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgduG6q24ga2jDtG5nIHbhu4EgxJHGsOG7o2MgdHJhbmcgY2jhu6csIGtpbGwgYXBwIHbDoCBt4bufIGzhuqFpCiAgICAgICAgICAgIGlmIHJldHJ5IDwgbWF4X3JldHJpZXMgLSAxOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIktow7RuZyB0aOG7gyB24buBIHRyYW5nIGNo4bunIHNhdSB7bWF4X2JhY2tfY291bnR9IGzhuqduIGLhuqVtIGJhY2ssIHRo4butIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcCAobOG6p24gdGjhu60ge3JldHJ5KzF9L3ttYXhfcmV0cmllc30pLi4uIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgc2F1IHttYXhfYmFja19jb3VudH0gbOG6p24gYuG6pW0gYmFjayAobOG6p24gdGjhu60gY3Xhu5FpIHtyZXRyeSsxfS97bWF4X3JldHJpZXN9KS4uLiIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIuY2xvc2VfYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkKCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gY8OzIOG7nyB0cmFuZyBjaOG7pyBraMO0bmcKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgcXVheSB24buBIHRyYW5nIGNo4bunIHNhdSBraGkga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0pIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgduG7gSB0cmFuZyBjaOG7pyBuZ2F5IGPhuqMgc2F1IHttYXhfcmV0cmllc30gbOG6p24gdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHN3aXRjaF9hY2NvdW50KHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBDaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiBUaWtUb2sga2jDoWMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXJnZXRfYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBjaHV54buDbiB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRhcmdldF91c2VybmFtZSA9IHRhcmdldF9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24gVGlrVG9rOiB7dGFyZ2V0X3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVsOgbyB0cmFuZyBo4buTIHPGoQogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVnXhu5F0IGzDqm4gMSBs4bqnbgogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gbWVudSBo4buTIHPGoQogICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX21lbnUoKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgYWRkX2FjY291bnRfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow6ptIHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgYWRkX2FjY291bnRfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBtZW51IHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuCiAgICAgICAgICAgIGFjY291bnRfYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIHRhcmdldF9pdGVtID0gTm9uZQogICAgICAgICAgICBmb3IgYnV0dG9uIGluIGFjY291bnRfYnV0dG9uczoKICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICJUaMOqbSB0w6BpIGtob+G6o24iIG9yIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICLEkMOzbmciOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIHRleHR2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuVGV4dFZpZXciCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJ1dHRvbl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIGZvciB0diBpbiB0ZXh0dmlld3M6CiAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyh0dikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR2X2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMl0gPD0gYnV0dG9uX2JvdW5kc1syXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dCAhPSAibnVsbCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIHRhcmdldF9pdGVtID0gYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHRhcmdldF9pdGVtOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHRyb25nIGRhbmggc8OhY2giKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gbMOgIGLhu4sgdsO0IGhp4buHdSBow7NhIHRyb25nIERCCiAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KHRhcmdldF9hY2NvdW50WyJpZCJdLCB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJkaXNhYmxlZCIsCiAgICAgICAgICAgICAgICAgICAgImRpc2FibGVfcmVhc29uIjogIlTDoGkga2hv4bqjbiBraMO0bmcgY8OzIHRyw6puIHRoaeG6v3QgYuG7iyIsCiAgICAgICAgICAgICAgICAgICAgImxhc3RfdXBkYXRlIjogaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOaOG6pW4gQmFjayDEkeG7gyDEkcOzbmcgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUXVheSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdMOgaSBraG/huqNuIG3hu6VjIHRpw6p1CiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih0YXJnZXRfaXRlbSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpICAjIMSQ4bujaSBjaHV54buDbiB0w6BpIGtob+G6o24gaG/DoG4gdOG6pXQKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjaHV54buDbiB0w6BpIGtob+G6o24gdGjDoG5oIGPDtG5nIGNoxrBhCiAgICAgICAgICAgIGN1cnJlbnRfdXNlcm5hbWUgPSBzZWxmLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBjdXJyZW50X3VzZXJuYW1lID09IHRhcmdldF91c2VybmFtZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgc2FuZyB7dGFyZ2V0X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiLEkMOjIGLhuqVtIHbDoG8gdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IG5oxrBuZyBraeG7g20gdHJhIGzhuqFpIHRo4bqleSDEkWFuZyDEkcSDbmcgbmjhuq1wIGzDoCB7Y3VycmVudF91c2VybmFtZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2siKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gcXVheSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBfcGVyZm9ybV9hY2NvdW50X3N3aXRjaChzZWxmLCB0YXJnZXRfYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBjw6FjIHRoYW8gdMOhYyBVSSDEkeG7gyBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3dpdGNoX2FjY291bnQodGFyZ2V0X2FjY291bnQpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2siKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIGdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZShzZWxmKSAtPiBPcHRpb25hbFtzdHJdOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiBUaWtUb2sgxJFhbmcgxJHEg25nIG5o4bqtcAogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0ciBob+G6t2MgTm9uZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAsIGhv4bq3YyBOb25lIG7hur91IGtow7RuZyBjw7MKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgICAgICAgICAjIFbDoG8gdHJhbmcgaOG7kyBzxqEgxJHhu4MgbOG6pXkgdXNlcm5hbWUKICAgICAgICAgICAgaWYgbm90IHNlbGYuX25hdmlnYXRlX3RvX3Byb2ZpbGVfdGFiKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWdeG7kXQgeHXhu5FuZyB2w6AgY2jhu50gMiBnacOieQogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCgogICAgICAgICAgICAjIFTDrG0gdXNlcm5hbWUgdHJvbmcgdHJhbmcgaOG7kyBzxqEKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdHJvbmcgY8OhYyBUZXh0VmlldyBjw7MgdGjhu4MgY2jhu6lhIHVzZXJuYW1lCiAgICAgICAgICAgIHRleHRfdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICB1c2VybmFtZSA9IE5vbmUKICAgICAgICAgICAgZm9yIHRleHRfdmlldyBpbiB0ZXh0X3ZpZXdzOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodGV4dF92aWV3KQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dC5zdGFydHN3aXRoKCJAIikgYW5kIGxlbih0ZXh0KSA+IDE6CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0WzE6XSAgIyBC4buPIGvDvSB04buxIEAKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFF1YXkgbOG6oWkgdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBs4bqleSB1c2VybmFtZSB04burIHRyYW5nIGjhu5Mgc8ahOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiB1c2VybmFtZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIGzhuqV5IHVzZXJuYW1lIHThu6sgdHJhbmcgaOG7kyBzxqEiKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgdXNlcm5hbWUgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAiKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIE5vbmU=').decode('utf-8'))
