import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgZGF0ZXRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdCwgT3B0aW9uYWwKaW1wb3J0IGNvbmZpZwppbXBvcnQgdXRpbHMKZnJvbSB1dGlscyBpbXBvcnQgTG9nTGV2ZWwsIExvZ2dlcgpmcm9tIGpvYnMgaW1wb3J0IFRpa3Rva0pvYiwgSW5zdGFncmFtSm9iCgojIFThuqFvIGxvZ2dlciBjaG8gSm9iU2VydmljZQpsb2dnZXIgPSB1dGlscy5nZXRfbG9nZ2VyKCJKb2JTZXJ2aWNlIikKCiMgQ29uc3RhbnRzIGZvciBiZXR0ZXIgY29kZSByZWFkYWJpbGl0eQpjbGFzcyBKb2JTZXJ2aWNlQ29uc3RhbnRzOgogICAgIiIiQ29uc3RhbnRzIHVzZWQgaW4gSm9iU2VydmljZSIiIgogICAgREVGQVVMVF9DSEVDS19JTlRFUlZBTCA9IDAuNSAgIyBTbGVlcCBjaGVjayBpbnRlcnZhbCBpbiBzZWNvbmRzCiAgICBERUZBVUxUX01BWF9GT0xMT1dfREFZID0gMjAKICAgIERFRkFVTFRfTUFYX0ZPTExPV19TRVNTSU9OID0gNQogICAgTUFYX1dBUk5JTkdfTE9HUyA9IDIwCiAgICAKICAgICMgU3RhdHVzIG1lc3NhZ2VzCiAgICBNU0dfREVWSUNFX1BBVVNFRF9TRVJWRVIgPSAiVOG6oW0gZOG7q25nIChTZXZlciB5w6p1IGPhuqd1KSIKICAgIE1TR19ERVZJQ0VfTk9fQUNDT1VOVFMgPSAiVOG6oW0gbmdo4buJIChLaMO0bmcgY8OzIHTDoGkga2hv4bqjbikiCiAgICAKICAgICMgQWNjb3VudCBzdGF0dXMgcmVhc29ucwogICAgUkVBU09OX0RBSUxZX0xJTUlUID0gIsSQw6MgxJHhuqF0IGdp4bubaSBo4bqhbiBqb2IgaMOgbmcgbmfDoHkiCiAgICBSRUFTT05fU0VTU0lPTl9MSU1JVCA9ICLEkMOjIGhvw6BuIHRow6BuaCBz4buRIGpvYiB04buRaSDEkWEgdHJvbmcgcGhpw6puIgogICAgUkVBU09OX0ZPTExPV19EQUlMWV9MSU1JVCA9ICLEkMOjIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIGZvbG93IHRyb25nIHBoacOqbiIKICAgIFJFQVNPTl9GT0xMT1dfU0VTU0lPTl9MSU1JVCA9ICLEkMOjIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIGZvbGxvdyB0cm9uZyBwaGnDqm4iCgpjbGFzcyBKb2JTZXJ2aWNlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSk6CiAgICAgICAgIiIiCiAgICAgICAgS2jhu59pIHThuqFvIEpvYlNlcnZpY2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBkYl9zZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UgxJHhu4MgbMawdSB0cuG7ryBk4buvIGxp4buHdQogICAgICAgICAgICBoZWxwZXJfc2VydmljZTogSGVscGVyU2VydmljZSDEkeG7gyB0xrDGoW5nIHTDoWMgduG7m2kgdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGdvbGlrZV9zZXJ2aWNlOiBHb0xpa2VTZXJ2aWNlIMSR4buDIGfhu41pIEFQSSBHb0xpa2UKICAgICAgICAiIiIKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyID0gaGVscGVyX3NlcnZpY2UKICAgICAgICBzZWxmLmdvbGlrZV9zZXJ2aWNlID0gZ29saWtlX3NlcnZpY2UKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgc2VsZi5mb3JjZV9zdG9wID0gRmFsc2UKICAgICAgICAKICAgICAgICAjIEto4bufaSB04bqhbyBjw6FjIGpvYiBoYW5kbGVyCiAgICAgICAgc2VsZi5qb2JfaGFuZGxlcnMgPSB7fQogICAgICAgIAogICAgICAgICMgRmxhZyDEkWnhu4F1IGtoaeG7g24KICAgICAgICBzZWxmLmlzX2luaXRpYWxpemVkID0gRmFsc2UKICAgICAgICAKICAgICAgICAjIFRow7RuZyB0aW4gduG7gSBjw6FjIGFwcCDEkcaw4bujYyBrw61jaCBob+G6oXQgLSBs4bqleSB04burIGRhdGFiYXNlIGhv4bq3YyBjb25maWcKICAgICAgICBzZWxmLmVuYWJsZWRfYXBwcyA9IHNlbGYuZGIuZ2V0KCJlbmFibGVkX2FwcHMiLCBjb25maWcuRU5BQkxFRF9BUFBTKQogICAgICAgIAogICAgICAgICMgTG9jayDEkeG7gyDEkeG7k25nIGLhu5kgdHLhuqFuZyB0aMOhaQogICAgICAgIHNlbGYuX2xvY2sgPSB0aHJlYWRpbmcuTG9jaygpCiAgICAgICAgCiAgICAgICAgIyBEaWN0aW9uYXJ5IMSR4buDIGzGsHUgc+G7kSBs4bqnbiB0aOG7rSBqb2IgdGjhuqV0IGLhuqFpIHRoZW8gYWNjb3VudF9pZAogICAgICAgIHNlbGYuZmFpbGVkX2pvYl9hdHRlbXB0cyA9IHt9CiAgICAgICAgCiAgICAgICAgIyDEkOG6v20gc+G7kSBs4bqnbiBsacOqbiB0aeG6v3Agam9iIGZvbGxvdyB0cuG6oyB24buBIHN0YXR1cyA0IChwZW5kaW5nKQogICAgICAgIHNlbGYuZm9sbG93X3BlbmRpbmdfY291bnRzID0ge30KICAgICAgICAKICAgIGRlZiBzYWZlX3NsZWVwKHNlbGYsIHNlY29uZHM6IGZsb2F0KSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE5n4bunIGFuIHRvw6BuLCBjw7MgdGjhu4MgZOG7q25nIGzhuqFpIG5nYXkgbOG6rXAgdOG7qWMga2hpIGZvcmNlX3N0b3AgxJHGsOG7o2MgxJHhurd0IHRow6BuaCBUcnVlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2Vjb25kczogU+G7kSBnacOieSBj4bqnbiBuZ+G7pwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IG5n4bunIMSR4bunIHRo4budaSBnaWFuLCBGYWxzZSBu4bq/dSBi4buLIGThu6tuZyBs4bqhaQogICAgICAgICIiIgogICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIGNoZWNrX2ludGVydmFsID0gSm9iU2VydmljZUNvbnN0YW50cy5ERUZBVUxUX0NIRUNLX0lOVEVSVkFMICAjIEtp4buDbSB0cmEgbeG7l2kgMC41IGdpw6J5CiAgICAgICAgCiAgICAgICAgd2hpbGUgdGltZS50aW1lKCkgLSBzdGFydF90aW1lIDwgc2Vjb25kczoKICAgICAgICAgICAgIyBLaeG7g20gdHJhIG7hur91IGPDsyB5w6p1IGPhuqd1IGThu6tuZwogICAgICAgICAgICB3aXRoIHNlbGYuX2xvY2s6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmZvcmNlX3N0b3Agb3Igbm90IHNlbGYucnVubmluZzoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmfhu6cgbeG7mXQga2hv4bqjbmcgbmfhuq9uCiAgICAgICAgICAgIHNsZWVwX3RpbWUgPSBtaW4oY2hlY2tfaW50ZXJ2YWwsIHNlY29uZHMgLSAodGltZS50aW1lKCkgLSBzdGFydF90aW1lKSkKICAgICAgICAgICAgaWYgc2xlZXBfdGltZSA+IDA6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHNsZWVwX3RpbWUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKICAgIGRlZiBpbml0aWFsaXplKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2jhu59pIHThuqFvIEpvYlNlcnZpY2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGto4bufaSB04bqhbyB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIGxvZ2dlci5pbmZvKCLEkGFuZyBraOG7n2kgdOG6oW8gSm9iU2VydmljZS4uLiIpCiAgICAgICAgCiAgICAgICAgIyAxLiBLaeG7g20gdHJhIEhlbHBlclNlcnZpY2UKICAgICAgICBoZWxwZXJfc3VjY2VzcywgaGVscGVyX2RhdGEgPSB1dGlscy5jaGVja19oZWxwZXJfc2VydmljZShzZWxmLmhlbHBlcikKICAgICAgICBpZiBub3QgaGVscGVyX3N1Y2Nlc3M6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGvhur90IG7hu5FpIMSR4bq/biBIZWxwZXJTZXJ2aWNlLiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaS4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgIyBMxrB1IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLIG7hur91IGPDswogICAgICAgIGlmIGhlbHBlcl9kYXRhIGFuZCAiZGF0YSIgaW4gaGVscGVyX2RhdGE6CiAgICAgICAgICAgIHNlbGYuZGIuc2F2ZV9kZXZpY2VfaW5mbyhoZWxwZXJfZGF0YSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGzGsHUgdGjDtG5nIHRpbiB0aGnhur90IGLhu4s6IHtoZWxwZXJfZGF0YVsnZGF0YSddLmdldCgnZGV2aWNlX21vZGVsJywgJ1Vua25vd24nKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgIyAzLiBMxrB1IGPDoWMgY+G6pXUgaMOsbmggbeG6t2MgxJHhu4tuaCB2w6BvIGRhdGFiYXNlIG7hur91IGNoxrBhIGPDswogICAgICAgIHNlbGYuX3NhdmVfZGVmYXVsdF9jb25maWdzKCkKICAgICAgICAgICAgCiAgICAgICAgIyA0LiBLaeG7g20gdHJhIHbDoCBs4bqleSBHb0xpa2UgaGVhZGVycyBu4bq/dSBj4bqnbgogICAgICAgIGdvbGlrZV9zdWNjZXNzID0gc2VsZi5nb2xpa2Vfc2VydmljZS5mZXRjaF9nb2xpa2VfaGVhZGVyc193aXRoX3JldHJ5KCkKICAgICAgICBpZiBub3QgZ29saWtlX3N1Y2Nlc3M6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGzhuqV5IEdvTGlrZSBoZWFkZXJzLiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaS4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICAjIDUuIEto4bufaSB04bqhbyBjw6FjIGpvYiBoYW5kbGVyCiAgICAgICAgc2VsZi5faW5pdF9qb2JfaGFuZGxlcnMoKQogICAgICAgIAogICAgICAgICMgNi4gS2jhu59pIHThuqFvIG5nw6B5IGN14buRaSBjw7luZyDEkcOjIHJlc2V0IG7hur91IGNoxrBhIGPDsyB0cm9uZyBkYXRhYmFzZQogICAgICAgIG5vdyA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpCiAgICAgICAgdG9kYXkgPSBub3cuZGF0ZSgpCiAgICAgICAgam9iX2hvdXIgPSBzZWxmLmRiLmdldCgiam9iX2hvdXIiLCBjb25maWcuSk9CX0hPVVIpCiAgICAgICAgcmVzZXRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLmNvbWJpbmUodG9kYXksIGRhdGV0aW1lLnRpbWUoaG91cj1qb2JfaG91ciwgbWludXRlPTApKQogICAgICAgIAogICAgICAgICMgTOG6pXkgbmfDoHkgcmVzZXQgY3Xhu5FpIGPDuW5nIHThu6sgZGF0YWJhc2UKICAgICAgICBsYXN0X3Jlc2V0X2RhdGVfc3RyID0gc2VsZi5kYi5nZXQoImxhc3RfcmVzZXRfZGF0ZSIpCiAgICAgICAgCiAgICAgICAgaWYgbm90IGxhc3RfcmVzZXRfZGF0ZV9zdHI6CiAgICAgICAgICAgICMgTuG6v3UgaGnhu4duIHThuqFpIMSRw6MgcXVhIGdp4budIHJlc2V0IGPhu6dhIG5nw6B5IGjDtG0gbmF5LCDEkcOhbmggZOG6pXUgxJHDoyByZXNldAogICAgICAgICAgICBpZiBub3cgPj0gcmVzZXRfdGltZToKICAgICAgICAgICAgICAgIGxhc3RfcmVzZXRfZGF0ZSA9IHRvZGF5CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE7hur91IGNoxrBhIMSR4bq/biBnaeG7nSByZXNldCwgxJHDoW5oIGThuqV1IGzDoCDEkcOjIHJlc2V0IG5nw6B5IGjDtG0gcXVhCiAgICAgICAgICAgICAgICBsYXN0X3Jlc2V0X2RhdGUgPSB0b2RheSAtIGRhdGV0aW1lLnRpbWVkZWx0YShkYXlzPTEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBMxrB1IHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgc2VsZi5kYi5zZXQoImxhc3RfcmVzZXRfZGF0ZSIsIGxhc3RfcmVzZXRfZGF0ZS5pc29mb3JtYXQoKSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJLaOG7n2kgdOG6oW8gbmfDoHkgcmVzZXQ6IHtsYXN0X3Jlc2V0X2RhdGV9IikKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgdMOsbSB0aOG6pXkgbmfDoHkgcmVzZXQgY3Xhu5FpIGPDuW5nOiB7bGFzdF9yZXNldF9kYXRlX3N0cn0iKQogICAgICAgIAogICAgICAgIHNlbGYuaXNfaW5pdGlhbGl6ZWQgPSBUcnVlCiAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSB04bqhbyBKb2JTZXJ2aWNlIHRow6BuaCBjw7RuZy4iKQogICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICBkZWYgX2NoZWNrX2FjY291bnRfc3luY19zdGF0dXMoc2VsZiwgYXBwX25hbWU6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiBj4bunYSBt4buZdCBhcHAKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHBfbmFtZTogVMOqbiDhu6luZyBk4bulbmcgY+G6p24ga2nhu4NtIHRyYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGPhuqduIMSR4buTbmcgYuG7mSBs4bqhaSwgRmFsc2UgbuG6v3Uga2jDtG5nIGPhuqduCiAgICAgICAgIiIiCiAgICAgICAgIyBM4bqleSB0cuG6oW5nIHRow6FpIMSR4buTbmcgYuG7mSB04burIGRhdGFiYXNlCiAgICAgICAgc3luY19zdGF0dXNfa2V5ID0gZiJ7YXBwX25hbWV9X3N5bmNfc3RhdHVzIgogICAgICAgIHN5bmNfc3RhdHVzID0gc2VsZi5kYi5nZXQoc3luY19zdGF0dXNfa2V5LCBGYWxzZSkgICMgTeG6t2MgxJHhu4tuaCBsw6AgY2jGsGEgxJHhu5NuZyBi4buZCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSBjaMawYSDEkeG7k25nIGLhu5kgdGjDrCBj4bqnbiDEkeG7k25nIGLhu5kgbOG6oWkKICAgICAgICByZXR1cm4gbm90IHN5bmNfc3RhdHVzCiAgICAgICAgCiAgICBkZWYgX3VwZGF0ZV9hY2NvdW50X3N5bmNfc3RhdHVzKHNlbGYsIGFwcF9uYW1lOiBzdHIsIHN0YXR1czogYm9vbCA9IFRydWUpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiBj4bunYSBt4buZdCBhcHAKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHBfbmFtZTogVMOqbiDhu6luZyBk4bulbmcgY+G6p24gY+G6rXAgbmjhuq10CiAgICAgICAgICAgIHN0YXR1czogVHJ1ZSBu4bq/dSDEkcOjIMSR4buTbmcgYuG7mSwgRmFsc2UgbuG6v3UgY2jGsGEgxJHhu5NuZyBi4buZCiAgICAgICAgIiIiCiAgICAgICAgc3luY19zdGF0dXNfa2V5ID0gZiJ7YXBwX25hbWV9X3N5bmNfc3RhdHVzIgogICAgICAgIAogICAgICAgICMgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHhu5NuZyBi4buZCiAgICAgICAgc2VsZi5kYi5zZXQoc3luY19zdGF0dXNfa2V5LCBzdGF0dXMpCiAgICAgICAgCiAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24ge2FwcF9uYW1lfToge3N0YXR1c30iKQogICAgICAgIAogICAgZGVmIF9zeW5jX2FjY291bnRzX2Zvcl9hcHAoc2VsZiwgYXBwX25hbWU6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkOG7k25nIGLhu5kgdMOgaSBraG/huqNuIHbDoCBtYXAgdMOgaSBraG/huqNuIEdvTGlrZSBjaG8gbeG7mXQgYXBwIGPhu6UgdGjhu4MKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHBfbmFtZTogVMOqbiDhu6luZyBk4bulbmcgY+G6p24gxJHhu5NuZyBi4buZCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJHhu5NuZyBi4buZIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgaWYgYXBwX25hbWUgbm90IGluIHNlbGYuam9iX2hhbmRsZXJzOgogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIktow7RuZyB0w6xtIHRo4bqleSBqb2IgaGFuZGxlciBjaG8ge2FwcF9uYW1lfSwgYuG7jyBxdWEgxJHhu5NuZyBi4buZIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGhhbmRsZXIgPSBzZWxmLmpvYl9oYW5kbGVyc1thcHBfbmFtZV0KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgMS4gxJDhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQYW5nIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24ge2FwcF9uYW1lfS4uLiIpCiAgICAgICAgICAgIGFjY291bnRzID0gaGFuZGxlci5zeW5jX2FjY291bnRzX3RvX2RiKCkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIMSR4buTbmcgYuG7mSB7bGVuKGFjY291bnRzKX0gdMOgaSBraG/huqNuIHthcHBfbmFtZX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyAyLiBNYXAgdMOgaSBraG/huqNuIEdvTGlrZQogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQYW5nIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIEdvTGlrZSBjaG8ge2FwcF9uYW1lfS4uLiIpCiAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50cyA9IGhhbmRsZXIuZ2V0X2dvbGlrZV9hY2NvdW50cygpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBnb2xpa2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgdMOsbSB0aOG6pXkge2xlbihnb2xpa2VfYWNjb3VudHMpfSB0w6BpIGtob+G6o24gR29MaWtlIGNobyB7YXBwX25hbWV9IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBM4bqleSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgIGRldmljZV9hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD1hcHBfbmFtZSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDDgW5oIHjhuqEgdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBtYXBwZWRfYWNjb3VudHMgPSBoYW5kbGVyLm1hcF9nb2xpa2VfYWNjb3VudHMoZ29saWtlX2FjY291bnRzLCBkZXZpY2VfYWNjb3VudHMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyDDoW5oIHjhuqEge2xlbihtYXBwZWRfYWNjb3VudHMpfSB0w6BpIGtob+G6o24ge2FwcF9uYW1lfSB24bubaSBHb0xpa2UiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIEdvTGlrZSBuw6BvIGNobyB7YXBwX25hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIHNlbGYuX3VwZGF0ZV9hY2NvdW50X3N5bmNfc3RhdHVzKGFwcF9uYW1lLCBUcnVlKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB2w6AgbWFwIEdvTGlrZSBjaG8ge2FwcF9uYW1lfSIpCiAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IGzDoCBjaMawYSDEkeG7k25nIGLhu5kKICAgICAgICAgICAgc2VsZi5fdXBkYXRlX2FjY291bnRfc3luY19zdGF0dXMoYXBwX25hbWUsIEZhbHNlKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIGRlZiBfc2F2ZV9kZWZhdWx0X2NvbmZpZ3Moc2VsZik6CiAgICAgICAgIiIiTMawdSBjw6FjIGPhuqV1IGjDrG5oIG3hurdjIMSR4buLbmggdsOgbyBkYXRhYmFzZSBu4bq/dSBjaMawYSBjw7MiIiIKICAgICAgICBkZWZhdWx0X2NvbmZpZ3MgPSB7CiAgICAgICAgICAgICMgQ+G6pXUgaMOsbmggbGnDqm4gcXVhbiDEkeG6v24gdGjhu51pIGdpYW4gbMOgbSBqb2IKICAgICAgICAgICAgImpvYl9ob3VyIjogY29uZmlnLkpPQl9IT1VSLAogICAgICAgICAgICAiam9iX2Nvb2xkb3duX21pbnV0ZXMiOiBjb25maWcuREVGQVVMVF9DT09MRE9XTl9NSU5VVEVTLAogICAgICAgICAgICAiam9iX2NoZWNrX2ludGVydmFsIjogY29uZmlnLkpPQl9DSEVDS19JTlRFUlZBTCwKICAgICAgICAgICAgImNvb2xkb3duX2dldF9qb2JfZ29saWtlIjogMzAsICAjIFRo4budaSBnaWFuIGNo4budIChwaMO6dCkga2hpIGtow7RuZyB0w6xtIHRo4bqleSBqb2IgR29MaWtlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhuqV1IGjDrG5oIGxpw6puIHF1YW4gxJHhur9uIHPhu5EgbMaw4bujbmcgam9iCiAgICAgICAgICAgICJtYXhfam9ic19wZXJfZGF5IjogY29uZmlnLk1BWF9KT0JTX1BFUl9EQVksCiAgICAgICAgICAgICJtYXhfam9ic19wZXJfc2Vzc2lvbiI6IGNvbmZpZy5NQVhfSk9CU19QRVJfU0VTU0lPTiwKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVHLhuqFuZyB0aMOhaSB04bqhbSBk4burbmcgdOG7qyBzZXJ2ZXIKICAgICAgICAgICAgInBhdXNlX2pvYiI6IEZhbHNlLAogICAgICAgICAgICAjIFRy4bqhbmcgdGjDoWkgdGhp4bq/dCBi4buLIMSRYW5nIGzDoG0gdmnhu4djCiAgICAgICAgICAgICJkZXZpY2VfaXNfd29ya2luZyI6IEZhbHNlLAogICAgICAgICAgICAiZGV2aWNlX21lc3NhZ2UiOiAiIiwKICAgICAgICAgICAgCiAgICAgICAgICAgICMgRGFuaCBzw6FjaCBjw6FjIGFwcCDEkcaw4bujYyBrw61jaCBob+G6oXQKICAgICAgICAgICAgImVuYWJsZWRfYXBwcyI6IGNvbmZpZy5FTkFCTEVEX0FQUFMsCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRoaeG6v3QgbOG6rXAgY2hvIHBow6lwIGNoxINtIHPDs2Mga2hpIGzDoG0gam9iCiAgICAgICAgICAgICJjYXJlX2luX3dvcmtpbmdfam9iIjogRmFsc2UsCiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICAKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkZWZhdWx0X2NvbmZpZ3MuaXRlbXMoKToKICAgICAgICAgICAgIyBDaOG7iSBsxrB1IG7hur91IGNoxrBhIGPDsyB0cm9uZyBkYXRhYmFzZQogICAgICAgICAgICBpZiBzZWxmLmRiLmdldChrZXkpIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmRiLnNldChrZXksIHZhbHVlKQogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYixJDDoyBsxrB1IGPhuqV1IGjDrG5oIG3hurdjIMSR4buLbmg6IHtrZXl9PXt2YWx1ZX0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiQ+G6pXUgaMOsbmgge2tleX0gxJHDoyB04buTbiB04bqhaToge3NlbGYuZGIuZ2V0KGtleSl9IikKICAgICAgICAKICAgIGRlZiBfaW5pdF9qb2JfaGFuZGxlcnMoc2VsZik6CiAgICAgICAgIiIiS2jhu59pIHThuqFvIGPDoWMgam9iIGhhbmRsZXIiIiIKICAgICAgICAjIGluaXQgdGjDrCBz4bq9IGluaXQgaGFuZGxlcnMgY2hvIHThuqV0IGPhuqMgY8OhYyBhcHAsIGzDoG0gYXBwIG7DoG8gdGjDrCBz4bq9IHRoZW8gY+G6pXUgaMOsbmggbOG6pXkgdOG7qyBkYXRhYmFzZQogICAgICAgIGZvciBhcHBfbmFtZSBpbiBjb25maWcuRU5BQkxFRF9BUFBTOgogICAgICAgICAgICBpZiBhcHBfbmFtZSA9PSAidGlrdG9rIjoKICAgICAgICAgICAgICAgIHNlbGYuam9iX2hhbmRsZXJzW2FwcF9uYW1lXSA9IFRpa3Rva0pvYihzZWxmLmRiLCBzZWxmLmhlbHBlciwgc2VsZi5nb2xpa2Vfc2VydmljZSkKICAgICAgICAgICAgICAgICMgVHJ1eeG7gW4gcGjGsMahbmcgdGjhu6ljIHNhZmVfc2xlZXAgdsOgbyBqb2IgaGFuZGxlcgogICAgICAgICAgICAgICAgc2VsZi5qb2JfaGFuZGxlcnNbYXBwX25hbWVdLnNldF9zbGVlcF9mdW5jdGlvbihzZWxmLnNhZmVfc2xlZXApCiAgICAgICAgICAgIGVsaWYgYXBwX25hbWUgPT0gImluc3RhZ3JhbSI6CiAgICAgICAgICAgICAgICBzZWxmLmpvYl9oYW5kbGVyc1thcHBfbmFtZV0gPSBJbnN0YWdyYW1Kb2Ioc2VsZi5kYiwgc2VsZi5oZWxwZXIsIHNlbGYuZ29saWtlX3NlcnZpY2UpCiAgICAgICAgICAgICAgICAjIFRydXnhu4FuIHBoxrDGoW5nIHRo4bupYyBzYWZlX3NsZWVwIHbDoG8gam9iIGhhbmRsZXIKICAgICAgICAgICAgICAgIHNlbGYuam9iX2hhbmRsZXJzW2FwcF9uYW1lXS5zZXRfc2xlZXBfZnVuY3Rpb24oc2VsZi5zYWZlX3NsZWVwKQogICAgICAgICAgICAgICAgCiAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGto4bufaSB04bqhbyB7bGVuKHNlbGYuam9iX2hhbmRsZXJzKX0gam9iIGhhbmRsZXI6IHsnLCAnLmpvaW4oc2VsZi5qb2JfaGFuZGxlcnMua2V5cygpKX0iKQogICAgICAgIAogICAgZGVmIF9yZXNldF9kYWlseV9jb3VudGVycyhzZWxmKToKICAgICAgICAiIiJSZXNldCBi4buZIMSR4bq/bSBow6BuZyBuZ8OgeSB2w6BvIGdp4budIMSRxrDhu6NjIGPhuqV1IGjDrG5oIiIiCiAgICAgICAgbm93ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgICAgICB0b2RheSA9IG5vdy5kYXRlKCkKICAgICAgICAKICAgICAgICAjIEzhuqV5IGdp4budIHJlc2V0IHThu6sgY+G6pXUgaMOsbmggaG/hurdjIHThu6sgZGF0YWJhc2UgbuG6v3UgY8OzCiAgICAgICAgam9iX2hvdXIgPSBzZWxmLmRiLmdldCgiam9iX2hvdXIiLCBjb25maWcuSk9CX0hPVVIpCiAgICAgICAgCiAgICAgICAgIyBUw61uaCB0aOG7nWkgxJFp4buDbSByZXNldCBj4bunYSBuZ8OgeSBow7RtIG5heQogICAgICAgIHJlc2V0X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5jb21iaW5lKHRvZGF5LCBkYXRldGltZS50aW1lKGhvdXI9am9iX2hvdXIsIG1pbnV0ZT0wKSkKICAgICAgICAKICAgICAgICAjIEzhuqV5IG5nw6B5IHJlc2V0IGN14buRaSBjw7luZyB04burIGRhdGFiYXNlCiAgICAgICAgbGFzdF9yZXNldF9kYXRlX3N0ciA9IHNlbGYuZGIuZ2V0KCJsYXN0X3Jlc2V0X2RhdGUiKQogICAgICAgIGxhc3RfcmVzZXRfZGF0ZSA9IE5vbmUKICAgICAgICAKICAgICAgICBpZiBsYXN0X3Jlc2V0X2RhdGVfc3RyOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBsYXN0X3Jlc2V0X2RhdGUgPSBkYXRldGltZS5kYXRlLmZyb21pc29mb3JtYXQobGFzdF9yZXNldF9kYXRlX3N0cikKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiLEkOG7i25oIGThuqFuZyBuZ8OgeSByZXNldCBraMO0bmcgaOG7o3AgbOG7hzoge2xhc3RfcmVzZXRfZGF0ZV9zdHJ9IikKICAgICAgICAgICAgICAgIGxhc3RfcmVzZXRfZGF0ZSA9IE5vbmUKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgcXVhIGdp4budIHJlc2V0IGPhu6dhIG5nw6B5IGjDtG0gbmF5IGNoxrBhIHbDoCBjaMawYSByZXNldCB0cm9uZyBuZ8OgeSBow7RtIG5heQogICAgICAgIGlmIG5vdyA+PSByZXNldF90aW1lIGFuZCAobGFzdF9yZXNldF9kYXRlIGlzIE5vbmUgb3IgbGFzdF9yZXNldF9kYXRlIDwgdG9kYXkpOgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gcmVzZXQgYuG7mSDEkeG6v20gaMOgbmcgbmfDoHkgKGdp4budIHJlc2V0OiB7am9iX2hvdXJ9OjAwKSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJlc2V0IGPDoWMgYuG7mSDEkeG6v20gY2hvIHThuqV0IGPhuqMgdMOgaSBraG/huqNuCiAgICAgICAgICAgIGZvciBhcHBfbmFtZSBpbiBzZWxmLmVuYWJsZWRfYXBwczoKICAgICAgICAgICAgICAgIGFjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHMoYXBwPWFwcF9uYW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAjIFJlc2V0IHPhu5Egam9iIGjDtG0gbmF5IHbDoCBz4buRIGpvYiB0cm9uZyBwaGnDqm4KICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgImpvYl90b2RheSI6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJqb2JzX2RvbmVfaW5fc2Vzc2lvbiI6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJmb2xsb3dfdG9kYXkiOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAiZm9sbG93X2luX3Nlc3Npb24iOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAibGFzdF92aWV3X3N0b3JpZXMiOiAwCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE7hur91IHTDoGkga2hv4bqjbiDEkWFuZyDhu58gdHLhuqFuZyB0aMOhaSBpbmFjdGl2ZSB2w6wgxJHDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGpvYiBow6BuZyBuZ8OgeSwKICAgICAgICAgICAgICAgICAgICAjIMSR4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIHRow6BuaCBhY3RpdmUKICAgICAgICAgICAgICAgICAgICBpZiBhY2NvdW50LmdldCgic3RhdHVzIikgPT0gImluYWN0aXZlIiBhbmQgYWNjb3VudC5nZXQoImluYWN0aXZlX3JlYXNvbiIpID09ICLEkMOjIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIGjDoG5nIG5nw6B5IjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50WyJpZCJdLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImFjdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2Rpc2FibGVfdW50aWwiOiAwLAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgxJHhurd0IGzhuqFpIHRy4bqhbmcgdGjDoWkgYWN0aXZlIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gc2F1IGtoaSByZXNldCIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBN4bufIGtow7NhIGZvbGxvdyBu4bq/dSBi4buLIGtow7NhIGRvIMSR4bqhdCBnaeG7m2kgaOG6oW4gZm9sbG93IHRyb25nIG5nw6B5CiAgICAgICAgICAgICAgICAgICAgaWYgYWNjb3VudC5nZXQoImRpc2FibGVfZm9sbG93IiwgRmFsc2UpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXNhYmxlX2ZvbGxvdyI6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbGxvd19kaXNhYmxlX3VudGlsIjogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpbmFjdGl2ZV9mb2xsb3dfcmVhc29uIjogIiIKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIG3hu58ga2jDs2EgZm9sbG93IGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gc2F1IGtoaSByZXNldCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgcmVzZXQgYuG7mSDEkeG6v20gaMOgbmcgbmfDoHkgY2hvIHThuqV0IGPhuqMgdMOgaSBraG/huqNuIHbDoG8ge25vdy5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgbmfDoHkgxJHDoyByZXNldCB2w6BvIGRhdGFiYXNlCiAgICAgICAgICAgIHNlbGYuZGIuc2V0KCJsYXN0X3Jlc2V0X2RhdGUiLCB0b2RheS5pc29mb3JtYXQoKSkKICAgICAgICAKICAgIGRlZiBfY2FuX3J1bl9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0gY8OzIHRo4buDIGNo4bqheSBqb2IgY2hvIHTDoGkga2hv4bqjbiBraMO0bmcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGPDsyB0aOG7gyBjaOG6oXkgam9iLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAiIiIKICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgCiAgICAgICAgIyAxLiBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgY8ahIGLhuqNuCiAgICAgICAgaWYgbm90IHNlbGYuX2NoZWNrX2Jhc2ljX2FjY291bnRfc3RhdHVzKGFjY291bnQpOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgIyAyLiBLaeG7g20gdHJhIMSRaeG7gXUga2nhu4duIGPhuqduIHRoaeG6v3QKICAgICAgICBpZiBub3Qgc2VsZi5fY2hlY2tfYWNjb3VudF9wcmVyZXF1aXNpdGVzKGFjY291bnQpOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgIyAzLiDEkOG6o20gYuG6o28gY8OhYyBnaeG7m2kgaOG6oW4gxJHGsOG7o2MgdGhp4bq/dCBs4bqtcAogICAgICAgIGFjY291bnQgPSBzZWxmLl9lbnN1cmVfYWNjb3VudF9saW1pdHNfc2V0KGFjY291bnQpCiAgICAgICAgCiAgICAgICAgIyA0LiBLaeG7g20gdHJhIGdp4bubaSBo4bqhbiBqb2IgaMOgbmcgbmfDoHkKICAgICAgICBpZiBzZWxmLl9pc19hY2NvdW50X2F0X2RhaWx5X2xpbWl0KGFjY291bnQpOgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IMSRw6MgxJHhuqF0IGdp4bubaSBo4bqhbiBqb2IgdHJvbmcgbmfDoHkiKQogICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2luYWN0aXZlX3VudGlsX25leHRfcmVzZXQoYWNjb3VudFsiaWQiXSwgIsSQw6MgxJHhuqF0IGdp4bubaSBo4bqhbiBqb2IgaMOgbmcgbmfDoHkiKQogICAgICAgICAgICBzZWxmLl9jbG9zZV9hcHBfZm9yX2FjY291bnQoYWNjb3VudCkKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgNS4gS2nhu4NtIHRyYSBnaeG7m2kgaOG6oW4gam9iIHRyb25nIHBoacOqbgogICAgICAgIGlmIHNlbGYuX2lzX2FjY291bnRfYXRfc2Vzc2lvbl9saW1pdChhY2NvdW50KToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge3VzZXJuYW1lfSDEkcOjIGzDoG0gxJHhu6cgam9iIHRyb25nIHBoacOqbiIpCiAgICAgICAgICAgIHNlbGYuZGIuc2V0X2FjY291bnRfaW5hY3RpdmUoYWNjb3VudFsiaWQiXSwgaW5hY3RpdmVfcmVhc29uPSLEkMOjIGhvw6BuIHRow6BuaCBz4buRIGpvYiB04buRaSDEkWEgdHJvbmcgcGhpw6puIikKICAgICAgICAgICAgc2VsZi5fY2xvc2VfYXBwX2Zvcl9hY2NvdW50KGFjY291bnQpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICBkZWYgX2NoZWNrX2Jhc2ljX2FjY291bnRfc3RhdHVzKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIktp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBjxqEgYuG6o24gY+G7p2EgdMOgaSBraG/huqNuIiIiCiAgICAgICAgYWNjb3VudF9zdGF0dXMgPSBhY2NvdW50LmdldCgic3RhdHVzIiwgImFjdGl2ZSIpCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSB0w6BpIGtob+G6o24gYuG7iyBkaXNhYmxlZCwga2jDtG5nIGNobyBjaOG6oXkgam9iCiAgICAgICAgaWYgYWNjb3VudF9zdGF0dXMgPT0gImRpc2FibGVkIjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgTuG6v3UgdMOgaSBraG/huqNuIMSRYW5nIGluYWN0aXZlLCBraeG7g20gdHJhIHRo4budaSBnaWFuIGNvb2xkb3duCiAgICAgICAgaWYgYWNjb3VudF9zdGF0dXMgPT0gImluYWN0aXZlIjoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2hhbmRsZV9pbmFjdGl2ZV9hY2NvdW50KGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICBkZWYgX2hhbmRsZV9pbmFjdGl2ZV9hY2NvdW50KHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIljhu60gbMO9IHTDoGkga2hv4bqjbiDEkWFuZyDhu58gdHLhuqFuZyB0aMOhaSBpbmFjdGl2ZSIiIgogICAgICAgIGpvYl9kaXNhYmxlX3VudGlsID0gYWNjb3VudC5nZXQoImpvYl9kaXNhYmxlX3VudGlsIiwgMCkKICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSDEkcOjIGjhur90IHRo4budaSBnaWFuIGNvb2xkb3duLCBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB24buBIGFjdGl2ZQogICAgICAgIGlmIGpvYl9kaXNhYmxlX3VudGlsIDw9IHRpbWUudGltZSgpOgogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbhu4EgYWN0aXZlCiAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0geyJzdGF0dXMiOiAiYWN0aXZlIiwgImxhc3RfY2FyZV90aW1lIjogMH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBu4bq/dSBpbmFjdGl2ZV9mb2xsb3dfcmVhc29uIGNo4bupYSAidW5mb2xsb3ciIHRow6wgbeG7nyBraMOzYSBmb2xsb3cKICAgICAgICAgICAgaW5hY3RpdmVfZm9sbG93X3JlYXNvbiA9IGFjY291bnQuZ2V0KCJpbmFjdGl2ZV9mb2xsb3dfcmVhc29uIiwgIiIpCiAgICAgICAgICAgIGlmICJ1bmZvbGxvdyIgbm90IGluIGluYWN0aXZlX2ZvbGxvd19yZWFzb24ubG93ZXIoKToKICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgImRpc2FibGVfZm9sbG93IjogRmFsc2UsCiAgICAgICAgICAgICAgICAgICAgImZvbGxvd19kaXNhYmxlX3VudGlsIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW5hY3RpdmVfZm9sbG93X3JlYXNvbiI6ICIiCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudFsiaWQiXSwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHt1c2VybmFtZX0gxJHDoyBo4bq/dCB0aOG7nWkgZ2lhbiBjaOG7nSwgxJHDoyBjaHV54buDbiB24buBIHRy4bqhbmcgdGjDoWkgYWN0aXZlIikKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIENoxrBhIGjhur90IHRo4budaSBnaWFuIGNo4budCiAgICAgICAgICAgIGNvb2xkb3duX3JlbWFpbiA9IGludCgoam9iX2Rpc2FibGVfdW50aWwgLSB0aW1lLnRpbWUoKSkgLyA2MCkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge3VzZXJuYW1lfSDEkWFuZyB0cm9uZyB0aOG7nWkgZ2lhbiBjaOG7nSAoY8OybiB7Y29vbGRvd25fcmVtYWlufSBwaMO6dCkiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgX2NoZWNrX2FjY291bnRfcHJlcmVxdWlzaXRlcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJLaeG7g20gdHJhIGPDoWMgxJFp4buBdSBraeG7h24gdGnDqm4gcXV54bq/dCBj4bunYSB0w6BpIGtob+G6o24iIiIKICAgICAgICAjIEtp4buDbSB0cmEgeGVtIHTDoGkga2hv4bqjbiBjw7MgxJHGsOG7o2MgYuG6rXQgam9iIGtow7RuZwogICAgICAgIGlmIG5vdCBhY2NvdW50LmdldCgiam9iX2VuYWJsZSIsIEZhbHNlKToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIMSRw6MgxJHGsOG7o2MgbGnDqm4ga+G6v3QgduG7m2kgR29MaWtlIGNoxrBhCiAgICAgICAgaWYgbm90IGFjY291bnQuZ2V0KCJpc19nb2xpa2VfbGlua2VkIiwgRmFsc2UpOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAKICAgIGRlZiBfZW5zdXJlX2FjY291bnRfbGltaXRzX3NldChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIGPDoWMgZ2nhu5tpIGjhuqFuIGPhu6dhIHTDoGkga2hv4bqjbiDEkcaw4bujYyB0aGnhur90IGzhuq1wIHbhu5tpIGdpw6EgdHLhu4sgbeG6t2MgxJHhu4tuaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbiDEkcOjIMSRxrDhu6NjIGPhuq1wIG5o4bqtdAogICAgICAgICIiIgogICAgICAgIHVwZGF0ZV9kYXRhID0ge30KICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgdsOgIHRoaeG6v3QgbOG6rXAgbWF4X2pvYnNfcGVyX3Nlc3Npb24KICAgICAgICBpZiBhY2NvdW50LmdldCgibWF4X2pvYnNfcGVyX3Nlc3Npb24iLCAwKSA8PSAwOgogICAgICAgICAgICB1cGRhdGVfZGF0YVsibWF4X2pvYnNfcGVyX3Nlc3Npb24iXSA9IGNvbmZpZy5NQVhfSk9CU19QRVJfU0VTU0lPTgogICAgICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgdsOgIHRoaeG6v3QgbOG6rXAgam9iX21heF9kYXkKICAgICAgICBpZiBhY2NvdW50LmdldCgiam9iX21heF9kYXkiLCAwKSA8PSAwOgogICAgICAgICAgICB1cGRhdGVfZGF0YVsiam9iX21heF9kYXkiXSA9IGNvbmZpZy5NQVhfSk9CU19QRVJfREFZCiAgICAgICAgICAgIAogICAgICAgICMgQ+G6rXAgbmjhuq10IHbDoG8gZGF0YWJhc2UgbuG6v3UgY8OzIHRoYXkgxJHhu5VpCiAgICAgICAgaWYgdXBkYXRlX2RhdGE6CiAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudFsiaWQiXSwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgIGFjY291bnQudXBkYXRlKHVwZGF0ZV9kYXRhKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gYWNjb3VudAogICAgICAgIAogICAgZGVmIF9jbG9zZV9hcHBfZm9yX2FjY291bnQoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgxJDDs25nIGFwcCB0xrDGoW5nIOG7qW5nIHbhu5tpIHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgIiIiCiAgICAgICAgYXBwX25hbWUgPSBhY2NvdW50LmdldCgiYXBwIikKICAgICAgICBpZiBhcHBfbmFtZSBhbmQgYXBwX25hbWUgaW4gY29uZmlnLkFQUF9QQUNLQUdFUzoKICAgICAgICAgICAgc2VsZi5oZWxwZXIuY2xvc2VfYXBwKGNvbmZpZy5BUFBfUEFDS0FHRVNbYXBwX25hbWVdKQogICAgICAgICAgICAKICAgIGRlZiBfaXNfYWNjb3VudF9hdF9kYWlseV9saW1pdChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gY8OzIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIGjDoG5nIG5nw6B5IGtow7RuZwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJHDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuCiAgICAgICAgIiIiCiAgICAgICAgam9iX3RvZGF5ID0gYWNjb3VudC5nZXQoImpvYl90b2RheSIsIDApCiAgICAgICAgam9iX21heF9kYXkgPSBhY2NvdW50LmdldCgiam9iX21heF9kYXkiLCAwKSBvciBjb25maWcuTUFYX0pPQlNfUEVSX0RBWQogICAgICAgIHJldHVybiBqb2JfdG9kYXkgPj0gam9iX21heF9kYXkKICAgICAgICAKICAgIGRlZiBfaXNfYWNjb3VudF9hdF9zZXNzaW9uX2xpbWl0KHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIHTDoGkga2hv4bqjbiBjw7MgxJHhuqF0IGdp4bubaSBo4bqhbiBqb2IgdHJvbmcgcGhpw6puIGtow7RuZwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJHDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuCiAgICAgICAgIiIiCiAgICAgICAgam9ic19kb25lX2luX3Nlc3Npb24gPSBhY2NvdW50LmdldCgiam9ic19kb25lX2luX3Nlc3Npb24iLCAwKQogICAgICAgIG1heF9qb2JzX3Blcl9zZXNzaW9uID0gYWNjb3VudC5nZXQoIm1heF9qb2JzX3Blcl9zZXNzaW9uIiwgMCkgb3IgY29uZmlnLk1BWF9KT0JTX1BFUl9TRVNTSU9OCiAgICAgICAgcmV0dXJuIGpvYnNfZG9uZV9pbl9zZXNzaW9uID49IG1heF9qb2JzX3Blcl9zZXNzaW9uCiAgICAgICAgCiAgICBkZWYgX3VwZGF0ZV9qb2Jfc3RhdHMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIHN1Y2Nlc3M6IGJvb2wgPSBUcnVlLCBqb2JfdHlwZTogc3RyID0gTm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IHRo4buRbmcga8OqIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIHN1Y2Nlc3M6IFRydWUgbuG6v3Ugam9iIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgICAgIGpvYl90eXBlOiBMb+G6oWkgam9iIChmb2xsb3csIGxpa2UsIGV0Yy4pCiAgICAgICAgIiIiCiAgICAgICAgdXNlcm5hbWUgPSBhY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJ1Vua25vd24nKQogICAgICAgIAogICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gam9iIGPGoSBi4bqjbgogICAgICAgIHNlbGYuX3VwZGF0ZV9iYXNpY19qb2Jfc3RhdHMoYWNjb3VudCwgc3VjY2VzcykKICAgICAgICAKICAgICAgICAjIFJlc2V0IHPhu5EgbOG6p24gdGjhu60gam9iIHRo4bqldCBi4bqhaSBu4bq/dSBqb2IgdGjDoG5oIGPDtG5nCiAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgc2VsZi5mYWlsZWRfam9iX2F0dGVtcHRzW2FjY291bnRbImlkIl1dID0gMAogICAgICAgIAogICAgICAgICMgxJDhuqNtIGLhuqNvIGPDoWMgZ2nhu5tpIGjhuqFuIMSRxrDhu6NjIHRoaeG6v3QgbOG6rXAKICAgICAgICBhY2NvdW50ID0gc2VsZi5fZW5zdXJlX2FjY291bnRfbGltaXRzX3NldChhY2NvdW50KQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB2w6AgeOG7rSBsw70gZ2nhu5tpIGjhuqFuIHBoacOqbgogICAgICAgIHNlbGYuX2NoZWNrX3Nlc3Npb25fbGltaXRfYWZ0ZXJfam9iKGFjY291bnQpCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIHbDoCB44butIGzDvSBnaeG7m2kgaOG6oW4gaMOgbmcgbmfDoHkKICAgICAgICBzZWxmLl9jaGVja19kYWlseV9saW1pdF9hZnRlcl9qb2IoYWNjb3VudCkKICAgICAgICAKICAgICAgICAjIFjhu60gbMO9IHRo4buRbmcga8OqIHJpw6puZyBjaG8gam9iIGZvbGxvdwogICAgICAgIGlmIHN1Y2Nlc3MgYW5kIGpvYl90eXBlIGFuZCBqb2JfdHlwZS5sb3dlcigpID09ICJmb2xsb3ciOgogICAgICAgICAgICBzZWxmLl91cGRhdGVfZm9sbG93X3N0YXRzKGFjY291bnQpCiAgICAgICAgICAgIAogICAgZGVmIF91cGRhdGVfYmFzaWNfam9iX3N0YXRzKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBzdWNjZXNzOiBib29sKToKICAgICAgICAiIiJD4bqtcCBuaOG6rXQgdGjhu5FuZyBrw6ogam9iIGPGoSBi4bqjbiIiIgogICAgICAgIGpvYl90b2RheSA9IGFjY291bnQuZ2V0KCJqb2JfdG9kYXkiLCAwKQogICAgICAgIGpvYnNfZG9uZV9pbl9zZXNzaW9uID0gYWNjb3VudC5nZXQoImpvYnNfZG9uZV9pbl9zZXNzaW9uIiwgMCkKICAgICAgICAKICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgImxhc3Rfam9iX3RpbWUiOiBpbnQodGltZS50aW1lKCkpLAogICAgICAgICAgICAiam9iX3RvZGF5Ijogam9iX3RvZGF5ICsgMSwKICAgICAgICAgICAgImpvYnNfZG9uZV9pbl9zZXNzaW9uIjogam9ic19kb25lX2luX3Nlc3Npb24gKyAxLAogICAgICAgICAgICAidG90YWxfam9icyI6IGFjY291bnQuZ2V0KCJ0b3RhbF9qb2JzIiwgMCkgKyAxCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIG5vdCBzdWNjZXNzOgogICAgICAgICAgICB1cGRhdGVfZGF0YVsiZmFpbGVkX2pvYnMiXSA9IGFjY291bnQuZ2V0KCJmYWlsZWRfam9icyIsIDApICsgMQogICAgICAgICAgICAKICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHVwZGF0ZV9kYXRhKQogICAgICAgIGFjY291bnQudXBkYXRlKHVwZGF0ZV9kYXRhKSAgIyBD4bqtcCBuaOG6rXQgbG9jYWwgZGF0YQogICAgICAgIAogICAgZGVmIF9jaGVja19zZXNzaW9uX2xpbWl0X2FmdGVyX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiS2nhu4NtIHRyYSBnaeG7m2kgaOG6oW4gcGhpw6puIHNhdSBraGkgbMOgbSBqb2IiIiIKICAgICAgICBqb2JzX2RvbmVfaW5fc2Vzc2lvbiA9IGFjY291bnQuZ2V0KCJqb2JzX2RvbmVfaW5fc2Vzc2lvbiIsIDApCiAgICAgICAgbWF4X2pvYnNfcGVyX3Nlc3Npb24gPSBhY2NvdW50LmdldCgibWF4X2pvYnNfcGVyX3Nlc3Npb24iLCAwKSBvciBjb25maWcuTUFYX0pPQlNfUEVSX1NFU1NJT04KICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgCiAgICAgICAgaWYgam9ic19kb25lX2luX3Nlc3Npb24gPj0gbWF4X2pvYnNfcGVyX3Nlc3Npb246CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHt1c2VybmFtZX0gxJHDoyBsw6BtIMSR4bunIHttYXhfam9ic19wZXJfc2Vzc2lvbn0gam9iIHRyb25nIHBoacOqbiIpCiAgICAgICAgICAgIHNlbGYuZGIuc2V0X2FjY291bnRfaW5hY3RpdmUoYWNjb3VudFsiaWQiXSwgaW5hY3RpdmVfcmVhc29uPSLEkMOjIGhvw6BuIHRow6BuaCBz4buRIGpvYiB04buRaSDEkWEgdHJvbmcgcGhpw6puIikKICAgICAgICAgICAgc2VsZi5fY2xvc2VfYXBwX2Zvcl9hY2NvdW50KGFjY291bnQpCiAgICAgICAgICAgIAogICAgZGVmIF9jaGVja19kYWlseV9saW1pdF9hZnRlcl9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIktp4buDbSB0cmEgZ2nhu5tpIGjhuqFuIGjDoG5nIG5nw6B5IHNhdSBraGkgbMOgbSBqb2IiIiIKICAgICAgICBqb2JfdG9kYXkgPSBhY2NvdW50LmdldCgiam9iX3RvZGF5IiwgMCkKICAgICAgICBqb2JfbWF4X2RheSA9IGFjY291bnQuZ2V0KCJqb2JfbWF4X2RheSIsIDApIG9yIGNvbmZpZy5NQVhfSk9CU19QRVJfREFZCiAgICAgICAgdXNlcm5hbWUgPSBhY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJ1Vua25vd24nKQogICAgICAgIAogICAgICAgIGlmIGpvYl90b2RheSA+PSBqb2JfbWF4X2RheToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge3VzZXJuYW1lfSDEkcOjIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIHRyb25nIG5nw6B5ICh7am9iX3RvZGF5fS97am9iX21heF9kYXl9KSIpCiAgICAgICAgICAgIHNlbGYuZGIuc2V0X2FjY291bnRfaW5hY3RpdmVfdW50aWxfbmV4dF9yZXNldChhY2NvdW50WyJpZCJdLCAixJDDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGpvYiBow6BuZyBuZ8OgeSIpCiAgICAgICAgICAgIHNlbGYuX2Nsb3NlX2FwcF9mb3JfYWNjb3VudChhY2NvdW50KQogICAgICAgICAgICAKICAgIGRlZiBfdXBkYXRlX2ZvbGxvd19zdGF0cyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiQ+G6rXAgbmjhuq10IHRo4buRbmcga8OqIHJpw6puZyBjaG8gZm9sbG93IGpvYiIiIgogICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsICdVbmtub3duJykKICAgICAgICBmb2xsb3dfdG9kYXkgPSBhY2NvdW50LmdldCgiZm9sbG93X3RvZGF5IiwgMCkgKyAxCiAgICAgICAgZm9sbG93X2luX3Nlc3Npb24gPSBhY2NvdW50LmdldCgiZm9sbG93X2luX3Nlc3Npb24iLCAwKSArIDEKICAgICAgICBtYXhfZm9sbG93X2RheSA9IGFjY291bnQuZ2V0KCJtYXhfZm9sbG93X2RheSIsIDIwKQogICAgICAgIG1heF9mb2xsb3dfc2Vzc2lvbiA9IGFjY291bnQuZ2V0KCJtYXhfZm9sbG93X3Nlc3Npb24iLCA1KQogICAgICAgIAogICAgICAgICMgQ+G6rXAgbmjhuq10IHPhu5EgbGnhu4d1IGZvbGxvdwogICAgICAgIHVwZGF0ZV9mb2xsb3cgPSB7CiAgICAgICAgICAgICJmb2xsb3dfdG9kYXkiOiBmb2xsb3dfdG9kYXksCiAgICAgICAgICAgICJmb2xsb3dfaW5fc2Vzc2lvbiI6IGZvbGxvd19pbl9zZXNzaW9uLAogICAgICAgICAgICAibGFzdF9mb2xsb3dfdGltZSI6IGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UKICAgICAgICB9CiAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50WyJpZCJdLCB1cGRhdGVfZm9sbG93KQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBnaeG7m2kgaOG6oW4gZm9sbG93IHRyb25nIG5nw6B5CiAgICAgICAgaWYgZm9sbG93X3RvZGF5ID49IG1heF9mb2xsb3dfZGF5OgogICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2luYWN0aXZlX2ZvbGxvd191bnRpbF9uZXh0X3Jlc2V0KGFjY291bnRbImlkIl0sICLEkMOjIMSR4bqhdCBnaeG7m2kgaOG6oW4gam9iIGZvbG93IHRyb25nIHBoacOqbiIpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHt1c2VybmFtZX0gxJHDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGZvbGxvdyB0cm9uZyBuZ8OgeSAoe2ZvbGxvd190b2RheX0ve21heF9mb2xsb3dfZGF5fSkiKQogICAgICAgICMgS2nhu4NtIHRyYSBnaeG7m2kgaOG6oW4gZm9sbG93IHRyb25nIHBoacOqbgogICAgICAgIGVsaWYgZm9sbG93X2luX3Nlc3Npb24gPj0gbWF4X2ZvbGxvd19zZXNzaW9uOgogICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2luYWN0aXZlX2ZvbGxvdyhhY2NvdW50WyJpZCJdLCByZWFzb249IsSQw6MgxJHhuqF0IGdp4bubaSBo4bqhbiBqb2IgZm9sbG93IHRyb25nIHBoacOqbiIpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHt1c2VybmFtZX0gxJHDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGZvbGxvdyB0cm9uZyBwaGnDqm4gKHtmb2xsb3dfaW5fc2Vzc2lvbn0ve21heF9mb2xsb3dfc2Vzc2lvbn0pIikKICAgICAgICAKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICAiIiIKICAgICAgICBLaOG7n2kgxJHhu5luZyBKb2JTZXJ2aWNlIHRyb25nIHRocmVhZCByacOqbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICB0aHJlYWRpbmcuVGhyZWFkOiBUaHJlYWQgxJFhbmcgY2jhuqF5IEpvYlNlcnZpY2UgaG/hurdjIE5vbmUgbuG6v3UgbOG7l2kKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhurd0IHRy4bqhbmcgdGjDoWkgcnVubmluZwogICAgICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgICAgIHNlbGYuZm9yY2Vfc3RvcCA9IEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIHRocmVhZAogICAgICAgICAgICB0aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLnJ1bikKICAgICAgICAgICAgdGhyZWFkLmRhZW1vbiA9IFRydWUKICAgICAgICAgICAgdGhyZWFkLnN0YXJ0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB0aHJlYWQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBraOG7n2kgxJHhu5luZyBKb2JTZXJ2aWNlIikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICBkZWYgcmVzZXRfaW5hY3RpdmVfYWNjb3VudHMoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB2w6Aga2jDtGkgcGjhu6VjIGPDoWMgdMOgaSBraG/huqNuIGluYWN0aXZlIMSRw6MgaOG6v3QgdGjhu51pIGdpYW4gY2jhu50KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB04bqldCBj4bqjIHTDoGkga2hv4bqjbiDhu58gdHLhuqFuZyB0aMOhaSBpbmFjdGl2ZQogICAgICAgICAgICBmb3IgYXBwX25hbWUgaW4gc2VsZi5lbmFibGVkX2FwcHM6CiAgICAgICAgICAgICAgICBpbmFjdGl2ZV9hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD1hcHBfbmFtZSwgc3RhdHVzPSJpbmFjdGl2ZSIpIG9yIFtdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGluYWN0aXZlX2FjY291bnRzOgogICAgICAgICAgICAgICAgICAgIGpvYl9kaXNhYmxlX3VudGlsID0gYWNjb3VudC5nZXQoImpvYl9kaXNhYmxlX3VudGlsIiwgMCkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE7hur91IMSRw6MgaOG6v3QgdGjhu51pIGdpYW4gY2jhu50sIGNodXnhu4NuIHbhu4EgdHLhuqFuZyB0aMOhaSBhY3RpdmUKICAgICAgICAgICAgICAgICAgICBpZiBqb2JfZGlzYWJsZV91bnRpbCA8PSBjdXJyZW50X3RpbWU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudFsiaWQiXSwgeyJzdGF0dXMiOiAiYWN0aXZlIn0pCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IChJRDoge2FjY291bnRbJ2lkJ119KSDEkcOjIGjhur90IHRo4budaSBnaWFuIGNo4budLCDEkcOjIGNodXnhu4NuIHbhu4EgdHLhuqFuZyB0aMOhaSBhY3RpdmUiKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ19taW51dGVzID0gaW50KChqb2JfZGlzYWJsZV91bnRpbCAtIGN1cnJlbnRfdGltZSkgLyA2MCkKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiVMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IGPDsm4ge3JlbWFpbmluZ19taW51dGVzfSBwaMO6dCDhu58gdHLhuqFuZyB0aMOhaSBpbmFjdGl2ZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgdsOgIGtow7RpIHBo4bulYyBraMOzYSBGT0xMT1cKICAgICAgICAgICAgZm9yIGFwcF9uYW1lIGluIHNlbGYuZW5hYmxlZF9hcHBzOgogICAgICAgICAgICAgICAgYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9YXBwX25hbWUpIG9yIFtdCiAgICAgICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NvdW50czoKICAgICAgICAgICAgICAgICAgICBpZiBhY2NvdW50LmdldCgiZGlzYWJsZV9mb2xsb3ciKToKICAgICAgICAgICAgICAgICAgICAgICAgdW50aWxfdHMgPSBhY2NvdW50LmdldCgiZm9sbG93X2Rpc2FibGVfdW50aWwiLCAwKQogICAgICAgICAgICAgICAgICAgICAgICBpZiB1bnRpbF90cyA8PSBjdXJyZW50X3RpbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHsiZGlzYWJsZV9mb2xsb3ciOiBGYWxzZSwgImZvbGxvd19kaXNhYmxlX3VudGlsIjogMCwgImluYWN0aXZlX2ZvbGxvd19yZWFzb24iOiAiIiwgImlzX3N5bmMiOiBGYWxzZX0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgbeG7nyBraMOzYSBGT0xMT1cgY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcgPSBpbnQoKHVudGlsX3RzIC0gY3VycmVudF90aW1lKSAvIDYwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiVMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IGPDsm4ge3JlbWFpbmluZ30gcGjDunQga2jDs2EgRk9MTE9XIikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBraeG7g20gdHJhIHbDoCBraMO0aSBwaOG7pWMgdMOgaSBraG/huqNuIGluYWN0aXZlIikKICAgIAogICAgZGVmIGlzX2FjY291bnRfY2FuX3J1bl9qb2Ioc2VsZiwgYXBwX25hbWU6c3RyICkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gY8OzIHRo4buDIGNo4bqheSBqb2Iga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9YXBwX25hbWUpCiAgICAgICAgZm9yIGFjY291bnQgaW4gYWNjb3VudHM6CiAgICAgICAgICAgIGlmKHNlbGYuX2Nhbl9ydW5fam9iKGFjY291bnQpKToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgQ2jhuqF5IEpvYlNlcnZpY2UgdHJvbmcgbeG7mXQgdsOybmcgbOG6t3AKICAgICAgICAiIiIKICAgICAgICBpZiBub3Qgc2VsZi5pc19pbml0aWFsaXplZDoKICAgICAgICAgICAgaWYgbm90IHNlbGYuaW5pdGlhbGl6ZSgpOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4Mga2jhu59pIHThuqFvIEpvYlNlcnZpY2UuIEtow7RuZyB0aOG7gyBjaOG6oXkuIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIGxvZ2dlci5pbmZvKCJC4bqvdCDEkeG6p3UgY2jhuqF5IEpvYlNlcnZpY2UuLi4iKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBkZXZpY2VfaWQKICAgICAgICBkZXZpY2VfaWQgPSBzZWxmLmRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGRldmljZV9pZDoKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyB4w6FjIMSR4buLbmggZGV2aWNlX2lkIGhp4buHbiB04bqhaSwgSm9iU2VydmljZSBraMO0bmcgdGjhu4MgY2jhuqF5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICMgQmnhur9uIGzGsHUgdHLhu68gdMOgaSBraG/huqNuIMSRYW5nIGzDoG0gdmnhu4djIGhp4buHbiB04bqhaSBjaG8gbeG7l2kg4bupbmcgZOG7pW5nCiAgICAgICAgY3VycmVudF93b3JraW5nX2FjY291bnRzID0ge30KICAgICAgICAKICAgICAgICB3aGlsZSBzZWxmLnJ1bm5pbmc6CiAgICAgICAgICAgICMgUmVzZXQgYmnhur9uIGZvcmNlX3N0b3AgbuG6v3UgY8OzCiAgICAgICAgICAgIHdpdGggc2VsZi5fbG9jazoKICAgICAgICAgICAgICAgIHNlbGYuZm9yY2Vfc3RvcCA9IEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgecOqdSBj4bqndSB04bqhbSBk4burbmcgdOG7qyBzZXJ2ZXIgKGNvbmZpZyAicGF1c2Vfam9iIikKICAgICAgICAgICAgaWYgc2VsZi5kYi5nZXQoInBhdXNlX2pvYiIsIEZhbHNlKToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJDw7MgecOqdSBj4bqndSB04bqhbSBk4burbmcgdOG7qyBzZXJ2ZXIsIHThuqFtIGThu6tuZyB44butIGzDvSBqb2IiKQogICAgICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gdHLhuqFuZyB0aMOhaSB0aGnhur90IGLhu4sga2jDtG5nIGhp4buDbiB0aOG7iyDEkWFuZyBsw6BtIHZp4buHYwogICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImRldmljZV9pc193b3JraW5nIiwgRmFsc2UpCiAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgiZGV2aWNlX21lc3NhZ2UiLCBKb2JTZXJ2aWNlQ29uc3RhbnRzLk1TR19ERVZJQ0VfUEFVU0VEX1NFUlZFUikKICAgICAgICAgICAgICAgIGpvYl9jaGVja19pbnRlcnZhbCA9IHNlbGYuZGIuZ2V0KCJqb2JfY2hlY2tfaW50ZXJ2YWwiLCBjb25maWcuSk9CX0NIRUNLX0lOVEVSVkFMKQogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcChqb2JfY2hlY2tfaW50ZXJ2YWwpOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSZXNldCBi4buZIMSR4bq/bSBow6BuZyBuZ8OgeSBu4bq/dSBj4bqnbgogICAgICAgICAgICBzZWxmLl9yZXNldF9kYWlseV9jb3VudGVycygpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgdsOgIGtow7RpIHBo4bulYyBjw6FjIHTDoGkga2hv4bqjbiBpbmFjdGl2ZSDEkcOjIGjhur90IHRo4budaSBnaWFuIGNo4budCiAgICAgICAgICAgIHNlbGYucmVzZXRfaW5hY3RpdmVfYWNjb3VudHMoKQogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBEdXnhu4d0IHF1YSB04burbmcgYXBwIMSRxrDhu6NjIGvDrWNoIGhv4bqhdAogICAgICAgICAgICAgICAgZW5hYmxlZF9hcHBzID0gc2VsZi5kYi5nZXQoImVuYWJsZWRfYXBwcyIsIGNvbmZpZy5FTkFCTEVEX0FQUFMpCiAgICAgICAgICAgICAgICBpZihsZW4oZW5hYmxlZF9hcHBzKT09MCk6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJLaMO0bmcgY8OzIGFwcCBuw6BvIMSRxrDhu6NjIGvDrWNoIGhv4bqhdCwgxJHhu6NpIHtjb25maWcuSk9CX0NIRUNLX0lOVEVSVkFMfSBnacOieSIpCiAgICAgICAgICAgICAgICAgICAgIyDEkOG7o2kgbeG7mXQga2hv4bqjbmcgdGjhu51pIGdpYW4gdHLGsOG7m2Mga2hpIGtp4buDbSB0cmEgbOG6oWkgam9iCiAgICAgICAgICAgICAgICAgICAgam9iX2NoZWNrX2ludGVydmFsID0gc2VsZi5kYi5nZXQoImpvYl9jaGVja19pbnRlcnZhbCIsIGNvbmZpZy5KT0JfQ0hFQ0tfSU5URVJWQUwpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcChqb2JfY2hlY2tfaW50ZXJ2YWwpOgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICAgICAgZm9yIGFwcF9uYW1lIGluIGVuYWJsZWRfYXBwczoKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBj4bqnbiBk4burbmcga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCBzZWxmLl9sb2NrOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmZvcmNlX3N0b3Agb3Igbm90IHNlbGYucnVubmluZzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBhcHAgY8OzIHRyb25nIGpvYl9oYW5kbGVycyBraMO0bmcKICAgICAgICAgICAgICAgICAgICBpZiBhcHBfbmFtZSBub3QgaW4gc2VsZi5qb2JfaGFuZGxlcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHTDrG0gdGjhuqV5IGpvYiBoYW5kbGVyIGNobyB7YXBwX25hbWV9LCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHbDoCDEkeG7k25nIGLhu5kgdMOgaSBraG/huqNuIG7hur91IGPhuqduCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5fY2hlY2tfYWNjb3VudF9zeW5jX3N0YXR1cyhhcHBfbmFtZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDhu5NuZyBi4buZIHTDoGkga2hv4bqjbiBjaG8ge2FwcF9uYW1lfS4uLiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3N5bmNfYWNjb3VudHNfZm9yX2FwcChhcHBfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IHNlbGYuam9iX2hhbmRsZXJzW2FwcF9uYW1lXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTOG6pXkgdMOgaSBraG/huqNuIMSRYW5nIGzDoG0gdmnhu4djIGhp4buHbiB04bqhaSBj4bunYSDhu6luZyBk4bulbmcgbsOgeQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfYWNjb3VudCA9IGN1cnJlbnRfd29ya2luZ19hY2NvdW50cy5nZXQoYXBwX25hbWUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSBjaMawYSBjw7MgdMOgaSBraG/huqNuIMSRYW5nIGzDoG0gdmnhu4djLCBraeG7g20gdHJhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGN1cnJlbnRfYWNjb3VudDoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLmlzX2FjY291bnRfY2FuX3J1bl9qb2IoYXBwX25hbWUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJLaMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIMSRxrDhu6NjIGzDoG0gdmnhu4djLCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgiZGV2aWNlX21lc3NhZ2UiLCBKb2JTZXJ2aWNlQ29uc3RhbnRzLk1TR19ERVZJQ0VfTk9fQUNDT1VOVFMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIMSQ4bujaSBt4buZdCBraG/huqNuZyB0aOG7nWkgZ2lhbiB0csaw4bubYyBraGkga2nhu4NtIHRyYSBs4bqhaSBqb2IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYl9jaGVja19pbnRlcnZhbCA9IHNlbGYuZGIuZ2V0KCJqb2JfY2hlY2tfaW50ZXJ2YWwiLCBjb25maWcuSk9CX0NIRUNLX0lOVEVSVkFMKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2FmZV9zbGVlcChqb2JfY2hlY2tfaW50ZXJ2YWwpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSB1c2VybmFtZSBj4bunYSB0w6BpIGtob+G6o24gxJFhbmcgxJHEg25nIG5o4bqtcAogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lID0gaGFuZGxlci5nZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudF91c2VybmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSB0w6BpIGtob+G6o24gdMawxqFuZyDhu6luZyB0cm9uZyBEQiAoxJHDoyBs4buNYyB0aGVvIGRldmljZV9pZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHMoYXBwPWFwcF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5fYWNjb3VudCA9IG5leHQoKGFjYyBmb3IgYWNjIGluIGFjY291bnRzIGlmIGFjYy5nZXQoInVuaXF1ZV91c2VybmFtZSIpID09IGN1cnJlbnRfdXNlcm5hbWUpLCBOb25lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsb2dpbl9hY2NvdW50OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHEg25nIG5o4bqtcCB0cm9uZyBEQgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIucmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChhcHBfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGxvZ2luX2FjY291bnRbImlkIl0sIHsiaXNfbG9naW4iOiBUcnVlfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFPhu60gZOG7pW5nIHTDoGkga2hv4bqjbiBuw6B5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF93b3JraW5nX2FjY291bnRzW2FwcF9uYW1lXSA9IGxvZ2luX2FjY291bnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2FjY291bnQgPSBsb2dpbl9hY2NvdW50CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB24bqrbiBraMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIMSR4buDIGzDoG0gdmnhu4djLCBi4buPIHF1YSDhu6luZyBk4bulbmcgbsOgeQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBjdXJyZW50X2FjY291bnQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiS2jDtG5nIGPDsyB0w6BpIGtob+G6o24gbsOgbyDEkWFuZyDEkcSDbmcgbmjhuq1wIGNobyB7YXBwX25hbWV9LCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gaGnhu4duIHThuqFpIGPDsyB0aOG7gyBjaOG6oXkgam9iIGtow7RuZwogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9jYW5fcnVuX2pvYihjdXJyZW50X2FjY291bnQpOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7Y3VycmVudF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IGtow7RuZyB0aOG7gyBjaOG6oXkgam9iLCB0w6xtIHTDoGkga2hv4bqjbiBraMOhYyIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0gdMOgaSBraG/huqNuIGtow6FjIHRo4buPYSBtw6NuIMSRaeG7gXUga2nhu4duICjEkcOjIGzhu41jIHRoZW8gZGV2aWNlX2lkKQogICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD1hcHBfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9hY2NvdW50ID0gbmV4dCgoYWNjIGZvciBhY2MgaW4gYWNjb3VudHMgaWYgc2VsZi5fY2FuX3J1bl9qb2IoYWNjKSksIE5vbmUpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgbmV4dF9hY2NvdW50OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJLaMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIGPDsyB0aOG7gyBjaOG6oXkgam9iIGNobyB7YXBwX25hbWV9LCBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dvcmtpbmdfYWNjb3VudHNbYXBwX25hbWVdID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5jbG9zZV9hcHAoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIHNhbmcgdMOgaSBraG/huqNuIGtow6FjCiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaF9zdWNjZXNzID0gaGFuZGxlci5zd2l0Y2hfdG9fYWNjb3VudChuZXh0X2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN3aXRjaF9zdWNjZXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF93b3JraW5nX2FjY291bnRzW2FwcF9uYW1lXSA9IG5leHRfYWNjb3VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hY2NvdW50ID0gbmV4dF9hY2NvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24ge25leHRfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSwgYuG7jyBxdWEiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF93b3JraW5nX2FjY291bnRzW2FwcF9uYW1lXSA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2xvc2VfYXBwKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaOG7iSBjaMSDbSBzw7NjIG7hur91IMSRxrDhu6NjIGLhuq10IHRyb25nIGNvbmZpZyB2w6AgY2jGsGEgY2jEg20gc8OzYyB0cm9uZyBwaGnDqm4gbsOgeSBob+G6t2MgxJHDoyBxdcOhIDEgdGnhur9uZwogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuZGIuZ2V0KCJjYXJlX2luX3dvcmtpbmdfam9iIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgICAgICAgICBub3dfdHMgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfY2FyZV90aW1lID0gY3VycmVudF9hY2NvdW50LmdldCgnbGFzdF9jYXJlX3RpbWUnLCAwKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90IGxhc3RfY2FyZV90aW1lKSBvciAobm93X3RzIC0gbGFzdF9jYXJlX3RpbWUgPiA3MjAwKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBoYXNhdHRyKGhhbmRsZXIsICJwZXJmb3JtX2NhcmUiKSBhbmQgY2FsbGFibGUoaGFuZGxlci5wZXJmb3JtX2NhcmUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gY2jEg20gc8OzYyBuaOG6uSBjaG8gdMOgaSBraG/huqNuIHtjdXJyZW50X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gKHthcHBfbmFtZX0pIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5wZXJmb3JtX2NhcmUoY3VycmVudF9hY2NvdW50KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEzGsHUgbOG6oWkgdGjhu51pIGdpYW4gY2jEg20gc8OzYyB2w6BvIERCCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoY3VycmVudF9hY2NvdW50WyJpZCJdLCB7Imxhc3RfY2FyZV90aW1lIjogbm93X3RzfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgX2NhcmVfZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBjaMSDbSBzw7NjIG5o4bq5IHTDoGkga2hv4bqjbiB7Y3VycmVudF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9OiB7X2NhcmVfZX0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBqb2IgduG7m2kgdMOgaSBraG/huqNuIGhp4buHbiB04bqhaQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJBhbmcgY2jhuqF5IGpvYiBjaG8gdMOgaSBraG/huqNuIHtjdXJyZW50X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gKHthcHBfbmFtZX0pLi4uIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTOG6pXkgdGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgICAgICAgICAgICAgam9iID0gaGFuZGxlci5mZXRjaF9qb2IoY3VycmVudF9hY2NvdW50KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgam9iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXNldCBz4buRIGzhuqduIHRo4bqldCBi4bqhaSBsacOqbiB0aeG6v3Aga2hpIGPDsyBqb2IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbGVkX2pvYl9hdHRlbXB0c1tjdXJyZW50X2FjY291bnRbImlkIl1dID0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0aGnhur90IGLhu4sgxJFhbmcgbMOgbSB2aeG7h2MgdsOgIGdoaSBtZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgiZGV2aWNlX2lzX3dvcmtpbmciLCBUcnVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGpvYi5nZXQoJ2xpbmsnLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxpbmsuc3RhcnRzd2l0aCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rID0gbGluay5yZXBsYWNlKCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycsICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImRldmljZV9tZXNzYWdlIiwgZiJbe2FwcF9uYW1lfV1be2N1cnJlbnRfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfV1be2pvYi5nZXQoJ3R5cGUnKX1dW3tsaW5rfV0iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB0w6BpIGtob+G6o24gxJFhbmcgYuG7iyBraMOzYSBGT0xMT1cgdsOgIGpvYiBsw6AgZm9sbG93IHRow6wgYuG7jyBxdWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBqb2IgYW5kIGpvYi5nZXQoInR5cGUiLCAiIikubG93ZXIoKSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudF9hY2NvdW50LmdldCgiZGlzYWJsZV9mb2xsb3ciLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZV91bnRpbCA9IGN1cnJlbnRfYWNjb3VudC5nZXQoImZvbGxvd19kaXNhYmxlX3VudGlsIiwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lIGFzIF90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbmFjdGl2ZV91bnRpbCA+IF90LnRpbWUoKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7Y3VycmVudF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IMSRYW5nIGLhu4sga2jDs2EgRk9MTE9XIHThu5tpIHtpbmFjdGl2ZV91bnRpbH0sIHNraXAgam9iIGZvbGxvdyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBC4buPIHF1YSBqb2IgbsOgeSBi4bqxbmcgY8OhY2ggc2tpcCB0csOqbiBHb0xpa2UgxJHhu4Mga2jDtG5nIGLhu4sgcGjhuqF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLnJlY29yZF9qb2JfaGlzdG9yeShjdXJyZW50X2FjY291bnQsIGpvYiwgeyJzdGF0dXMiOiAyLCAic3VjY2VzcyI6IEZhbHNlLCAibWVzc2FnZSI6ICLEkGFuZyBi4buLIGtow7NhIEZPTExPVyAsIEjhu6d5IGpvYi4ifSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5za2lwX2pvYihjdXJyZW50X2FjY291bnQsIGpvYikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIF9lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlNraXAgam9iIGzhu5dpOiB7X2V9IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHJlc2V0IGRldmljZSBtZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImRldmljZV9pc193b3JraW5nIiwgRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImRldmljZV9tZXNzYWdlIiwgIiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaOG7nSBt4buZdCBraG/huqNuZyB0csaw4bubYyB2w7JuZyBs4bq3cCB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoc2VsZi5kYi5nZXQoImpvYl9jaGVja19pbnRlcnZhbCIsIGNvbmZpZy5KT0JfQ0hFQ0tfSU5URVJWQUwpKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRo4buxYyBoaeG7h24gam9iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iX3Jlc3VsdCA9IGhhbmRsZXIuZXhlY3V0ZV9qb2IoY3VycmVudF9hY2NvdW50LCBqb2IpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU2F1IGtoaSBr4bq/dCB0aMO6YyBqb2IgKHRow6BuaCBjw7RuZyBoYXkgdGjhuqV0IGLhuqFpKSDEkeG6t3QgbOG6oWkgdHLhuqFuZyB0aMOhaSBsw6BtIHZp4buHYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuc2V0KCJkZXZpY2VfaXNfd29ya2luZyIsIEZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuc2V0KCJkZXZpY2VfbWVzc2FnZSIsICIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdGjDtG5nIHRpbiB04burIGvhur90IHF14bqjIGpvYgogICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iX3N0YXR1cyA9IGpvYl9yZXN1bHRbInN0YXR1cyJdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2Jfc3VjY2VzcyA9IGpvYl9yZXN1bHRbInN1Y2Nlc3MiXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iX21lc3NhZ2UgPSBqb2JfcmVzdWx0WyJtZXNzYWdlIl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBY4butIGzDvSBs4buXaSBmb2xsb3cgcGVuZGluZyAoc3RhdHVzIDQpIFjhu60gbMO9IGNobyBpbnN0YWdyYW0gdGjDtGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGpvYl9zdGF0dXMgPT0gNCBhbmQgam9iLmdldCgidHlwZSIsICIiKS5sb3dlcigpID09ICJmb2xsb3ciOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNudCA9IHNlbGYuZm9sbG93X3BlbmRpbmdfY291bnRzLmdldChjdXJyZW50X2FjY291bnRbImlkIl0sIDApICsgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZm9sbG93X3BlbmRpbmdfY291bnRzW2N1cnJlbnRfYWNjb3VudFsiaWQiXV0gPSBjbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfcGVuZGluZyA9IDUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjbnQgPj0gbWF4X3BlbmRpbmc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiVMOgaSBraG/huqNuIHtjdXJyZW50X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gxJHDoyB7Y250fSBs4bqnbiBsacOqbiB0aeG6v3AgZm9sbG93IHBlbmRpbmcsIGtow7NhIEZPTExPVyDEkeG6v24gZ2nhu50gcmVzZXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2luYWN0aXZlX2ZvbGxvd191bnRpbF9uZXh0X3Jlc2V0KGN1cnJlbnRfYWNjb3VudFsiaWQiXSwgIkxpw6puIHRp4bq/cCBs4buXaSBmb2xsb3cgcGVuZGluZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZm9sbG93X3BlbmRpbmdfY291bnRzW2N1cnJlbnRfYWNjb3VudFsiaWQiXV0gPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgxJDDs25nIGFwcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBfbmFtZV90bXAgPSBjdXJyZW50X2FjY291bnQuZ2V0KCJhcHAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBhcHBfbmFtZV90bXAgYW5kIGFwcF9uYW1lX3RtcCBpbiBjb25maWcuQVBQX1BBQ0tBR0VTOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuY2xvc2VfYXBwKGNvbmZpZy5BUFBfUEFDS0FHRVNbYXBwX25hbWVfdG1wXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgam9iLmdldCgidHlwZSIsICIiKS5sb3dlcigpID09ICJmb2xsb3ciOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzZXQgxJHhur9tIG7hur91IGpvYiBraMO0bmcgcGjhuqNpIGZvbGxvdyBwZW5kaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mb2xsb3dfcGVuZGluZ19jb3VudHNbY3VycmVudF9hY2NvdW50WyJpZCJdXSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBCw6FvIGPDoW8ga+G6v3QgcXXhuqMgduG7m2kgbWVzc2FnZSB04burIGvhur90IHF14bqjIGpvYgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0X3N1Y2Nlc3MgPSBoYW5kbGVyLnJlcG9ydF9qb2IoY3VycmVudF9hY2NvdW50LCBqb2IsIGpvYl9yZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRo4buRbmcga8OqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl91cGRhdGVfam9iX3N0YXRzKGN1cnJlbnRfYWNjb3VudCwgam9iX3N1Y2Nlc3MsIGpvYi5nZXQoInR5cGUiLCAiIikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiS+G6v3QgcXXhuqMgam9iOiB7am9iX21lc3NhZ2V9IChzdGF0dXM6IHtqb2Jfc3RhdHVzfSkiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hY2NvdW50ID0gc2VsZi5kYi5nZXRfYWNjb3VudChjdXJyZW50X2FjY291bnRbImlkIl0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dvcmtpbmdfYWNjb3VudHNbYXBwX25hbWVdID0gY3VycmVudF9hY2NvdW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIGPDsm4gY8OzIHRo4buDIGNo4bqheSBqb2IgbuG7r2Ega2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fY2FuX3J1bl9qb2IoY3VycmVudF9hY2NvdW50KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7Y3VycmVudF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IMSRw6MgaOG6v3Qgam9iIGPDsyB0aOG7gyBjaOG6oXkiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQ2jhuqF5IG51w7RpIHTDoGkga2hv4bqjbiBu4bq/dSDEkcOjIGNo4bqheSBo4bq/dCBqb2IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmRiLmdldChmInthcHBfbmFtZX1fY2FyZV9lbmFibGUiLCBUcnVlKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5wZXJmb3JtX2NhcmUoY3VycmVudF9hY2NvdW50KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIG51w7RpIHTDoGkga2hv4bqjbiB7Y3VycmVudF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSBsw6AgY+G6p24gdMOsbSB0w6BpIGtob+G6o24ga2jDoWMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dvcmtpbmdfYWNjb3VudHNbYXBwX25hbWVdID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2xvc2VfYXBwKCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiS2jDtG5nIGPDsyBqb2Iga2jhuqMgZOG7pW5nIGNobyB0w6BpIGtob+G6o24ge2N1cnJlbnRfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVMSDbmcgc+G7kSBs4bqnbiBraMO0bmcgY8OzIGpvYiBsacOqbiB0aeG6v3AgdHJvbmcgYuG7mSBuaOG7mwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGN1cnJlbnRfYWNjb3VudFsiaWQiXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mYWlsZWRfam9iX2F0dGVtcHRzW2FjY291bnRfaWRdID0gc2VsZi5mYWlsZWRfam9iX2F0dGVtcHRzLmdldChhY2NvdW50X2lkLCAwKSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZF9hdHRlbXB0cyA9IHNlbGYuZmFpbGVkX2pvYl9hdHRlbXB0c1thY2NvdW50X2lkXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIE7hur91IDUgbOG6p24gbGnDqm4gdGnhur9wIGtow7RuZyBjw7Mgam9iLCDEkeG6t3QgdMOgaSBraG/huqNuIHbDoG8gY2jhur8gxJHhu5kgbmdo4buJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBmYWlsZWRfYXR0ZW1wdHMgPj0gNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29sZG93bl9taW51dGVzID0gc2VsZi5kYi5nZXQoImNvb2xkb3duX2dldF9qb2JfZ29saWtlIiwgMzApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJUw6BpIGtob+G6o24ge2N1cnJlbnRfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSDEkcOjIDUgbOG6p24gbGnDqm4gdGnhur9wIGtow7RuZyBjw7Mgam9iLCBjaG8gbmdo4buJIHtjb29sZG93bl9taW51dGVzfSBwaMO6dCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXRfYWNjb3VudF9pbmFjdGl2ZShjdXJyZW50X2FjY291bnRbImlkIl0sIGNvb2xkb3duX21pbnV0ZXM9Y29vbGRvd25fbWludXRlcywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluYWN0aXZlX3JlYXNvbj1mIktow7RuZyB0w6xtIHRo4bqleSBqb2Iga2jhuqMgZOG7pW5nIHNhdSA1IGzhuqduIHRo4butIGxpw6puIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwX25hbWUgPSBjdXJyZW50X2FjY291bnQuZ2V0KCJhcHAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFwcF9uYW1lIGFuZCBhcHBfbmFtZSBpbiBjb25maWcuQVBQX1BBQ0tBR0VTOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoY29uZmlnLkFQUF9QQUNLQUdFU1thcHBfbmFtZV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgbOG6oWkgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24gdOG7qyBkYXRhYmFzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfYWNjb3VudCA9IHNlbGYuZGIuZ2V0X2FjY291bnQoY3VycmVudF9hY2NvdW50WyJpZCJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd29ya2luZ19hY2NvdW50c1thcHBfbmFtZV0gPSBjdXJyZW50X2FjY291bnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDEkOG7o2kgbeG7mXQga2hv4bqjbmcgdGjhu51pIGdpYW4gdHLGsOG7m2Mga2hpIGtp4buDbSB0cmEgbOG6oWkgam9iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JfY2hlY2tfaW50ZXJ2YWwgPSBzZWxmLmRiLmdldCgiam9iX2NoZWNrX2ludGVydmFsIiwgY29uZmlnLkpPQl9DSEVDS19JTlRFUlZBTCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoam9iX2NoZWNrX2ludGVydmFsKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGpvYiBjaG8gdMOgaSBraG/huqNuIHtjdXJyZW50X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBjaOG6oXkgam9iIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bujaSB0csaw4bubYyBraGkgY2jhuqF5IGzhuqFpCiAgICAgICAgICAgIGpvYl9jaGVja19pbnRlcnZhbCA9IHNlbGYuZGIuZ2V0KCJqb2JfY2hlY2tfaW50ZXJ2YWwiLCBjb25maWcuSk9CX0NIRUNLX0lOVEVSVkFMKQogICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKGpvYl9jaGVja19pbnRlcnZhbCk6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgIGRlZiBzdG9wKHNlbGYpOgogICAgICAgICIiIkThu6tuZyBKb2JTZXJ2aWNlIiIiCiAgICAgICAgd2l0aCBzZWxmLl9sb2NrOgogICAgICAgICAgICBzZWxmLnJ1bm5pbmcgPSBGYWxzZQogICAgICAgIGxvZ2dlci5pbmZvKCLEkGFuZyBk4burbmcgSm9iU2VydmljZS4uLiIpCiAgICAgICAgCiAgICBkZWYgZm9yY2Vfc3RvcF9hbGwoc2VsZik6CiAgICAgICAgIiIiROG7q25nIG5nYXkgbOG6rXAgdOG7qWMgdOG6pXQgY+G6oyBjw6FjIGhv4bqhdCDEkeG7mW5nIiIiCiAgICAgICAgd2l0aCBzZWxmLl9sb2NrOgogICAgICAgICAgICBzZWxmLmZvcmNlX3N0b3AgPSBUcnVlCiAgICAgICAgICAgIHNlbGYucnVubmluZyA9IEZhbHNlCiAgICAgICAgbG9nZ2VyLmluZm8oIkThu6tuZyBuZ2F5IGzhuq1wIHThu6ljIHThuqV0IGPhuqMgY8OhYyBob+G6oXQgxJHhu5luZy4uLiIpCgogICAgZGVmIHNodXRkb3duKHNlbGYpOgogICAgICAgICIiIsSQw7NuZyBk4buLY2ggduG7pSwgZOG7q25nIHThuqV0IGPhuqMgd29ya2VyIHRocmVhZHMiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkThu6tuZyBuZ2F5IGzhuq1wIHThu6ljIHThuqV0IGPhuqMgY8OhYyBob+G6oXQgxJHhu5luZy4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQw6FuaCBk4bqldSBk4burbmcKICAgICAgICAgICAgc2VsZi5ydW5uaW5nID0gRmFsc2UKICAgICAgICAgICAgc2VsZi5mb3JjZV9zdG9wID0gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkMOhbmggdGjhu6ljIHThuqV0IGPhuqMgd29ya2VyIHRocmVhZHMgxJHhu4MgY2jDum5nIGtp4buDbSB0cmEgxJFp4buBdSBraeG7h24gZOG7q25nCiAgICAgICAgICAgIGZvciB3b3JrZXIgaW4gc2VsZi53b3JrZXJzLnZhbHVlcygpOgogICAgICAgICAgICAgICAgaWYgaGFzYXR0cih3b3JrZXIsICJ3YWtlX3VwIikgYW5kIGNhbGxhYmxlKHdvcmtlci53YWtlX3VwKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci53YWtlX3VwKCkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDDs25nIGvhur90IG7hu5FpIGRhdGFiYXNlIMSR4buDIHRyw6FuaCBs4buXaSB0aHJlYWQKICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCAnZGInKSBhbmQgc2VsZi5kYjoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLmNsb3NlKCkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSDEkcOzbmcga+G6v3QgbuG7kWkgZGF0YWJhc2U6IHtzdHIoZSl9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G7nSDEkeG7gyB0aMO0bmcgYsOhbyDEkcOjIGThu6tuZwogICAgICAgICAgICBzZWxmLnN0b3BwZWQgPSBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgc2h1dGRvd24gSm9iU2VydmljZSIp').decode('utf-8'))
