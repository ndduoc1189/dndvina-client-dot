import base64
exec(base64.b64decode('import time
from typing import Dict, Any, List, Optional, Callable
from abc import ABC, abstractmethod
import utils
from utils import LogLevel, Logger
import urllib.parse
import random
import config
# Tạo logger cho BaseJob
logger = utils.get_logger("BaseJob")

class BaseJob(ABC):
    def __init__(self, db_service, helper_service, golike_service=None):
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.app_package = ""
        self.app_name = ""
        # Hàm sleep mặc định là time.sleep
        self._sleep_func = time.sleep
        # Tạo logger cho instance cụ thể
        self.logger = utils.get_logger(f"Job.{self.__class__.__name__}")
        
    @abstractmethod
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản từ thiết bị"""
        pass
        
    @abstractmethod
    def perform_job(self, account: Dict[str, Any]):
        """Thực hiện công việc với tài khoản"""
        self.logger.info(f"Đang thực hiện job cho tài khoản: {account['unique_username']}")
        
        # Kiểm tra giới hạn job
        max_jobs_per_day = self.db.get_device_config("max_jobs_per_day", 30)
        max_jobs_per_session = self.db.get_device_config("max_jobs_per_session", 10)
        
        job_today = account.get('job_today', 0)
        jobs_done_in_session = account.get('jobs_done_in_session', 0)
        
        # Kiểm tra giới hạn job theo ngày
        if job_today >= max_jobs_per_day:
            self.logger.info(f"Tài khoản {account['unique_username']} đã đạt giới hạn job hôm nay ({job_today}/{max_jobs_per_day})")
            return
            
        # Kiểm tra giới hạn job theo phiên
        if jobs_done_in_session >= max_jobs_per_session:
            self.logger.info(f"Tài khoản {account['unique_username']} đã đạt giới hạn job trong phiên này ({jobs_done_in_session}/{max_jobs_per_session})")
            return
        
        # Lấy job từ GoLike
        jobs = self.get_available_jobs(account)
        if not jobs:
            self.logger.info(f"Không có job khả dụng cho tài khoản {account['unique_username']}")
            return
            
        # Xử lý từng job
        for job in jobs:
            result = self.execute_job(account, job)
            if result["success"]:
                self.logger.info(f"Đã hoàn thành job {job['id']} loại {job['type']}")
            else:
                self.logger.warning(f"Không thể hoàn thành job {job['id']} loại {job['type']}: {result['message']}")
                
            # Báo cáo kết quả job
            report_success = self.report_job(account, job, result)
            if report_success:
                self.logger.info(f"Đã báo cáo kết quả job {job['id']} thành công")
            else:
                self.logger.warning(f"Không thể báo cáo kết quả job {job['id']}")
                
            # Đợi thời gian cấu hình trước khi làm job tiếp theo
            job_interval = self.db.get_device_config("job_interval_seconds", 5)
            wait_time = random.randint(job_interval, job_interval + 5)
            self.logger.info(f"Đợi {wait_time}s trước khi làm job tiếp theo")
            self.safe_sleep(wait_time)
        
    @abstractmethod
    def perform_care(self, account: Dict[str, Any]):
        """Nuôi tài khoản, tương tác để tăng độ uy tín"""
        pass
        
    def sync_accounts_to_db(self) -> List[Dict[str, Any]]:
        """
        Đồng bộ tài khoản từ thiết bị vào database
        """
        try:
            # Lấy danh sách tài khoản từ thiết bị
            device_accounts = self.get_accounts_from_device()
            
            # Lấy device_id từ database
            android_id = self.db.get_or_create_device_id()
            
            # Cập nhật hoặc thêm mới vào DB
            for account in device_accounts:
                # Thêm thông tin app và device_id
                account["app"] = self.app_name
                account["device_id"] = android_id
                # Đánh dấu là chưa đồng bộ để gửi lên server
                account["is_sync"] = False
                
                # Kiểm tra tài khoản đã tồn tại chưa
                existing_accounts = self.db.get_accounts(app=self.app_name)
                
                # Tìm tài khoản trong DB dựa vào unique_username
                existing_account = None
                for acc in existing_accounts:
                    if acc.get("unique_username") == account.get("unique_username"):
                        existing_account = acc
                        break
                
                if existing_account:
                    # Cập nhật tài khoản
                    account_id = existing_account["id"]
                    # self.db.update_account(account_id, account)
                else:
                    # Thêm tài khoản mới
                    self.db.add_account(account)
                
            return device_accounts
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi đồng bộ tài khoản {self.app_name}")
            return []
            
    def run(self, helper_available: bool = True, network_available: bool = True):
        """
        Chạy job với các tài khoản được kích hoạt
        
        Args:
            helper_available: True nếu HelperService đang hoạt động
            network_available: True nếu mạng đang hoạt động
        """
        if not helper_available or not network_available:
            self.logger.info(f"Bỏ qua job {self.app_name} do thiết bị hoặc mạng không khả dụng")
            return
            
        # Kiểm tra xác thực GoLike
        if not self.is_golike_authenticated():
            self.logger.info(f"Bỏ qua job {self.app_name} do chưa có xác thực GoLike")
            return
            
        # Lấy danh sách tài khoản được kích hoạt và thuộc thiết bị hiện tại
        accounts = self.db.get_accounts(app=self.app_name, job_enable=True)
            
        if not accounts:
            self.logger.info(f"Không có tài khoản {self.app_name} nào thuộc thiết bị hiện tại được kích hoạt để chạy job")
            return
            
        for account in accounts:
            try:
                # Kiểm tra cài đặt xem có nên chạy job hay không
                if self.db.get(f"{self.app_name}_job_enable", True):
                    self.perform_job(account)
                    
                # Kiểm tra cài đặt xem có nên nuôi tài khoản hay không
                if self.db.get(f"{self.app_name}_care_enable", True):
                    self.perform_care(account)
                    
            except Exception as e:
                self.logger.exception(e, f"Lỗi khi chạy job cho tài khoản {account.get('unique_username')}")
    
    def is_golike_authenticated(self) -> bool:
        """
        Kiểm tra xem đã có thông tin xác thực GoLike chưa
        
        Returns:
            bool: True nếu đã xác thực, False nếu chưa
        """
        golike_headers = self.db.get("golike_headers", {})
        return bool(golike_headers and "authorization" in golike_headers)
    
    def api_request(self, url: str, method: str = "GET", payload: Dict[str, Any] = None) -> Optional[Dict[str, Any]]:
        """
        Gọi API GoLike thông qua GoLikeService
        
        Args:
            url: URL của API
            method: Phương thức HTTP (GET hoặc POST)
            payload: Dữ liệu gửi đi (cho POST request)
            
        Returns:
            Dict hoặc None: Kết quả API nếu thành công, None nếu thất bại
        """
        if not self.golike_service:
            self.logger.error(f"Không thể gọi API: GoLikeService chưa được cung cấp cho {self.app_name} job")
            return None
            
        # Xử lý payload cho GET request - thêm vào URL
        if method.upper() == "GET" and payload:
            # Tạo query string từ payload
            query_params = []
            for key, value in payload.items():
                if value is not None:
                    query_params.append(f"{urllib.parse.quote(key)}={urllib.parse.quote(str(value))}")
            
            # Thêm query string vào URL
            if query_params:
                separator = "&" if "?" in url else "?"
                url = f"{url}{separator}{'&'.join(query_params)}"
            
            # Đặt payload về None vì đã đưa vào URL
            payload = None
        
        return self.golike_service.api_request(url, method, payload)
    
    def get_golike_accounts(self) -> List[Dict[str, Any]]:
        """
        Lấy danh sách tài khoản đã đăng ký với GoLike
        
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản GoLike
        """
        try:
            # Đường dẫn API lấy danh sách tài khoản
            url = f"{self.get_account_url()}"
            
            # Gọi API
            response = self.api_request(url)
            
            if response and response.get("success", False):
                accounts = response.get("data", [])
                return accounts
            
            return []
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản GoLike")
            return []
    
    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Ánh xạ tài khoản từ GoLike vào tài khoản trên thiết bị
        
        Args:
            golike_accounts: Danh sách tài khoản từ GoLike API
            device_accounts: Danh sách tài khoản trên thiết bị
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã ánh xạ
        """
        # Phương thức mặc định, cần override ở lớp con
        return []
    
    def fetch_job(self, account: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Lấy thông tin job từ GoLike
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict hoặc None: Thông tin job nếu có, None nếu không có
        """
        try:
            # Đường dẫn API lấy job
            url = f"{self.get_jobs_url()}"
            
            # Tham số tùy theo loại app
            params = self.get_job_params(account)
            
            # Gọi API
            response = self.api_request(url, "GET", params)
            
            if response and response.get("success", False):
                job = response.get("data", None)
                if job:
                    # Chuẩn hóa dữ liệu job
                    return self.map_job_data(job)
            
            return None
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy job")
            return None
    
    def map_job_data(self, job_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chuẩn hóa dữ liệu job từ API
        
        Args:
            job_data: Dữ liệu job từ API
            
        Returns:
            Dict[str, Any]: Dữ liệu job đã chuẩn hóa
        """
        return {
            "app": self.app_name,
            "id": job_data.get("id"),
            "link": job_data.get("link"),
            "type": job_data.get("type"),
            "object_id": job_data.get("object_id"),
            "price_after_cost": job_data.get("price_after_cost"),
            "status": "idle",  # Status mặc định là idle
            "raw_data": job_data  # Lưu lại dữ liệu gốc để tham khảo khi cần
        }
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện job, bao gồm:
                - status (int): Mã trạng thái job
                    0: Chưa thực hiện
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
        """
        # Mặc định không làm gì, cần override ở lớp con
        self.logger.info(f"Thực hiện job cho tài khoản {account.get('unique_username')}")
        return {
            "status": 0,
            "message": "Chưa thực hiện job",
            "success": False
        }
    
    def report_job(self, account: Dict[str, Any], job: Dict[str, Any], result: Dict[str, Any]) -> bool:
        """
        Báo cáo kết quả job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            result: Kết quả thực hiện job bao gồm:
                - status (int): Mã trạng thái job
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
            
        Returns:
            bool: True nếu báo cáo thành công, False nếu thất bại
        """
        try:
            job_id = job.get("id")
            job_type = job.get("type", "")
            job_status = result.get("status", 0)
            job_success = result.get("success", False)
            
            # Ghi lại lịch sử job
            self.record_job_history(account, job, result)
            
            if not job_id:
                self.logger.error("Không có ID job để báo cáo")
                return False
                
            # Kiểm tra trạng thái job và xử lý tương ứng
            
            # Nếu status là 2 (lỗi không tìm thấy đối tượng), hủy job và báo cáo thất bại
            if job_status == 2:
                self.logger.warning(f"Lỗi khi thực hiện job {job_id}, không tìm thấy đối tượng, hủy job")
                return self.skip_job(account, job)
            
            # Nếu status là 3 (đã bị unfollow/unlike), hủy job và vô hiệu hóa tài khoản tạm thời
            if job_status == 3:
                self.logger.warning(f"Phát hiện bị unfollow/unlike, vô hiệu hóa tài khoản {account.get('unique_username')} trong 24h")
                
                # Hủy job hiện tại
                self.skip_job(account, job)
                
                # Đặt tài khoản vào trạng thái inactive trong 24h
                cooldown_minutes = 24 * 60  # 24 giờ
                account_id = account.get("id")
                if account_id:
                    self.db.update_account(account_id, {
                        "status": "inactive",
                        "job_disable_until": int(time.time() + cooldown_minutes * 60),
                        "disable_reason": f"Bị phát hiện unfollow/unlike trong job {job_type}",
                        "is_sync": False  # Đánh dấu tài khoản cần đồng bộ
                    })
                
                return False
            
            # Nếu job thành công, báo cáo kết quả
            if job_success:
                # URL API báo cáo job
                import config
                url = f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/complete-jobs"
                
                # Tạo payload cho báo cáo job
                payload = self.get_report_payload(account, job)
                if not payload:
                    self.logger.error("Không thể tạo payload cho báo cáo job")
                    return False
                
                # Thử gọi API tối đa 3 lần
                for attempt in range(3):
                    response = self.api_request(url, "POST", payload)
                    
                    if response and response.get("success", False):
                        self.logger.info(f"Đã báo cáo job {job_id} thành công")
                        
                        # Cập nhật thống kê job
                        if job_type in ["follow", "like"]:
                            job_today = account.get("job_today", 0) + 1
                            jobs_done_in_session = account.get("jobs_done_in_session", 0) + 1
                            total_jobs = account.get("total_jobs", 0) + 1
                            
                            self.db.update_account(account["id"], {
                                "job_today": job_today,
                                "jobs_done_in_session": jobs_done_in_session,
                                "total_jobs": total_jobs,
                                "last_job_time": int(time.time()),
                                "is_sync": False  # Đánh dấu tài khoản cần đồng bộ
                            })
                            
                        return True
                    
                    elif response and response.get("status") == 400:
                        error_msg = response.get('message', '')
                        self.logger.error(f"[{attempt + 1}] Báo cáo job lỗi: {error_msg}, thử lại sau 5s...")
                        time.sleep(5)
                    else:
                        self.logger.error(f"Phản hồi không mong đợi khi báo cáo job: {response}")
                        break
                
                # Nếu không thành công sau 3 lần thử, hủy job
                self.logger.error(f"Không thể báo cáo job {job_id} sau 3 lần thử")
                return self.skip_job(account, job)
            else:
                # Job không thành công, hủy job
                self.logger.warning(f"Job {job_id} không thành công, hủy job")
                return self.skip_job(account, job)
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job")
            return False
    
    def get_report_payload(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tạo payload cho việc báo cáo hoàn thành job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Payload cho API báo cáo
        """
        golike_id = account.get("golike_id")
        job_id = job.get("id")
        
        if not golike_id or not job_id:
            self.logger.error("Thiếu thông tin tài khoản hoặc job để tạo payload báo cáo")
            return {}
            
        return {
            "ads_id": job_id,
            "account_id": golike_id,
            "async": True,
            "data": None
        }
    
    def get_skip_payload(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tạo payload cho việc bỏ qua/hủy job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Payload cho API skip job
        """
        golike_id = account.get("golike_id")
        job_id = job.get("id")
        job_type = job.get("type")
        object_id = job.get("object_id")
        
        if not golike_id or not job_id:
            self.logger.error("Thiếu thông tin tài khoản hoặc job để tạo payload hủy")
            return {}
            
        return {
            "ads_id": job_id,
            "account_id": golike_id,
            "object_id": object_id,
            "type": job_type
        }
        
    def skip_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> bool:
        """
        Bỏ qua/hủy job hiện tại
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            bool: True nếu hủy thành công, False nếu thất bại
        """
        import config
        
        try:
            # URL API để skip job
            url = f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/skip-jobs"
            
            # Tạo payload cho việc skip job
            payload = self.get_skip_payload(account, job)
            if not payload:
                self.logger.error("Không thể tạo payload cho skip job")
                return False
            
            # Gọi API
            response = self.api_request(url, "POST", payload)
            
            if response and response.get("success", False):
                self.logger.info(f"Đã hủy job {job.get('id')}")
                return True
            
            self.logger.error(f"Hủy job {job.get('id')} thất bại: {response}")
            return False
        except Exception as e:
            self.logger.exception(e, "Lỗi khi hủy job")
            return False
    
    def get_api_base_url(self) -> str:
        """
        Lấy URL gốc của API GoLike
        
        Returns:
            str: URL gốc
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}"
    
    def get_account_url(self) -> str:
        """
        Lấy URL API tài khoản của GoLike
        
        Returns:
            str: URL API tài khoản
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}-account"
    
    def get_jobs_url(self) -> str:
        """
        Lấy URL API jobs của GoLike
        
        Returns:
            str: URL API jobs
        """
        import config
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/jobs"
    
    def get_job_report_url(self, job_id: str) -> str:
        """
        Lấy URL API báo cáo job của GoLike
        
        Args:
            job_id: ID của job
            
        Returns:
            str: URL API báo cáo job
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}/jobs/{job_id}/report"
    
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lấy tham số để gọi API lấy job
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Tham số
        """
        # Mặc định không có tham số, cần override ở lớp con
        return {}
    
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Phương thức cơ sở để lấy danh sách tài khoản, cần override ở class con"""
        return []
    
    def perform_care(self, account: Dict[str, Any]):
        """Nuôi tài khoản, cần override ở class con"""
        pass
    
    def set_sleep_function(self, sleep_func: Callable[[float], bool]):
        """
        Đặt hàm sleep tùy chỉnh
        
        Args:
            sleep_func: Hàm sleep nhận một tham số là số giây và trả về True nếu sleep đủ thời gian,
                        False nếu bị dừng lại
        """
        self._sleep_func = sleep_func
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        return self._sleep_func(seconds)
    
    def switch_to_account(self, target_account: Dict[str, Any]) -> bool:
        """
        Chuyển đổi sang tài khoản mục tiêu
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            bool: True nếu chuyển đổi thành công, False nếu thất bại
        """
        try:
            self.logger.info(f"Đang chuyển đổi sang tài khoản {target_account.get('unique_username', 'unknown')}")
            
            # Đặt thời gian chờ tối đa (giây)
            timeout = 60
            start_time = time.time()
            
            # Lấy username của tài khoản đang đăng nhập
            current_username = self.get_current_logged_in_username()
            target_username = target_account.get("unique_username")
            
            # Nếu đã đăng nhập đúng tài khoản rồi, không cần chuyển đổi
            if current_username and current_username == target_username:
                self.logger.info(f"Đã đăng nhập tài khoản {target_username} rồi")
                return True
            
            # Nếu chưa đăng nhập đúng tài khoản, thực hiện chuyển đổi
            while time.time() - start_time < timeout:
                try:
                    # Phương thức này sẽ được ghi đè bởi lớp con tùy theo ứng dụng
                    success = self._perform_account_switch(target_account)
                    if success:
                        # Đợi một chút để ứng dụng load xong
                        self.safe_sleep(3)
                        
                        # Kiểm tra lại xem đã chuyển đúng tài khoản chưa
                        new_username = self.get_current_logged_in_username()
                        
                        if new_username and new_username == target_username:
                            self.logger.info(f"Đã chuyển sang tài khoản {target_username} thành công")
                            
                            # Cập nhật trạng thái đăng nhập trong DB
                            self.db.reset_login_status_by_app(self.app_name)
                            self.db.update_account(target_account["id"], {"is_login": True})
                            
                            return True
                    
                    # Nếu chưa thành công, đợi một chút rồi thử lại
                    self.safe_sleep(2)
                except Exception as e:
                    self.logger.error(f"Lỗi khi chuyển tài khoản: {str(e)}")
                    self.safe_sleep(2)
            
            self.logger.error(f"Không thể chuyển sang tài khoản {target_username} sau {timeout} giây")
            return False
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi chuyển tài khoản")
            return False
    
    def _perform_account_switch(self, target_account: Dict[str, Any]) -> bool:
        """
        Thực hiện các thao tác UI để chuyển tài khoản
        Phương thức này cần được ghi đè bởi lớp con
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        # Phương thức cơ sở chỉ log cảnh báo
        self.logger.warning(f"Phương thức _perform_account_switch chưa được triển khai cho {self.__class__.__name__}")
        return False
        
    def get_current_logged_in_username(self) -> Optional[str]:
        """
        Lấy username của tài khoản đang đăng nhập
        
        Returns:
            str hoặc None: Username của tài khoản đang đăng nhập, hoặc None nếu không có
        """
        # Phương thức cơ sở chỉ log cảnh báo
        self.logger.warning(f"Phương thức get_current_logged_in_username chưa được triển khai cho {self.__class__.__name__}")
        return None
    
    def record_job_history(self, account: Dict[str, Any], job: Dict[str, Any], result: Dict[str, Any]) -> str:
        """
        Ghi lại lịch sử job vào database
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            result: Kết quả thực hiện job
            
        Returns:
            str: UUID của bản ghi lịch sử job hoặc chuỗi rỗng nếu thất bại
        """
        try:
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            
            # Chuẩn bị dữ liệu job history
            job_data = {
                "account_uuid": account.get("account_uuid", ""),
                "device_id": device_id,
                "app": self.app_name,
                "job_id": job.get("id", ""),
                "job_type": job.get("type", ""),
                "object_id": job.get("object_id", ""),
                "link": job.get("link", ""),
                "status": result.get("status", 0),
                "success": result.get("success", False),
                "price": job.get("price_after_cost", 0),
                "error_message": result.get("message", "") if not result.get("success", False) else "",
                "created_at": int(time.time()),
                "is_sync": False  # Đảm bảo trạng thái là chưa đồng bộ
            }
            
            # Lưu vào database
            job_uuid = self.db.add_job_history(job_data)
            if job_uuid:
                self.logger.debug(f"Đã lưu lịch sử job {job.get('id')} vào database với UUID: {job_uuid}")
            else:
                self.logger.warning(f"Không thể lưu lịch sử job {job.get('id')} vào database")
            
            return job_uuid
        except Exception as e:
            self.logger.exception(e, "Lỗi khi ghi lịch sử job")
            return ""

    def report_job_completed(self, account: Dict[str, Any], job: Dict[str, Any], report_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Báo cáo job đã hoàn thành
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            report_data: Dữ liệu báo cáo
            
        Returns:
            Dict[str, Any]: Kết quả báo cáo từ API
        """
        try:
            # Lấy job_id từ job
            job_id = job.get("id")
            if not job_id:
                self.logger.error("Không tìm thấy job_id trong job")
                return {"status": "error", "message": "Không tìm thấy job_id trong job"}
                
            # Chuẩn bị dữ liệu báo cáo
            payload = {
                "id": job_id,
                "status": True
            }
            
            # Thêm dữ liệu báo cáo nếu có
            if report_data:
                payload.update(report_data)
                
            # Gọi API báo cáo job đã hoàn thành
            url = f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/complete-jobs"
            result = self.golike_service.api_request(url, method="POST", payload=payload)
            
            if not result:
                self.logger.error("Không thể báo cáo job đã hoàn thành")
                return {"status": "error", "message": "Không thể báo cáo job đã hoàn thành"}
                
            self.logger.info(f"Đã báo cáo job {job_id} hoàn thành thành công")
            return {"status": "success", "message": "Đã báo cáo job hoàn thành thành công", "data": result}
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job đã hoàn thành")
            return {"status": "error", "message": f"Lỗi khi báo cáo job đã hoàn thành: {str(e)}"}
            
    def report_job_skipped(self, account: Dict[str, Any], job: Dict[str, Any], reason: str = "") -> Dict[str, Any]:
        """
        Báo cáo job đã bị bỏ qua
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            reason: Lý do bỏ qua job
            
        Returns:
            Dict[str, Any]: Kết quả báo cáo từ API
        """
        try:
            # Lấy job_id từ job
            job_id = job.get("id")
            if not job_id:
                self.logger.error("Không tìm thấy job_id trong job")
                return {"status": "error", "message": "Không tìm thấy job_id trong job"}
                
            # Chuẩn bị dữ liệu báo cáo
            payload = {
                "id": job_id
            }
            
            # Thêm lý do nếu có
            if reason:
                payload["reason"] = reason
                
            # Gọi API báo cáo job đã bị bỏ qua
            url = f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/skip-jobs"
            result = self.golike_service.api_request(url, method="POST", payload=payload)
            
            if not result:
                self.logger.error("Không thể báo cáo job đã bị bỏ qua")
                return {"status": "error", "message": "Không thể báo cáo job đã bị bỏ qua"}
                
            self.logger.info(f"Đã báo cáo job {job_id} bị bỏ qua thành công")
            return {"status": "success", "message": "Đã báo cáo job bị bỏ qua thành công", "data": result}
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job đã bị bỏ qua")
            return {"status": "error", "message": f"Lỗi khi báo cáo job đã bị bỏ qua: {str(e)}"}
    
    def get_account_list_url(self) -> str:
        """
        Lấy URL API danh sách tài khoản
        
        Returns:
            str: URL API danh sách tài khoản
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}"
        
    def get_account_detail_url(self) -> str:
        """
        Lấy URL API chi tiết tài khoản
        
        Returns:
            str: URL API chi tiết tài khoản
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}-account"
        
    def get_job_list_url(self) -> str:
        """
        Lấy URL API danh sách job
        
        Returns:
            str: URL API danh sách job
        """
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/jobs"
        
    def get_job_report_url(self, job_id: str) -> str:
        """
        Lấy URL API báo cáo job
        
        Args:
            job_id: ID của job
            
        Returns:
            str: URL API báo cáo job
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}/jobs/{job_id}/report" ').decode('utf-8'))
