import base64
exec(base64.b64decode('import time
import threading
import datetime
import random
import json
from typing import Dict, Any, List, Optional
import config
import utils
from utils import LogLevel, Logger
from jobs import TiktokJob, InstagramJob

# Tạo logger cho JobService
logger = utils.get_logger("JobService")

# Constants for better code readability
class JobServiceConstants:
    """Constants used in JobService"""
    DEFAULT_CHECK_INTERVAL = 0.5  # Sleep check interval in seconds
    MAX_WARNING_LOGS = 20
    
    # Status messages
    MSG_DEVICE_PAUSED_SERVER = "Tạm dừng (Sever yêu cầu)"
    MSG_DEVICE_NO_ACCOUNTS = "Tạm nghỉ (Không có tài khoản)"
    MSG_WAITING_PROXY = "Đang chờ proxy"
    MSG_WORKING_SESSION = "Đang trong phiên làm việc"
    MSG_SESSION_COOLDOWN = "Nghỉ ngơi giữa các phiên"
    
    # Account status reasons
    REASON_DAILY_LIMIT = "Đã đạt giới hạn job hàng ngày"
    REASON_SESSION_LIMIT = "Đã hoàn thành số job tối đa trong phiên"
    REASON_FOLLOW_DAILY_LIMIT = "Đã đạt giới hạn job folow trong phiên"
    REASON_FOLLOW_SESSION_LIMIT = "Đã đạt giới hạn job follow trong phiên"

class JobService:
    def __init__(self, db_service, helper_service, golike_service, mqtt_service=None):
        """
        Khởi tạo JobService
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
            golike_service: GoLikeService để gọi API GoLike
            mqtt_service: MQTTService để gửi thông báo (optional)
        """
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.mqtt_service = mqtt_service
        self.running = True
        self.force_stop = False
        
        # Khởi tạo các job handler
        self.job_handlers = {}
        
        # Flag điều khiển
        self.is_initialized = False
        
        # Thông tin về các app được kích hoạt - lấy từ database hoặc config
        self.enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        # Lock để đồng bộ trạng thái
        self._lock = threading.Lock()
        
        # Dictionary để lưu số lần thử job thất bại theo account_id
        self.failed_job_attempts = {}
        
        # Đếm số lần liên tiếp job follow trả về status 4 (pending)
        self.follow_pending_counts = {}
        
        # Trạng thái proxy hiện tại
        self.current_proxy_id = None
        self.current_proxy_name = None
        self.proxy_session_end_time = 0
        self.current_proxy_table = None  # Table name được cấp từ proxy server
        self.proxy_last_update = 0  # Thời gian update cuối cùng
        
        # Đếm số lần thất bại khi setup proxy
        self.proxy_setup_fail_count = 0
        
        # Xóa proxy table name cũ khỏi device config khi khởi tạo
        self.db.set_device_config("proxy_table_name", None)
        
        # Trạng thái cập nhật từ server qua MQTT
        self.force_restart_session = False  # Cần restart session do config thay đổi
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức khi force_stop được đặt thành True
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        start_time = time.time()
        check_interval = JobServiceConstants.DEFAULT_CHECK_INTERVAL  # Kiểm tra mỗi 0.5 giây
        
        while time.time() - start_time < seconds:
            # Kiểm tra nếu có yêu cầu dừng hoặc restart session
            with self._lock:
                if self.force_stop or not self.running:
                    return False
                # Nếu có yêu cầu restart session, thoát khỏi sleep ngay lập tức
                if self.force_restart_session:
                    return False
            
            # Ngủ một khoảng ngắn
            sleep_time = min(check_interval, seconds - (time.time() - start_time))
            if sleep_time > 0:
                time.sleep(sleep_time)
            else:
                break
                
        return True
        
    def initialize(self) -> bool:
        """
        Khởi tạo JobService
        
        Returns:
            bool: True nếu khởi tạo thành công, False nếu không
        """
        logger.info("Đang khởi tạo JobService...")
        
        # 1. Kiểm tra HelperService
        helper_success, helper_data = utils.check_helper_service(self.helper)
        if not helper_success:
            logger.error("Không thể kết nối đến HelperService. Vui lòng kiểm tra lại.")
            return False
            
        # Lưu thông tin thiết bị nếu có
        if helper_data and "data" in helper_data:
            self.db.save_device_info(helper_data)
            logger.info(f"Đã lưu thông tin thiết bị: {helper_data['data'].get('device_model', 'Unknown')}")
            
            
        # 3. Lưu các cấu hình mặc định vào database nếu chưa có
        self._save_default_configs()
            
        # 4. Kiểm tra và lấy GoLike headers nếu cần
        golike_success = self.golike_service.fetch_golike_headers_with_retry()
        if not golike_success:
            logger.error("Không thể lấy GoLike headers. Vui lòng kiểm tra lại.")
            return False
        
        # 5. Khởi tạo các job handler
        self._init_job_handlers()
        
        # 6. Khởi tạo ngày cuối cùng đã reset nếu chưa có trong database
        now = datetime.datetime.now()
        today = now.date()
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        
        if not last_reset_date_str:
            # Nếu hiện tại đã qua giờ reset của ngày hôm nay, đánh dấu đã reset
            if now >= reset_time:
                last_reset_date = today
            else:
                # Nếu chưa đến giờ reset, đánh dấu là đã reset ngày hôm qua
                last_reset_date = today - datetime.timedelta(days=1)
                
            # Lưu vào database
            self.db.set("last_reset_date", last_reset_date.isoformat())
            logger.info(f"Khởi tạo ngày reset: {last_reset_date}")
        else:
            logger.info(f"Đã tìm thấy ngày reset cuối cùng: {last_reset_date_str}")
        
        self.is_initialized = True
        logger.info("Khởi tạo JobService thành công.")
        return True
        
    def _check_account_sync_status(self, app_name: str) -> bool:
        """
        Kiểm tra trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu cần đồng bộ lại, False nếu không cần
        """
        # Lấy trạng thái đồng bộ từ database
        sync_status_key = f"{app_name}_sync_status"
        sync_status = self.db.get(sync_status_key, False)  # Mặc định là chưa đồng bộ
        
        # Nếu chưa đồng bộ thì cần đồng bộ lại
        return not sync_status
        
    def _update_account_sync_status(self, app_name: str, status: bool = True) -> None:
        """
        Cập nhật trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần cập nhật
            status: True nếu đã đồng bộ, False nếu chưa đồng bộ
        """
        sync_status_key = f"{app_name}_sync_status"
        
        # Cập nhật trạng thái đồng bộ
        self.db.set(sync_status_key, status)
        
        logger.info(f"Đã cập nhật trạng thái đồng bộ tài khoản {app_name}: {status}")
        
    def _sync_accounts_for_app(self, app_name: str) -> bool:
        """
        Đồng bộ tài khoản và map tài khoản GoLike cho một app cụ thể
        
        Args:
            app_name: Tên ứng dụng cần đồng bộ
            
        Returns:
            bool: True nếu đồng bộ thành công, False nếu thất bại
        """
        if app_name not in self.job_handlers:
            logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua đồng bộ")
            return False
            
        handler = self.job_handlers[app_name]
        
        try:

            # 1. Đồng bộ tài khoản từ thiết bị
            logger.info(f"Đang đồng bộ tài khoản {app_name}...")
            accounts = handler.sync_accounts_to_db()
            logger.info(f"Đã đồng bộ {len(accounts)} tài khoản {app_name}")
            
            # 2. Map tài khoản GoLike
            logger.info(f"Đang lấy danh sách tài khoản GoLike cho {app_name}...")
            golike_accounts = handler.get_golike_accounts()
            
            if golike_accounts:
                logger.info(f"Đã tìm thấy {len(golike_accounts)} tài khoản GoLike cho {app_name}")
                
                # Lấy tài khoản từ thiết bị
                device_accounts = self.db.get_accounts(app=app_name)
                
                # Ánh xạ tài khoản
                mapped_accounts = handler.map_golike_accounts(golike_accounts, device_accounts)
                
                logger.info(f"Đã ánh xạ {len(mapped_accounts)} tài khoản {app_name} với GoLike")
            else:
                logger.warning(f"Không tìm thấy tài khoản GoLike nào cho {app_name}")
            
            # Cập nhật trạng thái đồng bộ
            self._update_account_sync_status(app_name, True)
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi đồng bộ tài khoản và map GoLike cho {app_name}")
            # Đánh dấu là chưa đồng bộ
            self._update_account_sync_status(app_name, False)
            return False
        
    def _save_default_configs(self):
        """Lưu các cấu hình mặc định vào database nếu chưa có"""
        default_configs = {
            # Cấu hình liên quan đến thời gian làm job
            "job_hour": config.JOB_HOUR,
            "job_cooldown_minutes": config.DEFAULT_COOLDOWN_MINUTES,
            "job_check_interval": config.JOB_CHECK_INTERVAL,
            "cooldown_get_job_golike": 30,  # Thời gian chờ (phút) khi không tìm thấy job GoLike
            
            # Cấu hình liên quan đến số lượng job
            "max_jobs_per_day": config.MAX_JOBS_PER_DAY,
            "max_jobs_per_session": config.MAX_JOBS_PER_SESSION,
            
            # Trạng thái tạm dừng từ server
            "pause_job": False,
            # Trạng thái thiết bị đang làm việc
            "device_is_working": False,
            "device_message": "",
            
            # Danh sách các app được kích hoạt
            "enabled_apps": config.ENABLED_APPS,
            
            # Thiết lập cho phép chăm sóc khi làm job
            "care_in_working_job": False,
            
            # Cấu hình giá tối thiểu cho job follow
            "min_follow_price": 20,
            
            # Cấu hình proxy
            "use_proxy": False,  # Có sử dụng proxy không
            "proxy_server": "http://10.0.0.5:9032",  # Server proxy mặc định
        }
        
        for key, value in default_configs.items():
            # Chỉ lưu nếu chưa có trong database
            if self.db.get(key) is None:
                self.db.set(key, value)
                logger.debug(f"Đã lưu cấu hình mặc định: {key}={value}")
            else:
                logger.debug(f"Cấu hình {key} đã tồn tại: {self.db.get(key)}")
        
    def _init_job_handlers(self):
        """Khởi tạo các job handler"""
        # init thì sẽ init handlers cho tất cả các app, làm app nào thì sẽ theo cấu hình lấy từ database
        for app_name in config.ENABLED_APPS:
            if app_name == "tiktok":
                self.job_handlers[app_name] = TiktokJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
            elif app_name == "instagram":
                self.job_handlers[app_name] = InstagramJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                
        logger.info(f"Đã khởi tạo {len(self.job_handlers)} job handler: {', '.join(self.job_handlers.keys())}")
        
    def _reset_daily_counters(self):
        """Reset bộ đếm hàng ngày vào giờ được cấu hình"""
        now = datetime.datetime.now()
        today = now.date()
        
        # Lấy giờ reset từ cấu hình hoặc từ database nếu có
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        
        # Tính thời điểm reset của ngày hôm nay
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        last_reset_date = None
        
        if last_reset_date_str:
            try:
                last_reset_date = datetime.date.fromisoformat(last_reset_date_str)
            except ValueError:
                logger.error(f"Định dạng ngày reset không hợp lệ: {last_reset_date_str}")
                last_reset_date = None
        
        # Kiểm tra xem đã qua giờ reset của ngày hôm nay chưa và chưa reset trong ngày hôm nay
        if now >= reset_time and (last_reset_date is None or last_reset_date < today):
            logger.info(f"Thực hiện reset bộ đếm hàng ngày (giờ reset: {job_hour}:00)")
            
            # Reset các bộ đếm cho tất cả tài khoản
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                
                for account in accounts:
                    # Reset số job hôm nay và số job trong phiên
                    self.db.update_account(account["id"], {
                        "job_today": 0,
                        "jobs_done_in_session": 0,
                        "follow_today": 0,
                        "follow_in_session": 0,
                        "last_view_stories": 0,
                        "disable_follow": False,
                        "follow_disable_until": 0,
                        "inactive_follow_reason": "",
                        "is_sync": False
                    })
                    
                    # Nếu tài khoản đang ở trạng thái inactive vì đã đạt giới hạn job hàng ngày,
                    # đặt lại trạng thái thành active
                    if account.get("status") == "inactive" and account.get("inactive_reason") == "Đã đạt giới hạn job hàng ngày":
                        self.db.update_account(account["id"], {
                            "status": "active",
                            "job_disable_until": 0,
                            "is_sync": False
                        })
                        logger.info(f"Đã đặt lại trạng thái active cho tài khoản {account.get('unique_username')} sau khi reset")
                
            
            logger.info(f"Đã reset bộ đếm hàng ngày cho tất cả tài khoản vào {now.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Cập nhật ngày đã reset vào database
            self.db.set("last_reset_date", today.isoformat())
        
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể chạy job cho tài khoản không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể chạy job, False nếu không
        """
        username = account.get('unique_username', 'Unknown')
        
        # 1. Kiểm tra trạng thái cơ bản
        if not self._check_basic_account_status(account):
            return False
            
        # 2. Kiểm tra điều kiện cần thiết
        if not self._check_account_prerequisites(account):
            return False
            
        # 3. Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # 4. Kiểm tra giới hạn job hàng ngày
        if self._is_account_at_daily_limit(account):
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            return False
            
        # 5. Kiểm tra giới hạn job trong phiên
        if self._is_account_at_session_limit(account):
            logger.info(f"Tài khoản {username} đã làm đủ job trong phiên")
            self.db.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
            self._close_app_for_account(account)
            return False
        
        return True
        
    def _check_basic_account_status(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra trạng thái cơ bản của tài khoản"""
        account_status = account.get("status", "active")
        
        # Nếu tài khoản bị disabled, không cho chạy job
        if account_status == "disabled":
            return False
            
        # Nếu tài khoản đang inactive, kiểm tra thời gian cooldown
        if account_status == "inactive":
            return self._handle_inactive_account(account)
            
        return True
        
    def _handle_inactive_account(self, account: Dict[str, Any]) -> bool:
        """Xử lý tài khoản đang ở trạng thái inactive"""
        job_disable_until = account.get("job_disable_until", 0)
        username = account.get('unique_username', 'Unknown')
        
        # Nếu đã hết thời gian cooldown, cập nhật trạng thái về active
        if job_disable_until <= time.time():
            # Cập nhật trạng thái về active
            update_data = {
                "status": "active",
                "last_care_time": 0,
                "disable_follow": False,
                "follow_disable_until": 0,
                "inactive_follow_reason": ""
            }
                
            self.db.update_account(account["id"], update_data)
            logger.info(f"Tài khoản {username} đã hết thời gian chờ, đã chuyển về trạng thái active")
            return True
        else:
            # Chưa hết thời gian chờ
            cooldown_remain = int((job_disable_until - time.time()) / 60)
            logger.info(f"Tài khoản {username} đang trong thời gian chờ (còn {cooldown_remain} phút)")
            return False
            
    def _check_account_prerequisites(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra các điều kiện tiên quyết của tài khoản"""
        # Kiểm tra xem tài khoản có được bật job không
        if not account.get("job_enable", False):
            return False
            
        # Kiểm tra xem tài khoản đã được liên kết với GoLike chưa
        if not account.get("is_golike_linked", False):
            return False
            
        return True
        
    def _ensure_account_limits_set(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Đảm bảo các giới hạn của tài khoản được thiết lập với giá trị mặc định
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Thông tin tài khoản đã được cập nhật
        """
        update_data = {}
        
        # Kiểm tra và thiết lập max_jobs_per_session
        if account.get("max_jobs_per_session", 0) <= 0:
            update_data["max_jobs_per_session"] = config.MAX_JOBS_PER_SESSION
            
        # Kiểm tra và thiết lập job_max_day
        if account.get("job_max_day", 0) <= 0:
            update_data["job_max_day"] = config.MAX_JOBS_PER_DAY
            
        # Cập nhật vào database nếu có thay đổi
        if update_data:
            update_data["is_sync"] = False
            self.db.update_account(account["id"], update_data)
            account.update(update_data)
            
        return account
        
    def _close_app_for_account(self, account: Dict[str, Any]) -> None:
        """
        Đóng app tương ứng với tài khoản
        
        Args:
            account: Thông tin tài khoản
        """
        app_name = account.get("app")
        if app_name and app_name in config.APP_PACKAGES:
            self.helper.close_app(config.APP_PACKAGES[app_name])
            
    def _is_account_at_daily_limit(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có đạt giới hạn job hàng ngày không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đạt giới hạn
        """
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        return job_today >= job_max_day
        
    def _is_account_at_session_limit(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có đạt giới hạn job trong phiên không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đạt giới hạn
        """
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
        return jobs_done_in_session >= max_jobs_per_session
        
    def _update_job_stats(self, account: Dict[str, Any], success: bool = True, job_type: str = None):
        """
        Cập nhật thống kê job
        
        Args:
            account: Thông tin tài khoản
            success: True nếu job thành công, False nếu thất bại
            job_type: Loại job (follow, like, etc.)
        """
        username = account.get('unique_username', 'Unknown')
        
        # Cập nhật thông tin job cơ bản
        self._update_basic_job_stats(account, success)
        
        # Reset số lần thử job thất bại nếu job thành công
        if success:
            self.failed_job_attempts[account["id"]] = 0
        
        # Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # Kiểm tra và xử lý giới hạn phiên
        self._check_session_limit_after_job(account)
        
        # Kiểm tra và xử lý giới hạn hàng ngày
        self._check_daily_limit_after_job(account)
        
        # Xử lý thống kê riêng cho job follow
        if success and job_type and job_type.lower() == "follow":
            self._update_follow_stats(account)
            
    def _update_basic_job_stats(self, account: Dict[str, Any], success: bool):
        """Cập nhật thống kê job cơ bản - chỉ đếm job thành công"""
        job_today = account.get("job_today", 0)
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        
        update_data = {
            "last_job_time": int(time.time()),
            "is_sync": False
        }
        
        # Chỉ tăng counters khi job thành công
        if success:
            update_data.update({
                "job_today": job_today + 1,
                "jobs_done_in_session": jobs_done_in_session + 1,
                "total_jobs": account.get("total_jobs", 0) + 1
            })
            
        self.db.update_account(account["id"], update_data)
        account.update(update_data)  # Cập nhật local data
        
    def _check_session_limit_after_job(self, account: Dict[str, Any]):
        """Kiểm tra giới hạn phiên sau khi làm job"""
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
        username = account.get('unique_username', 'Unknown')
        
        if jobs_done_in_session >= max_jobs_per_session:
            logger.info(f"Tài khoản {username} đã làm đủ {max_jobs_per_session} job trong phiên")
            self.db.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
            self._close_app_for_account(account)
            
    def _check_daily_limit_after_job(self, account: Dict[str, Any]):
        """Kiểm tra giới hạn hàng ngày sau khi làm job"""
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        username = account.get('unique_username', 'Unknown')
        
        if job_today >= job_max_day:
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày ({job_today}/{job_max_day})")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            
    def _update_follow_stats(self, account: Dict[str, Any]):
        """Cập nhật thống kê riêng cho follow job thành công (đã bỏ giới hạn follow)"""
        username = account.get('unique_username', 'Unknown')
        follow_today = account.get("follow_today", 0) + 1
        follow_in_session = account.get("follow_in_session", 0) + 1
        
        # Cập nhật số liệu follow thành công
        update_follow = {
            "follow_today": follow_today,
            "follow_in_session": follow_in_session,
            "last_follow_time": int(time.time()),
            "disable_follow": False,  # Luôn luôn để False vì đã bỏ giới hạn
            "is_sync": False
        }
        self.db.update_account(account["id"], update_follow)
        logger.info(f"Tài khoản {username} đã thực hiện follow thành công ({follow_today} follow hôm nay)")
        
    def start(self):
        """
        Khởi động JobService trong thread riêng
        
        Returns:
            threading.Thread: Thread đang chạy JobService hoặc None nếu lỗi
        """
        try:
            # Đặt trạng thái running
            self.running = True
            self.force_stop = False
            
            # Tạo thread
            thread = threading.Thread(target=self.run)
            thread.daemon = True
            thread.start()
            
            return thread
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động JobService")
            return None
            
    def reset_inactive_accounts(self):
        """
        Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
        """
        try:
            current_time = int(time.time())
            
            # Lấy danh sách tất cả tài khoản ở trạng thái inactive
            for app_name in self.enabled_apps:
                inactive_accounts = self.db.get_accounts(app=app_name, status="inactive") or []
                
                for account in inactive_accounts:
                    job_disable_until = account.get("job_disable_until", 0)
                    
                    # Nếu đã hết thời gian chờ, chuyển về trạng thái active
                    if job_disable_until <= current_time:
                        self.db.update_account(account["id"], {"status": "active", "is_sync": False})
                        logger.info(f"Tài khoản {account.get('unique_username')} (ID: {account['id']}) đã hết thời gian chờ, đã chuyển về trạng thái active")
                    else:
                        remaining_minutes = int((job_disable_until - current_time) / 60)
                        logger.debug(f"Tài khoản {account.get('unique_username')} còn {remaining_minutes} phút ở trạng thái inactive")
        except Exception as e:
            logger.exception(e, "Lỗi khi kiểm tra và khôi phục tài khoản inactive")
    
    def is_account_can_run_job(self, app_name:str ) -> bool:
        """
        Kiểm tra xem tài khoản có thể chạy job không
        """
        accounts = self.db.get_accounts(app=app_name)
        for account in accounts:
            if(self._can_run_job(account)):
                return True
        return False
    
    def run(self):
        """
        Chạy JobService trong một vòng lặp với logic làm việc theo phiên
        """
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo JobService. Không thể chạy.")
                return
        
        logger.info("Bắt đầu chạy JobService với logic làm việc theo phiên...")
        
        # Kiểm tra device_id
        device_id = self.db.get_or_create_device_id()
            
        if not device_id:
            logger.warning("Không thể xác định device_id hiện tại, JobService không thể chạy")
            return
            
        while self.running:
            # Reset biến force_stop nếu có
            with self._lock:
                self.force_stop = False
            
            # Kiểm tra yêu cầu tạm dừng từ server
            if self.db.get("pause_job", False):
                logger.info("Có yêu cầu tạm dừng từ server, tạm dừng xử lý job")
                
                # Nhả proxy ngay khi bị tạm dừng từ server
                use_proxy = self.db.get("use_proxy", False)
                if use_proxy and hasattr(self, 'proxy_registered') and self.proxy_registered:
                    logger.info("Nhả proxy do bị tạm dừng từ server")
                    self._unregister_proxy()
                
                self.db.set("device_is_working", False)
                self.db.set("device_message", JobServiceConstants.MSG_DEVICE_PAUSED_SERVER)
                job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                if not self.safe_sleep(job_check_interval):
                    # Kiểm tra xem có phải do force_restart_session không
                    with self._lock:
                        if self.force_restart_session:
                            # Nếu là restart session, tiếp tục vòng lặp thay vì break
                            continue
                    # Nếu không phải restart session thì mới break
                    break
                continue
            
            # Reset bộ đếm hàng ngày nếu cần
            self._reset_daily_counters()
            
            # Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
            self.reset_inactive_accounts()
            
            # Kiểm tra cập nhật từ server qua MQTT
            if not self.check_and_handle_server_updates():
                # Cần restart session do config thay đổi
                logger.info("Restart session do config thay đổi từ server")
                # Reset thời gian cooldown để bắt đầu session ngay lập tức
                with self._lock:
                    self.proxy_session_end_time = 0
                # Nhả proxy nếu đang sử dụng
                use_proxy = self.db.get("use_proxy", False)
                if use_proxy and hasattr(self, 'proxy_registered') and self.proxy_registered:
                    logger.info("Nhả proxy do restart session")
                    self._unregister_proxy()
                continue  # Bắt đầu lại từ đầu vòng lặp
            
            try:
                # Kiểm tra xem có đang trong thời gian nghỉ giữa các phiên không
                if self._is_in_session_cooldown():
                    remaining_minutes = int((self.proxy_session_end_time - int(time.time())) / 60)
                    self.db.set("device_message", f"{JobServiceConstants.MSG_SESSION_COOLDOWN} (còn {remaining_minutes} phút)")
                    # Kiểm tra mỗi 5 giây để có thể thoát sớm khi có yêu cầu
                    if not self.safe_sleep(5):
                        # Kiểm tra xem có phải do force_restart_session không
                        with self._lock:
                            if self.force_restart_session:
                                # Nếu là restart session, tiếp tục vòng lặp thay vì break
                                continue
                        # Nếu không phải restart session thì mới break
                        break
                    continue
                
                # Kiểm tra và đồng bộ tài khoản trước tiên
                enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
                for app_name in enabled_apps:
                    if app_name in self.job_handlers and self._check_account_sync_status(app_name):
                        logger.info(f"Đồng bộ tài khoản cho {app_name}...")
                        self._sync_accounts_for_app(app_name)
                
                # Lấy tất cả tài khoản có thể làm việc (sau khi đã đồng bộ)
                all_workable_accounts = self._get_all_workable_accounts()
                
                if not all_workable_accounts:
                    logger.info("Không có tài khoản nào sẵn sàng làm việc")
                    
                    # Nhả proxy ngay nếu đang sử dụng
                    use_proxy = self.db.get("use_proxy", False)
                    if use_proxy and hasattr(self, 'proxy_registered') and self.proxy_registered:
                        logger.info("Nhả proxy do không có tài khoản sẵn sàng làm việc")
                        self._unregister_proxy()
                    
                    self.db.set("device_is_working", False)
                    self.db.set("device_message", JobServiceConstants.MSG_DEVICE_NO_ACCOUNTS)
                    
                    # Bắt đầu session cooldown thay vì sleep ngắn
                    logger.info("Không có tài khoản để làm việc, bắt đầu nghỉ ngơi như sau phiên làm việc")
                    self._start_session_cooldown()
                    continue
                
                # Chỉ lấy proxy khi đã chắc chắn có tài khoản sẵn sàng làm việc
                if not self._check_proxy_requirement():
                    # Cần proxy nhưng chưa có, chờ 10 giây rồi kiểm tra lại
                    self.db.set("device_message", JobServiceConstants.MSG_WAITING_PROXY)
                    if not self.safe_sleep(10):
                        # Kiểm tra xem có phải do force_restart_session không
                        with self._lock:
                            if self.force_restart_session:
                                # Nếu là restart session, tiếp tục vòng lặp thay vì break
                                continue
                        # Nếu không phải restart session thì mới break
                        break
                    continue
                
                # Bắt đầu phiên làm việc với danh sách tài khoản đã sẵn sàng
                self._work_session(all_workable_accounts)
                
                # Giải phóng proxy và bắt đầu thời gian nghỉ
                use_proxy = self.db.get("use_proxy", False)
                if use_proxy:
                    self._release_proxy_after_session()
                    
                self._start_session_cooldown()
                
            except Exception as e:
                logger.exception(e, "Lỗi trong vòng lặp chính")
                # Nghỉ một chút trước khi thử lại
                if not self.safe_sleep(30):
                    # Kiểm tra xem có phải do force_restart_session không
                    with self._lock:
                        if self.force_restart_session:
                            # Nếu là restart session, tiếp tục vòng lặp thay vì break
                            continue
                    # Nếu không phải restart session thì mới break
                    break
            
        logger.info("JobService đã dừng")
            
    def stop(self):
        """Dừng JobService"""
        with self._lock:
            self.running = False
        logger.info("Đang dừng JobService...")
        
    def force_stop_all(self):
        """Dừng ngay lập tức tất cả các hoạt động"""
        with self._lock:
            self.force_stop = True
            self.running = False
        logger.info("Dừng ngay lập tức tất cả các hoạt động...")

    def handle_mqtt_account_update(self):
        """
        Xử lý cập nhật account từ MQTT server
        Account sẽ được reload sau mỗi job trong _work_account_session
        """
        logger.info("Nhận được thông báo cập nhật account từ server qua MQTT")
    
    def handle_mqtt_force_start_session(self):
        """
        Xử lý yêu cầu bắt đầu session ngay lập tức từ MQTT server
        Bỏ qua thời gian nghỉ hiện tại
        """
        logger.info("Nhận được yêu cầu bắt đầu session ngay lập tức từ server qua MQTT")
        with self._lock:
            if self.proxy_session_end_time > 0:
                logger.info("Bỏ qua thời gian nghỉ và bắt đầu session ngay")
                self.proxy_session_end_time = 0
            
    def handle_mqtt_config_update(self, config_changes: Dict[str, Any] = None):
        """
        Xử lý cập nhật config từ MQTT server
        Kiểm tra xem có cần restart session không
        
        Args:
            config_changes: Dictionary chứa các thay đổi config
        """
        logger.info("Nhận được thông báo cập nhật config từ server qua MQTT")
        
        # Import config để lấy danh sách restart required configs
        import config as app_config
        restart_required_configs = getattr(app_config, 'RESTART_REQUIRED_CONFIGS', [
            "enabled_apps", "max_jobs_per_day", "max_jobs_per_session", 
            "job_cooldown_minutes", "use_proxy", "proxy_server", "job_hour"
        ])
        
        need_restart = False
        
        if config_changes:
            # Kiểm tra từng config có cần restart không
            for config_key in config_changes.keys():
                if config_key in restart_required_configs:
                    need_restart = True
                    logger.info(f"Config {config_key} thay đổi, cần restart session")
                    break
        else:
            # Nếu không có thông tin chi tiết, coi như cần restart
            need_restart = True
            
        if need_restart:
            with self._lock:
                self.force_restart_session = True
                logger.info("Đặt flag restart session do config thay đổi")
                
    def check_and_handle_server_updates(self):
        """
        Kiểm tra và xử lý các cập nhật từ server
        Được gọi trong vòng lặp chính và trong _work_session
        
        Returns:
            bool: True nếu cần tiếp tục, False nếu cần restart session
        """
        with self._lock:
            # Kiểm tra flag restart session
            if self.force_restart_session:
                logger.info("Phát hiện yêu cầu restart session do config thay đổi")
                self.force_restart_session = False  # Reset flag
                return False  # Báo hiệu cần restart session
                
        return True  # Tiếp tục bình thường

    def shutdown(self):
        """Đóng dịch vụ, dừng tất cả worker threads"""
        try:
            logger.info("Dừng ngay lập tức tất cả các hoạt động...")
            
            # Đánh dấu dừng
            self.running = False
            self.force_stop = True
            
            # Giải phóng proxy nếu có
            if self.current_proxy_table:
                self._release_proxy_after_session()
            
            # Đóng kết nối database để tránh lỗi thread
            if hasattr(self, 'db') and self.db:
                try:
                    self.db.close()
                except Exception as e:
                    logger.error(f"Lỗi khi đóng kết nối database: {str(e)}")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi shutdown JobService")
    
    def _proxy_api_call(self, endpoint: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Gọi API proxy server
        
        Args:
            endpoint: Endpoint API (register, update, unregister, reset-ip)
            data: Dữ liệu gửi
            
        Returns:
            Dict response hoặc None nếu lỗi
        """
        try:
            import requests
            
            proxy_server = self.db.get("proxy_server", "http://10.0.0.5:9032")
            url = f"{proxy_server}/{endpoint}"
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Proxy API {endpoint} failed with status {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Lỗi khi gọi Proxy API {endpoint}: {e}")
            return None
    
    def _register_proxy(self) -> bool:
        """
        Đăng ký với proxy server để được cấp phát table
        
        Returns:
            bool: True nếu được cấp table hoặc đã có table, False nếu vào queue hoặc lỗi
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.error("Không thể lấy local IP, bỏ qua đăng ký proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("register", data)
            
            if not response:
                return False
                
            status = response.get("status")
            
            if status == "success":
                # Được cấp table thành công
                table_name = response.get("data", {}).get("table_name")
                action = response.get("data", {}).get("action")
                
                self.current_proxy_table = table_name
                self.current_proxy_name = f"{table_name}"
                
                # Lưu proxy table name vào device config để gửi lên server
                self.db.set_device_config("proxy_table_name", table_name)
                
                logger.info(f"Proxy đã được cấp table: {table_name} (action: {action})")
                
                # Gọi reset-ip để đổi IP mới
                if table_name:
                    ppoe_name = table_name.replace("to_", "")  # Chuyển "to_pppoe2" thành "pppoe2"
                    reset_data = {"ppoe_name": f"{ppoe_name}"} 
                        
                    reset_response = self._proxy_api_call("reset-ip", reset_data)
                    if reset_response and reset_response.get("status") == "success":
                        logger.info(f"Đã reset IP cho {reset_data['ppoe_name']}")
                    else:
                        logger.warning(f"Không thể reset IP cho {reset_data['ppoe_name']}")
                
                return True
                
            elif status == "queued":
                # Vào queue chờ
                queue_position = response.get("data", {}).get("queue_position", 0)
                logger.info(f"Proxy server full, vào hàng đợi vị trí {queue_position}")
                return False
                
            else:
                logger.error(f"Proxy register thất bại: {response.get('message', 'Unknown error')}")
                return False
                
        except Exception as e:
            logger.exception(e, "Lỗi khi đăng ký proxy")
            return False
    
    def _update_proxy(self) -> bool:
        """
        Cập nhật timestamp sử dụng proxy
        
        Returns:
            bool: True nếu update thành công
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.warning("Không thể lấy local IP, bỏ qua update proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("update", data)
            
            if response and response.get("status") == "success":
                self.proxy_last_update = time.time()
                # Log thông tin từ response nếu có
                data = response.get("data", {})
                table_name = data.get("table_name", "unknown")
                logger.debug(f"Proxy update thành công cho table: {table_name}")
                return True
            else:
                logger.warning(f"Proxy update thất bại: {response.get('message') if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.warning(f"Lỗi khi update proxy: {e}")
            return False
    
    def _unregister_proxy(self) -> bool:
        """
        Hủy đăng ký và giải phóng table
        
        Returns:
            bool: True nếu unregister thành công
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.warning("Không thể lấy local IP, bỏ qua unregister proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("unregister", data)
            
            if response and response.get("status") == "success":
                released_table = response.get("data", {}).get("released_table")
                logger.info(f"Đã unregister proxy và giải phóng table: {released_table}")
                
                # Reset trạng thái proxy
                self.current_proxy_table = None
                self.current_proxy_name = None
                self.proxy_last_update = 0
                
                # Xóa proxy table name khỏi device config
                self.db.set_device_config("proxy_table_name", None)
                
                return True
            else:
                logger.warning(f"Proxy unregister thất bại: {response.get('message') if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.warning(f"Lỗi khi unregister proxy: {e}")
            return False
    
    def _check_proxy_requirement(self) -> bool:
        """
        Kiểm tra và đăng ký proxy nếu cần
        
        Returns:
            bool: True nếu có proxy hoặc không cần proxy, False nếu cần proxy nhưng chưa được cấp
        """
        use_proxy = self.db.get("use_proxy", False)
        
        if not use_proxy:
            return True  # Không cần proxy
            
        # Nếu đã có table thì return True
        if self.current_proxy_table:
            return True
            
        # Chưa có table, thử đăng ký
        return self._register_proxy()
            
    def _get_proxy_display_name(self) -> str:
        """
        Lấy tên hiển thị cho proxy hiện tại
        
        Returns:
            str: Tên hiển thị của proxy
        """
        if self.current_proxy_name:
            return self.current_proxy_name
        elif self.current_proxy_table:
            return f"{self.current_proxy_table}"
        else:
            return "Unknown"
            
    def _setup_proxy_for_session(self) -> bool:
        """
        Thiết lập proxy cho phiên làm việc
        
        Returns:
            bool: True nếu thiết lập thành công, False nếu thất bại
        """
        # Nếu đã có table proxy thì setup xong rồi
        if self.current_proxy_table:
            proxy_name = self._get_proxy_display_name()
            logger.info(f"Proxy {proxy_name} đã sẵn sàng cho phiên làm việc")
            return True
            
        # Nếu chưa có thì đăng ký
        return self._register_proxy()
    def _release_proxy_after_session(self):
        """Giải phóng proxy sau khi kết thúc phiên làm việc"""
        try:
            if self.current_proxy_table:
                proxy_name = self._get_proxy_display_name()
                logger.info(f"Đang giải phóng proxy {proxy_name}")
                
                # Gọi API unregister
                if self._unregister_proxy():
                    logger.info(f"Đã giải phóng proxy {proxy_name} thành công")
                else:
                    logger.warning(f"Giải phóng proxy {proxy_name} thất bại")
                    
        except Exception as e:
            logger.exception(e, f"Lỗi khi giải phóng proxy")
            logger.exception(e, f"Lỗi khi giải phóng proxy {self.current_proxy_name or self.current_proxy_id or 'unknown'}")
            
    # DEPRECATED: Không dùng nữa, thay bằng _get_all_workable_accounts()
    # def _has_accounts_ready_for_work(self) -> bool:
    #     """
    #     Kiểm tra xem có tài khoản nào sẵn sàng làm việc không
    #     
    #     Returns:
    #         bool: True nếu có tài khoản có thể làm việc
    #     """
    #     enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
    #     
    #     for app_name in enabled_apps:
    #         if self.is_account_can_run_job(app_name):
    #             return True
    #             
    #     return False
        
    def _get_all_workable_accounts(self) -> List[Dict[str, Any]]:
        """
        Lấy tất cả tài khoản có thể làm việc từ tất cả app và sắp xếp theo app, ngày tạo
        
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã được sắp xếp
        """
        enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        all_workable_accounts = []
        
        for app_name in enabled_apps:
            accounts = self.db.get_accounts(app=app_name)
            
            # Lọc các tài khoản có thể làm việc
            workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
            
            if workable_accounts:
                logger.info(f"Tìm thấy {len(workable_accounts)} tài khoản có thể làm việc cho {app_name}")
                all_workable_accounts.extend(workable_accounts)
        
        # Sắp xếp theo:
        # 1. App name (để nhóm cùng app lại với nhau)
        # 2. Ngày tạo tài khoản (created_at) - cũ nhất trước
        # 3. Số job đã làm trong phiên (ít nhất trước)
        all_workable_accounts.sort(key=lambda x: (
            x.get("app", ""),
            x.get("created_at", 0),
            x.get("jobs_done_in_session", 0)
        ))
        
        return all_workable_accounts
        
    def _work_session(self, all_workable_accounts: List[Dict[str, Any]] = None):
        """Thực hiện một phiên làm việc hoàn chỉnh với cơ chế mới"""
        logger.info("Bắt đầu phiên làm việc")
        
        # Đánh dấu đang trong phiên làm việc
        self.db.set("device_is_working", True)
        self.db.set("device_message", JobServiceConstants.MSG_WORKING_SESSION)
        
        try:
            # Nếu không truyền danh sách tài khoản, lấy lại từ database
            if all_workable_accounts is None:
                all_workable_accounts = self._get_all_workable_accounts()
            
            if not all_workable_accounts:
                logger.info("Không có tài khoản nào sẵn sàng làm việc")
                return
                
            logger.info(f"Tìm thấy {len(all_workable_accounts)} tài khoản sẵn sàng làm việc")
            
            # Làm việc tuần tự với từng tài khoản
            for account in all_workable_accounts:
                with self._lock:
                    if self.force_stop or not self.running:
                        break
                
                # Kiểm tra yêu cầu tạm dừng từ server
                if self.db.get("pause_job", False):
                    logger.info("Phát hiện yêu cầu tạm dừng từ server trong phiên làm việc")
                    break
                
                # Kiểm tra cập nhật config từ server
                if not self.check_and_handle_server_updates():
                    logger.info("Phát hiện yêu cầu restart session do config thay đổi trong phiên làm việc")
                    return  # Thoát khỏi _work_session để restart từ run()
                
                # Lấy thông tin tài khoản mới nhất từ database
                account = self.db.get_account(account["id"])
                if not account:
                    continue
                    
                # Kiểm tra lại xem tài khoản có thể làm việc không
                if not self._can_run_job(account):
                    continue
                
                app_name = account.get("app")
                if app_name not in self.job_handlers:
                    logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua tài khoản {account.get('unique_username')}")
                    continue
                
                # Kiểm tra và đồng bộ tài khoản nếu server yêu cầu
                if self._check_account_sync_status(app_name):
                    logger.info(f"Server yêu cầu đồng bộ lại tài khoản cho {app_name}...")
                    self._sync_accounts_for_app(app_name)
                    # Lấy lại thông tin tài khoản sau khi đồng bộ
                    account = self.db.get_account(account["id"])
                    if not account or not self._can_run_job(account):
                        continue
                
                # Làm việc với tài khoản này
                handler = self.job_handlers[app_name]
                account_result = self._work_account_session(account, handler)
                
                # Đóng app sau khi làm xong tài khoản
                handler.close_app()
                
                # Làm chăm sóc sau khi hết job (nếu được bật)
                try:
                    care_in_working_job = self.db.get("care_in_working_job", False)
                    if care_in_working_job and hasattr(handler, "perform_care") and callable(handler.perform_care):
                        logger.info(f"Thực hiện chăm sóc cho tài khoản {account.get('unique_username')}")
                        handler.perform_care(account)
                    elif not care_in_working_job:
                        logger.debug(f"Chăm sóc bị tắt, bỏ qua chăm sóc cho tài khoản {account.get('unique_username')}")
                except Exception as e:
                    logger.warning(f"Lỗi khi chăm sóc tài khoản {account.get('unique_username')}: {e}")
                
                # Nếu bị gián đoạn, dừng phiên
                if not account_result:
                    break
                
                # Nghỉ ngắn giữa các tài khoản
                if not self.safe_sleep(3):
                    break
                    
        except Exception as e:
            logger.exception(e, "Lỗi trong phiên làm việc")
        finally:
            # Đánh dấu kết thúc phiên làm việc
            self.db.set("device_is_working", False)
            
    # DEPRECATED: Phương thức này không dùng nữa do chuyển sang cơ chế mới
    # def _work_with_app(self, app_name: str) -> bool:
    #     """
    #     Làm việc với một app cụ thể
    #     
    #     Args:
    #         app_name: Tên app cần làm việc
    #         
    #     Returns:
    #         bool: True nếu hoàn thành, False nếu bị gián đoạn
    #     """
    #     logger.info(f"Bắt đầu làm việc với {app_name}")
    #     
    #     handler = self.job_handlers[app_name]
    #     
    #     # Làm việc tuần tự với từng tài khoản (real-time reload)
    #     while True:
    #         with self._lock:
    #             if self.force_stop or not self.running:
    #                 return False
    #                 
    #         # Kiểm tra yêu cầu tạm dừng từ server
    #         if self.db.get("pause_job", False):
    #             logger.info(f"Phát hiện yêu cầu tạm dừng từ server khi làm việc với {app_name}")
    #             return False
    #         
    #         # Lấy danh sách tài khoản mới nhất (có thể thay đổi từ server)
    #         accounts = self.db.get_accounts(app=app_name)
    #         
    #         # Lọc các tài khoản có thể làm việc
    #         workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
    #         
    #         if not workable_accounts:
    #             logger.info(f"Không có tài khoản nào có thể làm việc cho {app_name}")
    #             return True
    #             
    #         # Tìm tài khoản có jobs_done_in_session thấp nhất để làm việc
    #         workable_accounts.sort(key=lambda x: x.get('jobs_done_in_session', 0))
    #         account = workable_accounts[0]
    #         
    #         logger.info(f"Bắt đầu làm việc với tài khoản {account.get('unique_username')}")
    #         
    #         # Chuyển sang tài khoản này
    #         switch_result = handler.switch_to_account(account)
    #         if not switch_result:
    #             logger.error(f"Không thể chuyển sang tài khoản {account.get('unique_username')}")
    #             # Đánh dấu tài khoản này có vấn đề và thử tài khoản khác
    #             self.db.set_account_inactive(account["id"], inactive_reason="Lỗi chuyển tài khoản")
    #             continue
    #             
    #         # Làm đủ số job trong phiên cho tài khoản này
    #         account_result = self._work_account_session(account, handler)
    #         
    #         # Làm chăm sóc sau khi hết job
    #         try:
    #             if hasattr(handler, "perform_care") and callable(handler.perform_care):
    #                 logger.info(f"Thực hiện chăm sóc cho tài khoản {account.get('unique_username')}")
    #                 handler.perform_care(account)
    #         except Exception as e:
    #             logger.warning(f"Lỗi khi chăm sóc tài khoản {account.get('unique_username')}: {e}")
    #             
    #         # Nếu bị gián đoạn, return False
    #         if not account_result:
    #             return False
    #             
    #         # Kiểm tra lại xem còn tài khoản nào có thể làm việc không
    #         # (có thể có thay đổi từ server trong lúc làm việc)
    #         updated_accounts = self.db.get_accounts(app=app_name)
    #         remaining_workable = [acc for acc in updated_accounts if self._can_run_job(acc)]
    #         
    #         if not remaining_workable:
    #             logger.info(f"Đã hoàn thành tất cả tài khoản có thể làm việc cho {app_name}")
    #             return True
                
    def _work_account_session(self, account: Dict[str, Any], handler) -> bool:
        """
        Làm việc với một tài khoản trong phiên
        
        Args:
            account: Thông tin tài khoản
            handler: Job handler
            
        Returns:
            bool: True nếu hoàn thành, False nếu bị gián đoạn
        """
        username = account.get('unique_username', 'Unknown')
        jobs_done = 0
        care_counter = 0
        config_reload_counter = 0  # Đếm để reload cấu hình định kỳ
        no_job_count = 0  # Đếm số lần không lấy được job liên tiếp
        max_no_job_attempts = 3  # Số lần tối đa thử lấy job khi không có
        
        logger.info(f"Làm việc với tài khoản {username}")
        
        # Chuyển sang tài khoản này
        switch_result = handler.switch_to_account(account)
        if not switch_result:
            logger.error(f"Không thể chuyển sang tài khoản {username}")
            # Đánh dấu tài khoản này có vấn đề
            self.db.set_account_inactive(account["id"], inactive_reason="Lỗi chuyển tài khoản")
            return True  # Return True để tiếp tục với tài khoản tiếp theo
        
        while True:
            with self._lock:
                if self.force_stop or not self.running:
                    return False
            
            # Luôn reload account ở đầu vòng lặp để đảm bảo dữ liệu mới nhất từ server
            account = self.db.get_account(account["id"])
            if not account:
                logger.warning(f"Không tìm thấy tài khoản {username} sau khi reload, dừng session")
                return True
            
            # Kiểm tra lại xem tài khoản có thể chạy job không sau khi reload
            if not self._can_run_job(account):
                logger.info(f"Tài khoản {username} không thể chạy job nữa sau khi reload")
                return True
                    
            # Kiểm tra yêu cầu tạm dừng từ server
            if self.db.get("pause_job", False):
                logger.info(f"Phát hiện yêu cầu tạm dừng từ server khi làm việc với tài khoản {username}")
                return False
                
            # Kiểm tra cập nhật config từ server
            if not self.check_and_handle_server_updates():
                logger.info(f"Phát hiện yêu cầu restart session do config thay đổi khi làm việc với tài khoản {username}")
                return False  # Thoát để restart session
                    
            # Update proxy timestamp mỗi 20 giây nếu đang sử dụng proxy
            use_proxy = self.db.get("use_proxy", False)
            if use_proxy and self.current_proxy_table:
                current_time = time.time()
                if current_time - self.proxy_last_update >= 20:
                    if self._update_proxy():
                        logger.debug("Đã update proxy timestamp")
                    else:
                        logger.warning("Update proxy timestamp thất bại")
                    
            # Reload cấu hình tài khoản từ database mỗi 5 job để phản ánh thay đổi từ server
            config_reload_counter += 1
            if config_reload_counter >= 5:
                logger.debug(f"Reload cấu hình tài khoản {username} từ database (đã reload ở đầu vòng lặp)")
                config_reload_counter = 0
            
            # Kiểm tra giới hạn phiên hiện tại
            max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
            jobs_done_in_session = account.get("jobs_done_in_session", 0)
            
            if jobs_done_in_session >= max_jobs_per_session:
                logger.info(f"Tài khoản {username} đã hoàn thành đủ job trong phiên ({jobs_done_in_session}/{max_jobs_per_session})")
                return True
                
            try:
                # Lấy job
                job = handler.fetch_job(account)
                
                if not job:
                    no_job_count += 1
                    logger.info(f"Không có job cho tài khoản {username} (lần {no_job_count}/{max_no_job_attempts})")
                    
                    # Nếu không lấy được job quá nhiều lần, dừng phiên làm việc
                    if no_job_count >= max_no_job_attempts:
                        logger.warning(f"Tài khoản {username} không lấy được job sau {max_no_job_attempts} lần thử, dừng phiên làm việc")
                        return True
                    
                    # Nghỉ một chút trước khi thử lại
                    if not self.safe_sleep(random.randint(10, 20)):
                        return False
                    continue
                
                # Reset counter khi lấy được job
                no_job_count = 0
                    
                # Cập nhật device message
                link = job.get('link', '')
                if link.startswith('https://www.instagram.com/'):
                    link = link.replace('https://www.instagram.com/', '')
                elif link.startswith('https://www.tiktok.com/'):
                    link = link.replace('https://www.tiktok.com/', '')
                self.db.set("device_message", f"[{account.get('app')}][{username}][{job.get('type')}][{link}]")
                
                # Validate job
                validation_result = handler.validate_job_before_execution(account, job)
                
                if not validation_result.get("valid", True):
                    if validation_result.get("should_skip", False):
                        # Skip job
                        skip_message = validation_result.get("message", "Job không hợp lệ")
                        logger.info(f"Skip job: {skip_message}")
                        
                        try:
                            handler.record_job_history(account, job, {
                                "status": 2, 
                                "success": False, 
                                "message": skip_message
                            })
                            handler.skip_job(account, job)
                        except Exception as e:
                            logger.warning(f"Skip job lỗi: {e}")
                        
                        # Giãn thời gian sau khi skip job để tránh spam lấy/hủy job liên tục
                        skip_sleep_time = random.randint(3, 10)
                        logger.info(f"Nghỉ {skip_sleep_time}s sau khi skip job để tránh spam")
                        if not self.safe_sleep(skip_sleep_time):
                            return False
                        continue
                    else:
                        logger.warning(f"Job không hợp lệ: {validation_result.get('message', 'Unknown error')}")
                        continue
                        
                # Thực hiện job
                job_result = handler.execute_job(account, job)
                
                # Xử lý kết quả
                job_status = job_result["status"]
                job_success = job_result["success"]
                job_message = job_result["message"]
                
                # Xử lý lỗi follow pending
                if job_status == 4 and job.get("type", "").lower() == "follow":
                    cnt = self.follow_pending_counts.get(account["id"], 0) + 1
                    self.follow_pending_counts[account["id"]] = cnt
                    if cnt >= 5:
                        logger.warning(f"Tài khoản {username} đã 5 lần liên tiếp follow pending, tạm dừng tài khoản")
                        self.db.set_account_inactive(account["id"], inactive_reason="Liên tiếp lỗi follow pending")
                        self.follow_pending_counts[account["id"]] = 0
                        return True
                elif job.get("type", "").lower() == "follow":
                    self.follow_pending_counts[account["id"]] = 0
                    
                # Báo cáo kết quả
                handler.report_job(account, job, job_result)
                
                # Cập nhật thống kê
                self._update_job_stats(account, job_success, job.get("type", ""))
                
                # Reload account sau khi update để có dữ liệu mới nhất
                account = self.db.get_account(account["id"])
                jobs_done_in_session = account.get("jobs_done_in_session", 0)
                
                logger.info(f"Kết quả job {jobs_done_in_session}/{max_jobs_per_session}: {job_message}")
                
                # Chỉ tăng care_counter khi job thành công
                if job_success:
                    jobs_done += 1
                    care_counter += 1
                     
                    # Chăm sóc sau mỗi 3-5 job thành công (random)
                    # if care_counter >= random.randint(3, 5):
                    #     try:
                    #         if hasattr(handler, "perform_care") and callable(handler.perform_care):
                    #             logger.info(f"Thực hiện chăm sóc nhẹ cho tài khoản {username}")
                    #             handler.perform_care(account)
                    #             care_counter = 0
                    #     except Exception as e:
                    #         logger.warning(f"Lỗi khi chăm sóc nhẹ: {e}")
                            
                # Nghỉ ngắn giữa các job
                if not self.safe_sleep(random.randint(2, 5)):
                    return False
                    
            except Exception as e:
                logger.exception(e, f"Lỗi khi thực hiện job cho tài khoản {username}")
                
        return True
        
    def _start_session_cooldown(self):
        """Bắt đầu thời gian nghỉ giữa các phiên"""
        cooldown_minutes = self.db.get("job_cooldown_minutes", 60)
        self.proxy_session_end_time = int(time.time()) + (cooldown_minutes * 60)
        
        logger.info(f"Bắt đầu nghỉ ngơi {cooldown_minutes} phút giữa các phiên")
        self.db.set("device_message", f"{JobServiceConstants.MSG_SESSION_COOLDOWN} ({cooldown_minutes} phút)")
        
        # Bấm nút Home và mở Termux khi bắt đầu nghỉ ngơi
        try:
            logger.info("Bấm nút Home và mở Termux để nghỉ ngơi")
            
            # Bấm nút Home
            self.helper.press_home()
            
            # Chờ một chút rồi mở Termux
            time.sleep(2)
            self.helper.open_app("com.termux")
            
        except Exception as e:
            logger.warning(f"Lỗi khi bấm Home và mở Termux: {e}")
        
    def _is_in_session_cooldown(self) -> bool:
        """
        Kiểm tra xem có đang trong thời gian nghỉ giữa các phiên không
        
        Returns:
            bool: True nếu đang trong thời gian nghỉ
        """
        # Nếu có yêu cầu restart session, bỏ qua countdown
        with self._lock:
            if self.force_restart_session:
                logger.info("Có yêu cầu restart session, bỏ qua thời gian nghỉ")
                self.proxy_session_end_time = 0
                return False
        
        if self.proxy_session_end_time <= 0:
            return False
        
        # Kiểm tra thời gian cooldown hiện tại
        current_time = int(time.time())
        if current_time < self.proxy_session_end_time:
            remaining_minutes = int((self.proxy_session_end_time - current_time) / 60)
            remaining_seconds = (self.proxy_session_end_time - current_time) % 60
            if remaining_minutes > 0:
                logger.debug(f"Còn {remaining_minutes} phút {remaining_seconds} giây nghỉ ngơi")
            else:
                logger.debug(f"Còn {remaining_seconds} giây nghỉ ngơi")
            return True
        else:
            logger.info("Đã hết thời gian nghỉ ngơi, bắt đầu phiên làm việc mới")
            self.proxy_session_end_time = 0
            return False').decode('utf-8'))
