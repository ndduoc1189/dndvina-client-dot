import base64
exec(base64.b64decode('import time
import threading
import datetime
import random
import json
from typing import Dict, Any, List, Optional
import config
import utils
from utils import LogLevel, Logger
from jobs import TiktokJob, InstagramJob

# Tạo logger cho JobService
logger = utils.get_logger("JobService")

# Constants for better code readability
class JobServiceConstants:
    """Constants used in JobService"""
    DEFAULT_CHECK_INTERVAL = 0.5  # Sleep check interval in seconds
    DEFAULT_MAX_FOLLOW_DAY = 20
    DEFAULT_MAX_FOLLOW_SESSION = 5
    MAX_WARNING_LOGS = 20
    
    # Status messages
    MSG_DEVICE_PAUSED_SERVER = "Tạm dừng (Sever yêu cầu)"
    MSG_DEVICE_NO_ACCOUNTS = "Tạm nghỉ (Không có tài khoản)"
    MSG_WAITING_PROXY = "Đang chờ proxy"
    MSG_WORKING_SESSION = "Đang trong phiên làm việc"
    MSG_SESSION_COOLDOWN = "Nghỉ ngơi giữa các phiên"
    
    # Account status reasons
    REASON_DAILY_LIMIT = "Đã đạt giới hạn job hàng ngày"
    REASON_SESSION_LIMIT = "Đã hoàn thành số job tối đa trong phiên"
    REASON_FOLLOW_DAILY_LIMIT = "Đã đạt giới hạn job folow trong phiên"
    REASON_FOLLOW_SESSION_LIMIT = "Đã đạt giới hạn job follow trong phiên"

class JobService:
    def __init__(self, db_service, helper_service, golike_service, mqtt_service=None):
        """
        Khởi tạo JobService
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
            golike_service: GoLikeService để gọi API GoLike
            mqtt_service: MQTTService để gửi thông báo (optional)
        """
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.mqtt_service = mqtt_service
        self.running = True
        self.force_stop = False
        
        # Khởi tạo các job handler
        self.job_handlers = {}
        
        # Flag điều khiển
        self.is_initialized = False
        
        # Thông tin về các app được kích hoạt - lấy từ database hoặc config
        self.enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        # Lock để đồng bộ trạng thái
        self._lock = threading.Lock()
        
        # Dictionary để lưu số lần thử job thất bại theo account_id
        self.failed_job_attempts = {}
        
        # Đếm số lần liên tiếp job follow trả về status 4 (pending)
        self.follow_pending_counts = {}
        
        # Trạng thái proxy hiện tại
        self.current_proxy_id = None
        self.current_proxy_name = None
        self.proxy_session_end_time = 0
        
        # Đếm số lần thất bại khi setup proxy
        self.proxy_setup_fail_count = 0
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức khi force_stop được đặt thành True
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        start_time = time.time()
        check_interval = JobServiceConstants.DEFAULT_CHECK_INTERVAL  # Kiểm tra mỗi 0.5 giây
        
        while time.time() - start_time < seconds:
            # Kiểm tra nếu có yêu cầu dừng
            with self._lock:
                if self.force_stop or not self.running:
                    return False
            
            # Ngủ một khoảng ngắn
            sleep_time = min(check_interval, seconds - (time.time() - start_time))
            if sleep_time > 0:
                time.sleep(sleep_time)
            else:
                break
                
        return True
        
    def initialize(self) -> bool:
        """
        Khởi tạo JobService
        
        Returns:
            bool: True nếu khởi tạo thành công, False nếu không
        """
        logger.info("Đang khởi tạo JobService...")
        
        # 1. Kiểm tra HelperService
        helper_success, helper_data = utils.check_helper_service(self.helper)
        if not helper_success:
            logger.error("Không thể kết nối đến HelperService. Vui lòng kiểm tra lại.")
            return False
            
        # Lưu thông tin thiết bị nếu có
        if helper_data and "data" in helper_data:
            self.db.save_device_info(helper_data)
            logger.info(f"Đã lưu thông tin thiết bị: {helper_data['data'].get('device_model', 'Unknown')}")
            
            
        # 3. Lưu các cấu hình mặc định vào database nếu chưa có
        self._save_default_configs()
            
        # 4. Kiểm tra và lấy GoLike headers nếu cần
        golike_success = self.golike_service.fetch_golike_headers_with_retry()
        if not golike_success:
            logger.error("Không thể lấy GoLike headers. Vui lòng kiểm tra lại.")
            return False
        
        # 5. Khởi tạo các job handler
        self._init_job_handlers()
        
        # 6. Khởi tạo ngày cuối cùng đã reset nếu chưa có trong database
        now = datetime.datetime.now()
        today = now.date()
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        
        if not last_reset_date_str:
            # Nếu hiện tại đã qua giờ reset của ngày hôm nay, đánh dấu đã reset
            if now >= reset_time:
                last_reset_date = today
            else:
                # Nếu chưa đến giờ reset, đánh dấu là đã reset ngày hôm qua
                last_reset_date = today - datetime.timedelta(days=1)
                
            # Lưu vào database
            self.db.set("last_reset_date", last_reset_date.isoformat())
            logger.info(f"Khởi tạo ngày reset: {last_reset_date}")
        else:
            logger.info(f"Đã tìm thấy ngày reset cuối cùng: {last_reset_date_str}")
        
        self.is_initialized = True
        logger.info("Khởi tạo JobService thành công.")
        return True
        
    def _check_account_sync_status(self, app_name: str) -> bool:
        """
        Kiểm tra trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu cần đồng bộ lại, False nếu không cần
        """
        # Lấy trạng thái đồng bộ từ database
        sync_status_key = f"{app_name}_sync_status"
        sync_status = self.db.get(sync_status_key, False)  # Mặc định là chưa đồng bộ
        
        # Nếu chưa đồng bộ thì cần đồng bộ lại
        return not sync_status
        
    def _update_account_sync_status(self, app_name: str, status: bool = True) -> None:
        """
        Cập nhật trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần cập nhật
            status: True nếu đã đồng bộ, False nếu chưa đồng bộ
        """
        sync_status_key = f"{app_name}_sync_status"
        
        # Cập nhật trạng thái đồng bộ
        self.db.set(sync_status_key, status)
        
        logger.info(f"Đã cập nhật trạng thái đồng bộ tài khoản {app_name}: {status}")
        
    def _sync_accounts_for_app(self, app_name: str) -> bool:
        """
        Đồng bộ tài khoản và map tài khoản GoLike cho một app cụ thể
        
        Args:
            app_name: Tên ứng dụng cần đồng bộ
            
        Returns:
            bool: True nếu đồng bộ thành công, False nếu thất bại
        """
        if app_name not in self.job_handlers:
            logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua đồng bộ")
            return False
            
        handler = self.job_handlers[app_name]
        
        try:

            # 1. Đồng bộ tài khoản từ thiết bị
            logger.info(f"Đang đồng bộ tài khoản {app_name}...")
            accounts = handler.sync_accounts_to_db()
            logger.info(f"Đã đồng bộ {len(accounts)} tài khoản {app_name}")
            
            # 2. Map tài khoản GoLike
            logger.info(f"Đang lấy danh sách tài khoản GoLike cho {app_name}...")
            golike_accounts = handler.get_golike_accounts()
            
            if golike_accounts:
                logger.info(f"Đã tìm thấy {len(golike_accounts)} tài khoản GoLike cho {app_name}")
                
                # Lấy tài khoản từ thiết bị
                device_accounts = self.db.get_accounts(app=app_name)
                
                # Ánh xạ tài khoản
                mapped_accounts = handler.map_golike_accounts(golike_accounts, device_accounts)
                
                logger.info(f"Đã ánh xạ {len(mapped_accounts)} tài khoản {app_name} với GoLike")
            else:
                logger.warning(f"Không tìm thấy tài khoản GoLike nào cho {app_name}")
            
            # Cập nhật trạng thái đồng bộ
            self._update_account_sync_status(app_name, True)
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi đồng bộ tài khoản và map GoLike cho {app_name}")
            # Đánh dấu là chưa đồng bộ
            self._update_account_sync_status(app_name, False)
            return False
        
    def _save_default_configs(self):
        """Lưu các cấu hình mặc định vào database nếu chưa có"""
        default_configs = {
            # Cấu hình liên quan đến thời gian làm job
            "job_hour": config.JOB_HOUR,
            "job_cooldown_minutes": config.DEFAULT_COOLDOWN_MINUTES,
            "job_check_interval": config.JOB_CHECK_INTERVAL,
            "cooldown_get_job_golike": 30,  # Thời gian chờ (phút) khi không tìm thấy job GoLike
            
            # Cấu hình liên quan đến số lượng job
            "max_jobs_per_day": config.MAX_JOBS_PER_DAY,
            "max_jobs_per_session": config.MAX_JOBS_PER_SESSION,
            
            # Trạng thái tạm dừng từ server
            "pause_job": False,
            # Trạng thái thiết bị đang làm việc
            "device_is_working": False,
            "device_message": "",
            
            # Danh sách các app được kích hoạt
            "enabled_apps": config.ENABLED_APPS,
            
            # Thiết lập cho phép chăm sóc khi làm job
            "care_in_working_job": False,
            
            # Cấu hình giá tối thiểu cho job follow
            "min_follow_price": 20,
            
            # Cấu hình proxy
            "use_proxy": False,  # Có sử dụng proxy không
            "proxy_requested": 0,  # Đã gửi yêu cầu proxy chưa (0=chưa, 1=đã gửi)
        }
        
        for key, value in default_configs.items():
            # Chỉ lưu nếu chưa có trong database
            if self.db.get(key) is None:
                self.db.set(key, value)
                logger.debug(f"Đã lưu cấu hình mặc định: {key}={value}")
            else:
                logger.debug(f"Cấu hình {key} đã tồn tại: {self.db.get(key)}")
        
    def _init_job_handlers(self):
        """Khởi tạo các job handler"""
        # init thì sẽ init handlers cho tất cả các app, làm app nào thì sẽ theo cấu hình lấy từ database
        for app_name in config.ENABLED_APPS:
            if app_name == "tiktok":
                self.job_handlers[app_name] = TiktokJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
            elif app_name == "instagram":
                self.job_handlers[app_name] = InstagramJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                
        logger.info(f"Đã khởi tạo {len(self.job_handlers)} job handler: {', '.join(self.job_handlers.keys())}")
        
    def _reset_daily_counters(self):
        """Reset bộ đếm hàng ngày vào giờ được cấu hình"""
        now = datetime.datetime.now()
        today = now.date()
        
        # Lấy giờ reset từ cấu hình hoặc từ database nếu có
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        
        # Tính thời điểm reset của ngày hôm nay
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        last_reset_date = None
        
        if last_reset_date_str:
            try:
                last_reset_date = datetime.date.fromisoformat(last_reset_date_str)
            except ValueError:
                logger.error(f"Định dạng ngày reset không hợp lệ: {last_reset_date_str}")
                last_reset_date = None
        
        # Kiểm tra xem đã qua giờ reset của ngày hôm nay chưa và chưa reset trong ngày hôm nay
        if now >= reset_time and (last_reset_date is None or last_reset_date < today):
            logger.info(f"Thực hiện reset bộ đếm hàng ngày (giờ reset: {job_hour}:00)")
            
            # Reset các bộ đếm cho tất cả tài khoản
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                
                for account in accounts:
                    # Reset số job hôm nay và số job trong phiên
                    self.db.update_account(account["id"], {
                        "job_today": 0,
                        "jobs_done_in_session": 0,
                        "follow_today": 0,
                        "follow_in_session": 0,
                        "last_view_stories": 0
                    })
                    
                    # Nếu tài khoản đang ở trạng thái inactive vì đã đạt giới hạn job hàng ngày,
                    # đặt lại trạng thái thành active
                    if account.get("status") == "inactive" and account.get("inactive_reason") == "Đã đạt giới hạn job hàng ngày":
                        self.db.update_account(account["id"], {
                            "status": "active",
                            "job_disable_until": 0,
                        })
                        logger.info(f"Đã đặt lại trạng thái active cho tài khoản {account.get('unique_username')} sau khi reset")
                    
                    # Mở khóa follow nếu bị khóa do đạt giới hạn follow trong ngày
                    if account.get("disable_follow", False):
                        self.db.update_account(account["id"], {
                            "disable_follow": False,
                            "follow_disable_until": 0,
                            "inactive_follow_reason": ""
                        })
                        logger.info(f"Đã mở khóa follow cho tài khoản {account.get('unique_username')} sau khi reset")
            
            logger.info(f"Đã reset bộ đếm hàng ngày cho tất cả tài khoản vào {now.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Cập nhật ngày đã reset vào database
            self.db.set("last_reset_date", today.isoformat())
        
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể chạy job cho tài khoản không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể chạy job, False nếu không
        """
        username = account.get('unique_username', 'Unknown')
        
        # 1. Kiểm tra trạng thái cơ bản
        if not self._check_basic_account_status(account):
            return False
            
        # 2. Kiểm tra điều kiện cần thiết
        if not self._check_account_prerequisites(account):
            return False
            
        # 3. Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # 4. Kiểm tra giới hạn job hàng ngày
        if self._is_account_at_daily_limit(account):
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            return False
            
        # 5. Kiểm tra giới hạn job trong phiên
        if self._is_account_at_session_limit(account):
            logger.info(f"Tài khoản {username} đã làm đủ job trong phiên")
            self.db.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
            self._close_app_for_account(account)
            return False
        
        return True
        
    def _check_basic_account_status(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra trạng thái cơ bản của tài khoản"""
        account_status = account.get("status", "active")
        
        # Nếu tài khoản bị disabled, không cho chạy job
        if account_status == "disabled":
            return False
            
        # Nếu tài khoản đang inactive, kiểm tra thời gian cooldown
        if account_status == "inactive":
            return self._handle_inactive_account(account)
            
        return True
        
    def _handle_inactive_account(self, account: Dict[str, Any]) -> bool:
        """Xử lý tài khoản đang ở trạng thái inactive"""
        job_disable_until = account.get("job_disable_until", 0)
        username = account.get('unique_username', 'Unknown')
        
        # Nếu đã hết thời gian cooldown, cập nhật trạng thái về active
        if job_disable_until <= time.time():
            # Cập nhật trạng thái về active
            update_data = {"status": "active", "last_care_time": 0}
            
            # Kiểm tra nếu inactive_follow_reason chứa "unfollow" thì mở khóa follow
            inactive_follow_reason = account.get("inactive_follow_reason", "")
            if "unfollow" not in inactive_follow_reason.lower():
                update_data.update({
                    "disable_follow": False,
                    "follow_disable_until": 0,
                    "inactive_follow_reason": ""
                })
                
            self.db.update_account(account["id"], update_data)
            logger.info(f"Tài khoản {username} đã hết thời gian chờ, đã chuyển về trạng thái active")
            return True
        else:
            # Chưa hết thời gian chờ
            cooldown_remain = int((job_disable_until - time.time()) / 60)
            logger.info(f"Tài khoản {username} đang trong thời gian chờ (còn {cooldown_remain} phút)")
            return False
            
    def _check_account_prerequisites(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra các điều kiện tiên quyết của tài khoản"""
        # Kiểm tra xem tài khoản có được bật job không
        if not account.get("job_enable", False):
            return False
            
        # Kiểm tra xem tài khoản đã được liên kết với GoLike chưa
        if not account.get("is_golike_linked", False):
            return False
            
        return True
        
    def _ensure_account_limits_set(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Đảm bảo các giới hạn của tài khoản được thiết lập với giá trị mặc định
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Thông tin tài khoản đã được cập nhật
        """
        update_data = {}
        
        # Kiểm tra và thiết lập max_jobs_per_session
        if account.get("max_jobs_per_session", 0) <= 0:
            update_data["max_jobs_per_session"] = config.MAX_JOBS_PER_SESSION
            
        # Kiểm tra và thiết lập job_max_day
        if account.get("job_max_day", 0) <= 0:
            update_data["job_max_day"] = config.MAX_JOBS_PER_DAY
            
        # Cập nhật vào database nếu có thay đổi
        if update_data:
            self.db.update_account(account["id"], update_data)
            account.update(update_data)
            
        return account
        
    def _close_app_for_account(self, account: Dict[str, Any]) -> None:
        """
        Đóng app tương ứng với tài khoản
        
        Args:
            account: Thông tin tài khoản
        """
        app_name = account.get("app")
        if app_name and app_name in config.APP_PACKAGES:
            self.helper.close_app(config.APP_PACKAGES[app_name])
            
    def _is_account_at_daily_limit(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có đạt giới hạn job hàng ngày không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đạt giới hạn
        """
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        return job_today >= job_max_day
        
    def _is_account_at_session_limit(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có đạt giới hạn job trong phiên không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đạt giới hạn
        """
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
        return jobs_done_in_session >= max_jobs_per_session
        
    def _update_job_stats(self, account: Dict[str, Any], success: bool = True, job_type: str = None):
        """
        Cập nhật thống kê job
        
        Args:
            account: Thông tin tài khoản
            success: True nếu job thành công, False nếu thất bại
            job_type: Loại job (follow, like, etc.)
        """
        username = account.get('unique_username', 'Unknown')
        
        # Cập nhật thông tin job cơ bản
        self._update_basic_job_stats(account, success)
        
        # Reset số lần thử job thất bại nếu job thành công
        if success:
            self.failed_job_attempts[account["id"]] = 0
        
        # Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # Kiểm tra và xử lý giới hạn phiên
        self._check_session_limit_after_job(account)
        
        # Kiểm tra và xử lý giới hạn hàng ngày
        self._check_daily_limit_after_job(account)
        
        # Xử lý thống kê riêng cho job follow
        if success and job_type and job_type.lower() == "follow":
            self._update_follow_stats(account)
            
    def _update_basic_job_stats(self, account: Dict[str, Any], success: bool):
        """Cập nhật thống kê job cơ bản"""
        job_today = account.get("job_today", 0)
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        
        update_data = {
            "last_job_time": int(time.time()),
            "job_today": job_today + 1,
            "jobs_done_in_session": jobs_done_in_session + 1,
            "total_jobs": account.get("total_jobs", 0) + 1
        }
        
        if not success:
            update_data["failed_jobs"] = account.get("failed_jobs", 0) + 1
            
        self.db.update_account(account["id"], update_data)
        account.update(update_data)  # Cập nhật local data
        
    def _check_session_limit_after_job(self, account: Dict[str, Any]):
        """Kiểm tra giới hạn phiên sau khi làm job"""
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
        username = account.get('unique_username', 'Unknown')
        
        if jobs_done_in_session >= max_jobs_per_session:
            logger.info(f"Tài khoản {username} đã làm đủ {max_jobs_per_session} job trong phiên")
            self.db.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
            self._close_app_for_account(account)
            
    def _check_daily_limit_after_job(self, account: Dict[str, Any]):
        """Kiểm tra giới hạn hàng ngày sau khi làm job"""
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        username = account.get('unique_username', 'Unknown')
        
        if job_today >= job_max_day:
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày ({job_today}/{job_max_day})")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            
    def _update_follow_stats(self, account: Dict[str, Any]):
        """Cập nhật thống kê riêng cho follow job"""
        username = account.get('unique_username', 'Unknown')
        follow_today = account.get("follow_today", 0) + 1
        follow_in_session = account.get("follow_in_session", 0) + 1
        max_follow_day = account.get("max_follow_day", 20)
        max_follow_session = account.get("max_follow_session", 5)
        
        # Cập nhật số liệu follow
        update_follow = {
            "follow_today": follow_today,
            "follow_in_session": follow_in_session,
            "last_follow_time": int(time.time()),
            "is_sync": False
        }
        self.db.update_account(account["id"], update_follow)
        
        # Kiểm tra giới hạn follow trong ngày
        if follow_today >= max_follow_day:
            self.db.set_account_inactive_follow_until_next_reset(account["id"], "Đã đạt giới hạn job folow trong phiên")
            logger.info(f"Tài khoản {username} đã đạt giới hạn follow trong ngày ({follow_today}/{max_follow_day})")
        # Kiểm tra giới hạn follow trong phiên
        elif follow_in_session >= max_follow_session:
            self.db.set_account_inactive_follow(account["id"], reason="Đã đạt giới hạn job follow trong phiên")
            logger.info(f"Tài khoản {username} đã đạt giới hạn follow trong phiên ({follow_in_session}/{max_follow_session})")
        
    def start(self):
        """
        Khởi động JobService trong thread riêng
        
        Returns:
            threading.Thread: Thread đang chạy JobService hoặc None nếu lỗi
        """
        try:
            # Đặt trạng thái running
            self.running = True
            self.force_stop = False
            
            # Tạo thread
            thread = threading.Thread(target=self.run)
            thread.daemon = True
            thread.start()
            
            return thread
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động JobService")
            return None
            
    def reset_inactive_accounts(self):
        """
        Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
        """
        try:
            current_time = int(time.time())
            
            # Lấy danh sách tất cả tài khoản ở trạng thái inactive
            for app_name in self.enabled_apps:
                inactive_accounts = self.db.get_accounts(app=app_name, status="inactive") or []
                
                for account in inactive_accounts:
                    job_disable_until = account.get("job_disable_until", 0)
                    
                    # Nếu đã hết thời gian chờ, chuyển về trạng thái active
                    if job_disable_until <= current_time:
                        self.db.update_account(account["id"], {"status": "active"})
                        logger.info(f"Tài khoản {account.get('unique_username')} (ID: {account['id']}) đã hết thời gian chờ, đã chuyển về trạng thái active")
                    else:
                        remaining_minutes = int((job_disable_until - current_time) / 60)
                        logger.debug(f"Tài khoản {account.get('unique_username')} còn {remaining_minutes} phút ở trạng thái inactive")
                        
            # Kiểm tra và khôi phục khóa FOLLOW
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name) or []
                for account in accounts:
                    if account.get("disable_follow"):
                        until_ts = account.get("follow_disable_until", 0)
                        if until_ts <= current_time:
                            self.db.update_account(account["id"], {"disable_follow": False, "follow_disable_until": 0, "inactive_follow_reason": "", "is_sync": False})
                            logger.info(f"Đã mở khóa FOLLOW cho tài khoản {account.get('unique_username')}")
                        else:
                            remaining = int((until_ts - current_time) / 60)
                            logger.debug(f"Tài khoản {account.get('unique_username')} còn {remaining} phút khóa FOLLOW")
        except Exception as e:
            logger.exception(e, "Lỗi khi kiểm tra và khôi phục tài khoản inactive")
    
    def is_account_can_run_job(self, app_name:str ) -> bool:
        """
        Kiểm tra xem tài khoản có thể chạy job không
        """
        accounts = self.db.get_accounts(app=app_name)
        for account in accounts:
            if(self._can_run_job(account)):
                return True
        return False
    
    def run(self):
        """
        Chạy JobService trong một vòng lặp với logic làm việc theo phiên
        """
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo JobService. Không thể chạy.")
                return
        
        logger.info("Bắt đầu chạy JobService với logic làm việc theo phiên...")
        
        # Kiểm tra device_id
        device_id = self.db.get_or_create_device_id()
            
        if not device_id:
            logger.warning("Không thể xác định device_id hiện tại, JobService không thể chạy")
            return
            
        while self.running:
            # Reset biến force_stop nếu có
            with self._lock:
                self.force_stop = False
            
            # Kiểm tra yêu cầu tạm dừng từ server
            if self.db.get("pause_job", False):
                logger.info("Có yêu cầu tạm dừng từ server, tạm dừng xử lý job")
                self.db.set("device_is_working", False)
                self.db.set("device_message", JobServiceConstants.MSG_DEVICE_PAUSED_SERVER)
                job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                if not self.safe_sleep(job_check_interval):
                    break
                continue
            
            # Reset bộ đếm hàng ngày nếu cần
            self._reset_daily_counters()
            
            # Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
            self.reset_inactive_accounts()
            
            try:
                # Kiểm tra xem có đang trong thời gian nghỉ giữa các phiên không
                if self._is_in_session_cooldown():
                    remaining_minutes = int((self.proxy_session_end_time - int(time.time())) / 60)
                    self.db.set("device_message", f"{JobServiceConstants.MSG_SESSION_COOLDOWN} (còn {remaining_minutes} phút)")
                    if not self.safe_sleep(60):  # Kiểm tra mỗi phút
                        break
                    continue
                
                # Kiểm tra yêu cầu proxy
                if not self._check_proxy_requirement():
                    # Cần proxy nhưng chưa có, chờ 30 giây rồi kiểm tra lại
                    if not self.safe_sleep(30):
                        logger.info("Cần proxy nhưng chưa có, chờ 30 giây rồi kiểm tra lại")
                        break
                    continue
                
                # Kiểm tra và đồng bộ tài khoản trước khi kiểm tra tài khoản sẵn sàng làm việc
                enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
                for app_name in enabled_apps:
                    if app_name in self.job_handlers and self._check_account_sync_status(app_name):
                        logger.info(f"Đồng bộ tài khoản cho {app_name}...")
                        self._sync_accounts_for_app(app_name)
                
                # Kiểm tra xem có tài khoản nào sẵn sàng làm việc không (sau khi đã đồng bộ)
                if not self._has_accounts_ready_for_work():
                    logger.info("Không có tài khoản nào sẵn sàng làm việc")
                    self.db.set("device_message", JobServiceConstants.MSG_DEVICE_NO_ACCOUNTS)
                    job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                    if not self.safe_sleep(job_check_interval):
                        break
                    continue
                
                # Thiết lập proxy nếu cần
                use_proxy = self.db.get("use_proxy", False)
                if use_proxy:
                    if not self._setup_proxy_for_session():
                        logger.error("Không thể thiết lập proxy, bỏ qua phiên này")
                        if not self.safe_sleep(60):
                            break
                        continue
                    else:
                        # Reset counter khi setup thành công
                        self.proxy_setup_fail_count = 0
                
                # Bắt đầu phiên làm việc
                self._work_session()
                
                # Giải phóng proxy và bắt đầu thời gian nghỉ
                if use_proxy:
                    self._release_proxy_after_session()
                    
                self._start_session_cooldown()
                
            except Exception as e:
                logger.exception(e, "Lỗi trong vòng lặp chính")
                # Nghỉ một chút trước khi thử lại
                if not self.safe_sleep(30):
                    break
            
        logger.info("JobService đã dừng")
            
    def stop(self):
        """Dừng JobService"""
        with self._lock:
            self.running = False
        logger.info("Đang dừng JobService...")
        
    def force_stop_all(self):
        """Dừng ngay lập tức tất cả các hoạt động"""
        with self._lock:
            self.force_stop = True
            self.running = False
        logger.info("Dừng ngay lập tức tất cả các hoạt động...")

    def shutdown(self):
        """Đóng dịch vụ, dừng tất cả worker threads"""
        try:
            logger.info("Dừng ngay lập tức tất cả các hoạt động...")
            
            # Đánh dấu dừng
            self.running = False
            self.force_stop = True
            
            # Giải phóng proxy nếu có
            if self.current_proxy_id:
                self._release_proxy_after_session()
            
            # Đóng kết nối database để tránh lỗi thread
            if hasattr(self, 'db') and self.db:
                try:
                    self.db.close()
                except Exception as e:
                    logger.error(f"Lỗi khi đóng kết nối database: {str(e)}")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi shutdown JobService")
    
    def _check_proxy_requirement(self) -> bool:
        """
        Kiểm tra xem có cần proxy để làm việc không
        
        Returns:
            bool: True nếu có proxy hoặc không cần proxy, False nếu cần proxy nhưng chưa có
        """
        use_proxy = self.db.get("use_proxy", False)
        
        if not use_proxy:
            return True  # Không cần proxy
            
        # Cần proxy, kiểm tra xem có proxy config không
        proxy_config = self.db.get("proxy_config")
        
        if not proxy_config:
            # Kiểm tra xem đã gửi yêu cầu proxy chưa
            proxy_requested = self.db.get("proxy_requested", 0)
            
            if proxy_requested == 0:
                logger.info("Cần proxy để làm việc nhưng chưa có proxy config, gửi yêu cầu proxy")
                self.db.set("device_message", JobServiceConstants.MSG_WAITING_PROXY)
                # Gửi MQTT thông báo đang chờ proxy
                self._send_mqtt_proxy_request()
                # Đánh dấu đã gửi yêu cầu
                self.db.set("proxy_requested", 1)
            else:
                logger.debug("Đã gửi yêu cầu proxy, đang chờ server phản hồi")
                self.db.set("device_message", JobServiceConstants.MSG_WAITING_PROXY)
                
            return False
            
        return True
        
    def _send_mqtt_proxy_request(self):
        """Gửi MQTT yêu cầu proxy"""
        try:
            # Kiểm tra xem có mqtt_service không
            if self.mqtt_service is not None:
                device_id = self.db.get_or_create_device_id()
                message = {
                    "type": "request_proxy",
                    "device_id": device_id,
                    "timestamp": int(time.time())
                }
                self.mqtt_service._safe_publish(config.MQTT_TOPIC_SERVER_PROXY, json.dumps(message))
                logger.info("Đã gửi yêu cầu proxy qua MQTT")
        except Exception as e:
            logger.warning(f"Lỗi khi gửi yêu cầu proxy qua MQTT: {e}")
            
    def _get_proxy_display_name(self, proxy_config: Dict[str, Any]) -> str:
        """
        Lấy tên hiển thị cho proxy từ config
        
        Args:
            proxy_config: Cấu hình proxy
            
        Returns:
            str: Tên hiển thị của proxy (name hoặc id@host:port)
        """
        if not proxy_config:
            return "Unknown"
            
        # Ưu tiên sử dụng name nếu có, nếu không thì dùng id@host:port
        proxy_name = proxy_config.get("name")
        if proxy_name:
            return proxy_name
            
        proxy_id = proxy_config.get("id", "unknown")
        host = proxy_config.get("host", "")
        port = proxy_config.get("port", "")
        
        if host and port:
            return f"{proxy_id}@{host}:{port}"
        else:
            return proxy_id
            
    def _setup_proxy_for_session(self) -> bool:
        """
        Thiết lập proxy cho phiên làm việc
        
        Returns:
            bool: True nếu thiết lập thành công, False nếu thất bại
        """
        proxy_config = self.db.get("proxy_config")
        
        if not proxy_config:
            return False
            
        try:
            # Lưu ID và tên proxy hiện tại
            self.current_proxy_id = proxy_config.get("proxy_id")
            self.current_proxy_name = self._get_proxy_display_name(proxy_config)
            
            # Thiết lập proxy thông qua helper service
            if hasattr(self.helper, 'setup_proxy'):
                logger.info(f"Đang thiết lập proxy {self.current_proxy_name}")
                setup_result = self.helper.setup_proxy(proxy_config)
                if not setup_result:
                    logger.error(f"Không thể thiết lập proxy {self.current_proxy_name}")
                    
                    # Tăng counter thất bại
                    self.proxy_setup_fail_count += 1
                    logger.warning(f"Proxy setup thất bại lần {self.proxy_setup_fail_count}/3")
                    
                    # Nếu thất bại 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới
                    if self.proxy_setup_fail_count >= 3:
                        logger.error("Proxy setup thất bại 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới")
                        self._clear_proxy_and_request_new()
                        self.proxy_setup_fail_count = 0
                        
                    return False
            else:
                logger.warning("Helper service không hỗ trợ setup proxy")
                # Tăng counter thất bại
                self.proxy_setup_fail_count += 1
                
                # Nếu thất bại 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới
                if self.proxy_setup_fail_count >= 3:
                    logger.error("Helper service không hỗ trợ proxy 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới")
                    self._clear_proxy_and_request_new()
                    self.proxy_setup_fail_count = 0
                    
                return False
                    
            logger.info(f"Đã thiết lập proxy {self.current_proxy_name} cho phiên làm việc")
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi thiết lập proxy {self.current_proxy_name or 'unknown'}")
            
            # Tăng counter thất bại
            self.proxy_setup_fail_count += 1
            logger.warning(f"Proxy setup lỗi exception lần {self.proxy_setup_fail_count}/3")
            
            # Nếu thất bại 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới
            if self.proxy_setup_fail_count >= 3:
                logger.error("Proxy setup lỗi exception 3 lần liên tiếp, xóa proxy và yêu cầu proxy mới")
                self._clear_proxy_and_request_new()
                self.proxy_setup_fail_count = 0
                
            return False
            
    def _clear_proxy_and_request_new(self):
        """
        Xóa proxy hiện tại và yêu cầu server cấp proxy mới khi setup thất bại 3 lần liên tiếp
        """
        try:
            logger.info("Xóa proxy hiện tại và yêu cầu server cấp proxy mới")
            
            # Xóa proxy config hiện tại
            self.db.set("proxy_config", None)
            
            # Reset trạng thái yêu cầu proxy để có thể yêu cầu proxy mới
            self.db.set("proxy_requested", 0)
            
            # Gửi thông báo release proxy hiện tại (nếu có)
            if self.current_proxy_id and self.mqtt_service is not None:
                device_id = self.db.get_or_create_device_id()
                message = {
                    "type": "release_proxy_failed",
                    "device_id": device_id,
                    "proxy_id": self.current_proxy_id,
                    "reason": "Setup failed 3 times",
                    "timestamp": int(time.time())
                }
                self.mqtt_service._safe_publish(config.MQTT_TOPIC_SERVER_PROXY, json.dumps(message))
                logger.info(f"Đã thông báo release proxy thất bại: {self.current_proxy_name or self.current_proxy_id}")
            
            # Reset proxy hiện tại
            self.current_proxy_id = None
            self.current_proxy_name = None
            
            # Cập nhật device message
            self.db.set("device_message", "Proxy lỗi, đã yêu cầu proxy mới")
            
            logger.info("Đã xóa proxy cũ và sẵn sàng yêu cầu proxy mới")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi xóa proxy và yêu cầu proxy mới")
            
    def _release_proxy_after_session(self):
        """Giải phóng proxy sau khi kết thúc phiên làm việc"""
        try:
            if self.current_proxy_id:
                # Xóa proxy config và reset trạng thái yêu cầu
                self.db.set("proxy_config", None)
                self.db.set("proxy_requested", 0)
                
                # Gửi MQTT thông báo không dùng proxy này nữa
                if self.mqtt_service is not None:
                    device_id = self.db.get_or_create_device_id()
                    message = {
                        "type": "release_proxy",
                        "device_id": device_id,
                        "proxy_id": self.current_proxy_id,
                        "timestamp": int(time.time())
                    }
                    self.mqtt_service._safe_publish(config.MQTT_TOPIC_SERVER_PROXY, json.dumps(message))
                    logger.info(f"Đã thông báo giải phóng proxy {self.current_proxy_name or self.current_proxy_id}")
                    
                self.current_proxy_id = None
                self.current_proxy_name = None
                
        except Exception as e:
            logger.exception(e, f"Lỗi khi giải phóng proxy {self.current_proxy_name or self.current_proxy_id or 'unknown'}")
            
    def _clear_proxy_and_request_new(self):
        """
        Xóa proxy hiện tại và yêu cầu server cấp proxy mới khi setup thất bại 3 lần liên tiếp
        """
        try:
            logger.info("Xóa proxy hiện tại và yêu cầu server cấp proxy mới")
            
            # Xóa proxy config hiện tại
            self.db.set("proxy_config", None)
            
            # Reset trạng thái yêu cầu proxy để có thể yêu cầu proxy mới
            self.db.set("proxy_requested", 0)
            
            # Gửi thông báo release proxy hiện tại (nếu có)
            if self.current_proxy_id and self.mqtt_service is not None:
                device_id = self.db.get_or_create_device_id()
                message = {
                    "type": "release_proxy_failed",
                    "device_id": device_id,
                    "proxy_id": self.current_proxy_id,
                    "reason": "Setup failed 3 times",
                    "timestamp": int(time.time())
                }
                self.mqtt_service._safe_publish(config.MQTT_TOPIC_SERVER_PROXY, json.dumps(message))
                logger.info(f"Đã thông báo release proxy thất bại: {self.current_proxy_name or self.current_proxy_id}")
            
            # Reset proxy hiện tại
            self.current_proxy_id = None
            self.current_proxy_name = None
            
            # Cập nhật device message
            self.db.set("device_message", "Proxy lỗi, đã yêu cầu proxy mới")
            
            logger.info("Đã xóa proxy cũ và sẵn sàng yêu cầu proxy mới")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi xóa proxy và yêu cầu proxy mới")

    def _has_accounts_ready_for_work(self) -> bool:
        """
        Kiểm tra xem có tài khoản nào sẵn sàng làm việc không
        
        Returns:
            bool: True nếu có tài khoản có thể làm việc
        """
        enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        for app_name in enabled_apps:
            if self.is_account_can_run_job(app_name):
                return True
                
        return False
        
    def _work_session(self):
        """Thực hiện một phiên làm việc hoàn chỉnh"""
        logger.info("Bắt đầu phiên làm việc")
        
        # Đánh dấu đang trong phiên làm việc
        self.db.set("device_is_working", True)
        self.db.set("device_message", JobServiceConstants.MSG_WORKING_SESSION)
        
        try:
            enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
            
            # Làm việc tuần tự từng app
            for app_name in enabled_apps:
                with self._lock:
                    if self.force_stop or not self.running:
                        break
                        
                if app_name not in self.job_handlers:
                    logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua")
                    continue
                    
                # Kiểm tra và đồng bộ tài khoản nếu server yêu cầu (có thể có tài khoản mới từ GoLike)
                if self._check_account_sync_status(app_name):
                    logger.info(f"Server yêu cầu đồng bộ lại tài khoản cho {app_name}...")
                    self._sync_accounts_for_app(app_name)
                    
                # Làm việc với app này
                self._work_with_app(app_name)
                
                # Đóng app sau khi hoàn thành
                handler = self.job_handlers[app_name]
                handler.close_app()
                
                # Nghỉ ngắn giữa các app
                if not self.safe_sleep(5):
                    break
                    
        except Exception as e:
            logger.exception(e, "Lỗi trong phiên làm việc")
        finally:
            # Đánh dấu kết thúc phiên làm việc
            self.db.set("device_is_working", False)
            
    def _work_with_app(self, app_name: str):
        """
        Làm việc với một app cụ thể
        
        Args:
            app_name: Tên app cần làm việc
        """
        logger.info(f"Bắt đầu làm việc với {app_name}")
        
        handler = self.job_handlers[app_name]
        accounts = self.db.get_accounts(app=app_name)
        
        # Lọc các tài khoản có thể làm việc
        workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
        
        if not workable_accounts:
            logger.info(f"Không có tài khoản nào có thể làm việc cho {app_name}")
            return
            
        # Làm việc tuần tự với từng tài khoản
        for account in workable_accounts:
            with self._lock:
                if self.force_stop or not self.running:
                    break
                    
            logger.info(f"Bắt đầu làm việc với tài khoản {account.get('unique_username')}")
            
            # Chuyển sang tài khoản này
            switch_result = handler.switch_to_account(account)
            if not switch_result:
                logger.error(f"Không thể chuyển sang tài khoản {account.get('unique_username')}")
                continue
                
            # Làm đủ số job trong phiên cho tài khoản này
            self._work_account_session(account, handler)
            
            # Làm chăm sóc sau khi hết job
            try:
                if hasattr(handler, "perform_care") and callable(handler.perform_care):
                    logger.info(f"Thực hiện chăm sóc cho tài khoản {account.get('unique_username')}")
                    handler.perform_care(account)
            except Exception as e:
                logger.warning(f"Lỗi khi chăm sóc tài khoản {account.get('unique_username')}: {e}")
                
    def _work_account_session(self, account: Dict[str, Any], handler):
        """
        Làm việc với một tài khoản trong phiên
        
        Args:
            account: Thông tin tài khoản
            handler: Job handler
        """
        username = account.get('unique_username', 'Unknown')
        max_jobs_per_session = account.get("max_jobs_per_session", 0) or config.MAX_JOBS_PER_SESSION
        jobs_done = 0
        care_counter = 0
        
        logger.info(f"Làm việc với tài khoản {username}, mục tiêu: {max_jobs_per_session} job")
        
        while jobs_done < max_jobs_per_session:
            with self._lock:
                if self.force_stop or not self.running:
                    break
                    
            # Lấy thông tin tài khoản mới nhất
            account = self.db.get_account(account["id"])
            
            # Kiểm tra lại xem tài khoản có thể chạy job không
            if not self._can_run_job(account):
                logger.info(f"Tài khoản {username} không thể chạy job nữa")
                break
                
            try:
                # Lấy job
                job = handler.fetch_job(account)
                
                if not job:
                    logger.info(f"Không có job cho tài khoản {username}, bỏ qua phiên này")
                    break
                    
                # Cập nhật device message
                link = job.get('link', '')
                if link.startswith('https://www.instagram.com/'):
                    link = link.replace('https://www.instagram.com/', '')
                elif link.startswith('https://www.tiktok.com/'):
                    link = link.replace('https://www.tiktok.com/', '')
                self.db.set("device_message", f"[{account.get('app')}][{username}][{job.get('type')}][{link}]")
                
                # Validate job
                validation_result = handler.validate_job_before_execution(account, job)
                
                if not validation_result.get("valid", True):
                    if validation_result.get("should_skip", False):
                        # Skip job
                        skip_message = validation_result.get("message", "Job không hợp lệ")
                        logger.info(f"Skip job: {skip_message}")
                        
                        try:
                            handler.record_job_history(account, job, {
                                "status": 2, 
                                "success": False, 
                                "message": skip_message
                            })
                            handler.skip_job(account, job)
                        except Exception as e:
                            logger.warning(f"Skip job lỗi: {e}")
                        
                        # Giãn thời gian sau khi skip job để tránh spam lấy/hủy job liên tục
                        skip_sleep_time = random.randint(3, 10)
                        logger.info(f"Nghỉ {skip_sleep_time}s sau khi skip job để tránh spam")
                        if not self.safe_sleep(skip_sleep_time):
                            break
                        continue
                    else:
                        logger.warning(f"Job không hợp lệ: {validation_result.get('message', 'Unknown error')}")
                        continue
                        
                # Thực hiện job
                job_result = handler.execute_job(account, job)
                
                # Xử lý kết quả
                job_status = job_result["status"]
                job_success = job_result["success"]
                job_message = job_result["message"]
                
                # Xử lý lỗi follow pending
                if job_status == 4 and job.get("type", "").lower() == "follow":
                    cnt = self.follow_pending_counts.get(account["id"], 0) + 1
                    self.follow_pending_counts[account["id"]] = cnt
                    if cnt >= 5:
                        logger.warning(f"Tài khoản {username} đã 5 lần liên tiếp follow pending, khóa FOLLOW")
                        self.db.set_account_inactive_follow_until_next_reset(account["id"], "Liên tiếp lỗi follow pending")
                        self.follow_pending_counts[account["id"]] = 0
                        break
                elif job.get("type", "").lower() == "follow":
                    self.follow_pending_counts[account["id"]] = 0
                    
                # Báo cáo kết quả
                handler.report_job(account, job, job_result)
                
                # Cập nhật thống kê
                self._update_job_stats(account, job_success, job.get("type", ""))
                
                logger.info(f"Kết quả job {jobs_done + 1}/{max_jobs_per_session}: {job_message}")
                
                if job_success:
                    jobs_done += 1
                    care_counter += 1
                    
                    # Chăm sóc sau mỗi 3-5 job (random)
                    if care_counter >= random.randint(3, 5):
                        try:
                            if hasattr(handler, "perform_care") and callable(handler.perform_care):
                                logger.info(f"Thực hiện chăm sóc nhẹ cho tài khoản {username}")
                                handler.perform_care(account)
                                care_counter = 0
                        except Exception as e:
                            logger.warning(f"Lỗi khi chăm sóc nhẹ: {e}")
                            
                # Nghỉ ngắn giữa các job
                if not self.safe_sleep(random.randint(2, 5)):
                    break
                    
            except Exception as e:
                logger.exception(e, f"Lỗi khi thực hiện job cho tài khoản {username}")
                
        logger.info(f"Hoàn thành phiên làm việc cho tài khoản {username}: {jobs_done}/{max_jobs_per_session} job")
        
    def _start_session_cooldown(self):
        """Bắt đầu thời gian nghỉ giữa các phiên"""
        cooldown_minutes = self.db.get("job_cooldown_minutes", 60)
        self.proxy_session_end_time = int(time.time()) + (cooldown_minutes * 60)
        
        logger.info(f"Bắt đầu nghỉ ngơi {cooldown_minutes} phút giữa các phiên")
        self.db.set("device_message", f"{JobServiceConstants.MSG_SESSION_COOLDOWN} ({cooldown_minutes} phút)")
        
    def _is_in_session_cooldown(self) -> bool:
        """
        Kiểm tra xem có đang trong thời gian nghỉ giữa các phiên không
        
        Returns:
            bool: True nếu đang trong thời gian nghỉ
        """
        if self.proxy_session_end_time <= 0:
            return False
            
        current_time = int(time.time())
        if current_time < self.proxy_session_end_time:
            remaining_minutes = int((self.proxy_session_end_time - current_time) / 60)
            logger.debug(f"Còn {remaining_minutes} phút nghỉ ngơi")
            return True
        else:
            self.proxy_session_end_time = 0
            return False').decode('utf-8'))
