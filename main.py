import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgb3MKaW1wb3J0IHNpZ25hbAppbXBvcnQgc3lzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBMaXN0CmZyb20gc2VydmljZXMuaGVscGVyX3NlcnZpY2UgaW1wb3J0IEhlbHBlclNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5kYl9zZXJ2aWNlIGltcG9ydCBEYXRhYmFzZVNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5nb2xpa2Vfc2VydmljZSBpbXBvcnQgR29MaWtlU2VydmljZQpmcm9tIHNlcnZpY2VzLm1haW5fc2VydmljZSBpbXBvcnQgTWFpblNlcnZpY2UgICMgVGhheSDEkeG7lWk6IFPhu60gZOG7pW5nIE1haW5TZXJ2aWNlIHRoYXkgdsOsIEpvYlNlcnZpY2UKZnJvbSBzZXJ2aWNlcy5tcXR0X3NlcnZpY2UgaW1wb3J0IE1RVFRTZXJ2aWNlCmltcG9ydCB1dGlscwpmcm9tIHV0aWxzIGltcG9ydCBMb2dMZXZlbCwgTG9nZ2VyCmltcG9ydCBjb25maWcKCiMgVGhp4bq/dCBs4bqtcCBsb2dnaW5nCnV0aWxzLnNldHVwX2RlZmF1bHRfbG9nZ2luZygKICAgIHByb2R1Y3Rpb249bm90IGNvbmZpZy5ERUJVR19NT0RFIGlmIGhhc2F0dHIoY29uZmlnLCAnREVCVUdfTU9ERScpIGVsc2UgRmFsc2UsCiAgICBsb2dfdG9fZmlsZT1UcnVlIGlmIGhhc2F0dHIoY29uZmlnLCAnTE9HX1RPX0ZJTEUnKSBhbmQgY29uZmlnLkxPR19UT19GSUxFIGVsc2UgRmFsc2UKKQoKIyBU4bqhbyBsb2dnZXIgY2jDrW5oIGNobyDhu6luZyBk4bulbmcKbG9nZ2VyID0gdXRpbHMuZ2V0X2xvZ2dlcigiTWFpbldpdGhNYWluU2VydmljZSIpCgojIEJp4bq/biB0b8OgbiBj4bulYyDEkeG7gyBsxrB1IHNlcnZpY2UgaW5zdGFuY2VzCmRiID0gTm9uZQpoZWxwZXIgPSBOb25lCmdvbGlrZV9zZXJ2aWNlID0gTm9uZQptYWluX3NlcnZpY2UgPSBOb25lICAjIFRoYXkgxJHhu5VpOiDEkeG7lWkgdMOqbiB04burIGpvYl9zZXJ2aWNlIHRow6BuaCBtYWluX3NlcnZpY2UKbXF0dF9zZXJ2aWNlID0gTm9uZQoKIyBGbGFnIMSRaeG7gXUga2hp4buDbgpydW5uaW5nID0gVHJ1ZQoKZGVmIHNpZ25hbF9oYW5kbGVyKHNpZywgZnJhbWUpOgogICAgIiIiWOG7rSBsw70ga2hpIG5nxrDhu51pIGTDuW5nIG5o4bqlbiBDdHJsK0MiIiIKICAgIGdsb2JhbCBydW5uaW5nLCBtYWluX3NlcnZpY2UsIG1xdHRfc2VydmljZQogICAgCiAgICBsb2dnZXIuaW5mbygixJBhbmcgZOG7q25nIOG7qW5nIGThu6VuZyAoQ3RybCtDIMSRxrDhu6NjIG5o4bqlbikuLi4iKQogICAgcnVubmluZyA9IEZhbHNlCiAgICAKICAgICMgROG7q25nIGPDoWMgc2VydmljZSBt4buZdCBjw6FjaCBhbiB0b8OgbgogICAgaWYgbWFpbl9zZXJ2aWNlOgogICAgICAgIGxvZ2dlci5pbmZvKCJE4burbmcgTWFpblNlcnZpY2UuLi4iKQogICAgICAgIG1haW5fc2VydmljZS5mb3JjZV9zdG9wX2FsbCgpICAjIEThu6tuZyBuZ2F5IGzhuq1wIHThu6ljCiAgICAgICAgCiAgICBpZiBtcXR0X3NlcnZpY2U6CiAgICAgICAgbG9nZ2VyLmluZm8oIk5n4bqvdCBr4bq/dCBu4buRaSBNUVRULi4uIikKICAgICAgICBtcXR0X3NlcnZpY2UuZGlzY29ubmVjdCgpICAjIE5n4bqvdCBr4bq/dCBu4buRaSBNUVRUCiAgICAgICAgCiAgICAjIMSQw7NuZyBr4bq/dCBu4buRaSBkYXRhYmFzZSBu4bq/dSBj4bqnbgogICAgaWYgZGI6CiAgICAgICAgbG9nZ2VyLmluZm8oIsSQw7NuZyBr4bq/dCBu4buRaSBkYXRhYmFzZS4uLiIpCiAgICAgICAgZGIuY2xvc2UoKQogICAgCiAgICBsb2dnZXIuaW5mbygi4buobmcgZOG7pW5nIMSRw6MgZOG7q25nIGFuIHRvw6BuLiBU4bqhbSBiaeG7h3QhIikKICAgIHN5cy5leGl0KDApCgpkZWYgbWFpbigpOgogICAgIiIiSMOgbSBjaMOtbmggY+G7p2Eg4bupbmcgZOG7pW5nIC0gc+G7rSBk4bulbmcgTWFpblNlcnZpY2UiIiIKICAgIGdsb2JhbCBydW5uaW5nLCBkYiwgaGVscGVyLCBnb2xpa2Vfc2VydmljZSwgbWFpbl9zZXJ2aWNlLCBtcXR0X3NlcnZpY2UKICAgIAogICAgdHJ5OgogICAgICAgIGxvZ2dlci5pbmZvKCJLaOG7n2kgxJHhu5luZyDhu6luZyBk4bulbmcgRE5EVmluYS4uLiIpCgogICAgICAgICMgS+G6v3QgbuG7kWkgQURCCiAgICAgICAgdXRpbHMuY29ubmVjdF9hZGIoY29uZmlnLkFEQl9IT1NULCBjb25maWcuQURCX1BPUlQpCiAgICAgICAgIyBLaOG7n2kgdOG6oW8gY8OhYyBzZXJ2aWNlCiAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSB04bqhbyBjw6FjIHNlcnZpY2UuLi4iKQogICAgICAgIGRiID0gRGF0YWJhc2VTZXJ2aWNlKGRiX3BhdGg9Y29uZmlnLkRCX1BBVEgsIGRlZmF1bHRfY29uZmlnX3BhdGg9Y29uZmlnLkRFRkFVTFRfQ09ORklHX1BBVEgpCiAgICAgICAgaGVscGVyID0gSGVscGVyU2VydmljZShiYXNlX3VybD1jb25maWcuSEVMUEVSX1NFUlZJQ0VfVVJMLCBkYl9zZXJ2aWNlPWRiKQogICAgICAgIGdvbGlrZV9zZXJ2aWNlID0gR29MaWtlU2VydmljZShkYiwgaGVscGVyKQoKICAgICAgICAjIFZp4buHYyDEkeG6p3UgdGnDqm46IEzhuqV5IGRldmljZV9pZAogICAgICAgIGxvZ2dlci5pbmZvKCLEkGFuZyBs4bqleSBkZXZpY2VfaWQuLi4iKQogICAgICAgIGRldmljZV9pZCA9IGRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICBsb2dnZXIuaW5mbyhmIkRldmljZSBJRDoge2RldmljZV9pZH0iKQogICAgICAgIAogICAgICAgICMgxJDhu41jIHVzZXJfaWQgdOG7qyBmaWxlIC5kbmR2aW5ha2V5IHbDoCBj4bqtcCBuaOG6rXQgdsOgbyBo4buHIHRo4buRbmcKICAgICAgICBsb2dnZXIuaW5mbygixJBhbmcgxJHhu41jIHVzZXJfaWQgdOG7qyBmaWxlIC5kbmR2aW5ha2V5Li4uIikKICAgICAgICB1c2VyX2lkID0gdXRpbHMucmVhZF91c2VyX2lkX2Zyb21fa2V5X2ZpbGUoKQogICAgICAgIGlmIHVzZXJfaWQ6CiAgICAgICAgICAgICMgTMawdSB1c2VyX2lkIHbDoG8gY29uZmlnIGRhdGFiYXNlCiAgICAgICAgICAgIGRiLnNldCgidXNlcl9pZCIsIHVzZXJfaWQpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyBsxrB1IHVzZXJfaWQgdsOgbyBkYXRhYmFzZToge3VzZXJfaWR9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHVzZXJfaWQgY2hvIHThuqV0IGPhuqMgYWNjb3VudHMKICAgICAgICAgICAgdXBkYXRlZF9jb3VudCA9IGRiLnVwZGF0ZV9hbGxfYWNjb3VudHNfdXNlcl9pZCh1c2VyX2lkKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IHVzZXJfaWQgY2hvIHt1cGRhdGVkX2NvdW50fSBhY2NvdW50cyIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLSMOUTkcgVEjhu4IgxJDhu4xDIFVTRVJfSUQgVOG7qiBGSUxFIC5kbmR2aW5ha2V5ISIpCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiRmlsZSBwaOG6o2kgbuG6sW0g4bufIHRoxrAgbeG7pWMgY2hhIGPhu6dhIHByb2plY3QgKG5nb8OgaSAxIGPhuqVwKSIpCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiQ2jGsMahbmcgdHLDrG5oIHPhur0gZOG7q25nLi4uIikKICAgICAgICAgICAgcmV0dXJuICAjIEThu6tuZyBjaMawxqFuZyB0csOsbmgKICAgICAgICAKICAgICAgICAjIEto4bufaSB04bqhbyBNaW5pbmcgU2VydmljZSAoc+G7rSBk4bulbmcgREVWSUNFX0lQIHThu6sgY29uZmlnKQogICAgICAgIGxvZ2dlci5pbmZvKCJLaOG7n2kgdOG6oW8gTWluaW5nIFNlcnZpY2UuLi4iKQogICAgICAgIGZyb20gc2VydmljZXMubWluaW5nX3NlcnZpY2UgaW1wb3J0IE1pbmluZ1NlcnZpY2UKICAgICAgICBtaW5pbmdfc2VydmljZSA9IE1pbmluZ1NlcnZpY2UoZGIpICAjIFThu7EgxJHhu5luZyBs4bqleSBob3N0IHThu6sgY29uZmlnLkRFVklDRV9JUAogICAgICAgIAogICAgICAgICMgS2jhu59pIHThuqFvIE1RVFQgc2VydmljZSB24bubaSBtaW5pbmdfc2VydmljZQogICAgICAgIG1xdHRfc2VydmljZSA9IE1RVFRTZXJ2aWNlKGRiLCBkZXZpY2VfaWQsIGhlbHBlciwgbWluaW5nX3NlcnZpY2U9bWluaW5nX3NlcnZpY2UpCiAgICAgICAgCiAgICAgICAgIyBLaOG7n2kgxJHhu5luZyBNYWluU2VydmljZSB0aGF5IHbDrCBKb2JTZXJ2aWNlCiAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSDEkeG7mW5nIE1haW5TZXJ2aWNlICh0aGF5IHRo4bq/IEpvYlNlcnZpY2UpLi4uIikKICAgICAgICBtYWluX3NlcnZpY2UgPSBNYWluU2VydmljZShkYiwgaGVscGVyLCBnb2xpa2Vfc2VydmljZSwgbXF0dF9zZXJ2aWNlKQogICAgICAgIAogICAgICAgICMgR8OhbiBNYWluU2VydmljZSB2w6BvIE1RVFRTZXJ2aWNlIMSR4buDIHjhu60gbMO9IGNvbmZpZyB1cGRhdGVzCiAgICAgICAgIyBMxrB1IMO9OiBNUVRUIHNlcnZpY2UgY+G6p24gbWV0aG9kIHTGsMahbmcgdGjDrWNoIHbhu5tpIEpvYlNlcnZpY2UKICAgICAgICBtcXR0X3NlcnZpY2Uuc2V0X2pvYl9zZXJ2aWNlKG1haW5fc2VydmljZSkKICAgICAgICAKICAgICAgICAjIEto4bufaSDEkeG7mW5nIE1RVFQgc2VydmljZQogICAgICAgIGxvZ2dlci5pbmZvKCJLaOG7n2kgxJHhu5luZyBNUVRUIHNlcnZpY2UuLi4iKQogICAgICAgIG1xdHRfdGhyZWFkID0gbXF0dF9zZXJ2aWNlLnN0YXJ0KCkKICAgICAgICAKICAgICAgICAjIEto4bufaSDEkeG7mW5nIE1haW5TZXJ2aWNlIHRyb25nIHRocmVhZCByacOqbmcKICAgICAgICBsb2dnZXIuaW5mbygiS2jhu59pIMSR4buZbmcgTWFpblNlcnZpY2UgdGhyZWFkLi4uIikKICAgICAgICBtYWluX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PW1haW5fc2VydmljZS5zdGFydCwgZGFlbW9uPVRydWUpCiAgICAgICAgbWFpbl90aHJlYWQuc3RhcnQoKQogICAgICAgIAogICAgICAgICMgVGjDqm0gdsOybmcgbOG6t3Aga2nhu4NtIHRyYSDEkeG7gyBk4buFIGTDoG5nIGThu6tuZyDhu6luZyBk4bulbmcKICAgICAgICBsb2dnZXIuaW5mbygi4buobmcgZOG7pW5nIMSRYW5nIGNo4bqheSB24bubaSBNYWluU2VydmljZS4gTmjhuqVuIEN0cmwrQyDEkeG7gyBk4burbmcuLi4iKQoKICAgICAgICB3aGlsZSBydW5uaW5nOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgIyBO4bq/dSBzaWduYWxfaGFuZGxlciBraMO0bmcgxJHGsOG7o2MgZ+G7jWkgdsOsIGzDvSBkbyBuw6BvIMSRw7MKICAgICAgICAgICAgICAgIHNpZ25hbF9oYW5kbGVyKHNpZ25hbC5TSUdJTlQsIE5vbmUpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgbG9nZ2VyLmluZm8oIk5o4bqtbiB0w61uIGhp4buHdSBk4burbmcgdOG7qyBuZ8aw4budaSBkw7luZywgxJFhbmcgdGhvw6F0Li4uIikKICAgICAgICBzaWduYWxfaGFuZGxlcihzaWduYWwuU0lHSU5ULCBOb25lKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtow7RuZyB44butIGzDvSDEkcaw4bujYyB0cm9uZyBow6BtIG1haW4iKQogICAgICAgICMgxJDhuqNtIGLhuqNvIGThu6tuZyBjw6FjIHNlcnZpY2UgdHLGsOG7m2Mga2hpIHRob8OhdAogICAgICAgIHNpZ25hbF9oYW5kbGVyKHNpZ25hbC5TSUdJTlQsIE5vbmUpCiAgICAgICAgc3lzLmV4aXQoMSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICAjIMSQxINuZyBrw70gc2lnbmFsIGhhbmRsZXIKICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgc2lnbmFsX2hhbmRsZXIpCiAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdURVJNLCBzaWduYWxfaGFuZGxlcikKICAgIAogICAgIyBLaOG7n2kgY2jhuqF5IGNoxrDGoW5nIHRyw6xuaAogICAgbWFpbigpCiA=').decode('utf-8'))
