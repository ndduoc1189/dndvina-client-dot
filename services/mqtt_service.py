import base64
exec(base64.b64decode('aW1wb3J0IHBhaG8ubXF0dC5jbGllbnQgYXMgbXF0dAppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCBqc29uCmltcG9ydCB0aW1lCmltcG9ydCB1dWlkCmltcG9ydCBvcwpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBMaXN0LCBPcHRpb25hbCwgQ2FsbGFibGUsIFVuaW9uCmltcG9ydCBjb25maWcKaW1wb3J0IHV0aWxzCmltcG9ydCBzb2NrZXQKaW1wb3J0IHJhbmRvbQppbXBvcnQgc3VicHJvY2VzcwoKIyBMb2dnZXIKbG9nZ2VyID0gdXRpbHMuZ2V0X2xvZ2dlcigiTVFUVFNlcnZpY2UiKQoKY2xhc3MgTVFUVFNlcnZpY2U6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfc2VydmljZSwgZGV2aWNlX2lkLCBoZWxwZXJfc2VydmljZT1Ob25lLCBqb2Jfc2VydmljZT1Ob25lKToKICAgICAgICAjIEto4bufaSB04bqhbyBjw6FjIHNlcnZpY2UKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyX3NlcnZpY2UgPSBoZWxwZXJfc2VydmljZQogICAgICAgIHNlbGYuam9iX3NlcnZpY2UgPSBqb2Jfc2VydmljZSAgIyBUaMOqbSByZWZlcmVuY2UgxJHhur9uIEpvYlNlcnZpY2UKICAgICAgICAKICAgICAgICAjIEPhuqV1IGjDrG5oIE1RVFQKICAgICAgICBzZWxmLmNsaWVudF9pZCA9IGYie2NvbmZpZy5NUVRUX0NMSUVOVF9JRF9QUkVGSVh9X3tyYW5kb20ucmFuZGludCgxLCA5OSl9X3tkZXZpY2VfaWR9IgogICAgICAgIHNlbGYuYnJva2VyX3VybCA9IGNvbmZpZy5NUVRUX1NFUlZFUlNbY29uZmlnLk1PREVdCiAgICAgICAgc2VsZi5icm9rZXJfYWRkcmVzcyA9IHNlbGYuYnJva2VyX3VybC5yZXBsYWNlKCJtcXR0Oi8vIiwgIiIpLnNwbGl0KCI6IilbMF0KICAgICAgICBzZWxmLmJyb2tlcl9wb3J0ID0gaW50KHNlbGYuYnJva2VyX3VybC5zcGxpdCgiOiIpWy0xXSkgaWYgIjoiIGluIHNlbGYuYnJva2VyX3VybCBlbHNlIDE4ODMKICAgICAgICBzZWxmLnVzZXJuYW1lID0gY29uZmlnLk1RVFRfVVNFUk5BTUUKICAgICAgICBzZWxmLnBhc3N3b3JkID0gY29uZmlnLk1RVFRfUEFTU1dPUkQKICAgICAgICAKICAgICAgICAjIFRy4bqhbmcgdGjDoWkga+G6v3QgbuG7kWkKICAgICAgICBzZWxmLmlzX2Nvbm5lY3RlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5jbGllbnQgPSBOb25lCiAgICAgICAgc2VsZi5kZXZpY2VfaWQgPSBkZXZpY2VfaWQKICAgICAgICAKICAgICAgICAjIFJlY29ubmVjdGlvbiBsb2dpYwogICAgICAgIHNlbGYucmVjb25uZWN0X2RlbGF5ID0gMSAgIyBC4bqvdCDEkeG6p3UgduG7m2kgMSBnacOieQogICAgICAgIHNlbGYubWF4X3JlY29ubmVjdF9kZWxheSA9IDYwICAjIFThu5FpIMSRYSA2MCBnacOieQogICAgICAgIHNlbGYucmVjb25uZWN0X2NvdW50ID0gMAogICAgICAgIHNlbGYubGFzdF9kaXNjb25uZWN0X3RpbWUgPSAwCiAgICAgICAgc2VsZi5tYW51YWxfZGlzY29ubmVjdCA9IEZhbHNlICAjIEZsYWcgxJHhu4MgcGjDom4gYmnhu4d0IGRpc2Nvbm5lY3QgY8OzIGNo4bunIMO9IHbDoCBraMO0bmcgY2jhu6cgw70KICAgICAgICAKICAgICAgICAjIFRvcGljcwogICAgICAgIHNlbGYudG9waWNfY2xpZW50X3N5bmMgPSBjb25maWcuTVFUVF9UT1BJQ19DTElFTlRfU1lOQwogICAgICAgIHNlbGYudG9waWNfc2VydmVyX3Rhc2sgPSBmIntjb25maWcuTVFUVF9UT1BJQ19TRVJWRVJfVEFTS19QUkVGSVh9L3tzZWxmLmRldmljZV9pZH0iCiAgICAgICAgCiAgICAgICAgIyBRdeG6o24gbMO9IHRhc2sgdsOgIHN5bmMKICAgICAgICBzZWxmLnRhc2tfaGFuZGxlcnMgPSB7fQogICAgICAgIHNlbGYuc3luY190aHJlYWQgPSBOb25lCiAgICAgICAgc2VsZi5zeW5jX2ludGVydmFsID0gY29uZmlnLlNZTkNfSU5URVJWQUwKICAgICAgICBzZWxmLnN5bmNfcnVubmluZyA9IEZhbHNlCiAgICAKICAgIGRlZiBzZXRfam9iX3NlcnZpY2Uoc2VsZiwgam9iX3NlcnZpY2UpOgogICAgICAgICIiIgogICAgICAgIMSQ4bq3dCBKb2JTZXJ2aWNlIMSR4buDIHjhu60gbMO9IGPDoWMgdGjDtG5nIGLDoW8gY29uZmlnIHVwZGF0ZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGpvYl9zZXJ2aWNlOiBJbnN0YW5jZSBj4bunYSBKb2JTZXJ2aWNlCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5qb2Jfc2VydmljZSA9IGpvYl9zZXJ2aWNlCiAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgxJHhurd0IEpvYlNlcnZpY2UgY2hvIE1RVFRTZXJ2aWNlIikKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBGYWxzZQogICAgICAgIHNlbGYuc3RvcF9ldmVudCA9IHRocmVhZGluZy5FdmVudCgpCiAgICAgICAgc2VsZi5zeW5jX2ludGVydmFsID0gc2VsZi5kYi5nZXRfZGV2aWNlX2NvbmZpZygic3luY19pbnRlcnZhbCIsIGNvbmZpZy5TWU5DX0lOVEVSVkFMKQogICAgICAgIAogICAgICAgICMgVGhlbyBkw7VpIFJBTSDEkeG7gyB04buxIMSR4buZbmcgcmVib290CiAgICAgICAgc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeSA9IFtdICAjIEzGsHUgMyBs4bqnbiDEkW8gUkFNIGfhuqduIG5o4bqldAogICAgICAgIHNlbGYuaGlnaF9yYW1fdGhyZXNob2xkID0gODggICMgTmfGsOG7oW5nIFJBTSBjYW8gKCUpCiAgICAgICAgc2VsZi5jb25zZWN1dGl2ZV9oaWdoX3JhbV9saW1pdCA9IDMgICMgU+G7kSBs4bqnbiBsacOqbiB0aeG6v3AgUkFNIGNhbyB0csaw4bubYyBraGkgcmVib290CiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIG3DtGkgdHLGsOG7nW5nIFRlcm11eAogICAgICAgIHNlbGYuaXNfdGVybXV4ID0gJ1RFUk1VWF9WRVJTSU9OJyBpbiBvcy5lbnZpcm9uIG9yICcvZGF0YS9kYXRhL2NvbS50ZXJtdXgnIGluIG9zLmVudmlyb24uZ2V0KCdQQVRIJywgJycpCiAgICAgICAgaWYgc2VsZi5pc190ZXJtdXg6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkGFuZyBjaOG6oXkgdHJvbmcgbcO0aSB0csaw4budbmcgVGVybXV4IikKCiAgICBkZWYgX2NyZWF0ZV9jbGllbnQoc2VsZikgLT4gbXF0dC5DbGllbnQ6CiAgICAgICAgIiIiVOG6oW8gdsOgIGPhuqV1IGjDrG5oIE1RVFQgY2xpZW50IiIiCiAgICAgICAgY2xpZW50ID0gTm9uZQoKICAgICAgICAjIFRo4butIHThuqFvIHbhu5tpIEFQSSB2MgogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpZW50ID0gbXF0dC5DbGllbnQoCiAgICAgICAgICAgICAgICBjbGllbnRfaWQ9c2VsZi5jbGllbnRfaWQsCiAgICAgICAgICAgICAgICBjbGVhbl9zZXNzaW9uPVRydWUsCiAgICAgICAgICAgICAgICBwcm90b2NvbD1tcXR0Lk1RVFR2MzExLAogICAgICAgICAgICAgICAgY2FsbGJhY2tfYXBpX3ZlcnNpb249Z2V0YXR0cihtcXR0LkNhbGxiYWNrQVBJVmVyc2lvbiwgJ1ZFUlNJT04yJywgTm9uZSkKICAgICAgICAgICAgKQogICAgICAgICAgICBsb2dnZXIuaW5mbygiVOG6oW8gTVFUVCBjbGllbnQgduG7m2kgQVBJIHYyIikKICAgICAgICBleGNlcHQgKEF0dHJpYnV0ZUVycm9yLCBUeXBlRXJyb3IpOgogICAgICAgICAgICAjIEZhbGxiYWNrIEFQSSB2MQogICAgICAgICAgICBjbGllbnQgPSBtcXR0LkNsaWVudCgKICAgICAgICAgICAgICAgIGNsaWVudF9pZD1zZWxmLmNsaWVudF9pZCwKICAgICAgICAgICAgICAgIGNsZWFuX3Nlc3Npb249VHJ1ZSwKICAgICAgICAgICAgICAgIHByb3RvY29sPW1xdHQuTVFUVHYzMTEKICAgICAgICAgICAgKQogICAgICAgICAgICBsb2dnZXIuaW5mbygiVOG6oW8gTVFUVCBjbGllbnQgduG7m2kgQVBJIHYxIikKICAgICAgICAKICAgICAgICAjIEPhuqV1IGjDrG5oIHjDoWMgdGjhu7FjIG7hur91IGPDswogICAgICAgIGlmIHNlbGYudXNlcm5hbWUgYW5kIHNlbGYucGFzc3dvcmQ6CiAgICAgICAgICAgIGNsaWVudC51c2VybmFtZV9wd19zZXQoc2VsZi51c2VybmFtZSwgc2VsZi5wYXNzd29yZCkKICAgICAgICAKICAgICAgICAjIMSQxINuZyBrw70gY2FsbGJhY2sKICAgICAgICBjbGllbnQub25fY29ubmVjdCA9IHNlbGYuX29uX2Nvbm5lY3QKICAgICAgICBjbGllbnQub25fbWVzc2FnZSA9IHNlbGYuX29uX21lc3NhZ2UKICAgICAgICBjbGllbnQub25fZGlzY29ubmVjdCA9IHNlbGYuX29uX2Rpc2Nvbm5lY3QKICAgICAgICAKICAgICAgICAjIEPhuqV1IGjDrG5oIGtlZXAtYWxpdmUgZMOgaSBoxqFuIHbDoCByZWNvbm5lY3Rpb24KICAgICAgICBjbGllbnQucmVjb25uZWN0X2RlbGF5X3NldChtaW5fZGVsYXk9MSwgbWF4X2RlbGF5PTYwKQogICAgICAgIAogICAgICAgIHJldHVybiBjbGllbnQKCiAgICBkZWYgY29ubmVjdChzZWxmKSAtPiBib29sOgogICAgICAgICIiIkvhur90IG7hu5FpIMSR4bq/biBNUVRUIGJyb2tlciB24bubaSBleHBvbmVudGlhbCBiYWNrb2ZmIiIiCiAgICAgICAgZGVmIGNhbl9jb25uZWN0KGhvc3Q6IHN0ciwgcG9ydDogaW50LCB0aW1lb3V0OiBmbG9hdCA9IDMuMCkgLT4gYm9vbDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgd2l0aCBzb2NrZXQuY3JlYXRlX2Nvbm5lY3Rpb24oKGhvc3QsIHBvcnQpLCB0aW1lb3V0PXRpbWVvdXQpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgbWFpbl9ob3N0ID0gc2VsZi5icm9rZXJfYWRkcmVzcwogICAgICAgIG1haW5fcG9ydCA9IHNlbGYuYnJva2VyX3BvcnQKICAgICAgICBmYWxsYmFja19ob3N0ID0gIjEwLjAuMC41IgogICAgICAgIGZhbGxiYWNrX2hvc3QyID0gIjEwLjEuMC41IgogICAgICAgIGZhbGxiYWNrX3BvcnQgPSA5MDIwCgogICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBu4buRaSBzb2NrZXQgdOG7m2kgY+G6oyAyIElQCiAgICAgICAgbWFpbl9vayA9IGNhbl9jb25uZWN0KG1haW5faG9zdCwgbWFpbl9wb3J0KQogICAgICAgIGZhbGxiYWNrX29rID0gY2FuX2Nvbm5lY3QoZmFsbGJhY2tfaG9zdCwgZmFsbGJhY2tfcG9ydCkKICAgICAgICBmYWxsYmFjazJfb2sgPSBjYW5fY29ubmVjdChmYWxsYmFja19ob3N0MiwgZmFsbGJhY2tfcG9ydCkKICAgICAgICBpZiBtYWluX29rOgogICAgICAgICAgICBjb25uZWN0X2hvc3QgPSBtYWluX2hvc3QKICAgICAgICAgICAgY29ubmVjdF9wb3J0ID0gbWFpbl9wb3J0CiAgICAgICAgZWxpZiBmYWxsYmFja19vazoKICAgICAgICAgICAgY29ubmVjdF9ob3N0ID0gZmFsbGJhY2tfaG9zdAogICAgICAgICAgICBjb25uZWN0X3BvcnQgPSBmYWxsYmFja19wb3J0CiAgICAgICAgZWxpZiBmYWxsYmFja19ob3N0MjoKICAgICAgICAgICAgY29ubmVjdF9ob3N0ID0gZmFsbGJhY2tfaG9zdDIKICAgICAgICAgICAgY29ubmVjdF9wb3J0ID0gZmFsbGJhY2tfcG9ydAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIktow7RuZyBr4bq/dCBu4buRaSDEkcaw4bujYyBzb2NrZXQgdOG7m2kgY+G6oyB7bWFpbl9ob3N0fTp7bWFpbl9wb3J0fSBs4bqrbiB7ZmFsbGJhY2tfaG9zdH06e2ZhbGxiYWNrX3BvcnR9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBU4bqhbyBjbGllbnQgbeG7m2kgbuG6v3UgY2jGsGEgY8OzIGhv4bq3YyBjbGllbnQgY8WpIGLhu4sgbOG7l2kKICAgICAgICAgICAgaWYgc2VsZi5jbGllbnQgaXMgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYuY2xpZW50ID0gc2VsZi5fY3JlYXRlX2NsaWVudCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJlc2V0IHRy4bqhbmcgdGjDoWkKICAgICAgICAgICAgc2VsZi5zdG9wX2V2ZW50LmNsZWFyKCkKICAgICAgICAgICAgc2VsZi5pc19jb25uZWN0ZWQgPSBGYWxzZQogICAgICAgICAgICBzZWxmLm1hbnVhbF9kaXNjb25uZWN0ID0gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJBhbmcga+G6v3QgbuG7kWkgdOG7m2kgTVFUVCBicm9rZXIge2Nvbm5lY3RfaG9zdH06e2Nvbm5lY3RfcG9ydH0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBT4butIGThu6VuZyBrZWVwYWxpdmUgbOG7m24gaMahbiAoMTIwIGdpw6J5IHRoYXkgdsOsIDYwKQogICAgICAgICAgICBzZWxmLmNsaWVudC5jb25uZWN0X2FzeW5jKGNvbm5lY3RfaG9zdCwgY29ubmVjdF9wb3J0LCBrZWVwYWxpdmU9MTIwKQogICAgICAgICAgICBzZWxmLmNsaWVudC5sb29wX3N0YXJ0KCkKCiAgICAgICAgICAgIGRlZiBfd2FpdF9jb25uZWN0ZWQodGltZW91dF9zZWM6IGludCA9IDE1KSAtPiBib29sOgogICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UodGltZW91dF9zZWMpOgogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfY29ubmVjdGVkOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgaWYgX3dhaXRfY29ubmVjdGVkKCk6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6Mga+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nIMSR4bq/biBNUVRUIGJyb2tlciB7Y29ubmVjdF9ob3N0fTp7Y29ubmVjdF9wb3J0fSIpCiAgICAgICAgICAgICAgICBzZWxmLmJyb2tlcl9hZGRyZXNzID0gY29ubmVjdF9ob3N0CiAgICAgICAgICAgICAgICBzZWxmLmJyb2tlcl9wb3J0ID0gY29ubmVjdF9wb3J0CiAgICAgICAgICAgICAgICAjIFJlc2V0IHJlY29ubmVjdCBkZWxheSBraGkga+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdF9kZWxheSA9IDEKICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0X2NvdW50ID0gMAogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkvhur90IG7hu5FpIE1RVFQgdGjhuqV0IGLhuqFpIHThu5tpIHtjb25uZWN0X2hvc3R9Ontjb25uZWN0X3BvcnR9IikKICAgICAgICAgICAgICAgIHNlbGYuX2NsZWFudXBfY2xpZW50KCkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGvhur90IG7hu5FpIE1RVFQ6IHtzdHIoZSl9IikKICAgICAgICAgICAgc2VsZi5fY2xlYW51cF9jbGllbnQoKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgX2NsZWFudXBfY2xpZW50KHNlbGYpOgogICAgICAgICIiIkThu41uIGThurlwIE1RVFQgY2xpZW50IiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBzZWxmLmNsaWVudDoKICAgICAgICAgICAgICAgIHNlbGYuY2xpZW50Lmxvb3Bfc3RvcCgpCiAgICAgICAgICAgICAgICBzZWxmLmNsaWVudC5kaXNjb25uZWN0KCkKICAgICAgICAgICAgICAgIHNlbGYuY2xpZW50ID0gTm9uZQogICAgICAgICAgICBzZWxmLmlzX2Nvbm5lY3RlZCA9IEZhbHNlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBk4buNbiBk4bq5cCBNUVRUIGNsaWVudDoge2V9IikKCiAgICBkZWYgZW5zdXJlX2Nvbm5lY3RlZChzZWxmKSAtPiBib29sOgogICAgICAgICIiIsSQ4bqjbSBi4bqjbyBr4bq/dCBu4buRaSBNUVRUIHRyxrDhu5tjIGtoaSB0aOG7sWMgaGnhu4duIGPDoWMgdGhhbyB0w6FjIHbhu5tpIHJhdGUgbGltaXRpbmciIiIKICAgICAgICBpZiBzZWxmLmlzX2Nvbm5lY3RlZDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgxJFhbmcgdHJvbmcgcXXDoSB0csOsbmggcmVjb25uZWN0IGtow7RuZwogICAgICAgIGN1cnJlbnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgaWYgY3VycmVudF90aW1lIC0gc2VsZi5sYXN0X2Rpc2Nvbm5lY3RfdGltZSA8IDU6ICAjIENo4budIMOtdCBuaOG6pXQgNSBnacOieSB04burIGzhuqduIGRpc2Nvbm5lY3QgY3Xhu5FpCiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygixJBhbmcgdHJvbmcgdGjhu51pIGdpYW4gY29vbGRvd24gcmVjb25uZWN0LCBjaOG7nS4uLiIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBsb2dnZXIud2FybmluZygiTVFUVCBjaMawYSBr4bq/dCBu4buRaSwgxJFhbmcgdGjhu60ga+G6v3QgbuG7kWkgbOG6oWkuLi4iKQogICAgICAgIHJldHVybiBzZWxmLmNvbm5lY3QoKQoKICAgIGRlZiBfb25fY29ubmVjdChzZWxmLCBjbGllbnQsIHVzZXJkYXRhLCBmbGFncywgcmMsIHByb3BlcnRpZXM9Tm9uZSk6CiAgICAgICAgIiIiQ2FsbGJhY2sga2hpIGvhur90IG7hu5FpIHRow6BuaCBjw7RuZyIiIgogICAgICAgIGlmIHJjID09IDA6CiAgICAgICAgICAgIHNlbGYuaXNfY29ubmVjdGVkID0gVHJ1ZQogICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmcgdOG7m2kgTVFUVCBicm9rZXIiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkMSDbmcga8O9IG5o4bqtbiB0YXNrCiAgICAgICAgICAgIHNlbGYuY2xpZW50LnN1YnNjcmliZShzZWxmLnRvcGljX3NlcnZlcl90YXNrLCBxb3M9MSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIMSRxINuZyBrw70gbmjhuq1uIHRhc2sgdOG6oWk6IHtzZWxmLnRvcGljX3NlcnZlcl90YXNrfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu61pIHRow7RuZyBiw6FvIGvhur90IG7hu5FpCiAgICAgICAgICAgIHNlbGYuc2VuZF9jb25uZWN0X25vdGlmaWNhdGlvbigpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJlc2V0IHJlY29ubmVjdCBjb3VudGVyIGtoaSBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmcKICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3RfY291bnQgPSAwCiAgICAgICAgICAgIHNlbGYucmVjb25uZWN0X2RlbGF5ID0gMQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkvhur90IG7hu5FpIE1RVFQgdGjhuqV0IGLhuqFpIHbhu5tpIG3DoyBs4buXaToge3JjfSIpCiAgICAgICAgICAgICMgVMSDbmcgcmVjb25uZWN0IGNvdW50IGtoaSBr4bq/dCBu4buRaSB0aOG6pXQgYuG6oWkKICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3RfY291bnQgKz0gMQoKICAgIGRlZiBfb25fZGlzY29ubmVjdChzZWxmLCBjbGllbnQsIHVzZXJkYXRhLCByYywgcHJvcGVydGllcz1Ob25lLCByZWFzb25fY29kZT1Ob25lLCAqKmt3YXJncyk6CiAgICAgICAgIiIiQ2FsbGJhY2sga2hpIG5n4bqvdCBr4bq/dCBu4buRaSB24bubaSBjxqEgY2jhur8gcmVjb25uZWN0IHRow7RuZyBtaW5oIiIiCiAgICAgICAgc2VsZi5pc19jb25uZWN0ZWQgPSBGYWxzZQogICAgICAgIHNlbGYubGFzdF9kaXNjb25uZWN0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIAogICAgICAgIGlmIHNlbGYubWFudWFsX2Rpc2Nvbm5lY3Q6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIG5n4bqvdCBr4bq/dCBu4buRaSBNUVRUIHRoZW8gecOqdSBj4bqndSIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICBpZiByYyAhPSAwOgogICAgICAgICAgICBzZWxmLnJlY29ubmVjdF9jb3VudCArPSAxCiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiTmfhuq90IGvhur90IG7hu5FpIE1RVFQga2jDtG5nIG1vbmcgbXXhu5FuIGzhuqduIHtzZWxmLnJlY29ubmVjdF9jb3VudH0gduG7m2kgbcOjIGzhu5dpOiB7cmN9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu4kgYXV0by1yZWNvbm5lY3QgbuG6v3Uga2jDtG5nIHBo4bqjaSBtYW51YWwgZGlzY29ubmVjdAogICAgICAgICAgICBpZiBub3Qgc2VsZi5zdG9wX2V2ZW50LmlzX3NldCgpOgogICAgICAgICAgICAgICAgc2VsZi5fc2NoZWR1bGVfcmVjb25uZWN0KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBuZ+G6r3Qga+G6v3QgbuG7kWkgTVFUVCIpCgogICAgZGVmIF9zY2hlZHVsZV9yZWNvbm5lY3Qoc2VsZik6CiAgICAgICAgIiIiTMOqbiBs4buLY2gga+G6v3QgbuG7kWkgbOG6oWkgduG7m2kgZXhwb25lbnRpYWwgYmFja29mZiIiIgogICAgICAgICMgVMOtbmggZGVsYXkgduG7m2kgZXhwb25lbnRpYWwgYmFja29mZgogICAgICAgIGRlbGF5ID0gbWluKHNlbGYucmVjb25uZWN0X2RlbGF5ICogKDIgKiogbWluKHNlbGYucmVjb25uZWN0X2NvdW50IC0gMSwgNikpLCBzZWxmLm1heF9yZWNvbm5lY3RfZGVsYXkpCiAgICAgICAgCiAgICAgICAgbG9nZ2VyLmluZm8oZiJT4bq9IHRo4butIGvhur90IG7hu5FpIGzhuqFpIHNhdSB7ZGVsYXl9IGdpw6J5Li4uIikKICAgICAgICAKICAgICAgICBkZWYgcmVjb25uZWN0X2FmdGVyX2RlbGF5KCk6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnN0b3BfZXZlbnQud2FpdChkZWxheSk6ICAjIENo4budIGRlbGF5IHNlY29uZHMsIHRy4burIGtoaSBi4buLIHN0b3AKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLmlzX2Nvbm5lY3RlZCBhbmQgbm90IHNlbGYubWFudWFsX2Rpc2Nvbm5lY3Q6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUaOG7rSBr4bq/dCBu4buRaSBs4bqhaSBNUVRUIChs4bqnbiB7c2VsZi5yZWNvbm5lY3RfY291bnR9KSIpCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5jb25uZWN0KCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJL4bq/dCBu4buRaSBs4bqhaSBNUVRUIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSB24bqrbiB0aOG6pXQgYuG6oWksIGzDqm4gbOG7i2NoIHRo4butIGzhuqFpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYucmVjb25uZWN0X2NvdW50IDwgMTA6ICAjIEdp4bubaSBo4bqhbiBz4buRIGzhuqduIHRo4butCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zY2hlZHVsZV9yZWNvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCLEkMOjIHRo4butIGvhur90IG7hu5FpIGzhuqFpIE1RVFQgcXXDoSBuaGnhu4F1IGzhuqduLCB04bqhbSBk4burbmcgYXV0by1yZWNvbm5lY3QiKQogICAgICAgIAogICAgICAgICMgQ2jhuqF5IHRyb25nIHRocmVhZCByacOqbmcgxJHhu4Mga2jDtG5nIGJsb2NrCiAgICAgICAgdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9cmVjb25uZWN0X2FmdGVyX2RlbGF5LCBkYWVtb249VHJ1ZSkuc3RhcnQoKQoKICAgIGRlZiBfc2FmZV9wdWJsaXNoKHNlbGYsIHRvcGljOiBzdHIsIHBheWxvYWQ6IHN0ciwgcW9zOiBpbnQgPSAxKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEfhu61pIG1lc3NhZ2UgYW4gdG/DoG4gduG7m2kga2nhu4NtIHRyYSBr4bq/dCBu4buRaSB0csaw4bubYyBraGkgcHVibGlzaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRvcGljOiBNUVRUIHRvcGljCiAgICAgICAgICAgIHBheWxvYWQ6IE7hu5lpIGR1bmcgbWVzc2FnZSAoc3RyaW5nKQogICAgICAgICAgICBxb3M6IFF1YWxpdHkgb2YgU2VydmljZSAoMCwgMSwgaG/hurdjIDIpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgZ+G7rWkgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9jb25uZWN0ZWQoKToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBn4butaSBtZXNzYWdlIMSR4bq/biB7dG9waWN9OiBNUVRUIGNoxrBhIGvhur90IG7hu5FpIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5jbGllbnQucHVibGlzaCh0b3BpYywgcGF5bG9hZCwgcW9zPXFvcykKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3VsdC5yYyA9PSBtcXR0Lk1RVFRfRVJSX1NVQ0NFU1M6CiAgICAgICAgICAgICAgICAjbG9nZ2VyLmluZm8oZiLEkMOjIGfhu61pIG1lc3NhZ2UgdGjDoG5oIGPDtG5nIMSR4bq/biB7dG9waWN9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgZ+G7rWkgbWVzc2FnZSDEkeG6v24ge3RvcGljfToge21xdHQuZXJyb3Jfc3RyaW5nKHJlc3VsdC5yYyl9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4butaSBtZXNzYWdlIMSR4bq/biB7dG9waWN9OiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZW5kX3Rhc2tfcmVwb3J0KHNlbGYsIHRhc2tfaWQ6IHN0ciwgZGV2aWNlX2lkOiBzdHIsIHN0YXR1czogc3RyLCBjbGllbnRfbWVzc2FnZTogc3RyID0gIiIpOgogICAgICAgICIiIkfhu61pIGLDoW8gY8OhbyBr4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIHRhc2siIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlcG9ydF9kYXRhID0gewogICAgICAgICAgICAgICAgInRhc2tfaWQiOiB0YXNrX2lkLAogICAgICAgICAgICAgICAgImRldmljZV9pZCI6IGRldmljZV9pZCwKICAgICAgICAgICAgICAgICJzdGF0dXMiOiBzdGF0dXMsCiAgICAgICAgICAgICAgICAiY2xpZW50X21lc3NhZ2UiOiBjbGllbnRfbWVzc2FnZSwKICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIHNlbGYuX3NhZmVfcHVibGlzaCgiZG5kdmluYS9jbGllbnQvdGFza19yZXBvcnQiLCBqc29uLmR1bXBzKHJlcG9ydF9kYXRhKSk6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgZ+G7rWkgYsOhbyBjw6FvIHRhc2sge3Rhc2tfaWR9IHbhu5tpIHRy4bqhbmcgdGjDoWkge3N0YXR1c30iKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGfhu61pIGLDoW8gY8OhbyB0YXNrOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZW5kX2Nvbm5lY3Rfbm90aWZpY2F0aW9uKHNlbGYpOgogICAgICAgICIiIkfhu61pIHRow7RuZyBiw6FvIGvhur90IG7hu5FpIMSR4bq/biBzZXJ2ZXIiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNvbm5lY3RfZGF0YSA9IHsKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzZWxmLmRldmljZV9pZCwKICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIHNlbGYuX3NhZmVfcHVibGlzaCgiZG5kdmluYS9jbGllbnQvY29ubmVjdCIsIGpzb24uZHVtcHMoY29ubmVjdF9kYXRhKSk6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgZ+G7rWkgdGjDtG5nIGLDoW8ga+G6v3QgbuG7kWkgY2hvIHRoaeG6v3QgYuG7iyB7c2VsZi5kZXZpY2VfaWR9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4butaSB0aMO0bmcgYsOhbyBr4bq/dCBu4buRaToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgcmVnaXN0ZXJfdGFza19oYW5kbGVyKHNlbGYsIHRhc2tfdHlwZTogc3RyLCBoYW5kbGVyOiBDYWxsYWJsZSk6CiAgICAgICAgIiIiCiAgICAgICAgxJDEg25nIGvDvSBoYW5kbGVyIGNobyBsb+G6oWkgdGFzawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfdHlwZTogTG/huqFpIHRhc2sKICAgICAgICAgICAgaGFuZGxlcjogSMOgbSB44butIGzDvSB0YXNrCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi50YXNrX2hhbmRsZXJzW3Rhc2tfdHlwZV0gPSBoYW5kbGVyCiAgICAKICAgIGRlZiBzeW5jX2RhdGEoc2VsZik6CiAgICAgICAgIiIixJDhu5NuZyBi4buZIGThu68gbGnhu4d1IHbhu5tpIHNlcnZlciIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBO4bq/dSBjaMawYSBr4bq/dCBu4buRaSBNUVRULCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmlzX2Nvbm5lY3RlZDoKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJDaMawYSBr4bq/dCBu4buRaSBNUVRULCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgaGVscGVyIHNlcnZpY2UKICAgICAgICAgICAgaGVscGVyID0gc2VsZi5oZWxwZXJfc2VydmljZQogICAgICAgICAgICBpZiBub3QgaGVscGVyOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIGhlbHBlciBzZXJ2aWNlLCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkCiAgICAgICAgICAgIGRldmljZV9pZCA9IHNlbGYuZGIuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgICAgICBpZiBub3QgZGV2aWNlX2lkOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgeMOhYyDEkeG7i25oIGRldmljZV9pZCwga2jDtG5nIHRo4buDIMSR4buTbmcgYuG7mSBk4buvIGxp4buHdSIpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGRldmljZV9pbmZvID0gTm9uZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZXZpY2VfaW5mb19yZXNwb25zZSA9IGhlbHBlci5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGzhuqV5IHRow6BuaCBjw7RuZywgbMawdSB2w6BvIGRhdGFiYXNlCiAgICAgICAgICAgICAgICBpZiBkZXZpY2VfaW5mb19yZXNwb25zZVsic3RhdHVzIl0gPT0gInN1Y2Nlc3MiIGFuZCAiZGF0YSIgaW4gZGV2aWNlX2luZm9fcmVzcG9uc2U6CiAgICAgICAgICAgICAgICAgICAgIyBMxrB1IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLIHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNhdmVfZGV2aWNlX2luZm8oZGV2aWNlX2luZm9fcmVzcG9uc2VbImRhdGEiXSkKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaW5mbyA9IGRldmljZV9pbmZvX3Jlc3BvbnNlWyJkYXRhIl0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFRoZW8gZMO1aSBSQU0gxJHhu4MgdOG7sSDEkeG7mW5nIHJlYm9vdAogICAgICAgICAgICAgICAgICAgIHNlbGYuX21vbml0b3JfcmFtX3VzYWdlKGRldmljZV9pbmZvKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgbOG6pXkgdGjDtG5nIHRpbiB0aGnhur90IGLhu4s6IHtlfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgbOG6pXkgxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGnhur90IGLhu4ssIHPhu60gZOG7pW5nIHRow7RuZyB0aW4gxJHDoyBsxrB1IHRyb25nIGRhdGFiYXNlCiAgICAgICAgICAgIGlmIG5vdCBkZXZpY2VfaW5mbzoKICAgICAgICAgICAgICAgIGRldmljZV9pbmZvID0gc2VsZi5kYi5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBkZXZpY2VfaW5mbzoKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJLaMO0bmcgY8OzIHRow7RuZyB0aW4gdGhp4bq/dCBi4buLLCDEkeG7k25nIGLhu5kgZOG7ryBsaeG7h3UgY8OzIHRo4buDIGtow7RuZyDEkeG6p3kgxJHhu6ciKQogICAgICAgICAgICAgICAgZGV2aWNlX2luZm8gPSB7fQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGRldmljZV9jb25maWcgPSBzZWxmLmRiLmdldF9hbGxfZGV2aWNlX2NvbmZpZygpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu5lwIGPDoWMgdHLhuqFuZyB0aMOhaSBydW50aW1lIChwYXVzZV9qb2IsIGRldmljZV9pc193b3JraW5nLCBkZXZpY2VfbWVzc2FnZSkgdsOgbyBkZXZpY2VfaW5mbwogICAgICAgICAgICBmb3IgcnVudGltZV9rZXkgaW4gWyJwYXVzZV9qb2IiLCAiZGV2aWNlX2lzX3dvcmtpbmciLCAiZGV2aWNlX21lc3NhZ2UiXToKICAgICAgICAgICAgICAgIGlmIHJ1bnRpbWVfa2V5IGluIGRldmljZV9jb25maWc6CiAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2luZm9bcnVudGltZV9rZXldID0gZGV2aWNlX2NvbmZpZy5wb3AocnVudGltZV9rZXkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgR2nDoSB0cuG7iyBt4bq3YyDEkeG7i25oIG7hur91IGNoxrBhIGPhuqV1IGjDrG5oCiAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2luZm9bcnVudGltZV9rZXldID0gRmFsc2UgaWYgcnVudGltZV9rZXkgIT0gImRldmljZV9tZXNzYWdlIiBlbHNlICIiCiAgICAgICAgICAgIAogICAgICAgICAgICAjIExv4bqhaSBi4buPIGdvbGlrZV9yZXBvcnQga2jhu49pIGRldmljZV9jb25maWcgxJHhu4MgZ+G7rWkgcmnDqm5nCiAgICAgICAgICAgIGdvbGlrZV9yZXBvcnQgPSBOb25lCiAgICAgICAgICAgIGlmICJnb2xpa2VfcmVwb3J0IiBpbiBkZXZpY2VfY29uZmlnOgogICAgICAgICAgICAgICAgZ29saWtlX3JlcG9ydCA9IGRldmljZV9jb25maWcucG9wKCJnb2xpa2VfcmVwb3J0IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTG/huqFpIGLhu48gZ29saWtlX2FwaV9iYXNlIGto4buPaSBkZXZpY2VfY29uZmlnCiAgICAgICAgICAgIGlmICJnb2xpa2VfYXBpX2Jhc2UiIGluIGRldmljZV9jb25maWc6CiAgICAgICAgICAgICAgICBkZXZpY2VfY29uZmlnLnBvcCgiZ29saWtlX2FwaV9iYXNlIikKICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygixJDDoyBsb+G6oWkgYuG7jyBnb2xpa2VfYXBpX2Jhc2Uga2jhu49pIGThu68gbGnhu4d1IMSR4buTbmcgYuG7mSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBjw6FjIHTDoGkga2hv4bqjbiBjaMawYSDEkeG7k25nIGLhu5kKICAgICAgICAgICAgcGVuZGluZ19hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X3BlbmRpbmdfc3luY19pdGVtcygiYWNjb3VudHMiLCBsaW1pdD01MCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgY8OhYyBqb2IgY2jGsGEgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIHBlbmRpbmdfam9icyA9IHNlbGYuZGIuZ2V0X3BlbmRpbmdfc3luY19pdGVtcygiam9ic19oaXN0b3J5IiwgbGltaXQ9NTApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqhbyBwYXlsb2FkCiAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogZGV2aWNlX2lkLAogICAgICAgICAgICAgICAgImRldmljZV9pbmZvIjogZGV2aWNlX2luZm8sCiAgICAgICAgICAgICAgICAiZGV2aWNlX2NvbmZpZyI6IGRldmljZV9jb25maWcsCiAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGdvbGlrZV9yZXBvcnQgbuG6v3UgY8OzCiAgICAgICAgICAgIGlmIGdvbGlrZV9yZXBvcnQ6CiAgICAgICAgICAgICAgICBwYXlsb2FkWyJnb2xpa2VfcmVwb3J0Il0gPSBnb2xpa2VfcmVwb3J0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSB0w6BpIGtob+G6o24gY2jGsGEgxJHhu5NuZyBi4buZIG7hur91IGPDswogICAgICAgICAgICBpZiBwZW5kaW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgcGF5bG9hZFsiYWNjb3VudHMiXSA9IHBlbmRpbmdfYWNjb3VudHMKICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhmIsSQ4buTbmcgYuG7mSB7bGVuKHBlbmRpbmdfYWNjb3VudHMpfSB0w6BpIGtob+G6o24gY2jGsGEgxJHhu5NuZyBi4buZIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGpvYiBjaMawYSDEkeG7k25nIGLhu5kgbuG6v3UgY8OzCiAgICAgICAgICAgIGlmIHBlbmRpbmdfam9iczoKICAgICAgICAgICAgICAgIHBheWxvYWRbImpvYnMiXSA9IHBlbmRpbmdfam9icwogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYixJDhu5NuZyBi4buZIHtsZW4ocGVuZGluZ19qb2JzKX0gam9iIGNoxrBhIMSR4buTbmcgYuG7mSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBH4butaSBk4buvIGxp4buHdQogICAgICAgICAgICBzZWxmLl9zYWZlX3B1Ymxpc2goY29uZmlnLk1RVFRfVE9QSUNfQ0xJRU5UX1NZTkMsIGpzb24uZHVtcHMocGF5bG9hZCkpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIMSR4buTbmcgYuG7mSBk4buvIGxp4buHdSB24bubaSBzZXJ2ZXIiKQogICAgCiAgICBkZWYgc3RhcnRfc3luY190aHJlYWQoc2VsZik6CiAgICAgICAgIiIiQuG6r3QgxJHhuqd1IHRocmVhZCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nIiIiCiAgICAgICAgaWYgc2VsZi5zeW5jX3RocmVhZCBpcyBub3QgTm9uZSBhbmQgc2VsZi5zeW5jX3RocmVhZC5pc19hbGl2ZSgpOgogICAgICAgICAgICBsb2dnZXIud2FybmluZygiVGhyZWFkIMSR4buTbmcgYuG7mSDEkcOjIMSRYW5nIGNo4bqheSIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBUcnVlCiAgICAgICAgc2VsZi5zdG9wX2V2ZW50LmNsZWFyKCkKICAgICAgICBzZWxmLnN5bmNfdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9c2VsZi5fc3luY19sb29wLCBkYWVtb249VHJ1ZSkKICAgICAgICBzZWxmLnN5bmNfdGhyZWFkLnN0YXJ0KCkKICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBraOG7n2kgxJHhu5luZyB0aHJlYWQgxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZyIpCiAgICAKICAgIGRlZiBfc3luY19sb29wKHNlbGYpOgogICAgICAgICIiIkxvb3AgxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZyIiIgogICAgICAgIGxvZ2dlci5pbmZvKGYiQuG6r3QgxJHhuqd1IMSR4buTbmcgYuG7mSB04buxIMSR4buZbmcgbeG7l2kge3NlbGYuc3luY19pbnRlcnZhbH0gZ2nDonkiKQoKICAgICAgICB3aGlsZSBub3Qgc2VsZi5zdG9wX2V2ZW50LmlzX3NldCgpIGFuZCBzZWxmLnJ1bm5pbmc6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfY29ubmVjdGVkOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc3luY19kYXRhKCkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kgdHJvbmcgcXXDoSB0csOsbmggxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZzoge3N0cihlKX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmdo4buJIMSR4bq/biBs4bqnbiDEkeG7k25nIGLhu5kgdGnhur9wIHRoZW8KICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2Uoc2VsZi5zeW5jX2ludGVydmFsKToKICAgICAgICAgICAgICAgIGlmIHNlbGYuc3RvcF9ldmVudC5pc19zZXQoKSBvciBub3Qgc2VsZi5ydW5uaW5nOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAKICAgIGRlZiBzdG9wX3N5bmNfdGhyZWFkKHNlbGYpOgogICAgICAgICIiIkThu6tuZyB0aHJlYWQgxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZyIiIgogICAgICAgIHNlbGYucnVubmluZyA9IEZhbHNlCiAgICAgICAgc2VsZi5zdG9wX2V2ZW50LnNldCgpCiAgICAgICAgaWYgc2VsZi5zeW5jX3RocmVhZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5zeW5jX3RocmVhZC5qb2luKHRpbWVvdXQ9Mi4wKQogICAgICAgICAgICBzZWxmLnN5bmNfdGhyZWFkID0gTm9uZQogICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIGThu6tuZyB0aHJlYWQgxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZyIpCiAgICAKICAgIGRlZiBkaXNjb25uZWN0KHNlbGYpOgogICAgICAgICIiIk5n4bqvdCBr4bq/dCBu4buRaSBNUVRUIiIiCiAgICAgICAgc2VsZi5tYW51YWxfZGlzY29ubmVjdCA9IFRydWUgICMgxJDDoW5oIGThuqV1IMSRw6J5IGzDoCBkaXNjb25uZWN0IGPDsyBjaOG7pyDDvQogICAgICAgIHNlbGYuc3RvcF9zeW5jX3RocmVhZCgpCiAgICAgICAgCiAgICAgICAgaWYgc2VsZi5jbGllbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuY2xpZW50Lmxvb3Bfc3RvcCgpCiAgICAgICAgICAgIHNlbGYuY2xpZW50LmRpc2Nvbm5lY3QoKQogICAgICAgICAgICBzZWxmLmlzX2Nvbm5lY3RlZCA9IEZhbHNlCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIG5n4bqvdCBr4bq/dCBu4buRaSBNUVRUIikKICAgICAgICAKICAgICAgICAjIEThu6tuZyB04bqldCBj4bqjIGF1dG8tcmVjb25uZWN0CiAgICAgICAgc2VsZi5zdG9wX2V2ZW50LnNldCgpCiAgICAKICAgIGRlZiBzZXR1cF9tcXR0X2hhbmRsZXJzKHNlbGYpOgogICAgICAgICIiIlRoaeG6v3QgbOG6rXAgY8OhYyBoYW5kbGVyIGNobyBNUVRUIHRhc2tzIiIiCiAgICAgICAgIyDEkMSDbmcga8O9IGPDoWMgdGFzayBoYW5kbGVyIG3hurdjIMSR4buLbmgKICAgICAgICBzZWxmLnJlZ2lzdGVyX3Rhc2tfaGFuZGxlcigidXBkYXRlX2NvbmZpZyIsIHNlbGYuX2hhbmRsZV91cGRhdGVfZGV2aWNlX2NvbmZpZykKICAgICAgICBzZWxmLnJlZ2lzdGVyX3Rhc2tfaGFuZGxlcigidXBkYXRlX3N5bmNlZCIsIHNlbGYuX2hhbmRsZV91cGRhdGVfc3luY2VkKQogICAgICAgIHNlbGYucmVnaXN0ZXJfdGFza19oYW5kbGVyKCJhY2NvdW50X3VwZGF0ZSIsIHNlbGYuX2hhbmRsZV9hY2NvdW50X3VwZGF0ZSkKICAgICAgICBzZWxmLnJlZ2lzdGVyX3Rhc2tfaGFuZGxlcigidmVyaWZ5X2dvbGlrZSIsIHNlbGYuX2hhbmRsZV92ZXJpZnlfZ29saWtlKQogICAgICAgIHNlbGYucmVnaXN0ZXJfdGFza19oYW5kbGVyKCJ1cGRhdGVfcHJveHkiLCBzZWxmLl9oYW5kbGVfdXBkYXRlX3Byb3h5KQogICAgICAgIAogICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHRoaeG6v3QgbOG6rXAgY8OhYyBNUVRUIHRhc2sgaGFuZGxlciIpCiAgICAgICAgCiAgICBkZWYgX2hhbmRsZV91cGRhdGVfZGV2aWNlX2NvbmZpZyhzZWxmLCB0YXNrX2RhdGEpOgogICAgICAgICIiIgogICAgICAgIFjhu60gbMO9IHRhc2sgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfZGF0YTogROG7ryBsaeG7h3UgdGFzayB04burIHNlcnZlcgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgdGFza19pZCA9IHRhc2tfZGF0YS5nZXQoInRhc2tfaWQiKQogICAgICAgICAgICBkZXZpY2VfaWQgPSB0YXNrX2RhdGEuZ2V0KCJkZXZpY2VfaWQiKQogICAgICAgICAgICAKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJOaOG6rW4gecOqdSBj4bqndSBj4bqtcCBuaOG6rXQgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLIHThu6sgc2VydmVyICh0YXNrX2lkOiB7dGFza19pZH0pIikKICAgICAgICAgICAgY29uZmlnX2RhdGEgPSB0YXNrX2RhdGEuZ2V0KCJjb25maWdfZGF0YSIsIHt9KQogICAgICAgICAgICBpZiBub3QgY29uZmlnX2RhdGE6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiROG7ryBsaeG7h3UgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLIHLhu5duZyIpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgIkThu68gbGnhu4d1IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iyBy4buXbmciKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzGsHUgdOG7q25nIGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBzdWNjZXNzID0gc2VsZi5kYi5zYXZlX2RldmljZV9jb25maWcoY29uZmlnX2RhdGEpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCBj4bqldSBow6xuaCB0aGnhur90IGLhu4s6IHsnLCAnLmpvaW4oY29uZmlnX2RhdGEua2V5cygpKX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB04bqldCBj4bqjIHTDoGkga2hv4bqjbiBsw6AgY2jGsGEgc3luYyDEkeG7gyDEkeG6o20gYuG6o28gdGjDtG5nIHRpbiBt4bubaSBuaOG6pXQgxJHGsOG7o2MgZ+G7rWkgbMOqbiBzZXJ2ZXIKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2FjY291bnRzID0gc2VsZi5kYi5tYXJrX2FsbF9hY2NvdW50c19ub3Rfc3luY2VkKCkKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2FjY291bnRzID4gMDoKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIMSRw6FuaCBk4bqldSB7dXBkYXRlZF9hY2NvdW50c30gdMOgaSBraG/huqNuIGzDoCBjaMawYSBzeW5jIHNhdSBraGkgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iyIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCJLaMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIGPhuqduIMSRw6FuaCBk4bqldSBjaMawYSBzeW5jIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSDEkcOhbmggZOG6pXUgdMOgaSBraG/huqNuIGNoxrBhIHN5bmM6IHtlfSIpCiAgICAgICAgICAgICAgICAgICAgIyBLaMO0bmcgZmFpbCB0YXNrIHbDrCB2aeG7h2MgY+G6rXAgbmjhuq10IGNvbmZpZyDEkcOjIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBzeW5jX2ludGVydmFsIG7hur91IG7DsyB0aGF5IMSR4buVaQogICAgICAgICAgICAgICAgaWYgInN5bmNfaW50ZXJ2YWwiIGluIGNvbmZpZ19kYXRhOgogICAgICAgICAgICAgICAgICAgIG5ld19zeW5jX2ludGVydmFsID0gY29uZmlnX2RhdGFbInN5bmNfaW50ZXJ2YWwiXQogICAgICAgICAgICAgICAgICAgIGlmIG5ld19zeW5jX2ludGVydmFsICE9IHNlbGYuc3luY19pbnRlcnZhbDoKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJD4bqtcCBuaOG6rXQgc3luY19pbnRlcnZhbCB04burIHtzZWxmLnN5bmNfaW50ZXJ2YWx9IHRow6BuaCB7bmV3X3N5bmNfaW50ZXJ2YWx9IikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zeW5jX2ludGVydmFsID0gbmV3X3N5bmNfaW50ZXJ2YWwKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2jhu59pIMSR4buZbmcgbOG6oWkgdGhyZWFkIMSR4buTbmcgYuG7mSBu4bq/dSDEkWFuZyBjaOG6oXkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5zeW5jX3RocmVhZCBpcyBub3QgTm9uZSBhbmQgc2VsZi5zeW5jX3RocmVhZC5pc19hbGl2ZSgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSDEkeG7mW5nIGzhuqFpIHRocmVhZCDEkeG7k25nIGLhu5kgduG7m2kga2hv4bqjbmcgdGjhu51pIGdpYW4gbeG7m2kiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdG9wX3N5bmNfdGhyZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhcnRfc3luY190aHJlYWQoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRow7RuZyBiw6FvIGNobyBKb2JTZXJ2aWNlIHbhu4EgdOG6pXQgY+G6oyBjb25maWcgdXBkYXRlCiAgICAgICAgICAgICAgICBpZiBzZWxmLmpvYl9zZXJ2aWNlIGFuZCBoYXNhdHRyKHNlbGYuam9iX3NlcnZpY2UsICdoYW5kbGVfbXF0dF9jb25maWdfdXBkYXRlJyk6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlRow7RuZyBiw6FvIEpvYlNlcnZpY2UgduG7gSBjb25maWcgdXBkYXRlIikKICAgICAgICAgICAgICAgICAgICBzZWxmLmpvYl9zZXJ2aWNlLmhhbmRsZV9tcXR0X2NvbmZpZ191cGRhdGUoY29uZmlnX2RhdGEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTG9nIHRow6ptIHRow7RuZyB0aW4gduG7gSBqb2ItcmVsYXRlZCBjb25maWdzCiAgICAgICAgICAgICAgICBqb2JfcmVsYXRlZF9rZXlzID0gWyJtYXhfam9ic19wZXJfZGF5IiwgIm1heF9qb2JzX3Blcl9zZXNzaW9uIiwgImpvYl9pbnRlcnZhbF9zZWNvbmRzIiwgImNhcmVfaW5fd29ya2luZ19qb2IiXQogICAgICAgICAgICAgICAgaWYgYW55KGtleSBpbiBjb25maWdfZGF0YSBmb3Iga2V5IGluIGpvYl9yZWxhdGVkX2tleXMpOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJD4bqldSBow6xuaCBsacOqbiBxdWFuIMSR4bq/biBKb2JTZXJ2aWNlIMSRw6MgxJHGsOG7o2MgY+G6rXAgbmjhuq10IikKICAgICAgICAgICAgICAgICAgICAjIEpvYlNlcnZpY2Ugc+G6vSB44butIGzDvSBsb2dpYyByZXN0YXJ0IHNlc3Npb24gbuG6v3UgY+G6p24gdGhp4bq/dAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEfhu61pIGLDoW8gY8OhbyB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJzdWNjZXNzIiwgZiLEkMOjIGPhuq1wIG5o4bqtdCBj4bqldSBow6xuaCB0aGnhur90IGLhu4s6IHsnLCAnLmpvaW4oY29uZmlnX2RhdGEua2V5cygpKX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSAiS2jDtG5nIHRo4buDIGPhuq1wIG5o4bqtdCBj4bqldSBow6xuaCB0aGnhur90IGLhu4siCiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBlcnJvcl9tc2cgPSBmIkzhu5dpIHjhu60gbMO9IGPhuq1wIG5o4bqtdCBj4bqldSBow6xuaCB0aGnhur90IGLhu4s6IHtzdHIoZSl9IgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3JfbXNnKQogICAgICAgICAgICB0YXNrX2lkID0gdGFza19kYXRhLmdldCgidGFza19pZCIpCiAgICAgICAgICAgIGRldmljZV9pZCA9IHRhc2tfZGF0YS5nZXQoImRldmljZV9pZCIpCiAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCgogICAgZGVmIF9oYW5kbGVfdXBkYXRlX3N5bmNlZChzZWxmLCB0YXNrX2RhdGEpOgogICAgICAgICIiIgogICAgICAgIFjhu60gbMO9IHRhc2sgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHhu5NuZyBi4buZCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFza19kYXRhOiBE4buvIGxp4buHdSB0YXNrIHThu6sgc2VydmVyCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb2dnZXIuZGVidWcoIk5o4bqtbiB5w6p1IGPhuqd1IGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIMSR4buTbmcgYuG7mSB04burIHNlcnZlciIpCiAgICAgICAgICAgIGRhdGEgPSB0YXNrX2RhdGEuZ2V0KCJkYXRhIiwge30pCiAgICAgICAgICAgIAogICAgICAgICAgICBhY2NvdW50X2NvdW50ID0gMAogICAgICAgICAgICBqb2JfY291bnQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gxJHDoyDEkeG7k25nIGLhu5kKICAgICAgICAgICAgaWYgImFjY291bnRzIiBpbiBkYXRhIGFuZCBpc2luc3RhbmNlKGRhdGFbImFjY291bnRzIl0sIGxpc3QpOgogICAgICAgICAgICAgICAgZm9yIGFjY291bnRfdXVpZCBpbiBkYXRhWyJhY2NvdW50cyJdOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIubWFya19hc19zeW5jZWQoImFjY291bnRzIiwgYWNjb3VudF91dWlkKQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhmIsSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gxJHDoyDEkeG7k25nIGLhu5k6IHthY2NvdW50X3V1aWR9IikKICAgICAgICAgICAgICAgIGFjY291bnRfY291bnQgPSBsZW4oZGF0YVsiYWNjb3VudHMiXSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IGpvYiDEkcOjIMSR4buTbmcgYuG7mQogICAgICAgICAgICBpZiAiam9icyIgaW4gZGF0YSBhbmQgaXNpbnN0YW5jZShkYXRhWyJqb2JzIl0sIGxpc3QpOgogICAgICAgICAgICAgICAgZm9yIGpvYl91dWlkIGluIGRhdGFbImpvYnMiXToKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLm1hcmtfYXNfc3luY2VkKCJqb2JzX2hpc3RvcnkiLCBqb2JfdXVpZCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoZiLEkMOhbmggZOG6pXUgam9iIMSRw6MgxJHhu5NuZyBi4buZOiB7am9iX3V1aWR9IikKICAgICAgICAgICAgICAgIGpvYl9jb3VudCA9IGxlbihkYXRhWyJqb2JzIl0pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEhp4buDbiB0aOG7iyB0aMO0bmcgYsOhbyB04buVbmcgaOG7o3AgaG/hurdjIHRow7RuZyBiw6FvIHThu6sgc2VydmVyCiAgICAgICAgICAgIGlmICJtZXNzYWdlIiBpbiB0YXNrX2RhdGE6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlRow7RuZyBiw6FvIHThu6sgc2VydmVyOiB7dGFza19kYXRhWydtZXNzYWdlJ119IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgSGnhu4NuIHRo4buLIHRow7RuZyBiw6FvIHThu5VuZyBo4bujcCBu4bq/dSBraMO0bmcgY8OzIG1lc3NhZ2UgdOG7qyBzZXJ2ZXIKICAgICAgICAgICAgICAgIGlmIGFjY291bnRfY291bnQgPiAwIG9yIGpvYl9jb3VudCA+IDA6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIMSR4buTbmcgYuG7mSB0aMOgbmggY8O0bmc6IHthY2NvdW50X2NvdW50fSB0w6BpIGtob+G6o24sIHtqb2JfY291bnR9IGpvYiIpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHjhu60gbMO9IGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIMSR4buTbmcgYuG7mToge3N0cihlKX0iKQogICAgICAgICAgICAKICAgIAogICAgZGVmIF9oYW5kbGVfYWNjb3VudF91cGRhdGUoc2VsZiwgdGFza19kYXRhKToKICAgICAgICAiIiIKICAgICAgICBY4butIGzDvSB0YXNrIGPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfZGF0YTogROG7ryBsaeG7h3UgdGFzayB04burIHNlcnZlciBjw7MgY+G6pXUgdHLDumM6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0YXNrX2lkIjogInRhc2tfMTc0OTM5OTUzNjI3Ml82NDEiLAogICAgICAgICAgICAgICAgImRldmljZV9pZCI6ICJhMTI1ZjYyNGY0MWE0ZjdjIiwKICAgICAgICAgICAgICAgICJ0YXNrX3R5cGUiOiAiYWNjb3VudF91cGRhdGUiLAogICAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImFwcCI6ICJpbnN0YWdyYW0iLAogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiaW5hY3RpdmUiLAogICAgICAgICAgICAgICAgICAgICJqb2JfbWF4X2RheSI6IDEwOCwKICAgICAgICAgICAgICAgICAgICAiam9iX3RvZGF5IjogMzAsCiAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICJhY2NvdW50X3V1aWQiOiAiN2VkOTU1N2QtNzZhNC00N2Y3LTg4NTAtN2NlZWYwYzY5MGFmIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogIiIsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogInBlbmRpbmciCiAgICAgICAgICAgIH0KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRhc2tfaWQgPSB0YXNrX2RhdGEuZ2V0KCJ0YXNrX2lkIikKICAgICAgICAgICAgZGV2aWNlX2lkID0gdGFza19kYXRhLmdldCgiZGV2aWNlX2lkIikKICAgICAgICAgICAgZGF0YSA9IHRhc2tfZGF0YS5nZXQoImRhdGEiLCB7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiTmjhuq1uIHnDqnUgY+G6p3UgY+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbiB04burIHNlcnZlciAodGFza19pZDoge3Rhc2tfaWR9KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgZGF0YSBvciAiYWNjb3VudF91dWlkIiBub3QgaW4gZGF0YToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJE4buvIGxp4buHdSB0w6BpIGtob+G6o24ga2jDtG5nIGjhu6NwIGzhu4ciKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsICJE4buvIGxp4buHdSB0w6BpIGtob+G6o24ga2jDtG5nIGjhu6NwIGzhu4ciKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0w6BpIGtob+G6o24gdOG7qyBEQgogICAgICAgICAgICBhY2NvdW50ID0gc2VsZi5kYi5nZXRfYWNjb3VudF9ieV91dWlkKGRhdGFbImFjY291bnRfdXVpZCJdKQogICAgICAgICAgICBpZiBub3QgYWNjb3VudDoKICAgICAgICAgICAgICAgIGVycm9yX21zZyA9IGYiS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB24bubaSBVVUlEOiB7ZGF0YVsnYWNjb3VudF91dWlkJ119IgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0ge30KICAgICAgICAgICAgdmFsaWRfZmllbGRzID0gWyJzdGF0dXMiLCAiam9iX21heF9kYXkiLCAibWF4X2pvYnNfcGVyX3Nlc3Npb24iLCAiam9iX2VuYWJsZSIsICJqb2JfZGlzYWJsZV91bnRpbCIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXNhYmxlX2ZvbGxvdyIsICJmb2xsb3dfZGlzYWJsZV91bnRpbCIsICJmb2xsb3dfdG9kYXkiLCAiZm9sbG93X2luX3Nlc3Npb24iLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAibWF4X2ZvbGxvd19kYXkiLCAibWF4X2ZvbGxvd19zZXNzaW9uIiwgImluYWN0aXZlX2ZvbGxvd19yZWFzb24iXQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gZGF0YS5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYga2V5IGluIHZhbGlkX2ZpZWxkczoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVfZGF0YVtrZXldID0gdmFsdWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHVwZGF0ZV9kYXRhOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIktow7RuZyBjw7MgdGjDtG5nIHRpbiBj4bqnbiBj4bqtcCBuaOG6rXQiKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsICJLaMO0bmcgY8OzIHRow7RuZyB0aW4gY+G6p24gY+G6rXAgbmjhuq10IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEzGsHUgbOG6oWkgdsOgbyBEQgogICAgICAgICAgICB1cGRhdGVfZGF0YVsiaXNfc3luYyJdID0gRmFsc2UKICAgICAgICAgICAgc3VjY2VzcyA9IHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudFsiaWQiXSwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnJyl9IChVVUlEOiB7ZGF0YVsnYWNjb3VudF91dWlkJ119KSB24bubaSBk4buvIGxp4buHdToge3VwZGF0ZV9kYXRhfSIpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAic3VjY2VzcyIsIGYixJDDoyBj4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJycpfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSBmIktow7RuZyB0aOG7gyBj4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJycpfSIKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBlcnJvcl9tc2cgPSBmIkzhu5dpIHjhu60gbMO9IGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o246IHtzdHIoZSl9IgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyb3JfbXNnKQogICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgZXJyb3JfbXNnKQoKICAgIGRlZiBfaGFuZGxlX3ZlcmlmeV9nb2xpa2Uoc2VsZiwgdGFza19kYXRhKToKICAgICAgICAiIiIKICAgICAgICBY4butIGzDvSB0YXNrIHZlcmlmeSB0w6BpIGtob+G6o24gZ29saWtlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFza19kYXRhOiBE4buvIGxp4buHdSB0YXNrIHThu6sgc2VydmVyIGPDsyBj4bqldSB0csO6YzoKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInRhc2tfaWQiOiAidGFza18xNzQ5Mzk5NTM2MjcyXzY0MSIsCiAgICAgICAgICAgICAgICAiZGV2aWNlX2lkIjogImExMjVmNjI0ZjQxYTRmN2MiLAogICAgICAgICAgICAgICAgInRhc2tfdHlwZSI6ICJ2ZXJpZnlfZ29saWtlIiwKICAgICAgICAgICAgICAgICJkYXRhIjogewogICAgICAgICAgICAgICAgICAgICJhcHAiOiAiaW5zdGFncmFtIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogIiIsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogInBlbmRpbmciCiAgICAgICAgICAgIH0KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRhc2tfaWQgPSB0YXNrX2RhdGEuZ2V0KCJ0YXNrX2lkIikKICAgICAgICAgICAgZGV2aWNlX2lkID0gdGFza19kYXRhLmdldCgiZGV2aWNlX2lkIikKICAgICAgICAgICAgZGF0YSA9IHRhc2tfZGF0YS5nZXQoImRhdGEiLCB7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiTmjhuq1uIHnDqnUgY+G6p3UgdmVyaWZ5IGdvbGlrZSB04burIHNlcnZlciAodGFza19pZDoge3Rhc2tfaWR9KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBhcHBfbmFtZSA9IGRhdGEuZ2V0KCJhcHAiKQogICAgICAgICAgICBpZiBub3QgYXBwX25hbWU6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSAiVGhp4bq/dSB0aMO0bmcgdGluIGFwcCB0cm9uZyBk4buvIGxp4buHdSB0YXNrIgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICAgICAgIyBJbXBvcnQgZ29saWtlX3NlcnZpY2Uga2hpIGPhuqduIHRoaeG6v3QKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnJvbSBzZXJ2aWNlcy5nb2xpa2Vfc2VydmljZSBpbXBvcnQgR29saWtlU2VydmljZQogICAgICAgICAgICAgICAgZ29saWtlX3NlcnZpY2UgPSBHb2xpa2VTZXJ2aWNlKHNlbGYuZGIpCiAgICAgICAgICAgIGV4Y2VwdCBJbXBvcnRFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgZXJyb3JfbXNnID0gZiJLaMO0bmcgdGjhu4MgaW1wb3J0IEdvbGlrZVNlcnZpY2U6IHtzdHIoZSl9IgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gY2jGsGEgbGnDqm4ga+G6v3QgZ29saWtlCiAgICAgICAgICAgIHVubGlua2VkX2FjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHNfYnlfYXBwX2FuZF9nb2xpa2Vfc3RhdHVzKGFwcF9uYW1lLCBpc19saW5rZWQ9RmFsc2UpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdW5saW5rZWRfYWNjb3VudHM6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSBmIktow7RuZyBjw7MgdMOgaSBraG/huqNuIHthcHBfbmFtZX0gbsOgbyBjaMawYSBsacOqbiBr4bq/dCBnb2xpa2UiCiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHtsZW4odW5saW5rZWRfYWNjb3VudHMpfSB0w6BpIGtob+G6o24ge2FwcF9uYW1lfSBjaMawYSBsacOqbiBr4bq/dCBnb2xpa2UiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWZXJpZnkgdOG7q25nIHTDoGkga2hv4bqjbgogICAgICAgICAgICB2ZXJpZmljYXRpb25fcmVzdWx0cyA9IFtdCiAgICAgICAgICAgIHN1Y2Nlc3NfY291bnQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgYWNjb3VudCBpbiB1bmxpbmtlZF9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVuaXF1ZV91c2VybmFtZSA9IGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKQogICAgICAgICAgICAgICAgaWYgbm90IHVuaXF1ZV91c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlTDoGkga2hv4bqjbiBJRCB7YWNjb3VudC5nZXQoJ2lkJyl9IGtow7RuZyBjw7MgdW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBH4buNaSBBUEkgdmVyaWZ5IGFjY291bnQgcXVhIGdvbGlrZV9zZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBmIi97YXBwX25hbWV9LWFjY291bnQvdmVyaWZ5LWFjY291bnQiCiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5X2RhdGEgPSB7Im9iamVjdF9pZCI6IHVuaXF1ZV91c2VybmFtZX0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFThuqFvIFVSTCDEkeG6p3kgxJHhu6cKICAgICAgICAgICAgICAgICAgICB1cmwgPSBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfXtlbmRwb2ludH0iCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZ29saWtlX3NlcnZpY2UuYXBpX3JlcXVlc3QodXJsLCBtZXRob2Q9IlBPU1QiLCBwYXlsb2FkPXZlcmlmeV9kYXRhKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdC5nZXQoInN1Y2Nlc3MiKSBhbmQgcmVzdWx0LmdldCgic3RhdHVzIikgPT0gMjAwOgogICAgICAgICAgICAgICAgICAgICAgICAjIFZlcmlmeSB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHJlc3VsdC5nZXQoIm1lc3NhZ2UiLCAiVGjDoG5oIGPDtG5nISIpCiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvbl9yZXN1bHRzLmFwcGVuZChmIltUUlVFXVt7dW5pcXVlX3VzZXJuYW1lfV06IHttZXNzYWdlfSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NfY291bnQgKz0gMQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBsacOqbiBr4bq/dCB0cm9uZyBkYXRhYmFzZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19nb2xpa2VfbGlua2VkIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJnb2xpa2VfdXNlcl9pZCI6IHJlc3VsdC5nZXQoImRhdGEiLCB7fSkuZ2V0KCJ1c2VyX2lkIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlZlcmlmeSB0aMOgbmggY8O0bmcgdMOgaSBraG/huqNuIHt1bmlxdWVfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBWZXJpZnkgdGjhuqV0IGLhuqFpCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2UgPSByZXN1bHQuZ2V0KCJtZXNzYWdlIiwgIkzhu5dpIGtow7RuZyB4w6FjIMSR4buLbmgiKQogICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fcmVzdWx0cy5hcHBlbmQoZiJbRkFMU0VdW3t1bmlxdWVfdXNlcm5hbWV9XToge2Vycm9yX21lc3NhZ2V9IikKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJWZXJpZnkgdGjhuqV0IGLhuqFpIHTDoGkga2hv4bqjbiB7dW5pcXVlX3VzZXJuYW1lfToge2Vycm9yX21lc3NhZ2V9IikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgZXJyb3JfbWVzc2FnZSA9IGYiTOG7l2kga2hpIHZlcmlmeToge3N0cihlKX0iCiAgICAgICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uX3Jlc3VsdHMuYXBwZW5kKGYiW0ZBTFNFXVt7dW5pcXVlX3VzZXJuYW1lfV06IHtlcnJvcl9tZXNzYWdlfSIpCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHZlcmlmeSB0w6BpIGtob+G6o24ge3VuaXF1ZV91c2VybmFtZX06IHtzdHIoZSl9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gYsOhbyBjw6FvIGvhur90IHF14bqjCiAgICAgICAgICAgIHJlcG9ydF9tZXNzYWdlID0gIlxuIi5qb2luKHZlcmlmaWNhdGlvbl9yZXN1bHRzKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4butaSBiw6FvIGPDoW8gdGFzawogICAgICAgICAgICBpZiBzdWNjZXNzX2NvdW50ID09IGxlbih1bmxpbmtlZF9hY2NvdW50cyk6CiAgICAgICAgICAgICAgICAjIFThuqV0IGPhuqMgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAic3VjY2VzcyIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlZlcmlmeSB0aMOgbmggY8O0bmcge3N1Y2Nlc3NfY291bnR9L3tsZW4odW5saW5rZWRfYWNjb3VudHMpfSB0w6BpIGtob+G6o246XG57cmVwb3J0X21lc3NhZ2V9IikKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVmVyaWZ5IGdvbGlrZSBob8OgbiB0aMOgbmg6IHtzdWNjZXNzX2NvdW50fS97bGVuKHVubGlua2VkX2FjY291bnRzKX0gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEPDsyBt4buZdCBz4buRIHRo4bqldCBi4bqhaQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlZlcmlmeSB0aMOgbmggY8O0bmcge3N1Y2Nlc3NfY291bnR9L3tsZW4odW5saW5rZWRfYWNjb3VudHMpfSB0w6BpIGtob+G6o246XG57cmVwb3J0X21lc3NhZ2V9IikKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiVmVyaWZ5IGdvbGlrZSBob8OgbiB0aMOgbmggduG7m2kgbOG7l2k6IHtzdWNjZXNzX2NvdW50fS97bGVuKHVubGlua2VkX2FjY291bnRzKX0gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGVycm9yX21zZyA9IGYiTOG7l2kgeOG7rSBsw70gdmVyaWZ5IGdvbGlrZToge3N0cihlKX0iCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCgogICAgZGVmIF9oYW5kbGVfdXBkYXRlX3Byb3h5KHNlbGYsIHRhc2tfZGF0YSk6CiAgICAgICAgIiIiCiAgICAgICAgWOG7rSBsw70gdGFzayBj4bqtcCBuaOG6rXQgY+G6pXUgaMOsbmggcHJveHkKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXNrX2RhdGE6IEThu68gbGnhu4d1IHRhc2sgdOG7qyBzZXJ2ZXIgY8OzIGPhuqV1IHRyw7pjOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAidGFza19pZCI6ICJ0YXNrXzE3NDkzOTk1MzYyNzJfNjQxIiwKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiAiYTEyNWY2MjRmNDFhNGY3YyIsCiAgICAgICAgICAgICAgICAidGFza190eXBlIjogInVwZGF0ZV9wcm94eSIsCiAgICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAicHJveHlfY29uZmlnIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAicHJveHlfNDU2IiwKICAgICAgICAgICAgICAgICAgICAgICAgImhvc3QiOiAicHJveHkuZXhhbXBsZS5jb20iLAogICAgICAgICAgICAgICAgICAgICAgICAicG9ydCI6IDgwODAsCiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VybmFtZSI6ICJ1c2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInBhc3N3b3JkIjogInBhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJodHRwIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibWVzc2FnZSI6ICIiLAogICAgICAgICAgICAgICAgInN0YXR1cyI6ICJwZW5kaW5nIgogICAgICAgICAgICB9CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICB0YXNrX2lkID0gdGFza19kYXRhLmdldCgidGFza19pZCIpCiAgICAgICAgICAgIGRldmljZV9pZCA9IHRhc2tfZGF0YS5nZXQoImRldmljZV9pZCIpCiAgICAgICAgICAgIGRhdGEgPSB0YXNrX2RhdGEuZ2V0KCJkYXRhIiwge30pCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIk5o4bqtbiB5w6p1IGPhuqd1IGPhuq1wIG5o4bqtdCBwcm94eSB04burIHNlcnZlciAodGFza19pZDoge3Rhc2tfaWR9KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBwcm94eV9jb25maWcgPSBkYXRhCiAgICAgICAgICAgIGlmIG5vdCBwcm94eV9jb25maWc6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSAiVGhp4bq/dSB0aMO0bmcgdGluIHByb3h5X2NvbmZpZyB0cm9uZyBk4buvIGxp4buHdSB0YXNrIgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICAgICAgIyBMxrB1IGPhuqV1IGjDrG5oIHByb3h5IHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoInByb3h5X2NvbmZpZyIsIHByb3h5X2NvbmZpZykKICAgICAgICAgICAgICAgICMgUmVzZXQgdHLhuqFuZyB0aMOhaSB5w6p1IGPhuqd1IHByb3h5IHbDrCDEkcOjIG5o4bqtbiDEkcaw4bujYyBwcm94eQogICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoInByb3h5X3JlcXVlc3RlZCIsIDApCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHByb3h5OiB7cHJveHlfY29uZmlnWyduYW1lJ119IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBH4butaSBiw6FvIGPDoW8gdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICBzdWNjZXNzX21zZyA9IGYixJDDoyBj4bqtcCBuaOG6rXQgcHJveHk6IHtwcm94eV9jb25maWdbJ25hbWUnXX0iCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAic3VjY2VzcyIsIHN1Y2Nlc3NfbXNnKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGVycm9yX21zZyA9IGYiTOG7l2kga2hpIGzGsHUgY+G6pXUgaMOsbmggcHJveHk6IHtzdHIoZSl9IgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGVycm9yX21zZyA9IGYiTOG7l2kgeOG7rSBsw70gY+G6rXAgbmjhuq10IHByb3h5OiB7c3RyKGUpfSIKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgICAgICAgICAgdGFza19pZCA9IHRhc2tfZGF0YS5nZXQoInRhc2tfaWQiKQogICAgICAgICAgICBkZXZpY2VfaWQgPSB0YXNrX2RhdGEuZ2V0KCJkZXZpY2VfaWQiKQogICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgZXJyb3JfbXNnKQoKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICAiIiIKICAgICAgICBLaOG7n2kgxJHhu5luZyBNUVRUIHNlcnZpY2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGto4bufaSDEkeG7mW5nIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRoaeG6v3QgbOG6rXAgY8OhYyBoYW5kbGVyIHRyxrDhu5tjIGtoaSBr4bq/dCBu4buRaQogICAgICAgICAgICBzZWxmLnNldHVwX21xdHRfaGFuZGxlcnMoKQogICAgICAgICAgICBzZWxmLmNvbm5lY3QoKQogICAgICAgICAgICAjIEto4bufaSDEkeG7mW5nIHN5bmMgdGhyZWFkIHNhdSBraGkga+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgIHNlbGYuc3RhcnRfc3luY190aHJlYWQoKQogICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBraOG7n2kgxJHhu5luZyBNUVRUIHNlcnZpY2UgdsOgIMSR4buTbmcgYuG7mSBk4buvIGxp4buHdSIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGto4bufaSDEkeG7mW5nIE1RVFQgc2VydmljZSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfb25fbWVzc2FnZShzZWxmLCBjbGllbnQsIHVzZXJkYXRhLCBtc2csIHByb3BlcnRpZXM9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgQ2FsbGJhY2sga2hpIG5o4bqtbiDEkcaw4bujYyBtZXNzYWdlIHThu6sgTVFUVCBicm9rZXIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBjbGllbnQ6IE1RVFQgY2xpZW50IGluc3RhbmNlCiAgICAgICAgICAgIHVzZXJkYXRhOiBVc2VyIGRhdGEgxJHGsOG7o2MgdHJ1eeG7gW4gdsOgbyBjbGllbnQKICAgICAgICAgICAgbXNnOiBNZXNzYWdlIG9iamVjdCBjaOG7qWEgdG9waWMgdsOgIHBheWxvYWQKICAgICAgICAgICAgcHJvcGVydGllczogUHJvcGVydGllcyBj4bunYSBtZXNzYWdlIChNUVRUIHY1KQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiTmjhuq1uIG1lc3NhZ2UgdOG7qyB0b3BpYzoge21zZy50b3BpY30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBQYXJzZSBwYXlsb2FkIEpTT04KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcGF5bG9hZCA9IGpzb24ubG9hZHMobXNnLnBheWxvYWQuZGVjb2RlKCd1dGYtOCcpKQogICAgICAgICAgICBleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3I6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgcGFyc2UgSlNPTiB04burIHBheWxvYWQ6IHttc2cucGF5bG9hZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFjhu60gbMO9IG1lc3NhZ2UgZOG7sWEgdHLDqm4gdG9waWMKICAgICAgICAgICAgaWYgbXNnLnRvcGljID09IHNlbGYudG9waWNfc2VydmVyX3Rhc2s6CiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVfc2VydmVyX3Rhc2socGF5bG9hZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiTmjhuq1uIG1lc3NhZ2UgdOG7qyB0b3BpYyBraMO0bmcgeMOhYyDEkeG7i25oOiB7bXNnLnRvcGljfSIpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHjhu60gbMO9IG1lc3NhZ2U6IHtzdHIoZSl9IikKCiAgICBkZWYgX2hhbmRsZV9zZXJ2ZXJfdGFzayhzZWxmLCBwYXlsb2FkOiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiCiAgICAgICAgWOG7rSBsw70gdGFzayB04burIHNlcnZlcgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBheWxvYWQ6IEThu68gbGnhu4d1IHRhc2sgdOG7qyBzZXJ2ZXIKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRhc2tfdHlwZSA9IHBheWxvYWQuZ2V0KCJ0YXNrX3R5cGUiKQogICAgICAgICAgICBpZiBub3QgdGFza190eXBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5o4bqtbiB0YXNrIGtow7RuZyBjw7MgdGFza190eXBlIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiTmjhuq1uIHRhc2sgdOG7qyBzZXJ2ZXI6IHt0YXNrX3R5cGV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgaGFuZGxlciB0xrDGoW5nIOG7qW5nIG7hur91IMSRw6MgxJHEg25nIGvDvQogICAgICAgICAgICBpZiB0YXNrX3R5cGUgaW4gc2VsZi50YXNrX2hhbmRsZXJzOgogICAgICAgICAgICAgICAgc2VsZi50YXNrX2hhbmRsZXJzW3Rhc2tfdHlwZV0ocGF5bG9hZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHTDrG0gdGjhuqV5IGhhbmRsZXIgY2hvIHRhc2tfdHlwZToge3Rhc2tfdHlwZX0iKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHjhu60gbMO9IHRhc2sgdOG7qyBzZXJ2ZXI6IHtzdHIoZSl9IikKICAgIAogICAgZGVmIF9tb25pdG9yX3JhbV91c2FnZShzZWxmLCBkZXZpY2VfaW5mbzogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIgogICAgICAgIFRoZW8gZMO1aSBSQU0gdsOgIHThu7EgxJHhu5luZyByZWJvb3QgbuG6v3UgUkFNIGNhbyBsacOqbiB04bulYwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGRldmljZV9pbmZvOiBUaMO0bmcgdGluIHRoaeG6v3QgYuG7iyBjaOG7qWEgUkFNIHVzYWdlCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IHBo4bqnbiB0csSDbSBSQU0gdHLhu7FjIHRp4bq/cCB04burIGRldmljZV9pbmZvICht4bq3YyDEkeG7i25oIGzDoCAwIG7hur91IGtow7RuZyBjw7MpCiAgICAgICAgICAgIHJhbV91c2FnZV9wZXJjZW50ID0gZGV2aWNlX2luZm8uZ2V0KCJyYW1fcGVyY2VudGFnZSIsIDApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByYW1fdXNhZ2VfcGVyY2VudCA9PSAwOgogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCJLaMO0bmcgY8OzIHRow7RuZyB0aW4gcmFtX3BlcmNlbnRhZ2UgdHJvbmcgZGV2aWNlX2luZm8sIHPhu60gZOG7pW5nIGdpw6EgdHLhu4sgbeG6t2MgxJHhu4tuaCAwIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gdsOgbyBs4buLY2ggc+G7rSAoY2jhu4kgZ2nhu68gbOG6oWkgMyBs4bqnbiBn4bqnbiBuaOG6pXQpCiAgICAgICAgICAgIHNlbGYucmFtX3VzYWdlX2hpc3RvcnkuYXBwZW5kKHJhbV91c2FnZV9wZXJjZW50KQogICAgICAgICAgICBpZiBsZW4oc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeSkgPiBzZWxmLmNvbnNlY3V0aXZlX2hpZ2hfcmFtX2xpbWl0OgogICAgICAgICAgICAgICAgc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeS5wb3AoMCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhmIlJBTSBoaeG7h24gdOG6oWk6IHtyYW1fdXNhZ2VfcGVyY2VudDouMWZ9JSAobOG7i2NoIHPhu606IHtbZid7eDouMWZ9JScgZm9yIHggaW4gc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeV19KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgY8OzIMSR4bunIDMgbOG6p24gxJFvIHbDoCB04bqldCBj4bqjIMSR4buBdSA+IG5nxrDhu6FuZwogICAgICAgICAgICBpZiBsZW4oc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeSkgPj0gc2VsZi5jb25zZWN1dGl2ZV9oaWdoX3JhbV9saW1pdDoKICAgICAgICAgICAgICAgIGlmIGFsbCh1c2FnZSA+IHNlbGYuaGlnaF9yYW1fdGhyZXNob2xkIGZvciB1c2FnZSBpbiBzZWxmLnJhbV91c2FnZV9oaXN0b3J5KToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIlJBTSBjYW8gbGnDqm4gdOG7pWMge3NlbGYuY29uc2VjdXRpdmVfaGlnaF9yYW1fbGltaXR9IGzhuqduICg+e3NlbGYuaGlnaF9yYW1fdGhyZXNob2xkfSUpOiB7W2Yne3g6LjFmfSUnIGZvciB4IGluIHNlbGYucmFtX3VzYWdlX2hpc3RvcnldfSIpCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIkLhuq90IMSR4bqndSByZWJvb3QgdGhp4bq/dCBi4buLIMSR4buDIGdp4bqjaSBwaMOzbmcgUkFNLi4uIikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFRo4buxYyBoaeG7h24gcmVib290CiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5fcmVib290X2RldmljZSgpOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBn4butaSBs4buHbmggcmVib290IHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzZXQgbOG7i2NoIHPhu60gc2F1IGtoaSByZWJvb3QKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yYW1fdXNhZ2VfaGlzdG9yeS5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdGjhu7FjIGhp4buHbiByZWJvb3QgdGhp4bq/dCBi4buLIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdGhlbyBkw7VpIFJBTToge2V9IikKICAgIAogICAgZGVmIF9yZWJvb3RfZGV2aWNlKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiByZWJvb3QgdGhp4bq/dCBi4buLIHF1YSBBREIKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFPhu60gZOG7pW5nIERFVklDRV9JUCB04burIGNvbmZpZyB0aGF5IHbDrCBBREJfSE9TVAogICAgICAgICAgICBkZXZpY2VfYWRkcmVzcyA9IGYie2NvbmZpZy5ERVZJQ0VfSVB9Ontjb25maWcuQURCX1BPUlR9IgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4buHbmggcmVib290IHF1YSBBREIKICAgICAgICAgICAgY21kID0gWyJhZGIiLCAiLXMiLCBkZXZpY2VfYWRkcmVzcywgInJlYm9vdCJdCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gcmVib290IHRoaeG6v3QgYuG7izogeycgJy5qb2luKGNtZCl9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKAogICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgY2hlY2s9VHJ1ZSwKICAgICAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgdGV4dD1UcnVlLAogICAgICAgICAgICAgICAgdGltZW91dD0xMCAgIyBUaW1lb3V0IDEwIGdpw6J5CiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiTOG7h25oIHJlYm9vdCDEkcOjIMSRxrDhu6NjIGfhu61pIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLlRpbWVvdXRFeHBpcmVkOgogICAgICAgICAgICBsb2dnZXIud2FybmluZygiVGltZW91dCBraGkgZ+G7rWkgbOG7h25oIHJlYm9vdCAodGhp4bq/dCBi4buLIGPDsyB0aOG7gyDEkWFuZyByZWJvb3QpIikKICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgQ29pIG5oxrAgdGjDoG5oIGPDtG5nIHbDrCBjw7MgdGjhu4MgdGhp4bq/dCBi4buLIMSRYW5nIHJlYm9vdAogICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiByZWJvb3Q6IHtlLnN0ZGVycn0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IGzhu4duaCBhZGIsIGtow7RuZyB0aOG7gyByZWJvb3QgdGhp4bq/dCBi4buLIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraMO0bmcgeMOhYyDEkeG7i25oIGtoaSByZWJvb3QgdGhp4bq/dCBi4buLOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2U=').decode('utf-8'))
