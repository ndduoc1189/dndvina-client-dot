import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdCwgT3B0aW9uYWwsIENhbGxhYmxlCmZyb20gYWJjIGltcG9ydCBBQkMsIGFic3RyYWN0bWV0aG9kCmltcG9ydCB1dGlscwpmcm9tIHV0aWxzIGltcG9ydCBMb2dMZXZlbCwgTG9nZ2VyCmltcG9ydCB1cmxsaWIucGFyc2UKaW1wb3J0IHJhbmRvbQppbXBvcnQgY29uZmlnCiMgVOG6oW8gbG9nZ2VyIGNobyBCYXNlSm9iCmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoIkJhc2VKb2IiKQoKY2xhc3MgQmFzZUpvYihBQkMpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyID0gaGVscGVyX3NlcnZpY2UKICAgICAgICBzZWxmLmdvbGlrZV9zZXJ2aWNlID0gZ29saWtlX3NlcnZpY2UKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gIiIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gIiIKICAgICAgICAjIEjDoG0gc2xlZXAgbeG6t2MgxJHhu4tuaCBsw6AgdGltZS5zbGVlcAogICAgICAgIHNlbGYuX3NsZWVwX2Z1bmMgPSB0aW1lLnNsZWVwCiAgICAgICAgIyBU4bqhbyBsb2dnZXIgY2hvIGluc3RhbmNlIGPhu6UgdGjhu4MKICAgICAgICBzZWxmLmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoZiJKb2Iue3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgCiAgICAgICAgIyBEaWN0aW9uYXJ5IMSR4buDIGzGsHUgc+G7kSBs4bqnbiB1bmZvbGxvdy91bmxpa2UgdOG6oW0gdGjhu51pIHRoZW8gYWNjb3VudF9pZAogICAgICAgIHNlbGYudW5mb2xsb3dfY291bnRzID0ge30KICAgICAgICAKICAgICAgICAjIFByb3h5IHNlcnZpY2Ugc+G6vSDEkcaw4bujYyBzZXQgc2F1IGtoaSBraOG7n2kgdOG6oW8KICAgICAgICBzZWxmLnByb3h5X3NlcnZpY2UgPSBOb25lCiAgICAgICAgCiAgICBkZWYgc2V0X3Byb3h5X3NlcnZpY2Uoc2VsZiwgcHJveHlfc2VydmljZSk6CiAgICAgICAgIiIiCiAgICAgICAgVGhp4bq/dCBs4bqtcCBwcm94eSBzZXJ2aWNlIGNobyBqb2IgaGFuZGxlcgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb3h5X3NlcnZpY2U6IFByb3h5U2VydmljZSBpbnN0YW5jZQogICAgICAgICIiIgogICAgICAgIHNlbGYucHJveHlfc2VydmljZSA9IHByb3h5X3NlcnZpY2UKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aGnhur90IGzhuq1wIHByb3h5IHNlcnZpY2UgY2hvIHtzZWxmLl9fY2xhc3NfXy5fX25hbWVfX30iKQogICAgICAgIAogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIkzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgcGFzcwoKICAgICAgICAKICAgIGRlZiBzeW5jX2FjY291bnRzX3RvX2RiKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMSQ4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgdsOgbyBkYXRhYmFzZSB2w6AgbWFwIHbhu5tpIHTDoGkga2hv4bqjbiBHb0xpa2UKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sKICAgICAgICAgICAgZGV2aWNlX2FjY291bnRzID0gc2VsZi5nZXRfYWNjb3VudHNfZnJvbV9kZXZpY2UoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBkZXZpY2VfaWQgdOG7qyBkYXRhYmFzZQogICAgICAgICAgICBhbmRyb2lkX2lkID0gc2VsZi5kYi5nZXRfb3JfY3JlYXRlX2RldmljZV9pZCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIGhp4buHbiBjw7MgdHJvbmcgREIgY2hvIGFwcCBuw6B5CiAgICAgICAgICAgIGV4aXN0aW5nX2FjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHMoYXBwPXNlbGYuYXBwX25hbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIHNldCBjw6FjIHVuaXF1ZV91c2VybmFtZSB04burIHRoaeG6v3QgYuG7iyDEkeG7gyBk4buFIHNvIHPDoW5oCiAgICAgICAgICAgIGRldmljZV91c2VybmFtZXMgPSBzZXQoKQogICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKQogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgZGV2aWNlX3VzZXJuYW1lcy5hZGQodXNlcm5hbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgdMOgaSBraG/huqNuIHRyb25nIERCIG3DoCBraMO0bmcgY8OybiB0csOqbiB0aGnhur90IGLhu4sgLT4gxJHDoW5oIGThuqV1IGxvZ291dAogICAgICAgICAgICBmb3IgZXhpc3RpbmdfYWNjb3VudCBpbiBleGlzdGluZ19hY2NvdW50czoKICAgICAgICAgICAgICAgIGV4aXN0aW5nX3VzZXJuYW1lID0gZXhpc3RpbmdfYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICBpZiBleGlzdGluZ191c2VybmFtZSBhbmQgZXhpc3RpbmdfdXNlcm5hbWUgbm90IGluIGRldmljZV91c2VybmFtZXM6CiAgICAgICAgICAgICAgICAgICAgIyBUw6BpIGtob+G6o24gY8OzIHRyb25nIERCIG5oxrBuZyBraMO0bmcgY8OzIHRyw6puIHRoaeG6v3QgYuG7iyAtPiBsb2dvdXQKICAgICAgICAgICAgICAgICAgICBpZiBleGlzdGluZ19hY2NvdW50LmdldCgic3RhdHVzIikgIT0gImxvZ291dCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge2V4aXN0aW5nX3VzZXJuYW1lfSBraMO0bmcgY8OybiB0csOqbiB0aGnhur90IGLhu4ssIMSRw6FuaCBk4bqldSBsb2dvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGV4aXN0aW5nX2FjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAibG9nb3V0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpbmFjdGl2ZV9yZWFzb24iOiAiVMOgaSBraG/huqNuIGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBob+G6t2MgdGjDqm0gbeG7m2kgdsOgbyBEQgogICAgICAgICAgICBmb3IgYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICAjIFRow6ptIHRow7RuZyB0aW4gYXBwIHbDoCBkZXZpY2VfaWQKICAgICAgICAgICAgICAgIGFjY291bnRbImFwcCJdID0gc2VsZi5hcHBfbmFtZQogICAgICAgICAgICAgICAgYWNjb3VudFsiZGV2aWNlX2lkIl0gPSBhbmRyb2lkX2lkCiAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSBsw6AgY2jGsGEgxJHhu5NuZyBi4buZIMSR4buDIGfhu61pIGzDqm4gc2VydmVyCiAgICAgICAgICAgICAgICBhY2NvdW50WyJpc19zeW5jIl0gPSBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgdMOgaSBraG/huqNuIMSRw6MgdOG7k24gdOG6oWkgY2jGsGEgZOG7sWEgdsOgbyB1bmlxdWVfdXNlcm5hbWUgKyBhcHAKICAgICAgICAgICAgICAgIGV4aXN0aW5nX2FjY291bnQgPSBzZWxmLmRiLmdldF9hY2NvdW50X2J5X3VuaXF1ZV91c2VybmFtZShzZWxmLmFwcF9uYW1lLCBhY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQ6CiAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIGhp4buHbiBjw7MKICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2lkID0gZXhpc3RpbmdfYWNjb3VudFsiaWQiXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBu4bq/dSB0w6BpIGtob+G6o24gdHJvbmcgREIgxJFhbmcg4bufIHRy4bqhbmcgdGjDoWkgbG9nb3V0IG5oxrBuZyB4deG6pXQgaGnhu4duIGzhuqFpIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSA9PSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsic3RhdHVzIl0gPSAiYWN0aXZlIiAgIyBSZXNldCB24buBIGFjdGl2ZSBraGkgdMOsbSB0aOG6pXkgbOG6oWkgdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRbImluYWN0aXZlX3JlYXNvbiJdID0gIiIgICMgWMOzYSBsw70gZG8gaW5hY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSDEkcOjIHh14bqldCBoaeG7h24gbOG6oWkgdHLDqm4gdGhp4bq/dCBi4buLLCByZXNldCB04burIGxvZ291dCB24buBIGFjdGl2ZSIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBHaeG7ryBuZ3V5w6puIHRy4bqhbmcgdGjDoWkgaGnhu4duIHThuqFpIG7hur91IGtow7RuZyBwaOG6o2kgbG9nb3V0L2Rpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRbInN0YXR1cyJdID0gZXhpc3RpbmdfYWNjb3VudC5nZXQoInN0YXR1cyIsICJhY3RpdmUiKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBj4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IGNobyB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIFRow6ptIHTDoGkga2hv4bqjbiBt4bubaSB24bubaSB0cuG6oW5nIHRow6FpIGFjdGl2ZQogICAgICAgICAgICAgICAgICAgIGFjY291bnRbInN0YXR1cyJdID0gImFjdGl2ZSIKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLmFkZF9hY2NvdW50KGFjY291bnQpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdGjDqm0gdMOgaSBraG/huqNuIG3hu5tpIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IGNobyB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTYXUga2hpIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4ssIHRo4buxYyBoaeG7h24gbWFwcGluZyB24bubaSBHb0xpa2UKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkLhuq90IMSR4bqndSBtYXBwaW5nIHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0gduG7m2kgR29MaWtlLi4uIikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBHb0xpa2UKICAgICAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50cyA9IHNlbGYuZ2V0X2dvbGlrZV9hY2NvdW50cygpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGdvbGlrZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkge2xlbihnb2xpa2VfYWNjb3VudHMpfSB0w6BpIGtob+G6o24gR29MaWtlIGNobyB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gxJHDoyBj4bqtcCBuaOG6rXQgdOG7qyBEQgogICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfZGV2aWNlX2FjY291bnRzID0gc2VsZi5kYi5nZXRfYWNjb3VudHMoYXBwPXNlbGYuYXBwX25hbWUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIG1hcHBpbmcKICAgICAgICAgICAgICAgICAgICBtYXBwZWRfY291bnQgPSBzZWxmLm1hcF9nb2xpa2VfYWNjb3VudHMoZ29saWtlX2FjY291bnRzLCB1cGRhdGVkX2RldmljZV9hY2NvdW50cykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG1hcHBlZF9jb3VudCwgaW50KToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbWFwcGluZyB7bWFwcGVkX2NvdW50fSB0w6BpIGtob+G6o24ge3NlbGYuYXBwX25hbWV9IHbhu5tpIEdvTGlrZSIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkhvw6BuIHRow6BuaCBtYXBwaW5nIHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0gduG7m2kgR29MaWtlIikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24gR29MaWtlIG7DoG8gY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgbWFwcGluZyB24bubaSBHb0xpa2U6IHtlfSIpCiAgICAgICAgICAgICAgICAjIEtow7RuZyB0aHJvdyBleGNlcHRpb24gdsOsIHN5bmMgdMOgaSBraG/huqNuIHThu6sgdGhp4bq/dCBi4buLIMSRw6MgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIGRldmljZV9hY2NvdW50cwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIMSR4buTbmcgYuG7mSB0w6BpIGtob+G6o24ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgZGVmIGlzX2dvbGlrZV9hdXRoZW50aWNhdGVkKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjw7MgdGjDtG5nIHRpbiB4w6FjIHRo4buxYyBHb0xpa2UgY2jGsGEKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRw6MgeMOhYyB0aOG7sWMsIEZhbHNlIG7hur91IGNoxrBhCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2hlYWRlcnMgPSBzZWxmLmRiLmdldCgiZ29saWtlX2hlYWRlcnMiLCB7fSkKICAgICAgICByZXR1cm4gYm9vbChnb2xpa2VfaGVhZGVycyBhbmQgImF1dGhvcml6YXRpb24iIGluIGdvbGlrZV9oZWFkZXJzKQogICAgCiAgICBkZWYgYXBpX3JlcXVlc3Qoc2VsZiwgdXJsOiBzdHIsIG1ldGhvZDogc3RyID0gIkdFVCIsIHBheWxvYWQ6IERpY3Rbc3RyLCBBbnldID0gTm9uZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEfhu41pIEFQSSBHb0xpa2UgdGjDtG5nIHF1YSBHb0xpa2VTZXJ2aWNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdXJsOiBVUkwgY+G7p2EgQVBJCiAgICAgICAgICAgIG1ldGhvZDogUGjGsMahbmcgdGjhu6ljIEhUVFAgKEdFVCBob+G6t2MgUE9TVCkKICAgICAgICAgICAgcGF5bG9hZDogROG7ryBsaeG7h3UgZ+G7rWkgxJFpIChjaG8gUE9TVCByZXF1ZXN0KQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0IGhv4bq3YyBOb25lOiBL4bq/dCBxdeG6oyBBUEkgbuG6v3UgdGjDoG5oIGPDtG5nLCBOb25lIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBzZWxmLmdvbGlrZV9zZXJ2aWNlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBn4buNaSBBUEk6IEdvTGlrZVNlcnZpY2UgY2jGsGEgxJHGsOG7o2MgY3VuZyBj4bqlcCBjaG8ge3NlbGYuYXBwX25hbWV9IGpvYiIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICMgWOG7rSBsw70gcGF5bG9hZCBjaG8gR0VUIHJlcXVlc3QgLSB0aMOqbSB2w6BvIFVSTAogICAgICAgIGlmIG1ldGhvZC51cHBlcigpID09ICJHRVQiIGFuZCBwYXlsb2FkOgogICAgICAgICAgICAjIFThuqFvIHF1ZXJ5IHN0cmluZyB04burIHBheWxvYWQKICAgICAgICAgICAgcXVlcnlfcGFyYW1zID0gW10KICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gcGF5bG9hZC5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcXVlcnlfcGFyYW1zLmFwcGVuZChmInt1cmxsaWIucGFyc2UucXVvdGUoa2V5KX09e3VybGxpYi5wYXJzZS5xdW90ZShzdHIodmFsdWUpKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBxdWVyeSBzdHJpbmcgdsOgbyBVUkwKICAgICAgICAgICAgaWYgcXVlcnlfcGFyYW1zOgogICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gIiYiIGlmICI/IiBpbiB1cmwgZWxzZSAiPyIKICAgICAgICAgICAgICAgIHVybCA9IGYie3VybH17c2VwYXJhdG9yfXsnJicuam9pbihxdWVyeV9wYXJhbXMpfSIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhurd0IHBheWxvYWQgduG7gSBOb25lIHbDrCDEkcOjIMSRxrBhIHbDoG8gVVJMCiAgICAgICAgICAgIHBheWxvYWQgPSBOb25lCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHNlbGYuZ29saWtlX3NlcnZpY2UuYXBpX3JlcXVlc3QodXJsLCBtZXRob2QsIHBheWxvYWQpCiAgICAKICAgIGRlZiBnZXRfZ29saWtlX2FjY291bnRzKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIMSRw6MgxJHEg25nIGvDvSB24bubaSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gR29MaWtlCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQxrDhu51uZyBk4bqrbiBBUEkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgdXJsID0gZiJ7c2VsZi5nZXRfYWNjb3VudF91cmwoKX0iCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3QodXJsKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgIGFjY291bnRzID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgW10pCiAgICAgICAgICAgICAgICByZXR1cm4gYWNjb3VudHMKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gR29MaWtlIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBtYXBfZ29saWtlX2FjY291bnRzKHNlbGYsIGdvbGlrZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0sIGRldmljZV9hY2NvdW50czogTGlzdFtEaWN0W3N0ciwgQW55XV0pIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMOBbmggeOG6oSB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZ29saWtlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSBBUEkKICAgICAgICAgICAgZGV2aWNlX2FjY291bnRzOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggdMOgaSBraG/huqNuIMSRw6Mgw6FuaCB44bqhCiAgICAgICAgIiIiCiAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgbeG6t2MgxJHhu4tuaCwgY+G6p24gb3ZlcnJpZGUg4bufIGzhu5twIGNvbgogICAgICAgIHJldHVybiBbXQogICAgCiAgICBkZWYgZmV0Y2hfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGjDtG5nIHRpbiBqb2IgdOG7qyBHb0xpa2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0IGhv4bq3YyBOb25lOiBUaMO0bmcgdGluIGpvYiBu4bq/dSBjw7MsIE5vbmUgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkMaw4budbmcgZOG6q24gQVBJIGzhuqV5IGpvYgogICAgICAgICAgICB1cmwgPSBmIntzZWxmLmdldF9qb2JzX3VybCgpfSIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGhhbSBz4buRIHTDuXkgdGhlbyBsb+G6oWkgYXBwCiAgICAgICAgICAgIHBhcmFtcyA9IHNlbGYuZ2V0X2pvYl9wYXJhbXMoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdCh1cmwsICJHRVQiLCBwYXJhbXMpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2UuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgam9iID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwgTm9uZSkKICAgICAgICAgICAgICAgIGlmIGpvYjoKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSBqb2IKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5tYXBfam9iX2RhdGEoam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGpvYiIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAKICAgIGRlZiBtYXBfam9iX2RhdGEoc2VsZiwgam9iX2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaHXhuqluIGjDs2EgZOG7ryBsaeG7h3Ugam9iIHThu6sgQVBJCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX2RhdGE6IEThu68gbGnhu4d1IGpvYiB04burIEFQSQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogROG7ryBsaeG7h3Ugam9iIMSRw6MgY2h14bqpbiBow7NhCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImFwcCI6IHNlbGYuYXBwX25hbWUsCiAgICAgICAgICAgICJpZCI6IGpvYl9kYXRhLmdldCgiaWQiKSwKICAgICAgICAgICAgImxpbmsiOiBqb2JfZGF0YS5nZXQoImxpbmsiKSwKICAgICAgICAgICAgInR5cGUiOiBqb2JfZGF0YS5nZXQoInR5cGUiKSwKICAgICAgICAgICAgIm9iamVjdF9pZCI6IGpvYl9kYXRhLmdldCgib2JqZWN0X2lkIiksCiAgICAgICAgICAgICJwcmljZV9hZnRlcl9jb3N0Ijogam9iX2RhdGEuZ2V0KCJwcmljZV9hZnRlcl9jb3N0IiksCiAgICAgICAgICAgICJzdGF0dXMiOiAiaWRsZSIsICAjIFN0YXR1cyBt4bq3YyDEkeG7i25oIGzDoCBpZGxlCiAgICAgICAgICAgICJyYXdfZGF0YSI6IGpvYl9kYXRhICAjIEzGsHUgbOG6oWkgZOG7ryBsaeG7h3UgZ+G7kWMgxJHhu4MgdGhhbSBraOG6o28ga2hpIGPhuqduCiAgICAgICAgfQogICAgCiAgICBkZWYgdmFsaWRhdGVfam9iX2JlZm9yZV9leGVjdXRpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgdsOgIHZhbGlkYXRlIGpvYiB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHZhbGlkYXRpb246CiAgICAgICAgICAgICAgICAtIHZhbGlkIChib29sKTogVHJ1ZSBu4bq/dSBqb2IgaOG7o3AgbOG7hywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgICAgICAgICAtIHNob3VsZF9za2lwIChib29sKTogVHJ1ZSBu4bq/dSBuw6puIHNraXAgam9iLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAgICAgICAgIC0gcmVhc29uIChzdHIpOiBMw70gZG8ga2jDtG5nIGjhu6NwIGzhu4cgaG/hurdjIHNraXAKICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8gY2hpIHRp4bq/dAogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX3R5cGUgPSBqb2IuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgam9iX3ByaWNlID0gam9iLmdldCgicHJpY2VfYWZ0ZXJfY29zdCIsIDApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgam9iIGZvbGxvdwogICAgICAgICAgICBpZiBqb2JfdHlwZSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgICMgMS4gS2nhu4NtIHRyYSBnacOhIHRp4buBbiBj4bunYSBqb2IgZm9sbG93CiAgICAgICAgICAgICAgICBtaW5fZm9sbG93X3ByaWNlID0gc2VsZi5kYi5nZXQoIm1pbl9mb2xsb3dfcHJpY2UiLCAzMCkgICMgTeG6t2MgxJHhu4tuaCAzMAogICAgICAgICAgICAgICAgaWYgam9iX3ByaWNlIDwgbWluX2ZvbGxvd19wcmljZToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAidmFsaWQiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBmIkpvYiBmb2xsb3cgY8OzIGdpw6Ege2pvYl9wcmljZX0gPCB7bWluX2ZvbGxvd19wcmljZX0sIHNraXAgam9iLiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoyBi4buPIGtp4buDbSB0cmEga2jDs2EgZm9sbG93IHbDrCBraMO0bmcgY8OybiBnaeG7m2kgaOG6oW4gZm9sbG93CiAgICAgICAgICAgIAogICAgICAgICAgICAjIEpvYiBo4bujcCBs4buHCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAidmFsaWQiOiBUcnVlLAogICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogRmFsc2UsCiAgICAgICAgICAgICAgICAibWVzc2FnZSI6ICJKb2IgaOG7o3AgbOG7hyIKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB2YWxpZGF0ZSBqb2I6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJ2YWxpZCI6IEZhbHNlLAogICAgICAgICAgICAgICAgInNob3VsZF9za2lwIjogRmFsc2UsCiAgICAgICAgICAgICAgICAicmVhc29uIjogInZhbGlkYXRpb25fZXJyb3IiLAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBmIkzhu5dpIGtoaSB2YWxpZGF0ZSBqb2I6IHtzdHIoZSl9IgogICAgICAgICAgICB9CiAgICAKICAgIGRlZiBleGVjdXRlX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiwgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDA6IENoxrBhIHRo4buxYyBoaeG7h24KICAgICAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAyOiBUaOG6pXQgYuG6oWksIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgICAgICAgICAzOiBUaOG6pXQgYuG6oWksIMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgICAgIC0gc3VjY2VzcyAoYm9vbCk6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICAjIE3hurdjIMSR4buLbmgga2jDtG5nIGzDoG0gZ8OsLCBj4bqnbiBvdmVycmlkZSDhu58gbOG7m3AgY29uCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gam9iIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0iKQogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJzdGF0dXMiOiAwLAogICAgICAgICAgICAibWVzc2FnZSI6ICJDaMawYSB0aOG7sWMgaGnhu4duIGpvYiIsCiAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICB9CiAgICAKICAgIGRlZiByZXBvcnRfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldLCByZXN1bHQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIELDoW8gY8OhbyBr4bq/dCBxdeG6oyBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlc3VsdDogS+G6v3QgcXXhuqMgdGjhu7FjIGhp4buHbiBqb2IgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGLDoW8gY8OhbyB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgICAgICBqb2JfdHlwZSA9IGpvYi5nZXQoInR5cGUiLCAiIikKICAgICAgICAgICAgam9iX3N0YXR1cyA9IHJlc3VsdC5nZXQoInN0YXR1cyIsIDApCiAgICAgICAgICAgIGpvYl9zdWNjZXNzID0gcmVzdWx0LmdldCgic3VjY2VzcyIsIEZhbHNlKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHaGkgbOG6oWkgbOG7i2NoIHPhu60gam9iCiAgICAgICAgICAgIHNlbGYucmVjb3JkX2pvYl9oaXN0b3J5KGFjY291bnQsIGpvYiwgcmVzdWx0KQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGpvYl9pZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIElEIGpvYiDEkeG7gyBiw6FvIGPDoW8iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgam9iIHbDoCB44butIGzDvSB0xrDGoW5nIOG7qW5nCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHN0YXR1cyBsw6AgMiAobOG7l2kga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZyksIGjhu6d5IGpvYiB2w6AgYsOhbyBjw6FvIHRo4bqldCBi4bqhaQogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIHtqb2JfaWR9LCBraMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nLCBo4buneSBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBzdGF0dXMgbMOgIDMgKMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UpLCDEkeG6v20gc+G7kSBs4bqnbiB2w6AgdOG6oW0gZOG7q25nIHTDoGkga2hv4bqjbiBraGkgxJHhuqF0IDUgbOG6p24KICAgICAgICAgICAgaWYgam9iX3N0YXR1cyA9PSAzOgogICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGFjY291bnRbImlkIl0KICAgICAgICAgICAgICAgIGFjY291bnRfdXNlcm5hbWUgPSBhY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBI4buneSBqb2IgaGnhu4duIHThuqFpCiAgICAgICAgICAgICAgICBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBM4bqleSBz4buRIGzhuqduIHVuZm9sbG93L3VubGlrZSBoaeG7h24gdOG6oWkgdOG7qyBtZW1vcnkgdsOgIHTEg25nIGzDqm4gMQogICAgICAgICAgICAgICAgdW5mb2xsb3dfY291bnQgPSBzZWxmLnVuZm9sbG93X2NvdW50cy5nZXQoYWNjb3VudF9pZCwgMCkgKyAxCiAgICAgICAgICAgICAgICBzZWxmLnVuZm9sbG93X2NvdW50c1thY2NvdW50X2lkXSA9IHVuZm9sbG93X2NvdW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJQaMOhdCBoaeG7h24gYuG7iyB1bmZvbGxvdy91bmxpa2UgbOG6p24ge3VuZm9sbG93X2NvdW50fSwgdMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTOG6pXkgY+G6pXUgaMOsbmggc+G7kSBs4bqnbiB04buRaSDEkWEgdsOgIHRo4budaSBnaWFuIHBlbmFsdHkgdOG7qyBjb25maWcgaG/hurdjIGRhdGFiYXNlCiAgICAgICAgICAgICAgICBtYXhfdW5mb2xsb3dfYXR0ZW1wdHMgPSBzZWxmLmRiLmdldCgibWF4X3VuZm9sbG93X2F0dGVtcHRzIiwgY29uZmlnLk1BWF9VTkZPTExPV19BVFRFTVBUUykKICAgICAgICAgICAgICAgIHVuZm9sbG93X3BlbmFsdHlfaG91cnMgPSBzZWxmLmRiLmdldCgidW5mb2xsb3dfcGVuYWx0eV9ob3VycyIsIGNvbmZpZy5VTkZPTExPV19QRU5BTFRZX0hPVVJTKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IMSR4bqhdCBz4buRIGzhuqduIHThu5FpIMSRYSB0aMOsIHThuqFtIGThu6tuZyB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgIGlmIHVuZm9sbG93X2NvdW50ID49IG1heF91bmZvbGxvd19hdHRlbXB0czoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiVMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlIHt1bmZvbGxvd19jb3VudH0gbOG6p24gLSBU4bqhbSBk4burbmcge3VuZm9sbG93X3BlbmFsdHlfaG91cnN9aCIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBU4bqhbSBk4burbmcgdMOgaSBraG/huqNuIHRoZW8gY+G6pXUgaMOsbmggdsOgIHJlc2V0IGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNldF9hY2NvdW50X2luYWN0aXZlKAogICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2lkLCAKICAgICAgICAgICAgICAgICAgICAgICAgY29vbGRvd25fbWludXRlcz11bmZvbGxvd19wZW5hbHR5X2hvdXJzICogNjAsICAjIENodXnhu4NuIHThu6sgZ2nhu50gc2FuZyBwaMO6dAogICAgICAgICAgICAgICAgICAgICAgICBpbmFjdGl2ZV9yZWFzb249ZiJC4buLIHBow6F0IGhp4buHbiB1bmZvbGxvdy91bmxpa2Uge3VuZm9sbG93X2NvdW50fSBs4bqnbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBSZXNldCBjb3VudGVyIHRyb25nIG1lbW9yeSBzYXUga2hpIHThuqFtIGThu6tuZwogICAgICAgICAgICAgICAgICAgIHNlbGYudW5mb2xsb3dfY291bnRzW2FjY291bnRfaWRdID0gMAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSAoe3NlbGYuYXBwX25hbWV9KSBi4buLIHThuqFtIGThu6tuZyB7dW5mb2xsb3dfcGVuYWx0eV9ob3Vyc31oIGRvIHVuZm9sbG93L3VubGlrZSB7dW5mb2xsb3dfY291bnR9IGzhuqduIikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjb3VudF91c2VybmFtZX0gY8OybiB7bWF4X3VuZm9sbG93X2F0dGVtcHRzIC0gdW5mb2xsb3dfY291bnR9IGzhuqduIGPhuqNuaCBiw6FvIHRyxrDhu5tjIGtoaSBi4buLIHThuqFtIGThu6tuZyIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgam9iX3N0YXR1cyA9PSA0OgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlnDqnUgY+G6p3UgxJFhbmcgY2jhu50gdHJvbmcgam9iIHtqb2JfdHlwZX0sIGjhu6d5IGpvYiIpCiAgICAgICAgICAgICAgICBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBqb2IgdGjDoG5oIGPDtG5nLCBiw6FvIGPDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgaWYgam9iX3N1Y2Nlc3M6CiAgICAgICAgICAgICAgICAjIFVSTCBBUEkgYsOhbyBjw6FvIGpvYgogICAgICAgICAgICAgICAgdXJsID0gZiJhZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9jb21wbGV0ZS1qb2JzIgogICAgICAgICAgICAgICAgdXJsID0gZiJhZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9jb21wbGV0ZS1qb2JzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFThuqFvIHBheWxvYWQgY2hvIGLDoW8gY8OhbyBqb2IKICAgICAgICAgICAgICAgIHBheWxvYWQgPSBzZWxmLmdldF9yZXBvcnRfcGF5bG9hZChhY2NvdW50LCBqb2IpCiAgICAgICAgICAgICAgICBpZiBub3QgcGF5bG9hZDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHThuqFvIHBheWxvYWQgY2hvIGLDoW8gY8OhbyBqb2IiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRo4butIGfhu41pIEFQSSB04buRaSDEkWEgMyBs4bqnbgogICAgICAgICAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UoMyk6CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLmFwaV9yZXF1ZXN0KHVybCwgIlBPU1QiLCBwYXlsb2FkKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLDoW8gY8OhbyBqb2Ige2pvYl9pZH0gdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzZXQgY291bnRlciB1bmZvbGxvdy91bmxpa2UgdHJvbmcgbWVtb3J5IGtoaSBqb2IgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBhY2NvdW50WyJpZCJdCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFjY291bnRfaWQgaW4gc2VsZi51bmZvbGxvd19jb3VudHMgYW5kIHNlbGYudW5mb2xsb3dfY291bnRzW2FjY291bnRfaWRdID4gMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudW5mb2xsb3dfY291bnRzW2FjY291bnRfaWRdID0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiLEkMOjIHJlc2V0IHVuZm9sbG93X2NvdW50IHbhu4EgMCBjaG8gdMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgZWxpZiByZXNwb25zZSBhbmQgcmVzcG9uc2UuZ2V0KCJzdGF0dXMiKSA9PSA0MDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX21zZyA9IHJlc3BvbnNlLmdldCgnbWVzc2FnZScsICcnKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIlt7YXR0ZW1wdCArIDF9XSBCw6FvIGPDoW8gam9iIGzhu5dpOiB7ZXJyb3JfbXNnfSwgdGjhu60gbOG6oWkgc2F1IDVzLi4uIikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIlBo4bqjbiBo4buTaSBraMO0bmcgbW9uZyDEkeG7o2kga2hpIGLDoW8gY8OhbyBqb2I6IHtyZXNwb25zZX0iKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0aMOgbmggY8O0bmcgc2F1IDMgbOG6p24gdGjhu60sIGjhu6d5IGpvYgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgYsOhbyBjw6FvIGpvYiB7am9iX2lkfSBzYXUgMyBs4bqnbiB0aOG7rSIpCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5za2lwX2pvYihhY2NvdW50LCBqb2IpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEpvYiBraMO0bmcgdGjDoG5oIGPDtG5nLCBo4buneSBqb2IKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJKb2Ige2pvYl9pZH0ga2jDtG5nIHRow6BuaCBjw7RuZywgaOG7p3kgam9iIikKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgYsOhbyBjw6FvIGpvYiIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZ2V0X3JlcG9ydF9wYXlsb2FkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBU4bqhbyBwYXlsb2FkIGNobyB2aeG7h2MgYsOhbyBjw6FvIGhvw6BuIHRow6BuaCBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBQYXlsb2FkIGNobyBBUEkgYsOhbyBjw6FvCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgIAogICAgICAgIGlmIG5vdCBnb2xpa2VfaWQgb3Igbm90IGpvYl9pZDoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIlRoaeG6v3UgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24gaG/hurdjIGpvYiDEkeG7gyB04bqhbyBwYXlsb2FkIGLDoW8gY8OhbyIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiYWRzX2lkIjogam9iX2lkLAogICAgICAgICAgICAiYWNjb3VudF9pZCI6IGdvbGlrZV9pZCwKICAgICAgICAgICAgImFzeW5jIjogVHJ1ZSwKICAgICAgICAgICAgImRhdGEiOiBOb25lCiAgICAgICAgfQogICAgCiAgICBkZWYgZ2V0X3NraXBfcGF5bG9hZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVOG6oW8gcGF5bG9hZCBjaG8gdmnhu4djIGLhu48gcXVhL2jhu6d5IGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFBheWxvYWQgY2hvIEFQSSBza2lwIGpvYgogICAgICAgICIiIgogICAgICAgIGdvbGlrZV9pZCA9IGFjY291bnQuZ2V0KCJnb2xpa2VfaWQiKQogICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICBqb2JfdHlwZSA9IGpvYi5nZXQoInR5cGUiKQogICAgICAgIG9iamVjdF9pZCA9IGpvYi5nZXQoIm9iamVjdF9pZCIpCiAgICAgICAgCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZCBvciBub3Qgam9iX2lkOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiVGhp4bq/dSB0aMO0bmcgdGluIHTDoGkga2hv4bqjbiBob+G6t2Mgam9iIMSR4buDIHThuqFvIHBheWxvYWQgaOG7p3kiKQogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImFkc19pZCI6IGpvYl9pZCwKICAgICAgICAgICAgImFjY291bnRfaWQiOiBnb2xpa2VfaWQsCiAgICAgICAgICAgICJvYmplY3RfaWQiOiBvYmplY3RfaWQsCiAgICAgICAgICAgICJ0eXBlIjogam9iX3R5cGUKICAgICAgICB9CiAgICAgICAgCiAgICBkZWYgc2tpcF9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQuG7jyBxdWEvaOG7p3kgam9iIGhp4buHbiB04bqhaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBo4buneSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIGltcG9ydCBjb25maWcKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVVJMIEFQSSDEkeG7gyBza2lwIGpvYgogICAgICAgICAgICB1cmwgPSBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS9hZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9za2lwLWpvYnMiCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIHBheWxvYWQgY2hvIHZp4buHYyBza2lwIGpvYgogICAgICAgICAgICBwYXlsb2FkID0gc2VsZi5nZXRfc2tpcF9wYXlsb2FkKGFjY291bnQsIGpvYikKICAgICAgICAgICAgaWYgbm90IHBheWxvYWQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHThuqFvIHBheWxvYWQgY2hvIHNraXAgam9iIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBBUEkKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLmFwaV9yZXF1ZXN0KHVybCwgIlBPU1QiLCBwYXlsb2FkKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3VjY2VzcyIsIEZhbHNlKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGjhu6d5IGpvYiB7am9iLmdldCgnaWQnKX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiSOG7p3kgam9iIHtqb2IuZ2V0KCdpZCcpfSB0aOG6pXQgYuG6oWk6IHtyZXNwb25zZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGjhu6d5IGpvYiIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgZGVmIGNsb3NlX2FwcChzZWxmKToKICAgICAgICAiIiIKICAgICAgICDEkMOzbmcgYXBwCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5oZWxwZXIuY2xvc2VfYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICBkZWYgZ2V0X2FwaV9iYXNlX3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIGfhu5FjIGPhu6dhIEFQSSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBn4buRYwogICAgICAgICIiIgogICAgICAgIGltcG9ydCBjb25maWcKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0ve3NlbGYuYXBwX25hbWV9IgogICAgCiAgICBkZWYgZ2V0X2FjY291bnRfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIHTDoGkga2hv4bqjbiBj4bunYSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgdMOgaSBraG/huqNuCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0tYWNjb3VudCIKICAgIAogICAgZGVmIGdldF9qb2JzX3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBqb2JzIGPhu6dhIEdvTGlrZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBqb2JzCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS9hZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9qb2JzIgogICAgCiAgICBkZWYgZ2V0X2pvYl9yZXBvcnRfdXJsKHNlbGYsIGpvYl9pZDogc3RyKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBiw6FvIGPDoW8gam9iIGPhu6dhIEdvTGlrZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGpvYl9pZDogSUQgY+G7p2Egam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBiw6FvIGPDoW8gam9iCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0vam9icy97am9iX2lkfS9yZXBvcnQiCiAgICAKICAgIGRlZiBnZXRfam9iX3BhcmFtcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGhhbSBz4buRIMSR4buDIGfhu41pIEFQSSBs4bqleSBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgIyBN4bq3YyDEkeG7i25oIGtow7RuZyBjw7MgdGhhbSBz4buRLCBj4bqnbiBvdmVycmlkZSDhu58gbOG7m3AgY29uCiAgICAgICAgcmV0dXJuIHt9CiAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiUGjGsMahbmcgdGjhu6ljIGPGoSBz4bufIMSR4buDIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuLCBj4bqnbiBvdmVycmlkZSDhu58gY2xhc3MgY29uIiIiCiAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBzZXRfc2xlZXBfZnVuY3Rpb24oc2VsZiwgc2xlZXBfZnVuYzogQ2FsbGFibGVbW2Zsb2F0XSwgYm9vbF0pOgogICAgICAgICIiIgogICAgICAgIMSQ4bq3dCBow6BtIHNsZWVwIHTDuXkgY2jhu4luaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHNsZWVwX2Z1bmM6IEjDoG0gc2xlZXAgbmjhuq1uIG3hu5l0IHRoYW0gc+G7kSBsw6Agc+G7kSBnacOieSB2w6AgdHLhuqMgduG7gSBUcnVlIG7hur91IHNsZWVwIMSR4bunIHRo4budaSBnaWFuLAogICAgICAgICAgICAgICAgICAgICAgICBGYWxzZSBu4bq/dSBi4buLIGThu6tuZyBs4bqhaQogICAgICAgICIiIgogICAgICAgIHNlbGYuX3NsZWVwX2Z1bmMgPSBzbGVlcF9mdW5jCiAgICAgICAgCiAgICBkZWYgc2FmZV9zbGVlcChzZWxmLCBzZWNvbmRzOiBmbG9hdCkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBOZ+G7pyBhbiB0b8OgbiwgY8OzIHRo4buDIGThu6tuZyBs4bqhaSBuZ2F5IGzhuq1wIHThu6ljCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2Vjb25kczogU+G7kSBnacOieSBj4bqnbiBuZ+G7pwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IG5n4bunIMSR4bunIHRo4budaSBnaWFuLCBGYWxzZSBu4bq/dSBi4buLIGThu6tuZyBs4bqhaQogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLl9zbGVlcF9mdW5jKHNlY29uZHMpCiAgICAKICAgIGRlZiBzd2l0Y2hfdG9fYWNjb3VudChzZWxmLCB0YXJnZXRfYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ2h1eeG7g24gxJHhu5VpIHNhbmcgdMOgaSBraG/huqNuIG3hu6VjIHRpw6p1CiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBjaHV54buDbiDEkeG7lWkgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBjaHV54buDbiDEkeG7lWkgc2FuZyB0w6BpIGtob+G6o24ge3RhcmdldF9hY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJ3Vua25vd24nKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6t3QgdGjhu51pIGdpYW4gY2jhu50gdOG7kWkgxJFhIChnacOieSkKICAgICAgICAgICAgdGltZW91dCA9IDYwCiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB1c2VybmFtZSBj4bunYSB0w6BpIGtob+G6o24gxJFhbmcgxJHEg25nIG5o4bqtcAogICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lID0gc2VsZi5nZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoKQogICAgICAgICAgICB0YXJnZXRfdXNlcm5hbWUgPSB0YXJnZXRfYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IMSRw6MgxJHEg25nIG5o4bqtcCDEkcO6bmcgdMOgaSBraG/huqNuIHLhu5NpLCBraMO0bmcgY+G6p24gY2h1eeG7g24gxJHhu5VpCiAgICAgICAgICAgIGlmIGN1cnJlbnRfdXNlcm5hbWUgYW5kIGN1cnJlbnRfdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgxJHEg25nIG5o4bqtcCB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gcuG7k2kiKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgY2jGsGEgxJHEg25nIG5o4bqtcCDEkcO6bmcgdMOgaSBraG/huqNuLCB0aOG7sWMgaGnhu4duIGNodXnhu4NuIMSR4buVaQogICAgICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUgPCB0aW1lb3V0OgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgUGjGsMahbmcgdGjhu6ljIG7DoHkgc+G6vSDEkcaw4bujYyBnaGkgxJHDqCBi4bufaSBs4bubcCBjb24gdMO5eSB0aGVvIOG7qW5nIGThu6VuZwogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBzZWxmLl9wZXJmb3JtX2FjY291bnRfc3dpdGNoKHRhcmdldF9hY2NvdW50KQogICAgICAgICAgICAgICAgICAgIGlmIHN1Y2Nlc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICMgxJDhu6NpIG3hu5l0IGNow7p0IMSR4buDIOG7qW5nIGThu6VuZyBsb2FkIHhvbmcKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgeGVtIMSRw6MgY2h1eeG7g24gxJHDum5nIHTDoGkga2hv4bqjbiBjaMawYQogICAgICAgICAgICAgICAgICAgICAgICBuZXdfdXNlcm5hbWUgPSBzZWxmLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiBuZXdfdXNlcm5hbWUgYW5kIG5ld191c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIMSRxINuZyBuaOG6rXAgdHJvbmcgREIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIucmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudCh0YXJnZXRfYWNjb3VudFsiaWQiXSwgeyJpc19sb2dpbiI6IFRydWUsICJpc19zeW5jIjogRmFsc2V9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgY2jGsGEgdGjDoG5oIGPDtG5nLCDEkeG7o2kgbeG7mXQgY2jDunQgcuG7k2kgdGjhu60gbOG6oWkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o246IHtzdHIoZSl9IikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGNodXnhu4NuIHNhbmcgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHNhdSB7dGltZW91dH0gZ2nDonkiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o24iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoKHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGPDoWMgdGhhbyB0w6FjIFVJIMSR4buDIGNodXnhu4NuIHTDoGkga2hv4bqjbgogICAgICAgIFBoxrDGoW5nIHRo4bupYyBuw6B5IGPhuqduIMSRxrDhu6NjIGdoaSDEkcOoIGLhu59pIGzhu5twIGNvbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhcmdldF9hY2NvdW50OiBUw6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24gxJHhur9uCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICAjIFBoxrDGoW5nIHRo4bupYyBjxqEgc+G7nyBjaOG7iSBsb2cgY+G6o25oIGLDoW8KICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiUGjGsMahbmcgdGjhu6ljIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoIGNoxrBhIMSRxrDhu6NjIHRyaeG7g24ga2hhaSBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHIgaG/hurdjIE5vbmU6IFVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wLCBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgY8ahIHPhu58gY2jhu4kgbG9nIGPhuqNuaCBiw6FvCiAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlBoxrDGoW5nIHRo4bupYyBnZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUgY2jGsGEgxJHGsOG7o2MgdHJp4buDbiBraGFpIGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgcmVjb3JkX2pvYl9oaXN0b3J5KHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldLCByZXN1bHQ6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgR2hpIGzhuqFpIGzhu4tjaCBz4butIGpvYiB2w6BvIGRhdGFiYXNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICByZXN1bHQ6IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVVJRCBj4bunYSBi4bqjbiBnaGkgbOG7i2NoIHPhu60gam9iIGhv4bq3YyBjaHXhu5dpIHLhu5duZyBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkCiAgICAgICAgICAgIGRldmljZV9pZCA9IHNlbGYuZGIuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHXhuqluIGLhu4sgZOG7ryBsaeG7h3Ugam9iIGhpc3RvcnkKICAgICAgICAgICAgam9iX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAiYWNjb3VudF91dWlkIjogYWNjb3VudC5nZXQoImFjY291bnRfdXVpZCIsICIiKSwKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsCiAgICAgICAgICAgICAgICAiYXBwIjogc2VsZi5hcHBfbmFtZSwKICAgICAgICAgICAgICAgICJqb2JfaWQiOiBqb2IuZ2V0KCJpZCIsICIiKSwKICAgICAgICAgICAgICAgICJqb2JfdHlwZSI6IGpvYi5nZXQoInR5cGUiLCAiIiksCiAgICAgICAgICAgICAgICAib2JqZWN0X2lkIjogam9iLmdldCgib2JqZWN0X2lkIiwgIiIpLAogICAgICAgICAgICAgICAgImxpbmsiOiBqb2IuZ2V0KCJsaW5rIiwgIiIpLAogICAgICAgICAgICAgICAgInN0YXR1cyI6IHJlc3VsdC5nZXQoInN0YXR1cyIsIDApLAogICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiByZXN1bHQuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpLAogICAgICAgICAgICAgICAgInByaWNlIjogam9iLmdldCgicHJpY2VfYWZ0ZXJfY29zdCIsIDApLAogICAgICAgICAgICAgICAgImVycm9yX21lc3NhZ2UiOiByZXN1bHQuZ2V0KCJtZXNzYWdlIiwgIiIpIGlmIG5vdCByZXN1bHQuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpIGVsc2UgIiIsCiAgICAgICAgICAgICAgICAiY3JlYXRlZF9hdCI6IGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlICAjIMSQ4bqjbSBi4bqjbyB0cuG6oW5nIHRow6FpIGzDoCBjaMawYSDEkeG7k25nIGLhu5kKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBMxrB1IHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgam9iX3V1aWQgPSBzZWxmLmRiLmFkZF9qb2JfaGlzdG9yeShqb2JfZGF0YSkKICAgICAgICAgICAgaWYgam9iX3V1aWQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIsSQw6MgbMawdSBs4buLY2ggc+G7rSBqb2Ige2pvYi5nZXQoJ2lkJyl9IHbDoG8gZGF0YWJhc2UgduG7m2kgVVVJRDoge2pvYl91dWlkfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHRo4buDIGzGsHUgbOG7i2NoIHPhu60gam9iIHtqb2IuZ2V0KCdpZCcpfSB2w6BvIGRhdGFiYXNlIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBqb2JfdXVpZAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgZ2hpIGzhu4tjaCBz4butIGpvYiIpCiAgICAgICAgICAgIHJldHVybiAiIgoKICAgIGRlZiByZXBvcnRfam9iX2NvbXBsZXRlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSwgcmVwb3J0X2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBCw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICByZXBvcnRfZGF0YTogROG7ryBsaeG7h3UgYsOhbyBjw6FvCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyBiw6FvIGPDoW8gdOG7qyBBUEkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgam9iX2lkIHThu6sgam9iCiAgICAgICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICAgICAgaWYgbm90IGpvYl9pZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgam9iX2lkIHRyb25nIGpvYiIpCiAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAiZXJyb3IiLCAibWVzc2FnZSI6ICJLaMO0bmcgdMOsbSB0aOG6pXkgam9iX2lkIHRyb25nIGpvYiJ9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHXhuqluIGLhu4sgZOG7ryBsaeG7h3UgYsOhbyBjw6FvCiAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAiaWQiOiBqb2JfaWQsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IGLDoW8gY8OhbyBu4bq/dSBjw7MKICAgICAgICAgICAgaWYgcmVwb3J0X2RhdGE6CiAgICAgICAgICAgICAgICBwYXlsb2FkLnVwZGF0ZShyZXBvcnRfZGF0YSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oCiAgICAgICAgICAgIHVybCA9IGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2NvbXBsZXRlLWpvYnMiCiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuZ29saWtlX3NlcnZpY2UuYXBpX3JlcXVlc3QodXJsLCBtZXRob2Q9IlBPU1QiLCBwYXlsb2FkPXBheWxvYWQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oIikKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oIn0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBiw6FvIGPDoW8gam9iIHtqb2JfaWR9IGhvw6BuIHRow6BuaCB0aMOgbmggY8O0bmciKQogICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAic3VjY2VzcyIsICJtZXNzYWdlIjogIsSQw6MgYsOhbyBjw6FvIGpvYiBob8OgbiB0aMOgbmggdGjDoG5oIGPDtG5nIiwgImRhdGEiOiByZXN1bHR9CiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgYsOhbyBjw6FvIGpvYiDEkcOjIGhvw6BuIHRow6BuaCIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogZiJM4buXaSBraGkgYsOhbyBjw6FvIGpvYiDEkcOjIGhvw6BuIHRow6BuaDoge3N0cihlKX0ifQogICAgICAgICAgICAKICAgIGRlZiByZXBvcnRfam9iX3NraXBwZWQoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0sIHJlYXNvbjogc3RyID0gIiIpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIELDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICByZWFzb246IEzDvSBkbyBi4buPIHF1YSBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIGLDoW8gY8OhbyB04burIEFQSQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBqb2JfaWQgdOG7qyBqb2IKICAgICAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgICAgICBpZiBub3Qgam9iX2lkOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBqb2JfaWQgdHJvbmcgam9iIikKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogIktow7RuZyB0w6xtIHRo4bqleSBqb2JfaWQgdHJvbmcgam9iIn0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIENodeG6qW4gYuG7iyBk4buvIGxp4buHdSBiw6FvIGPDoW8KICAgICAgICAgICAgcGF5bG9hZCA9IHsKICAgICAgICAgICAgICAgICJpZCI6IGpvYl9pZAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGzDvSBkbyBu4bq/dSBjw7MKICAgICAgICAgICAgaWYgcmVhc29uOgogICAgICAgICAgICAgICAgcGF5bG9hZFsicmVhc29uIl0gPSByZWFzb24KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSSBiw6FvIGPDoW8gam9iIMSRw6MgYuG7iyBi4buPIHF1YQogICAgICAgICAgICB1cmwgPSBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS9hZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9za2lwLWpvYnMiCiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuZ29saWtlX3NlcnZpY2UuYXBpX3JlcXVlc3QodXJsLCBtZXRob2Q9IlBPU1QiLCBwYXlsb2FkPXBheWxvYWQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIMSRw6MgYuG7iyBi4buPIHF1YSIpCiAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAiZXJyb3IiLCAibWVzc2FnZSI6ICJLaMO0bmcgdGjhu4MgYsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWEifQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLDoW8gY8OhbyBqb2Ige2pvYl9pZH0gYuG7iyBi4buPIHF1YSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAic3VjY2VzcyIsICJtZXNzYWdlIjogIsSQw6MgYsOhbyBjw6FvIGpvYiBi4buLIGLhu48gcXVhIHRow6BuaCBjw7RuZyIsICJkYXRhIjogcmVzdWx0fQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhIikKICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiBmIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgYuG7iyBi4buPIHF1YToge3N0cihlKX0ifQogICAgCiAgICBkZWYgZ2V0X2FjY291bnRfbGlzdF91cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0ve3NlbGYuYXBwX25hbWV9IgogICAgICAgIAogICAgZGVmIGdldF9hY2NvdW50X2RldGFpbF91cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgY2hpIHRp4bq/dCB0w6BpIGtob+G6o24KICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgY2hpIHRp4bq/dCB0w6BpIGtob+G6o24KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0ve3NlbGYuYXBwX25hbWV9LWFjY291bnQiCiAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9saXN0X3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBkYW5oIHPDoWNoIGpvYgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBkYW5oIHPDoWNoIGpvYgogICAgICAgICIiIgogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS9hZHZlcnRpc2luZy9wdWJsaXNoZXJzL3tzZWxmLmFwcF9uYW1lfS9qb2JzIgogICAgICAgIAogICAgZGVmIGdldF9qb2JfcmVwb3J0X3VybChzZWxmLCBqb2JfaWQ6IHN0cikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgYsOhbyBjw6FvIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGpvYl9pZDogSUQgY+G7p2Egam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBiw6FvIGPDoW8gam9iCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfS9qb2JzL3tqb2JfaWR9L3JlcG9ydCI=').decode('utf-8'))
