import base64
exec(base64.b64decode('"""
Mining Management Service
Quản lý mining thông qua API
"""

import requests
import time
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
import config
import utils

# Logger
logger = utils.get_logger("MiningService")


class MiningService:
    """
    Service quản lý mining thông qua API
    - Sync config từ server về client qua MQTT
    - Auto-start miners khi boot
    - Monitor hash rate và status
    """
    
    def __init__(self, db_service, base_url: Optional[str] = None):
        """
        Khởi tạo Mining Service
        
        Args:
            db_service: Database service để lưu thông tin
            base_url: URL của mining API server (mặc định lấy từ config.DEVICE_IP)
        """
        self.db = db_service
        # Sử dụng DEVICE_IP từ config nếu không truyền base_url
        if base_url is None:
            base_url = f"http://{config.DEVICE_IP}:9098"
        self.base_url = base_url
        
        # Load mining info từ DB
        self._load_mining_info()
        
        # Kiểm tra và sync config khi khởi động
        self._check_and_sync_on_startup()
        
    def _load_mining_info(self):
        """Load mining info và config từ database"""
        try:
            # Mining config: Cấu hình từ MQTT, chỉ update khi có MQTT
            self.mining_config = self.db.get("mining-config", {
                "last_sync_config": 0,
                "auto_start": False,
                "miners": []
            })
            
            # Mining info: Trạng thái thực tế từ API, sync định kỳ
            self.mining_info = self.db.get("mining-info", {
                "last_update": 0,
                "total_miners": 0,
                "running_miners": 0,
                "stopped_miners": 0,
                "miners": [],
                "error_message": ""
            })
            
            logger.debug(f"Loaded mining config: {len(self.mining_config.get('miners', []))} miners")
            logger.debug(f"Loaded mining info: {self.mining_info.get('running_miners', 0)}/{self.mining_info.get('total_miners', 0)} running")
        except Exception as e:
            logger.error(f"Lỗi khi load mining data: {e}")
            self.mining_config = {
                "last_sync_config": 0,
                "auto_start": False,
                "miners": []
            }
            self.mining_info = {
                "last_update": 0,
                "total_miners": 0,
                "running_miners": 0,
                "stopped_miners": 0,
                "miners": [],
                "error_message": str(e)
            }
    
    def _save_mining_config(self):
        """Lưu mining config vào database (chỉ khi có MQTT update)"""
        try:
            self.db.set("mining-config", self.mining_config)
            logger.debug("Saved mining config to database")
        except Exception as e:
            logger.error(f"Lỗi khi lưu mining config: {e}")
    
    def _save_mining_info(self):
        """Lưu mining info vào database (sync định kỳ từ API status)"""
        try:
            self.db.set("mining-info", self.mining_info)
            logger.debug("Saved mining info to database")
        except Exception as e:
            logger.error(f"Lỗi khi lưu mining info: {e}")
    
    def _check_and_sync_on_startup(self):
        """
        Kiểm tra và sync mining config khi khởi động ứng dụng
        
        Logic:
        1. Kiểm tra có mining-config không
        2. Kiểm tra mining API có chạy không
        3. Nếu API không chạy → Start mining server bằng tmux
        4. Đợi 20s → Check lại
        5. Nếu kết nối được nhưng không có miner running → Update config
        """
        try:
            # Kiểm tra có config không
            if not self.mining_config.get("miners"):
                logger.info("Chưa có mining config, bỏ qua sync lúc startup")
                return
            
            local_version = self.mining_config.get("last_sync_config", 0)
            logger.info(f"Kiểm tra mining config lúc startup (local version: {local_version})...")
            
            # Kiểm tra mining API có hoạt động không
            if not self.check_mining_api_health():
                logger.warning("Mining API chưa chạy, đang khởi động mining server...")
                
                # Start mining server bằng tmux
                if self._start_mining_server():
                    logger.info("Đã gửi lệnh khởi động mining server, đợi 20s...")
                    time.sleep(20)
                    
                    # Check lại sau 20s
                    if not self.check_mining_api_health():
                        logger.error("Mining API vẫn chưa sẵn sàng sau 20s, bỏ qua sync")
                        return
                    
                    logger.info("Mining API đã sẵn sàng sau khi khởi động")
                else:
                    logger.error("Không thể khởi động mining server, bỏ qua sync")
                    return
            
            # Lấy status từ API
            status = self.get_status()
            
            if not status.get("success"):
                logger.warning(f"Không lấy được status từ mining API: {status.get('error')}")
                return
            
            miners = status.get("miners", [])
            running_miners = [m for m in miners if m.get("status") == "running"]
            
            # Nếu không có miners đang chạy → Update config
            if not running_miners:
                logger.info(f"Mining API có {len(miners)} miners nhưng không có miner nào đang chạy, đang update config...")
                self._force_update_config()
            else:
                logger.info(f"Mining API đang chạy {len(running_miners)}/{len(miners)} miners, không cần update")
            
        except Exception as e:
            logger.error(f"Lỗi khi check và sync lúc startup: {e}")
    
    def _start_mining_server(self) -> bool:
        """
        Khởi động mining server bằng bash script
        
        Returns:
            bool: True nếu gửi lệnh thành công
        """
        try:
            import subprocess
            
            # Lệnh bash để start mining server
            cmd = [
                "bash", "/data/data/com.termux/files/home/run-mining"
            ]
            
            logger.info(f"Khởi động mining server: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=10
            )
            
            logger.info("Đã gửi lệnh khởi động mining server thành công")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"Lỗi khi khởi động mining server: {e.stderr}")
            return False
        except FileNotFoundError:
            logger.error("Không tìm thấy lệnh bash hoặc file run-mining")
            return False
        except Exception as e:
            logger.error(f"Lỗi không xác định khi khởi động mining server: {e}")
            return False
    
    def _force_update_config(self):
        """
        Ép buộc update config lên mining API
        Dùng khi khởi động hoặc khi phát hiện config không khớp
        Bỏ qua kiểm tra timestamp
        """
        try:
            if not self.mining_config.get("miners"):
                logger.warning("Không có mining config để update")
                return
            
            # Force=True để bỏ qua kiểm tra timestamp
            result = self.update_config(self.mining_config, force=True)
            
            if result.get("success"):
                logger.info("✅ Đã force update mining config")
            else:
                logger.error(f"❌ Lỗi khi force update config: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"Lỗi khi force update config: {e}")
    
    def get_status(self, save_to_db: bool = False) -> Dict[str, Any]:
        """
        Lấy trạng thái mining từ API
        
        Args:
            save_to_db: DEPRECATED - không còn sử dụng nữa
        
        Returns:
            Dict: Status của tất cả miners
        """
        try:
            response = requests.get(f"{self.base_url}/api/status", timeout=5)
            response.raise_for_status()
            result = response.json()
            
            return result
        except requests.exceptions.RequestException as e:
            error_msg = f"Lỗi khi lấy status: {e}"
            logger.error(error_msg)
            
            return {
                "success": False,
                "error": str(e),
                "miners": []
            }
    
    def get_miner_status(self, name: str) -> Dict[str, Any]:
        """
        Lấy trạng thái của một miner cụ thể
        
        Args:
            name: Tên miner
            
        Returns:
            Dict: Status của miner
        """
        try:
            response = requests.get(
                f"{self.base_url}/api/status",
                params={"name": name},
                timeout=5
            )
            response.raise_for_status()
            result = response.json()
            
            return result
        except requests.exceptions.RequestException as e:
            error_msg = f"Lỗi khi lấy status miner {name}: {e}"
            logger.error(error_msg)
            
            return {
                "success": False,
                "error": str(e)
            }
    
    def update_config(self, mqtt_mining_config: Dict[str, Any], force: bool = True) -> Dict[str, Any]:
        """
        Update mining config từ MQTT server
        Config này CHỈ update khi có MQTT update, KHÔNG sync định kỳ
        
        Args:
            mqtt_mining_config: {
                "last_sync_config": timestamp,
                "auto_start": bool,
                "miners": [...]
            }
            force: Mặc định True - Luôn update đè lên mining API
            
        Returns:
            Dict: Kết quả update
        """
        try:
            # Validate config
            if not isinstance(mqtt_mining_config, dict):
                return {
                    "success": False,
                    "error": "Invalid config format"
                }
            
            # Lấy timestamp
            new_timestamp = mqtt_mining_config.get("last_sync_config", 0)
            current_timestamp = self.mining_config.get("last_sync_config", 0)
            
            logger.info(f"Update config: new_timestamp={new_timestamp}, current={current_timestamp}, force={force}")
            
            # Nếu force=False (từ MQTT): LUÔN update đè lên mining API
            # Nếu force=True (từ startup): Không làm gì cả (chỉ để tương thích)
            if force:
                logger.info("Force update từ startup, bỏ qua")
                # Force update không cần kiểm tra gì, update luôn
                pass
            
            # Gửi config đến mining API
            miners_data = mqtt_mining_config.get("miners", [])
            
            # Log để debug
            logger.info(f"Đang gửi {len(miners_data)} miners đến Mining API:")
            for miner in miners_data:
                logger.info(f"  - {miner.get('coin_name', 'Unknown')} ({miner.get('mining_tool', 'Unknown')})")
            
            response = requests.post(
                f"{self.base_url}/api/update-config",
                json=miners_data,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            
            # Nếu update API thành công, lưu config vào mining-config
            if result.get("success"):
                # Lưu vào mining-config (chỉ update khi có MQTT)
                self.mining_config = mqtt_mining_config
                self._save_mining_config()
                
                logger.info(f"✅ Updated mining config: {result.get('updated', 0)}/{result.get('total', 0)} miners")
                
                # Log auto-start result nếu có
                auto_start_result = result.get("auto_start_result")
                if auto_start_result:
                    stopped = auto_start_result.get("stopped", [])
                    started = auto_start_result.get("started", [])
                    logger.info(f"Auto-restart: stopped={len(stopped)}, started={len(started)}")
                
                # Mining API đã tự động stop/start khi auto_start=true
                # Status sẽ được sync định kỳ bởi sync_status_from_api()
            
            return result
            
        except requests.exceptions.RequestException as e:
            error_msg = f"Lỗi khi update config: {e}"
            logger.error(error_msg)
            
            return {
                "success": False,
                "error": str(e)
            }
        except Exception as e:
            error_msg = f"Lỗi không mong đợi khi update config: {e}"
            logger.error(error_msg)
            
            return {
                "success": False,
                "error": str(e)
            }
    
    def start_miner(self, name: str) -> Dict[str, Any]:
        """
        Start một miner
        
        Args:
            name: Tên miner
            
        Returns:
            Dict: Kết quả start
        """
        try:
            response = requests.post(
                f"{self.base_url}/api/start",
                json={"name": name},
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            response.raise_for_status()
            result = response.json()
            
            if result.get("success"):
                logger.info(f"✅ Started miner: {name}")
            else:
                logger.warning(f"❌ Failed to start miner {name}: {result.get('message')}")
            
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Lỗi khi start miner {name}: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def stop_miner(self, name: str) -> Dict[str, Any]:
        """
        Stop một miner
        
        Args:
            name: Tên miner
            
        Returns:
            Dict: Kết quả stop
        """
        try:
            response = requests.post(
                f"{self.base_url}/api/stop",
                json={"name": name},
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            response.raise_for_status()
            result = response.json()
            
            if result.get("success"):
                logger.info(f"✅ Stopped miner: {name}")
            else:
                logger.warning(f"❌ Failed to stop miner {name}: {result.get('message')}")
            
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Lỗi khi stop miner {name}: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def stop_miners(self, names: List[str]) -> Dict[str, Any]:
        """
        Stop nhiều miners
        
        Args:
            names: Danh sách tên miners
            
        Returns:
            Dict: Kết quả stop
        """
        try:
            response = requests.post(
                f"{self.base_url}/api/stop",
                json={"names": names},
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            
            if result.get("success"):
                stopped = result.get("stopped", [])
                logger.info(f"✅ Stopped {len(stopped)} miners")
            
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Lỗi khi stop miners: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def force_stop_all(self) -> Dict[str, Any]:
        """
        Emergency stop tất cả mining processes
        
        Returns:
            Dict: Kết quả force stop
        """
        try:
            response = requests.post(
                f"{self.base_url}/api/force-stop-all",
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            
            if result.get("success"):
                killed_count = result.get("killed_count", 0)
                logger.warning(f"⚠️ Force killed {killed_count} mining processes")
            
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Lỗi khi force stop all: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def format_hash_rate(self, hash_rate_hs: float) -> str:
        """
        Format hash rate từ H/s sang KH/s, MH/s, GH/s
        
        Args:
            hash_rate_hs: Hash rate trong H/s
            
        Returns:
            str: Formatted hash rate
        """
        if hash_rate_hs >= 1e9:
            return f"{hash_rate_hs/1e9:.2f} GH/s"
        elif hash_rate_hs >= 1e6:
            return f"{hash_rate_hs/1e6:.2f} MH/s"
        elif hash_rate_hs >= 1e3:
            return f"{hash_rate_hs/1e3:.2f} KH/s"
        else:
            return f"{hash_rate_hs:.2f} H/s"
    
    def sync_config_from_mqtt(self, mqtt_config: Dict[str, Any]) -> bool:
        """
        Sync config từ MQTT server về client
        CHỈ gọi khi có MQTT update, KHÔNG gọi định kỳ
        
        Logic:
        1. Lấy last_sync_config từ mining-config
        2. So sánh với timestamp từ MQTT
        3. Nếu MQTT mới hơn:
           - Kiểm tra mining API có đang chạy không
           - Nếu đang chạy: Kiểm tra version → Update nếu cần
           - Nếu không chạy: Update luôn
        
        Args:
            mqtt_config: Config nhận từ MQTT server với cấu trúc:
                {
                    "last_sync_config": timestamp,
                    "auto_start": bool,
                    "miners": [...]
                }
        
        Returns:
            bool: True nếu sync thành công
        """
        try:
            mqtt_timestamp = mqtt_config.get("last_sync_config", 0)
            local_timestamp = self.mining_config.get("last_sync_config", 0)
            
            logger.info(f"Sync config from MQTT: MQTT timestamp={mqtt_timestamp}, Local timestamp={local_timestamp}")
            
            if mqtt_timestamp > local_timestamp:
                # MQTT config mới hơn
                logger.info("MQTT config mới hơn, đang kiểm tra trạng thái mining API...")
                
                # Kiểm tra mining API có hoạt động không
                if not self.check_mining_api_health():
                    logger.warning("Mining API chưa sẵn sàng, lưu config nhưng chưa update")
                    # Lưu config để lần sau check lại
                    self.mining_config = mqtt_config
                    self._save_mining_config()
                    return False
                
                # Lấy status từ API
                status = self.get_status()
                
                if not status.get("success"):
                    # API lỗi → Update luôn
                    logger.info("Mining API lỗi, đang update config...")
                    result = self.update_config(mqtt_config)
                    return result.get("success", False)
                
                miners = status.get("miners", [])
                api_version = status.get("config_version", 0)
                
                # Nếu không có miners → Update luôn
                if not miners:
                    logger.info("Mining API chưa có miners, đang update config...")
                    result = self.update_config(mqtt_config)
                    return result.get("success", False)
                
                # Nếu có miners → Kiểm tra version
                logger.info(f"Mining API đang chạy {len(miners)} miners (version: {api_version})")
                
                if api_version != mqtt_timestamp:
                    logger.info(f"Version khác nhau, đang update config...")
                    result = self.update_config(mqtt_config)
                    return result.get("success", False)
                else:
                    # Version đã khớp, chỉ cần lưu vào DB
                    logger.info("Mining API đã có config version mới nhất")
                    self.mining_config = mqtt_config
                    self._save_mining_config()
                    return True
                    
            else:
                # Config đã sync hoặc MQTT cũ hơn, bỏ qua
                logger.info("Config đã được sync, không cần update")
                return True
                
        except Exception as e:
            logger.error(f"Lỗi khi sync config từ MQTT: {e}")
            return False
    
    def get_mining_summary(self) -> Dict[str, Any]:
        """
        Lấy tổng hợp thông tin mining
        GỌI TRỰC TIẾP API để lấy status real-time
        
        Returns:
            Dict: Summary bao gồm:
                - Nếu không có config coin → Trả về {} rỗng
                - Nếu có config coin → Lấy status từ API
                - Nếu API lỗi Connection refused → Auto start mining server 1 lần
        """
        try:
            # Kiểm tra có config coin không
            if not self.mining_config.get("miners"):
                # Không có config coin → Trả về rỗng
                return {}
            
            # Có config coin → Gọi API để lấy status real-time
            status = self.get_status(save_to_db=False)
            
            if not status.get("success"):
                # API lỗi
                error_msg = status.get("error", "Unknown error")
                
                # Kiểm tra nếu là lỗi Connection refused → Auto start mining server
                if "Connection refused" in error_msg or "Failed to establish a new connection" in error_msg:
                    logger.warning(f"Mining API không kết nối được, đang khởi động mining server...")
                    
                    # Gọi lệnh run-mining 1 lần
                    if self._start_mining_server():
                        logger.info("Đã gửi lệnh khởi động mining server")
                    else:
                        logger.error("Không thể khởi động mining server")
                
                # Trả về thông tin lỗi
                logger.error(f"Mining API lỗi: {error_msg}")
                
                return {
                    "success": False,
                    "auto_start": self.mining_config.get("auto_start", False),
                    "last_sync_config": self.mining_config.get("last_sync_config", 0),
                    "last_update": int(time.time()),
                    "total_miners": 0,
                    "running_miners": 0,
                    "stopped_miners": 0,
                    "error_message": f"Không kết nối được Mining API: {error_msg}",
                    "miners": []
                }
            
            # Lấy miners từ API response
            miners = status.get("miners", [])
            running_count = sum(1 for m in miners if m.get("status") == "running")
            
            # Format hash rate cho mỗi miner
            miners_detail = []
            for miner in miners:
                hash_rate_hs = miner.get("hash_rate", 0)
                miners_detail.append({
                    "name": miner.get("name"),
                    "coin_name": miner.get("coin_name"),
                    "status": miner.get("status"),
                    "hash_rate_hs": hash_rate_hs,
                    "hash_rate_formatted": self.format_hash_rate(hash_rate_hs),
                    "mining_tool": miner.get("mining_tool"),
                    "pid": miner.get("pid")
                })
            
            return {
                "success": True,
                # Thông tin config từ mining-config
                "auto_start": self.mining_config.get("auto_start", False),
                "last_sync_config": self.mining_config.get("last_sync_config", 0),
                # Thông tin status real-time từ API
                "last_update": int(time.time()),
                "total_miners": len(miners),
                "running_miners": running_count,
                "stopped_miners": len(miners) - running_count,
                "error_message": "",
                "miners": miners_detail
            }
            
        except Exception as e:
            error_msg = f"Lỗi khi lấy mining summary: {e}"
            logger.error(error_msg)
            
            # Kiểm tra nếu không có config coin → Trả về rỗng
            if not self.mining_config.get("miners"):
                return {}
            
            return {
                "success": False,
                "auto_start": self.mining_config.get("auto_start", False),
                "last_sync_config": self.mining_config.get("last_sync_config", 0),
                "last_update": int(time.time()),
                "total_miners": 0,
                "running_miners": 0,
                "stopped_miners": 0,
                "error_message": error_msg,
                "miners": []
            }
    
    def check_mining_api_health(self) -> bool:
        """
        Kiểm tra mining API server có hoạt động không
        
        Returns:
            bool: True nếu server hoạt động
        """
        try:
            response = requests.get(f"{self.base_url}/api/status", timeout=3)
            return response.status_code == 200
        except:
            return False
').decode('utf-8'))
