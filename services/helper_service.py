import base64
exec(base64.b64decode('aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IHRpbWUKaW1wb3J0IHJlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBvcwppbXBvcnQgY29uZmlnCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZSwgdW5xdW90ZQpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBPcHRpb25hbCwgVHVwbGUsIExpc3QsIFVuaW9uCnRyeToKICAgIGZyb20gbHhtbCBpbXBvcnQgZXRyZWUKICAgIExYTUxfQVZBSUxBQkxFID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBMWE1MX0FWQUlMQUJMRSA9IEZhbHNlCgpjbGFzcyBIZWxwZXJTZXJ2aWNlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGJhc2VfdXJsOiBzdHIgPSBOb25lLCBkYl9zZXJ2aWNlPU5vbmUpOgogICAgICAgICMgU+G7rSBk4bulbmcgY29uZmlnIG7hur91IGJhc2VfdXJsIGtow7RuZyDEkcaw4bujYyBjdW5nIGPhuqVwCiAgICAgICAgaWYgYmFzZV91cmwgaXMgTm9uZToKICAgICAgICAgICAgYmFzZV91cmwgPSBjb25maWcuSEVMUEVSX1NFUlZJQ0VfVVJMCiAgICAgICAgCiAgICAgICAgc2VsZi5iYXNlX3VybCA9IGJhc2VfdXJsCiAgICAgICAgc2VsZi5pc19hZGJfY29ubmVjdGVkID0gRmFsc2UKICAgICAgICBzZWxmLmRldmljZV9pcCA9IGNvbmZpZy5ERVZJQ0VfSVAgICMgU+G7rSBk4bulbmcgREVWSUNFX0lQIHThu6sgY29uZmlnCiAgICAgICAgc2VsZi5kYl9zZXJ2aWNlID0gZGJfc2VydmljZQogICAgICAgIAogICAgICAgICMgTHXDtG4gdGjhu60ga+G6v3QgbuG7kWkgQURCIHbhu5tpIElQIHThu6sgY29uZmlnCiAgICAgICAgc2VsZi5jaGVja19hbmRfY29ubmVjdF9hZGIoKQoKICAgIGRlZiBjaGVja19hbmRfY29ubmVjdF9hZGIoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHbDoCBr4bq/dCBu4buRaSBBREIgdOG7m2kgdGhp4bq/dCBi4buLCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgQURCIGPDsyDEkcaw4bujYyBjw6BpIMSR4bq3dCBraMO0bmcKICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJhZGIiLCAiLS12ZXJzaW9uIl0sIGNoZWNrPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEvhur90IG7hu5FpIEFEQiDEkeG6v24gdGhp4bq/dCBi4buLIHPhu60gZOG7pW5nIMSR4buLYSBjaOG7iSB04burIGNvbmZpZwogICAgICAgICAgICBhZGJfYWRkcmVzcyA9IGYie2NvbmZpZy5BREJfSE9TVH06e2NvbmZpZy5BREJfUE9SVH0iCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRo4butIGvhur90IG7hu5FpIMSR4bq/biB0aGnhur90IGLhu4sKICAgICAgICAgICAgY29ubmVjdF9wcm9jZXNzID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICAgICBbImFkYiIsICJjb25uZWN0IiwgYWRiX2FkZHJlc3NdLAogICAgICAgICAgICAgICAgY2hlY2s9VHJ1ZSwKICAgICAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgdGV4dD1UcnVlCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBxdeG6oyBr4bq/dCBu4buRaQogICAgICAgICAgICBpZiAiY29ubmVjdGVkIiBpbiBjb25uZWN0X3Byb2Nlc3Muc3Rkb3V0Lmxvd2VyKCk6CiAgICAgICAgICAgICAgICBzZWxmLmlzX2FkYl9jb25uZWN0ZWQgPSBUcnVlCiAgICAgICAgICAgICAgICBwcmludChmIsSQw6Mga+G6v3QgbuG7kWkgQURCIHRow6BuaCBjw7RuZyDEkeG6v24ge2FkYl9hZGRyZXNzfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IChzdWJwcm9jZXNzLlN1YnByb2Nlc3NFcnJvciwgRmlsZU5vdEZvdW5kRXJyb3IpIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiS2jDtG5nIHRo4buDIGvhur90IG7hu5FpIEFEQjoge2V9IikKICAgICAgICAKICAgICAgICBzZWxmLmlzX2FkYl9jb25uZWN0ZWQgPSBGYWxzZQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfZ2V0X2FkYl9kZXZpY2VfcGFyYW0oc2VsZikgLT4gTGlzdFtzdHJdOgogICAgICAgICIiIgogICAgICAgIFRy4bqjIHbhu4EgdGhhbSBz4buRIHRoaeG6v3QgYuG7iyBjaG8gbOG7h25oIEFEQgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3Rbc3RyXTogRGFuaCBzw6FjaCBbLXMsIGRldmljZV9pZF0gaG/hurdjIGxpc3QgcuG7l25nIG7hur91IGtow7RuZyBjw7MgdGhp4bq/dCBi4buLCiAgICAgICAgIiIiCiAgICAgICAgaWYgc2VsZi5pc19hZGJfY29ubmVjdGVkOgogICAgICAgICAgICBhZGJfYWRkcmVzcyA9IGYie2NvbmZpZy5BREJfSE9TVH06e2NvbmZpZy5BREJfUE9SVH0iCiAgICAgICAgICAgIHJldHVybiBbIi1zIiwgYWRiX2FkZHJlc3NdCiAgICAgICAgcmV0dXJuIFtdCgogICAgZGVmIF9tYWtlX3JlcXVlc3Qoc2VsZiwgZW5kcG9pbnQ6IHN0ciwgcGFyYW1zOiBEaWN0W3N0ciwgQW55XSA9IE5vbmUpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gcmVxdWVzdCBBUEkgdsOgIHRy4bqjIHbhu4Ega+G6v3QgcXXhuqMgZOG6oW5nIEpTT04gaG/hurdjIFhNTAogICAgICAgICIiIgogICAgICAgIHVybCA9IGYie3NlbGYuYmFzZV91cmx9L3tlbmRwb2ludH0iCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRoaeG6v3QgbOG6rXAgdGltZW91dCBjaG8gcmVxdWVzdAogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIHBhcmFtcz1wYXJhbXMsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIENvbnRlbnQtVHlwZQogICAgICAgICAgICBjb250ZW50X3R5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJywgJycpCiAgICAgICAgICAgIGlmICdhcHBsaWNhdGlvbi94bWwnIGluIGNvbnRlbnRfdHlwZSBvciBlbmRwb2ludCA9PSAnZHVtcC1zY3JlZW4teG1sJzoKICAgICAgICAgICAgICAgICMgVHLhuqMgduG7gSBYTUwgZMaw4bubaSBk4bqhbmcgdGV4dAogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogInN1Y2Nlc3MiLCAiZGF0YSI6IHJlc3BvbnNlLnRleHR9CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFRy4bqjIHbhu4EgSlNPTgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlRpbWVvdXQ6CiAgICAgICAgICAgIHByaW50KGYiUmVxdWVzdCB0aW1lb3V0IGtoaSBn4buNaSB7dXJsfSwgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcCIpCiAgICAgICAgICAgIHNlbGYuX3Jlc3RhcnRfaGVscGVyX2FwcCgpCiAgICAgICAgICAgICMgVGjhu60gbOG6oWkgcmVxdWVzdCBzYXUga2hpIGto4bufaSDEkeG7mW5nIGzhuqFpIGhlbHBlciBhcHAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKSAgIyBDaOG7nSAxIGdpw6J5IMSR4buDIOG7qW5nIGThu6VuZyBraOG7n2kgxJHhu5luZwogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCBwYXJhbXM9cGFyYW1zLCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnLCAnJykKICAgICAgICAgICAgICAgIGlmICdhcHBsaWNhdGlvbi94bWwnIGluIGNvbnRlbnRfdHlwZSBvciBlbmRwb2ludCA9PSAnZHVtcC1zY3JlZW4teG1sJzoKICAgICAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAic3VjY2VzcyIsICJkYXRhIjogcmVzcG9uc2UudGV4dH0KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKQogICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIlbhuqtuIGzhu5dpIHNhdSBraGkgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcDoge2V9IikKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogc3RyKGUpfQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvciBhcyBlOgogICAgICAgICAgICAjIELhuq90IGzhu5dpIGvhur90IG7hu5FpIGLhu4sgdOG7qyBjaOG7kWkgaG/hurdjIGtow7RuZyB0aOG7gyBr4bq/dCBu4buRaQogICAgICAgICAgICBwcmludChmIkzhu5dpIGvhur90IG7hu5FpIGtoaSBn4buNaSB7dXJsfSwgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcDoge2V9IikKICAgICAgICAgICAgc2VsZi5fcmVzdGFydF9oZWxwZXJfYXBwKCkKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSByZXF1ZXN0IHNhdSBraGkga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIpICAjIENo4budIDIgZ2nDonkgxJHhu4Mg4bupbmcgZOG7pW5nIGto4bufaSDEkeG7mW5nCiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIHBhcmFtcz1wYXJhbXMsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29udGVudF90eXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScsICcnKQogICAgICAgICAgICAgICAgaWYgJ2FwcGxpY2F0aW9uL3htbCcgaW4gY29udGVudF90eXBlIG9yIGVuZHBvaW50ID09ICdkdW1wLXNjcmVlbi14bWwnOgogICAgICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgImRhdGEiOiByZXNwb25zZS50ZXh0fQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYiVuG6q24gbOG7l2kgc2F1IGtoaSB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBoZWxwZXIgYXBwOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiBzdHIoZSl9CiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIHJlcXVlc3Q6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogc3RyKGUpfQoKICAgIGRlZiBfcmVzdGFydF9oZWxwZXJfYXBwKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcCBz4butIGThu6VuZyBBREIKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgaWYgc2VsZi5pc19hZGJfY29ubmVjdGVkOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEzhuqV5IHRoYW0gc+G7kSB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgIGRldmljZV9wYXJhbXMgPSBzZWxmLl9nZXRfYWRiX2RldmljZV9wYXJhbSgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2jhu59pIMSR4buZbmcgaGVscGVyIGFwcCBi4bqxbmcgQURCCiAgICAgICAgICAgICAgICBjbWQgPSBbImFkYiJdICsgZGV2aWNlX3BhcmFtcyArIFsic2hlbGwiLCAiYW0iLCAic3RhcnQiLCAiLW4iLCAiY29tLmRuZHZpbmEuaGVscGVyLy5NYWluQWN0aXZpdHkiXQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgIHRleHQ9VHJ1ZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgcHJpbnQoIsSQw6Mga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcCBxdWEgQURCIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLlN1YnByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkga2jhu59pIMSR4buZbmcgbOG6oWkgaGVscGVyIGFwcCBxdWEgQURCOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIktow7RuZyB0aOG7gyBraOG7n2kgxJHhu5luZyBs4bqhaSBoZWxwZXIgYXBwIHbDrCBBREIgY2jGsGEgxJHGsOG7o2Mga+G6v3QgbuG7kWkiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgdGFwKHNlbGYsIHg6IGludCwgeTogaW50KSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaOG6oW0gdsOgbyB24buLIHRyw60geCx5IHRyw6puIG3DoG4gaMOsbmgKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJ0YXAiLCBwYXJhbXM9eyJ4IjogeCwgInkiOiB5fSkKCiAgICBkZWYgdGFwX2VsZW1lbnQoc2VsZiwgYm91bmRzOiBzdHIpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIENo4bqhbSB2w6BvIG3hu5l0IHBo4bqnbiB04butIGThu7FhIHRyw6puIGJvdW5kcyBj4bunYSBuw7MKICAgICAgICBGb3JtYXQgYm91bmRzOiAiW3gxLHkxXVt4Mix5Ml0iIGhv4bq3YyBlbGVtZW50IGRpY3QKICAgICAgICAiIiIKICAgICAgICAjIE7hur91IGJvdW5kcyBsw6AgbeG7mXQgZGljdCAoZWxlbWVudCksIGzhuqV5IGJvdW5kcyBzdHJpbmcgdOG7qyDEkcOzCiAgICAgICAgaWYgaXNpbnN0YW5jZShib3VuZHMsIGRpY3QpOgogICAgICAgICAgICBib3VuZHMgPSBib3VuZHMuZ2V0KCJib3VuZHMiLCAiWzAsMF1bMCwwXSIpCiAgICAgICAgICAgIAogICAgICAgICMgVGjhu60gY8OhYyBwYXR0ZXJuIGtow6FjIG5oYXUgxJHhu4MgcGFyc2UgYm91bmRzLCBjaG8gcGjDqXAgc+G7kSDDom0KICAgICAgICBwYXR0ZXJucyA9IFsKICAgICAgICAgICAgciJcWygtP1xkKyksKC0/XGQrKVxdXFsoLT9cZCspLCgtP1xkKylcXSIsICAjIFt4MSx5MV1beDIseTJdIHbhu5tpIHPhu5Egw6JtCiAgICAgICAgICAgIHIiKC0/XGQrKSwoLT9cZCspLCgtP1xkKyksKC0/XGQrKSIsICAgICAgICAgIyB4MSx5MSx4Mix5MgogICAgICAgICAgICByIlxbKC0/XGQrKTsoLT9cZCspXF1cWygtP1xkKyk7KC0/XGQrKVxdIiAgICMgW3gxO3kxXVt4Mjt5Ml0KICAgICAgICBdCiAgICAgICAgCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcGF0dGVybnM6CiAgICAgICAgICAgIG1hdGNoID0gcmUubWF0Y2gocGF0dGVybiwgYm91bmRzKQogICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gbWFwKGludCwgbWF0Y2guZ3JvdXBzKCkpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgcHJpbnQoZiJPcmlnaW5hbCBib3VuZHM6ICh7eDF9LCB7eTF9LCB7eDJ9LCB7eTJ9KSIpICAjIELhu48gbG9nIG7DoHkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBT4butYSBjaOG7r2EgYm91bmRzIGtow7RuZyBo4bujcCBs4buHCiAgICAgICAgICAgICAgICBpZiB5MSA8IDAgb3IgeTIgPCAwOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiRml4aW5nIG5lZ2F0aXZlIFkgY29vcmRpbmF0ZXMuLi4iKQogICAgICAgICAgICAgICAgICAgIGlmIHkyIDwgMDoKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gYWJzKHkyIC0geTEpCiAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gbWF4KDAsIHkxKQogICAgICAgICAgICAgICAgICAgICAgICB5MiA9IHkxICsgaGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiQWRqdXN0ZWQgWTogeTE9e3kxfSwgeTI9e3kyfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHgxIDwgMCBvciB4MiA8IDA6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJGaXhpbmcgbmVnYXRpdmUgWCBjb29yZGluYXRlcy4uLiIpCiAgICAgICAgICAgICAgICAgICAgaWYgeDIgPCAwOgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGFicyh4MiAtIHgxKQogICAgICAgICAgICAgICAgICAgICAgICB4MSA9IG1heCgwLCB4MSkKICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSB4MSArIHdpZHRoCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiQWRqdXN0ZWQgWDogeDE9e3gxfSwgeDI9e3gyfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBib3VuZHMgaOG7o3AgbOG7hyBzYXUga2hpIMSRaeG7gXUgY2jhu4luaAogICAgICAgICAgICAgICAgaWYgeDEgPj0geDIgb3IgeTEgPj0geTI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJJbnZhbGlkIGJvdW5kcyBhZnRlciBhZGp1c3RtZW50OiAoe3gxfSwge3kxfSwge3gyfSwge3kyfSkiKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIENo4buNbiBt4buZdCDEkWnhu4NtIHRyb25nIGJvdW5kcyB24bubaSBtYXJnaW4gYW4gdG/DoG4KICAgICAgICAgICAgICAgIG1hcmdpbiA9IG1pbigzLCAoeDIgLSB4MSkgLy8gNCwgKHkyIC0geTEpIC8vIDQpICAjIER5bmFtaWMgbWFyZ2luCiAgICAgICAgICAgICAgICBtYXJnaW4gPSBtYXgoMSwgbWFyZ2luKSAgIyDDjXQgbmjhuqV0IDFweCBtYXJnaW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgeCA9IHJhbmRvbS5yYW5kaW50KHgxICsgbWFyZ2luLCBtYXgoeDEgKyBtYXJnaW4gKyAxLCB4MiAtIG1hcmdpbikpCiAgICAgICAgICAgICAgICB5ID0gcmFuZG9tLnJhbmRpbnQoeTEgKyBtYXJnaW4sIG1heCh5MSArIG1hcmdpbiArIDEsIHkyIC0gbWFyZ2luKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBwcmludChmIkZpbmFsIHRhcCBjb29yZGluYXRlczogKHt4fSwge3l9KSB3aXRoIG1hcmdpbiB7bWFyZ2lufSIpICAjIELhu48gbG9nIG7DoHkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYudGFwKHgsIHkpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiBmIsSQ4buLbmggZOG6oW5nIGJvdW5kcyBraMO0bmcgaOG7o3AgbOG7hzoge2JvdW5kc30ifQoKICAgIGRlZiBzd2lwZV91cChzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBWdeG7kXQgbMOqbiB04burIHbhu4sgdHLDrSBuZ+G6q3Ugbmhpw6puIHBow7kgaOG7o3AKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJzd2lwZV91cCIpCgogICAgZGVmIHN3aXBlX2Rvd24oc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVnXhu5F0IHh14buRbmcgdOG7qyB24buLIHRyw60gbmfhuqt1IG5oacOqbiBwaMO5IGjhu6NwCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgic3dpcGVfZG93biIpCgogICAgZGVmIGlucHV0X3RleHQoc2VsZiwgdGV4dDogc3RyLCBzcGVlZDogZmxvYXQgPSAxLjAsIAogICAgICAgICAgICAgICAgICBkaXJlY3RfbW9kZTogYm9vbCA9IEZhbHNlLCBwZXJmZWN0X21vZGU6IGJvb2wgPSBUcnVlKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBNw7QgcGjhu49uZyBnw7UgcGjDrW0gduG7m2kgdOG7kWMgxJHhu5kgbmfhuqt1IG5oacOqbiBnaeG7kW5nIG5nxrDhu51pIHRo4bqtdCBi4bqxbmcgQURCCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMavdSB0acOqbiBz4butIGThu6VuZyBBREIgbuG6v3UgxJHDoyBr4bq/dCBu4buRaQogICAgICAgICAgICBpZiBzZWxmLmlzX2FkYl9jb25uZWN0ZWQ6CiAgICAgICAgICAgICAgICAjIEVzY2FwZSB0ZXh0IMSR4buDIHRyw6FuaCBs4buXaSB24bubaSBjw6FjIGvDvSB04buxIMSR4bq3YyBiaeG7h3QKICAgICAgICAgICAgICAgIGVzY2FwZWRfdGV4dCA9IHRleHQucmVwbGFjZSgnICcsICdcXCAnKS5yZXBsYWNlKCcmJywgJ1xcJicpLnJlcGxhY2UoJygnLCAnXFwoJykucmVwbGFjZSgnKScsICdcXCknKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEzhuqV5IHRoYW0gc+G7kSB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgIGRldmljZV9wYXJhbXMgPSBzZWxmLl9nZXRfYWRiX2RldmljZV9wYXJhbSgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVGjhu7FjIHRoaSBBREIgaW5wdXQgdGV4dAogICAgICAgICAgICAgICAgY21kID0gWyJhZGIiXSArIGRldmljZV9wYXJhbXMgKyBbInNoZWxsIiwgImlucHV0IiwgInRleHQiLCBmIid7ZXNjYXBlZF90ZXh0fSciXQogICAgICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgIHRleHQ9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTE1CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgIm1lc3NhZ2UiOiBmIsSQw6Mgbmjhuq1wIHRleHQgJ3t0ZXh0fScgYuG6sW5nIEFEQiJ9CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEZhbGxiYWNrIHbhu4EgQVBJIG7hur91IGtow7RuZyBjw7MgQURCCiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgInRleHQiOiB0ZXh0LAogICAgICAgICAgICAgICAgICAgICJzcGVlZCI6IHNwZWVkLAogICAgICAgICAgICAgICAgICAgICJkaXJlY3RfbW9kZSI6IHN0cihkaXJlY3RfbW9kZSkubG93ZXIoKSwKICAgICAgICAgICAgICAgICAgICAicGVyZmVjdF9tb2RlIjogc3RyKHBlcmZlY3RfbW9kZSkubG93ZXIoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgiaW5wdXRfdGV4dCIsIHBhcmFtcz1wYXJhbXMpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5UaW1lb3V0RXhwaXJlZDoKICAgICAgICAgICAgcHJpbnQoZiJUaW1lb3V0IGtoaSBn4butaSBBREIgaW5wdXQgdGV4dDoge3RleHR9IikKICAgICAgICAgICAgIyBGYWxsYmFjayB24buBIEFQSQogICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAidGV4dCI6IHRleHQsCiAgICAgICAgICAgICAgICAic3BlZWQiOiBzcGVlZCwKICAgICAgICAgICAgICAgICJkaXJlY3RfbW9kZSI6IHN0cihkaXJlY3RfbW9kZSkubG93ZXIoKSwKICAgICAgICAgICAgICAgICJwZXJmZWN0X21vZGUiOiBzdHIocGVyZmVjdF9tb2RlKS5sb3dlcigpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgiaW5wdXRfdGV4dCIsIHBhcmFtcz1wYXJhbXMpCiAgICAgICAgZXhjZXB0IHN1YnByb2Nlc3MuU3VicHJvY2Vzc0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kgQURCIGlucHV0IHRleHQgJ3t0ZXh0fSc6IHtlfSIpCiAgICAgICAgICAgICMgRmFsbGJhY2sgduG7gSBBUEkKICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgICAgInRleHQiOiB0ZXh0LAogICAgICAgICAgICAgICAgInNwZWVkIjogc3BlZWQsCiAgICAgICAgICAgICAgICAiZGlyZWN0X21vZGUiOiBzdHIoZGlyZWN0X21vZGUpLmxvd2VyKCksCiAgICAgICAgICAgICAgICAicGVyZmVjdF9tb2RlIjogc3RyKHBlcmZlY3RfbW9kZSkubG93ZXIoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoImlucHV0X3RleHQiLCBwYXJhbXM9cGFyYW1zKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraMO0bmcgeMOhYyDEkeG7i25oIGtoaSBn4butaSBBREIgaW5wdXQgdGV4dCAne3RleHR9Jzoge2V9IikKICAgICAgICAgICAgIyBGYWxsYmFjayB24buBIEFQSQogICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAidGV4dCI6IHRleHQsCiAgICAgICAgICAgICAgICAic3BlZWQiOiBzcGVlZCwKICAgICAgICAgICAgICAgICJkaXJlY3RfbW9kZSI6IHN0cihkaXJlY3RfbW9kZSkubG93ZXIoKSwKICAgICAgICAgICAgICAgICJwZXJmZWN0X21vZGUiOiBzdHIocGVyZmVjdF9tb2RlKS5sb3dlcigpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgiaW5wdXRfdGV4dCIsIHBhcmFtcz1wYXJhbXMpCgogICAgZGVmIHNob3dfdG9hc3Qoc2VsZiwgbWVzc2FnZTogc3RyLCB0eXBlXzogc3RyID0gImluZm8iLCAKICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHN0ciA9ICJib3R0b20iKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBIaeG7g24gdGjhu4sgdGjDtG5nIGLDoW8gdG9hc3QKICAgICAgICAiIiIKICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgInR5cGUiOiB0eXBlXywKICAgICAgICAgICAgInBvc2l0aW9uIjogcG9zaXRpb24KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgidG9hc3QtbWVzc2FnZSIsIHBhcmFtcz1wYXJhbXMpCgogICAgZGVmIGdldF9kZXZpY2VfaW5mbyhzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aMO0bmcgdGluIGNoaSB0aeG6v3QgduG7gSB0aGnhur90IGLhu4sKICAgICAgICAiIiIKICAgICAgICByZXN1bHQgPSBzZWxmLl9tYWtlX3JlcXVlc3QoImRldmljZS1pbmZvIikKICAgICAgICAKICAgICAgICAjIE7hur91IGvhur90IHF14bqjIHRow6BuaCBjw7RuZywgdGjDqm0gdGjDtG5nIHRpbiBpbnRlcm5ldCBJUAogICAgICAgIGlmIHJlc3VsdC5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIiBhbmQgImRhdGEiIGluIHJlc3VsdDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBM4bqleSBpbnRlcm5ldCBJUCBi4bqxbmcgcmVxdWVzdHMKICAgICAgICAgICAgICAgIGludGVybmV0X2lwID0gc2VsZi5fZ2V0X2ludGVybmV0X2lwKCkKICAgICAgICAgICAgICAgIGlmIGludGVybmV0X2lwOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdFsiZGF0YSJdWyJpbnRlcm5ldF9pcCJdID0gaW50ZXJuZXRfaXAKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyJkYXRhIl1bImludGVybmV0X2lwIl0gPSAidW5rbm93biIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgbOG6pXkgaW50ZXJuZXQgSVA6IHtlfSIpCiAgICAgICAgICAgICAgICByZXN1bHRbImRhdGEiXVsiaW50ZXJuZXRfaXAiXSA9ICJlcnJvciIKICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAKICAgIGRlZiBfZ2V0X2ludGVybmV0X2lwKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSDEkeG7i2EgY2jhu4kgSVAgY8O0bmcgY+G7mW5nIGLhurFuZyByZXF1ZXN0cwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogxJDhu4thIGNo4buJIElQIGPDtG5nIGPhu5luZyBob+G6t2MgY2h14buXaSBy4buXbmcgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnIiwgdGltZW91dD0zKQogICAgICAgICAgICBpcCA9IHJlc3BvbnNlLnRleHQuc3RyaXAoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIMSR4buLbmggZOG6oW5nIElQIMSRxqFuIGdp4bqjbgogICAgICAgICAgICBpZiByZS5tYXRjaChyJ15cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9XC5cZHsxLDN9JCcsIGlwKToKICAgICAgICAgICAgICAgIHJldHVybiBpcAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJL4bq/dCBxdeG6oyBraMO0bmcgcGjhuqNpIGzDoCBJUCBo4bujcCBs4buHOiB7aXB9IikKICAgICAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuVGltZW91dDoKICAgICAgICAgICAgcHJpbnQoIlRpbWVvdXQga2hpIGzhuqV5IGludGVybmV0IElQICgzIGdpw6J5KSIpCiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgbOG6pXkgaW50ZXJuZXQgSVA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraMO0bmcgeMOhYyDEkeG7i25oIGtoaSBs4bqleSBpbnRlcm5ldCBJUDoge2V9IikKICAgICAgICAgICAgcmV0dXJuICIiCgogICAgZGVmIGNoZWNrX2ludGVybmV0KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSBr4bq/dCBu4buRaSBpbnRlcm5ldAogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgY8OzIGvhur90IG7hu5FpIGludGVybmV0LCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVGjhu60ga+G6v3QgbuG7kWkgxJHhur9uIEdvb2dsZSBETlMgduG7m2kgdGltZW91dCBuZ+G6r24KICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vOC44LjguOCIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIFRo4butIHbhu5tpIG3hu5l0IGRvbWFpbiBraMOhYwogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20iLCB0aW1lb3V0PTUpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldF9sb2NhbF9pcChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgxJHhu4thIGNo4buJIElQIGxvY2FsIGPhu6dhIHRoaeG6v3QgYuG7iyB04burIGRldmljZSBpbmZvCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiDEkOG7i2EgY2jhu4kgSVAgbG9jYWwgaG/hurdjIGNodeG7l2kgcuG7l25nIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgZGV2aWNlX2luZm8gPSBzZWxmLmdldF9kZXZpY2VfaW5mbygpCiAgICAgICAgICAgIGlmIGRldmljZV9pbmZvLmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiIGFuZCAiZGF0YSIgaW4gZGV2aWNlX2luZm86CiAgICAgICAgICAgICAgICByZXR1cm4gZGV2aWNlX2luZm9bImRhdGEiXS5nZXQoImxvY2FsX2lwIiwgIiIpCiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgbOG6pXkgbG9jYWwgSVA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiAiIgoKICAgIGRlZiBkdW1wX3NjcmVlbl94bWwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIER1bXAgdG/DoG4gYuG7mSBj4bqldSB0csO6YyBYTUwgY+G7p2EgbcOgbiBow6xuaCBoaeG7h24gdOG6oWkKICAgICAgICAKICAgICAgICBUcuG6oyB24buBIG7hu5lpIGR1bmcgWE1MIGTGsOG7m2kgZOG6oW5nIGNodeG7l2kKICAgICAgICAiIiIKICAgICAgICByZXNwb25zZSA9IHNlbGYuX21ha2VfcmVxdWVzdCgiZHVtcC1zY3JlZW4teG1sIikKICAgICAgICBpZiByZXNwb25zZVsic3RhdHVzIl0gPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbImRhdGEiXQogICAgICAgIHJldHVybiAiIgoKICAgIGRlZiBvcGVuX2FwcChzZWxmLCBwYWNrYWdlOiBzdHIsIGFjdGl2aXR5OiBzdHIgPSBOb25lKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBN4bufIG3hu5l0IOG7qW5nIGThu6VuZyB24bubaSBwYWNrYWdlIG5hbWUgdsOgIGFjdGl2aXR5IGPhu6UgdGjhu4MKICAgICAgICAiIiIKICAgICAgICBwYXJhbXMgPSB7InBhY2thZ2UiOiBwYWNrYWdlfQogICAgICAgIGlmIGFjdGl2aXR5OgogICAgICAgICAgICBwYXJhbXNbImFjdGl2aXR5Il0gPSBhY3Rpdml0eQogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoIm9wZW5fYXBwIiwgcGFyYW1zPXBhcmFtcykKCiAgICBkZWYgY2xvc2VfYXBwKHNlbGYsIHBhY2thZ2U6IHN0cikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgxJDDs25nIG3hu5l0IOG7qW5nIGThu6VuZyDEkWFuZyBjaOG6oXkKICAgICAgICDGr3UgdGnDqm4gc+G7rSBk4bulbmcgQURCIG7hur91IMSRw6Mga+G6v3QgbuG7kWkKICAgICAgICAiIiIKICAgICAgICBpZiBzZWxmLmlzX2FkYl9jb25uZWN0ZWQ6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgTOG6pXkgdGhhbSBz4buRIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgZGV2aWNlX3BhcmFtcyA9IHNlbGYuX2dldF9hZGJfZGV2aWNlX3BhcmFtKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDEkMOzbmcg4bupbmcgZOG7pW5nIGLhurFuZyBBREIKICAgICAgICAgICAgICAgIGNtZCA9IFsiYWRiIl0gKyBkZXZpY2VfcGFyYW1zICsgWyJzaGVsbCIsIGYiYW0gZm9yY2Utc3RvcCB7cGFja2FnZX0iXQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAic3VjY2VzcyIsICJtZXNzYWdlIjogZiLEkMOjIMSRw7NuZyB7cGFja2FnZX0gYuG6sW5nIEFEQiJ9CiAgICAgICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLlN1YnByb2Nlc3NFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgxJHDs25nIOG7qW5nIGThu6VuZyBi4bqxbmcgQURCOiB7ZX0iKQogICAgICAgICAgICAgICAgIyBO4bq/dSBs4buXaSwgdGjhu60gcGjGsMahbmcgdGjhu6ljIEhUVFAKICAgICAgICAKICAgICAgICAjIFPhu60gZOG7pW5nIEhUVFAgQVBJIG7hur91IGtow7RuZyBjw7MgQURCIGhv4bq3YyBBREIgYuG7iyBs4buXaQogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInByZXNzX2hvbWUiKQoKICAgIGRlZiBfc2FuaXRpemVfeG1sKHNlbGYsIHhtbF9jb250ZW50OiBzdHIpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBY4butIGzDvSBjw6FjIGvDvSB04buxIMSR4bq3YyBiaeG7h3QgdHJvbmcgWE1MIMSR4buDIHRyw6FuaCBs4buXaSBraGkgcGjDom4gdMOtY2gKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB4bWxfY29udGVudDogQ2h14buXaSBYTUwgY+G6p24geOG7rSBsw70KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBDaHXhu5dpIFhNTCDEkcOjIMSRxrDhu6NjIHjhu60gbMO9CiAgICAgICAgIiIiCiAgICAgICAgIyBUaGF5IHRo4bq/IGPDoWMga8O9IHThu7EgJiBraMO0bmcgaOG7o3AgbOG7hyBi4bqxbmcgJmFtcDsKICAgICAgICAjIE5oxrBuZyBnaeG7ryBuZ3V5w6puIGPDoWMgZW50aXR5IGjhu6NwIGzhu4cgbmjGsCAmYW1wOywgJmx0OywgJmd0OywgJnF1b3Q7LCAmYXBvczsKICAgICAgICB4bWxfY29udGVudCA9IHJlLnN1YihyJyYoPyEoYW1wfGx0fGd0fHF1b3R8YXBvcyk7KScsICcmYW1wOycsIHhtbF9jb250ZW50KQogICAgICAgIAogICAgICAgICMgTG/huqFpIGLhu48gY8OhYyBrw70gdOG7sSDEkWnhu4F1IGtoaeG7g24ga2jDtG5nIGjhu6NwIGzhu4cgdHJvbmcgWE1MCiAgICAgICAgeG1sX2NvbnRlbnQgPSByZS5zdWIocidbXHgwMC1ceDA4XHgwQlx4MENceDBFLVx4MUZdJywgJycsIHhtbF9jb250ZW50KQogICAgICAgIAogICAgICAgIHJldHVybiB4bWxfY29udGVudAoKICAgIGRlZiBmaW5kX2VsZW1lbnRfaW5feG1sKHNlbGYsIHhtbF9jb250ZW50OiBzdHIsIAogICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IHN0ciA9IE5vbmUsIGNsYXNzX25hbWU6IHN0ciA9IE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gcGjhuqduIHThu60gdHJvbmcgWE1MIGThu7FhIHRyw6puIHRleHQsIGNvbnRlbnQtZGVzYywgcmVzb3VyY2UtaWQsIGNsYXNzIGhv4bq3YyB2aXNpYmxlLXRvLXVzZXIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB4bWxfY29udGVudDogTuG7mWkgZHVuZyBYTUwKICAgICAgICAgICAgdGV4dDogVGV4dCBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIHJlc291cmNlX2lkOiBSZXNvdXJjZSBJRCBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IFRydWUgxJHhu4MgdMOsbSBlbGVtZW50IGhp4buDbiB0aOG7iyB24bubaSB1c2VyICht4bq3YyDEkeG7i25oKSwgRmFsc2UgxJHhu4MgdMOsbSBlbGVtZW50IOG6qW4sIE5vbmUgxJHhu4MgYuG7jyBxdWEgxJFp4buBdSBraeG7h24gbsOgeQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06IFBo4bqnbiB04butIMSR4bqndSB0acOqbiB0w6xtIHRo4bqleSBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAiIiIKICAgICAgICBpZiBub3QgeG1sX2NvbnRlbnQ6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgIGlmIExYTUxfQVZBSUxBQkxFOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIFjhu60gbMO9IGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdCB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5fc2FuaXRpemVfeG1sKHhtbF9jb250ZW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFBhcnNlIFhNTCB24bubaSB0w7l5IGNo4buNbiByZWNvdmVyIMSR4buDIHjhu60gbMO9IGzhu5dpCiAgICAgICAgICAgICAgICBwYXJzZXIgPSBldHJlZS5YTUxQYXJzZXIocmVjb3Zlcj1UcnVlKQogICAgICAgICAgICAgICAgcm9vdCA9IGV0cmVlLmZyb21zdHJpbmcoeG1sX2NvbnRlbnQuZW5jb2RlKCd1dGYtOCcpLCBwYXJzZXI9cGFyc2VyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFjDonkgZOG7sW5nIFhQYXRoIHF1ZXJ5IGThu7FhIHRyw6puIGPDoWMgxJFp4buBdSBraeG7h24KICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgPSBbXQogICAgICAgICAgICAgICAgaWYgdGV4dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYSB0cm9uZyB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnY29udGFpbnMoQHRleHQsICJ7dGV4dH0iKScpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucy5hcHBlbmQoZidAdGV4dD0ie3RleHR9IicpCiAgICAgICAgICAgICAgICBpZiBjb250ZW50X2Rlc2MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGFpbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EgdHJvbmcgY29udGVudC1kZXNjCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnY29udGFpbnMoQGNvbnRlbnQtZGVzYywgIntjb250ZW50X2Rlc2N9IiknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnQGNvbnRlbnQtZGVzYz0ie2NvbnRlbnRfZGVzY30iJykKICAgICAgICAgICAgICAgIGlmIHJlc291cmNlX2lkIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnQHJlc291cmNlLWlkPSJ7cmVzb3VyY2VfaWR9IicpCiAgICAgICAgICAgICAgICBpZiBjbGFzc19uYW1lIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnQGNsYXNzPSJ7Y2xhc3NfbmFtZX0iJykKICAgICAgICAgICAgICAgIGlmIHZpc2libGVfdG9fdXNlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3ZhbHVlID0gInRydWUiIGlmIHZpc2libGVfdG9fdXNlciBlbHNlICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ0B2aXNpYmxlLXRvLXVzZXI9Int2aXNpYmxlX3ZhbHVlfSInKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB4cGF0aF9xdWVyeSA9ICIvL25vZGUiCiAgICAgICAgICAgICAgICBpZiBjb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgIHhwYXRoX3F1ZXJ5ICs9ICJbIiArICIgYW5kICIuam9pbihjb25kaXRpb25zKSArICJdIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gcGjhuqduIHThu60gxJHhuqd1IHRpw6puIHBow7kgaOG7o3AKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByb290LnhwYXRoKHhwYXRoX3F1ZXJ5KQogICAgICAgICAgICAgICAgaWYgZWxlbWVudDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZWxlbWVudF90b19kaWN0KGVsZW1lbnRbMF0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHTDrG0gcGjhuqduIHThu60gduG7m2kgbHhtbDoge2V9IikKICAgICAgICAKICAgICAgICAjIEZhbGxiYWNrOiBUw6xtIGtp4bq/bSBi4bqxbmcgcmVnZXgKICAgICAgICBpZiB0ZXh0OgogICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EgdGhheSB2w6wga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gZid0ZXh0PSJbXiJdKntyZS5lc2NhcGUodGV4dCl9W14iXSoiJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBmJ3RleHQ9Int0ZXh0fSInCiAgICAgICAgICAgIG1hdGNoID0gcmUuc2VhcmNoKHBhdHRlcm4sIHhtbF9jb250ZW50KQogICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgICMgVMOsbSB0aOG6uyBub2RlIGNo4bupYSB0ZXh0CiAgICAgICAgICAgICAgICBzdGFydF9wb3MgPSB4bWxfY29udGVudC5yZmluZCgnPG5vZGUnLCAwLCBtYXRjaC5zdGFydCgpKQogICAgICAgICAgICAgICAgaWYgc3RhcnRfcG9zICE9IC0xOgogICAgICAgICAgICAgICAgICAgIGVuZF9wb3MgPSB4bWxfY29udGVudC5maW5kKCc+Jywgc3RhcnRfcG9zKSArIDEKICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnRlbnQgPSB4bWxfY29udGVudFtzdGFydF9wb3M6ZW5kX3Bvc10KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZXh0cmFjdF9hdHRyaWJ1dGVzKG5vZGVfY29udGVudCkKICAgICAgICAKICAgICAgICBpZiBjb250ZW50X2Rlc2M6CiAgICAgICAgICAgIGlmIGNvbnRhaW5zOgogICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYSB0aGF5IHbDrCBraOG7m3AgY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBmJ2NvbnRlbnQtZGVzYz0iW14iXSp7cmUuZXNjYXBlKGNvbnRlbnRfZGVzYyl9W14iXSoiJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBmJ2NvbnRlbnQtZGVzYz0ie2NvbnRlbnRfZGVzY30iJwogICAgICAgICAgICBtYXRjaCA9IHJlLnNlYXJjaChwYXR0ZXJuLCB4bWxfY29udGVudCkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICAjIFTDrG0gdGjhursgbm9kZSBjaOG7qWEgY29udGVudC1kZXNjCiAgICAgICAgICAgICAgICBzdGFydF9wb3MgPSB4bWxfY29udGVudC5yZmluZCgnPG5vZGUnLCAwLCBtYXRjaC5zdGFydCgpKQogICAgICAgICAgICAgICAgaWYgc3RhcnRfcG9zICE9IC0xOgogICAgICAgICAgICAgICAgICAgIGVuZF9wb3MgPSB4bWxfY29udGVudC5maW5kKCc+Jywgc3RhcnRfcG9zKSArIDEKICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnRlbnQgPSB4bWxfY29udGVudFtzdGFydF9wb3M6ZW5kX3Bvc10KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZXh0cmFjdF9hdHRyaWJ1dGVzKG5vZGVfY29udGVudCkKICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnRlbnQgPSB4bWxfY29udGVudFtzdGFydF9wb3M6ZW5kX3Bvc10KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZXh0cmFjdF9hdHRyaWJ1dGVzKG5vZGVfY29udGVudCkKICAgICAgICAKICAgICAgICBpZiByZXNvdXJjZV9pZDoKICAgICAgICAgICAgcGF0dGVybiA9IGYncmVzb3VyY2UtaWQ9IntyZXNvdXJjZV9pZH0iJwogICAgICAgICAgICBtYXRjaCA9IHJlLnNlYXJjaChwYXR0ZXJuLCB4bWxfY29udGVudCkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICAjIFTDrG0gdGjhursgbm9kZSBjaOG7qWEgcmVzb3VyY2UtaWQKICAgICAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHhtbF9jb250ZW50LnJmaW5kKCc8bm9kZScsIDAsIG1hdGNoLnN0YXJ0KCkpCiAgICAgICAgICAgICAgICBpZiBzdGFydF9wb3MgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgZW5kX3BvcyA9IHhtbF9jb250ZW50LmZpbmQoJz4nLCBzdGFydF9wb3MpICsgMQogICAgICAgICAgICAgICAgICAgIG5vZGVfY29udGVudCA9IHhtbF9jb250ZW50W3N0YXJ0X3BvczplbmRfcG9zXQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9leHRyYWN0X2F0dHJpYnV0ZXMobm9kZV9jb250ZW50KQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIGlmIGNsYXNzX25hbWU6CiAgICAgICAgICAgIHBhdHRlcm4gPSBmJ2NsYXNzPSJ7Y2xhc3NfbmFtZX0iJwogICAgICAgICAgICBtYXRjaCA9IHJlLnNlYXJjaChwYXR0ZXJuLCB4bWxfY29udGVudCkKICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICAjIFTDrG0gdGjhursgbm9kZSBjaOG7qWEgY2xhc3MKICAgICAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHhtbF9jb250ZW50LnJmaW5kKCc8bm9kZScsIDAsIG1hdGNoLnN0YXJ0KCkpCiAgICAgICAgICAgICAgICBpZiBzdGFydF9wb3MgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgZW5kX3BvcyA9IHhtbF9jb250ZW50LmZpbmQoJz4nLCBzdGFydF9wb3MpICsgMQogICAgICAgICAgICAgICAgICAgIG5vZGVfY29udGVudCA9IHhtbF9jb250ZW50W3N0YXJ0X3BvczplbmRfcG9zXQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9leHRyYWN0X2F0dHJpYnV0ZXMobm9kZV9jb250ZW50KQogICAgICAgIAogICAgICAgIHJldHVybiBOb25lCiAgICAKICAgIGRlZiBmaW5kX3BhcmVudF9lbGVtZW50X2luX3htbChzZWxmLCB4bWxfY29udGVudDogc3RyLCBjaGlsZF9lbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gZWxlbWVudCBjaGEgY+G7p2EgbeG7mXQgZWxlbWVudCBjb24gdHJvbmcgWE1MCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgeG1sX2NvbnRlbnQ6IE7hu5lpIGR1bmcgWE1MCiAgICAgICAgICAgIGNoaWxkX2VsZW1lbnQ6IEVsZW1lbnQgY29uIChkaWN0IHbhu5tpIGPDoWMgdGh14buZYyB0w61uaCBuaMawIGJvdW5kcywgdGV4dCwgZXRjLikKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOiBFbGVtZW50IGNoYSBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAiIiIKICAgICAgICBpZiBub3QgeG1sX2NvbnRlbnQgb3Igbm90IGNoaWxkX2VsZW1lbnQ6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgIGlmIExYTUxfQVZBSUxBQkxFOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIFjhu60gbMO9IGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdCB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5fc2FuaXRpemVfeG1sKHhtbF9jb250ZW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFBhcnNlIFhNTCB24bubaSB0w7l5IGNo4buNbiByZWNvdmVyIMSR4buDIHjhu60gbMO9IGzhu5dpCiAgICAgICAgICAgICAgICBwYXJzZXIgPSBldHJlZS5YTUxQYXJzZXIocmVjb3Zlcj1UcnVlKQogICAgICAgICAgICAgICAgcm9vdCA9IGV0cmVlLmZyb21zdHJpbmcoeG1sX2NvbnRlbnQuZW5jb2RlKCd1dGYtOCcpLCBwYXJzZXI9cGFyc2VyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFjDonkgZOG7sW5nIMSRaeG7gXUga2nhu4duIMSR4buDIHTDrG0gZWxlbWVudCBjb24gY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgPSBbXQogICAgICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gY2hpbGRfZWxlbWVudC5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgIGlmIGtleSBpbiBbJ3RleHQnLCAnY29udGVudC1kZXNjJywgJ3Jlc291cmNlLWlkJywgJ2NsYXNzJywgJ2JvdW5kcycsICd2aXNpYmxlLXRvLXVzZXInXToKICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucy5hcHBlbmQoZidAe2tleX09Int2YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IGNvbmRpdGlvbnM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgeHBhdGhfcXVlcnkgPSAiLy9ub2RlWyIgKyAiIGFuZCAiLmpvaW4oY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGVsZW1lbnQgY29uCiAgICAgICAgICAgICAgICBjaGlsZF9ub2RlcyA9IHJvb3QueHBhdGgoeHBhdGhfcXVlcnkpCiAgICAgICAgICAgICAgICBpZiBjaGlsZF9ub2RlczoKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGVsZW1lbnQgY2hhIGPhu6dhIGVsZW1lbnQgY29uIMSR4bqndSB0acOqbiB0w6xtIMSRxrDhu6NjCiAgICAgICAgICAgICAgICAgICAgcGFyZW50X25vZGUgPSBjaGlsZF9ub2Rlc1swXS5nZXRwYXJlbnQoKQogICAgICAgICAgICAgICAgICAgIGlmIHBhcmVudF9ub2RlIGlzIG5vdCBOb25lIGFuZCBwYXJlbnRfbm9kZS50YWcgPT0gJ25vZGUnOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZWxlbWVudF90b19kaWN0KHBhcmVudF9ub2RlKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0w6xtIGVsZW1lbnQgY2hhIHbhu5tpIGx4bWw6IHtlfSIpCiAgICAgICAgCiAgICAgICAgIyBGYWxsYmFjazogVMOsbSBraeG6v20gYuG6sW5nIHJlZ2V4IChwaOG7qWMgdOG6oXAgaMahbiBuaMawbmcgY+G6p24gdGhp4bq/dCkKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVMOsbSBib3VuZHMgY+G7p2EgZWxlbWVudCBjb24gxJHhu4MgeMOhYyDEkeG7i25oIHbhu4sgdHLDrQogICAgICAgICAgICBjaGlsZF9ib3VuZHMgPSBjaGlsZF9lbGVtZW50LmdldCgnYm91bmRzJywgJycpCiAgICAgICAgICAgIGlmIG5vdCBjaGlsZF9ib3VuZHM6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHBhdHRlcm4gY+G7p2EgZWxlbWVudCBjb24gdHJvbmcgWE1MCiAgICAgICAgICAgIGNoaWxkX3BhdHRlcm4gPSBOb25lCiAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIGNoaWxkX2VsZW1lbnQuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGtleSBpbiBbJ3RleHQnLCAnY29udGVudC1kZXNjJywgJ3Jlc291cmNlLWlkJywgJ2NsYXNzJ10gYW5kIHZhbHVlOgogICAgICAgICAgICAgICAgICAgIGVzY2FwZWRfdmFsdWUgPSByZS5lc2NhcGUoc3RyKHZhbHVlKSkKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gZid7a2V5fT0ie2VzY2FwZWRfdmFsdWV9IicKICAgICAgICAgICAgICAgICAgICBpZiBwYXR0ZXJuIGluIHhtbF9jb250ZW50OgogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9wYXR0ZXJuID0gcGF0dGVybgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGNoaWxkX3BhdHRlcm46CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHbhu4sgdHLDrSBj4bunYSBlbGVtZW50IGNvbiB0cm9uZyBYTUwKICAgICAgICAgICAgY2hpbGRfbWF0Y2ggPSByZS5zZWFyY2goY2hpbGRfcGF0dGVybiwgeG1sX2NvbnRlbnQpCiAgICAgICAgICAgIGlmIG5vdCBjaGlsZF9tYXRjaDoKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdGjhursgbm9kZSBjaOG7qWEgcGF0dGVybiBuw6B5CiAgICAgICAgICAgIGNoaWxkX3N0YXJ0ID0geG1sX2NvbnRlbnQucmZpbmQoJzxub2RlJywgMCwgY2hpbGRfbWF0Y2guc3RhcnQoKSkKICAgICAgICAgICAgaWYgY2hpbGRfc3RhcnQgPT0gLTE6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHRo4bq7IG5vZGUgY2hhIGLhurFuZyBjw6FjaCDEkeG6v20gbGV2ZWwKICAgICAgICAgICAgIyBUw6xtIG5nxrDhu6NjIGzhuqFpIMSR4buDIHTDrG0gdGjhursgbm9kZSBjaGEgZ+G6p24gbmjhuqV0CiAgICAgICAgICAgIHBhcmVudF9zdGFydCA9IHhtbF9jb250ZW50LnJmaW5kKCc8bm9kZScsIDAsIGNoaWxkX3N0YXJ0KQogICAgICAgICAgICBpZiBwYXJlbnRfc3RhcnQgPT0gLTE6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgcGFyZW50X2VuZCA9IHhtbF9jb250ZW50LmZpbmQoJz4nLCBwYXJlbnRfc3RhcnQpICsgMQogICAgICAgICAgICBwYXJlbnRfY29udGVudCA9IHhtbF9jb250ZW50W3BhcmVudF9zdGFydDpwYXJlbnRfZW5kXQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2V4dHJhY3RfYXR0cmlidXRlcyhwYXJlbnRfY29udGVudCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0w6xtIGVsZW1lbnQgY2hhIHbhu5tpIHJlZ2V4OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgZmluZF9jaGlsZF9lbGVtZW50c19pbl94bWwoc2VsZiwgeG1sX2NvbnRlbnQ6IHN0ciwgcGFyZW50X2VsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzdHIgPSBOb25lLCBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgVMOsbSB04bqldCBj4bqjIGPDoWMgZWxlbWVudCBjb24gY+G7p2EgbeG7mXQgZWxlbWVudCBjaGEgdHJvbmcgWE1MCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgeG1sX2NvbnRlbnQ6IE7hu5lpIGR1bmcgWE1MCiAgICAgICAgICAgIHBhcmVudF9lbGVtZW50OiBFbGVtZW50IGNoYSAoZGljdCB24bubaSBjw6FjIHRodeG7mWMgdMOtbmggbmjGsCBib3VuZHMsIHRleHQsIGV0Yy4pCiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggY8OhYyBlbGVtZW50IGNvbiB0w6xtIHRo4bqleQogICAgICAgICIiIgogICAgICAgIHJlc3VsdHMgPSBbXQogICAgICAgIAogICAgICAgIGlmIG5vdCB4bWxfY29udGVudCBvciBub3QgcGFyZW50X2VsZW1lbnQ6CiAgICAgICAgICAgIHJldHVybiByZXN1bHRzCiAgICAgICAgICAgIAogICAgICAgIGlmIExYTUxfQVZBSUxBQkxFOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIFjhu60gbMO9IGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdCB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5fc2FuaXRpemVfeG1sKHhtbF9jb250ZW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFBhcnNlIFhNTCB24bubaSB0w7l5IGNo4buNbiByZWNvdmVyIMSR4buDIHjhu60gbMO9IGzhu5dpCiAgICAgICAgICAgICAgICBwYXJzZXIgPSBldHJlZS5YTUxQYXJzZXIocmVjb3Zlcj1UcnVlKQogICAgICAgICAgICAgICAgcm9vdCA9IGV0cmVlLmZyb21zdHJpbmcoeG1sX2NvbnRlbnQuZW5jb2RlKCd1dGYtOCcpLCBwYXJzZXI9cGFyc2VyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gZWxlbWVudCBjaGEgdHLGsOG7m2MKICAgICAgICAgICAgICAgIHBhcmVudF9jb25kaXRpb25zID0gW10KICAgICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIHBhcmVudF9lbGVtZW50Lml0ZW1zKCk6CiAgICAgICAgICAgICAgICAgICAgaWYga2V5IGluIFsndGV4dCcsICdjb250ZW50LWRlc2MnLCAncmVzb3VyY2UtaWQnLCAnY2xhc3MnLCAnYm91bmRzJywgJ3Zpc2libGUtdG8tdXNlciddOgogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfY29uZGl0aW9ucy5hcHBlbmQoZidAe2tleX09Int2YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IHBhcmVudF9jb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHBhcmVudF94cGF0aCA9ICIvL25vZGVbIiArICIgYW5kICIuam9pbihwYXJlbnRfY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgIHBhcmVudF9ub2RlcyA9IHJvb3QueHBhdGgocGFyZW50X3hwYXRoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgcGFyZW50X25vZGVzOgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIGVsZW1lbnQgY29uIGPhu6dhIGVsZW1lbnQgY2hhCiAgICAgICAgICAgICAgICBmb3IgcGFyZW50X25vZGUgaW4gcGFyZW50X25vZGVzOgogICAgICAgICAgICAgICAgICAgICMgWMOieSBk4buxbmcgxJFp4buBdSBraeG7h24gdMOsbSBraeG6v20gY2hvIGVsZW1lbnQgY29uCiAgICAgICAgICAgICAgICAgICAgY2hpbGRfY29uZGl0aW9ucyA9IFtdCiAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfY29uZGl0aW9ucy5hcHBlbmQoZidAdGV4dD0ie3RleHR9IicpCiAgICAgICAgICAgICAgICAgICAgaWYgY29udGVudF9kZXNjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9jb25kaXRpb25zLmFwcGVuZChmJ0Bjb250ZW50LWRlc2M9Intjb250ZW50X2Rlc2N9IicpCiAgICAgICAgICAgICAgICAgICAgaWYgcmVzb3VyY2VfaWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX2NvbmRpdGlvbnMuYXBwZW5kKGYnQHJlc291cmNlLWlkPSJ7cmVzb3VyY2VfaWR9IicpCiAgICAgICAgICAgICAgICAgICAgaWYgY2xhc3NfbmFtZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfY29uZGl0aW9ucy5hcHBlbmQoZidAY2xhc3M9IntjbGFzc19uYW1lfSInKQogICAgICAgICAgICAgICAgICAgIGlmIHZpc2libGVfdG9fdXNlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV92YWx1ZSA9ICJ0cnVlIiBpZiB2aXNpYmxlX3RvX3VzZXIgZWxzZSAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX2NvbmRpdGlvbnMuYXBwZW5kKGYnQHZpc2libGUtdG8tdXNlcj0ie3Zpc2libGVfdmFsdWV9IicpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGVsZW1lbnQgY29uIHRyb25nIHBhcmVudCBub2RlCiAgICAgICAgICAgICAgICAgICAgY2hpbGRfeHBhdGggPSAiLi8vbm9kZSIKICAgICAgICAgICAgICAgICAgICBpZiBjaGlsZF9jb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF94cGF0aCArPSAiWyIgKyAiIGFuZCAiLmpvaW4oY2hpbGRfY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBjaGlsZF9ub2RlcyA9IHBhcmVudF9ub2RlLnhwYXRoKGNoaWxkX3hwYXRoKQogICAgICAgICAgICAgICAgICAgIGZvciBjaGlsZF9ub2RlIGluIGNoaWxkX25vZGVzOgogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLmFwcGVuZChzZWxmLl9lbGVtZW50X3RvX2RpY3QoY2hpbGRfbm9kZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0w6xtIGVsZW1lbnQgY29uIHbhu5tpIGx4bWw6IHtlfSIpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgIAogICAgZGVmIGZpbmRfY2hpbGRfZWxlbWVudF9pbl94bWwoc2VsZiwgeG1sX2NvbnRlbnQ6IHN0ciwgcGFyZW50X2VsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IHN0ciA9IE5vbmUsIGNsYXNzX25hbWU6IHN0ciA9IE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gZWxlbWVudCBjb24gxJHhuqd1IHRpw6puIGPhu6dhIG3hu5l0IGVsZW1lbnQgY2hhIHRyb25nIFhNTAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHhtbF9jb250ZW50OiBO4buZaSBkdW5nIFhNTAogICAgICAgICAgICBwYXJlbnRfZWxlbWVudDogRWxlbWVudCBjaGEgKGRpY3QgduG7m2kgY8OhYyB0aHXhu5ljIHTDrW5oIG5oxrAgYm91bmRzLCB0ZXh0LCBldGMuKQogICAgICAgICAgICB0ZXh0OiBUZXh0IGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICAgICAgY29udGVudF9kZXNjOiBDb250ZW50IGRlc2NyaXB0aW9uIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IFJlc291cmNlIElEIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICAgICAgY2xhc3NfbmFtZTogQ2xhc3MgbmFtZSBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgICAgIHZpc2libGVfdG9fdXNlcjogVHJ1ZSDEkeG7gyB0w6xtIGVsZW1lbnQgaGnhu4NuIHRo4buLIHbhu5tpIHVzZXIgKG3hurdjIMSR4buLbmgpLCBGYWxzZSDEkeG7gyB0w6xtIGVsZW1lbnQg4bqpbiwgTm9uZSDEkeG7gyBi4buPIHF1YSDEkWnhu4F1IGtp4buHbiBuw6B5CiAgICAgICAgICAgIGNvbnRhaW5zOiBGYWxzZSDEkeG7gyB0w6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMgKG3hurdjIMSR4buLbmgpLCBUcnVlIMSR4buDIHTDrG0ga2nhur9tIGNo4bupYSB04burIGtow7NhCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXTogRWxlbWVudCBjb24gxJHhuqd1IHRpw6puIHTDrG0gdGjhuqV5IGhv4bq3YyBOb25lIG7hur91IGtow7RuZyB0w6xtIHRo4bqleQogICAgICAgICIiIgogICAgICAgIGNoaWxkX2VsZW1lbnRzID0gc2VsZi5maW5kX2NoaWxkX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgeG1sX2NvbnRlbnQsIHBhcmVudF9lbGVtZW50LCB0ZXh0LCBjb250ZW50X2Rlc2MsIHJlc291cmNlX2lkLCBjbGFzc19uYW1lLCB2aXNpYmxlX3RvX3VzZXIsIGNvbnRhaW5zCiAgICAgICAgKQogICAgICAgIHJldHVybiBjaGlsZF9lbGVtZW50c1swXSBpZiBjaGlsZF9lbGVtZW50cyBlbHNlIE5vbmUKICAgIAogICAgZGVmIGZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzZWxmLCB4bWxfY29udGVudDogc3RyLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGVfdG9fdXNlcjogYm9vbCA9IFRydWUsIGNvbnRhaW5zOiBib29sID0gRmFsc2UpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gdOG6pXQgY+G6oyBjw6FjIHBo4bqnbiB04butIHRyb25nIFhNTCBwaMO5IGjhu6NwIHbhu5tpIMSRaeG7gXUga2nhu4duCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgeG1sX2NvbnRlbnQ6IE7hu5lpIGR1bmcgWE1MCiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggY8OhYyBwaOG6p24gdOG7rSB0w6xtIHRo4bqleQogICAgICAgICIiIgogICAgICAgIHJlc3VsdHMgPSBbXQogICAgICAgIAogICAgICAgIGlmIG5vdCB4bWxfY29udGVudDoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMKICAgICAgICAgICAgCiAgICAgICAgaWYgTFhNTF9BVkFJTEFCTEU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgWOG7rSBsw70gY8OhYyBrw70gdOG7sSDEkeG6t2MgYmnhu4d0IHRyb25nIFhNTCDEkeG7gyB0csOhbmggbOG7l2kgRW50aXR5UmVmCiAgICAgICAgICAgICAgICB4bWxfY29udGVudCA9IHNlbGYuX3Nhbml0aXplX3htbCh4bWxfY29udGVudCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBQYXJzZSBYTUwgduG7m2kgdMO5eSBjaOG7jW4gcmVjb3ZlciDEkeG7gyB44butIGzDvSBs4buXaQogICAgICAgICAgICAgICAgcGFyc2VyID0gZXRyZWUuWE1MUGFyc2VyKHJlY292ZXI9VHJ1ZSkKICAgICAgICAgICAgICAgIHJvb3QgPSBldHJlZS5mcm9tc3RyaW5nKHhtbF9jb250ZW50LmVuY29kZSgndXRmLTgnKSwgcGFyc2VyPXBhcnNlcikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBYw6J5IGThu7FuZyBYUGF0aCBxdWVyeSBk4buxYSB0csOqbiBjw6FjIMSRaeG7gXUga2nhu4duCiAgICAgICAgICAgICAgICBjb25kaXRpb25zID0gW10KICAgICAgICAgICAgICAgIGlmIHRleHQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGFpbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EgdHJvbmcgdGV4dAogICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ2NvbnRhaW5zKEB0ZXh0LCAie3RleHR9IiknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKGYnQHRleHQ9Int0ZXh0fSInKQogICAgICAgICAgICAgICAgaWYgY29udGVudF9kZXNjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGlmIGNvbnRhaW5zOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0ga2nhur9tIGNo4bupYSB04burIGtow7NhIHRyb25nIGNvbnRlbnQtZGVzYwogICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ2NvbnRhaW5zKEBjb250ZW50LWRlc2MsICJ7Y29udGVudF9kZXNjfSIpJykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYwogICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ0Bjb250ZW50LWRlc2M9Intjb250ZW50X2Rlc2N9IicpCiAgICAgICAgICAgICAgICBpZiByZXNvdXJjZV9pZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ0ByZXNvdXJjZS1pZD0ie3Jlc291cmNlX2lkfSInKQogICAgICAgICAgICAgICAgaWYgY2xhc3NfbmFtZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZChmJ0BjbGFzcz0ie2NsYXNzX25hbWV9IicpCiAgICAgICAgICAgICAgICBpZiB2aXNpYmxlX3RvX3VzZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV92YWx1ZSA9ICJ0cnVlIiBpZiB2aXNpYmxlX3RvX3VzZXIgZWxzZSAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucy5hcHBlbmQoZidAdmlzaWJsZS10by11c2VyPSJ7dmlzaWJsZV92YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgeHBhdGhfcXVlcnkgPSAiLy9ub2RlIgogICAgICAgICAgICAgICAgaWYgY29uZGl0aW9uczoKICAgICAgICAgICAgICAgICAgICB4cGF0aF9xdWVyeSArPSAiWyIgKyAiIGFuZCAiLmpvaW4oY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgcGjhuqduIHThu60gcGjDuSBo4bujcAogICAgICAgICAgICAgICAgZWxlbWVudHMgPSByb290LnhwYXRoKHhwYXRoX3F1ZXJ5KQogICAgICAgICAgICAgICAgZm9yIGVsZW1lbnQgaW4gZWxlbWVudHM6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQoc2VsZi5fZWxlbWVudF90b19kaWN0KGVsZW1lbnQpKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0w6xtIHBo4bqnbiB04butIHbhu5tpIGx4bWw6IHtlfSIpCiAgICAgICAgICAgICAgICBwcmludChmIlRo4butIHTDrG0gcGjhuqduIHThu60gYuG6sW5nIHBoxrDGoW5nIHRo4bupYyB0aGF5IHRo4bq/Li4uIikKICAgICAgICAKICAgICAgICAjIEZhbGxiYWNrOiBUw6xtIGtp4bq/bSBi4bqxbmcgcmVnZXggKGNo4buJIHRy4bqjIHbhu4Ega+G6v3QgcXXhuqMgxJHGoW4gZ2nhuqNuKQogICAgICAgIGlmIG5vdCByZXN1bHRzIGFuZCB0ZXh0OgogICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EgdGhheSB2w6wga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gZid0ZXh0PSJbXiJdKntyZS5lc2NhcGUodGV4dCl9W14iXSoiJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUw6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBmJ3RleHQ9Int0ZXh0fSInCiAgICAgICAgICAgIGZvciBtYXRjaCBpbiByZS5maW5kaXRlcihwYXR0ZXJuLCB4bWxfY29udGVudCk6CiAgICAgICAgICAgICAgICBzdGFydF9wb3MgPSB4bWxfY29udGVudC5yZmluZCgnPG5vZGUnLCAwLCBtYXRjaC5zdGFydCgpKQogICAgICAgICAgICAgICAgaWYgc3RhcnRfcG9zICE9IC0xOgogICAgICAgICAgICAgICAgICAgIGVuZF9wb3MgPSB4bWxfY29udGVudC5maW5kKCc+Jywgc3RhcnRfcG9zKSArIDEKICAgICAgICAgICAgICAgICAgICBub2RlX2NvbnRlbnQgPSB4bWxfY29udGVudFtzdGFydF9wb3M6ZW5kX3Bvc10KICAgICAgICAgICAgICAgICAgICByZXN1bHRzLmFwcGVuZChzZWxmLl9leHRyYWN0X2F0dHJpYnV0ZXMobm9kZV9jb250ZW50KSkKICAgICAgICAKICAgICAgICBpZiBub3QgcmVzdWx0cyBhbmQgY29udGVudF9kZXNjOgogICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EgdGhheSB2w6wga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gZidjb250ZW50LWRlc2M9IlteIl0qe3JlLmVzY2FwZShjb250ZW50X2Rlc2MpfVteIl0qIicKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjCiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gZidjb250ZW50LWRlc2M9Intjb250ZW50X2Rlc2N9IicKICAgICAgICAgICAgZm9yIG1hdGNoIGluIHJlLmZpbmRpdGVyKHBhdHRlcm4sIHhtbF9jb250ZW50KToKICAgICAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHhtbF9jb250ZW50LnJmaW5kKCc8bm9kZScsIDAsIG1hdGNoLnN0YXJ0KCkpCiAgICAgICAgICAgICAgICBpZiBzdGFydF9wb3MgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgZW5kX3BvcyA9IHhtbF9jb250ZW50LmZpbmQoJz4nLCBzdGFydF9wb3MpICsgMQogICAgICAgICAgICAgICAgICAgIG5vZGVfY29udGVudCA9IHhtbF9jb250ZW50W3N0YXJ0X3BvczplbmRfcG9zXQogICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKHNlbGYuX2V4dHJhY3RfYXR0cmlidXRlcyhub2RlX2NvbnRlbnQpKQogICAgICAgIAogICAgICAgIHJldHVybiByZXN1bHRzCiAgICAKICAgIGRlZiBfZXh0cmFjdF9hdHRyaWJ1dGVzKHNlbGYsIG5vZGVfY29udGVudDogc3RyKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUcsOtY2ggeHXhuqV0IGPDoWMgdGh14buZYyB0w61uaCB04burIG7hu5lpIGR1bmcgY+G7p2EgbeG7mXQgdGjhursgbm9kZQogICAgICAgICIiIgogICAgICAgIGF0dHJpYnV0ZXMgPSB7fQogICAgICAgIAogICAgICAgICMgQ8OhYyB0aHXhu5ljIHTDrW5oIGPhuqduIHRyw61jaCB4deG6pXQKICAgICAgICBhdHRyX3BhdHRlcm5zID0gewogICAgICAgICAgICAiY2xhc3MiOiByJ2NsYXNzPSIoW14iXSopIicsCiAgICAgICAgICAgICJwYWNrYWdlIjogcidwYWNrYWdlPSIoW14iXSopIicsCiAgICAgICAgICAgICJyZXNvdXJjZS1pZCI6IHIncmVzb3VyY2UtaWQ9IihbXiJdKikiJywKICAgICAgICAgICAgInRleHQiOiByJ3RleHQ9IihbXiJdKikiJywKICAgICAgICAgICAgImNvbnRlbnQtZGVzYyI6IHInY29udGVudC1kZXNjPSIoW14iXSopIicsCiAgICAgICAgICAgICJib3VuZHMiOiByJ2JvdW5kcz0iKFteIl0qKSInLAogICAgICAgICAgICAiY2hlY2thYmxlIjogcidjaGVja2FibGU9IihbXiJdKikiJywKICAgICAgICAgICAgImNoZWNrZWQiOiByJ2NoZWNrZWQ9IihbXiJdKikiJywKICAgICAgICAgICAgImNsaWNrYWJsZSI6IHInY2xpY2thYmxlPSIoW14iXSopIicsCiAgICAgICAgICAgICJlbmFibGVkIjogcidlbmFibGVkPSIoW14iXSopIicsCiAgICAgICAgICAgICJmb2N1c2FibGUiOiByJ2ZvY3VzYWJsZT0iKFteIl0qKSInLAogICAgICAgICAgICAiZm9jdXNlZCI6IHInZm9jdXNlZD0iKFteIl0qKSInLAogICAgICAgICAgICAic2Nyb2xsYWJsZSI6IHInc2Nyb2xsYWJsZT0iKFteIl0qKSInLAogICAgICAgICAgICAibG9uZy1jbGlja2FibGUiOiByJ2xvbmctY2xpY2thYmxlPSIoW14iXSopIicsCiAgICAgICAgICAgICJwYXNzd29yZCI6IHIncGFzc3dvcmQ9IihbXiJdKikiJywKICAgICAgICAgICAgInNlbGVjdGVkIjogcidzZWxlY3RlZD0iKFteIl0qKSInCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZvciBhdHRyX25hbWUsIHBhdHRlcm4gaW4gYXR0cl9wYXR0ZXJucy5pdGVtcygpOgogICAgICAgICAgICBtYXRjaCA9IHJlLnNlYXJjaChwYXR0ZXJuLCBub2RlX2NvbnRlbnQpCiAgICAgICAgICAgIGlmIG1hdGNoOgogICAgICAgICAgICAgICAgYXR0cmlidXRlc1thdHRyX25hbWVdID0gbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBhdHRyaWJ1dGVzCgogICAgZGVmIF9lbGVtZW50X3RvX2RpY3Qoc2VsZiwgZWxlbWVudCkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgQ2h1eeG7g24gxJHhu5VpIG3hu5l0IHBo4bqnbiB04butIFhNTCB04burIGx4bWwgdGjDoG5oIGRpY3QKICAgICAgICAiIiIKICAgICAgICByZXN1bHQgPSB7fQogICAgICAgIAogICAgICAgICMgTOG6pXkgdOG6pXQgY+G6oyB0aHXhu5ljIHTDrW5oCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gZWxlbWVudC5hdHRyaWIuaXRlbXMoKToKICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgZGVmIGZpbmRfZWxlbWVudChzZWxmLCB0ZXh0OiBzdHIgPSBOb25lLCBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgIHZpc2libGVfdG9fdXNlcjogYm9vbCA9IFRydWUsIGNvbnRhaW5zOiBib29sID0gRmFsc2UpIC0+IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBUw6xtIHBo4bqnbiB04butIHRyw6puIG3DoG4gaMOsbmggZOG7sWEgdHLDqm4gdGV4dCwgY29udGVudC1kZXNjLCByZXNvdXJjZS1pZCwgY2xhc3MgaG/hurdjIHZpc2libGUtdG8tdXNlcgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOiBQaOG6p24gdOG7rSDEkeG6p3UgdGnDqm4gdMOsbSB0aOG6pXkgaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5CiAgICAgICAgIiIiCiAgICAgICAgeG1sX2NvbnRlbnQgPSBzZWxmLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgcmV0dXJuIHNlbGYuZmluZF9lbGVtZW50X2luX3htbCh4bWxfY29udGVudCwgdGV4dCwgY29udGVudF9kZXNjLCByZXNvdXJjZV9pZCwgY2xhc3NfbmFtZSwgdmlzaWJsZV90b191c2VyLCBjb250YWlucykKCiAgICBkZWYgZmluZF9hbGxfZWxlbWVudHMoc2VsZiwgdGV4dDogc3RyID0gTm9uZSwgY29udGVudF9kZXNjOiBzdHIgPSBOb25lLCAKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IHN0ciA9IE5vbmUsIGNsYXNzX25hbWU6IHN0ciA9IE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGVfdG9fdXNlcjogYm9vbCA9IFRydWUsIGNvbnRhaW5zOiBib29sID0gRmFsc2UpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gdOG6pXQgY+G6oyBjw6FjIHBo4bqnbiB04butIHRyw6puIG3DoG4gaMOsbmggcGjDuSBo4bujcCB24bubaSDEkWnhu4F1IGtp4buHbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggY8OhYyBwaOG6p24gdOG7rSB0w6xtIHRo4bqleQogICAgICAgICIiIgogICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgIHJldHVybiBzZWxmLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCh4bWxfY29udGVudCwgdGV4dCwgY29udGVudF9kZXNjLCByZXNvdXJjZV9pZCwgY2xhc3NfbmFtZSwgdmlzaWJsZV90b191c2VyLCBjb250YWlucykKCiAgICBkZWYgZmluZF9jaGlsZF9lbGVtZW50cyhzZWxmLCBwYXJlbnRfZWxlbWVudDogRGljdFtzdHIsIEFueV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyID0gTm9uZSwgY29udGVudF9kZXNjOiBzdHIgPSBOb25lLCAKICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IGJvb2wgPSBUcnVlLCBjb250YWluczogYm9vbCA9IEZhbHNlKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBUw6xtIHThuqV0IGPhuqMgY8OhYyBlbGVtZW50IGNvbiBj4bunYSBt4buZdCBlbGVtZW50IGNoYSB0csOqbiBtw6BuIGjDrG5oIGhp4buHbiB04bqhaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBhcmVudF9lbGVtZW50OiBFbGVtZW50IGNoYSAoZGljdCB24bubaSBjw6FjIHRodeG7mWMgdMOtbmggbmjGsCBib3VuZHMsIHRleHQsIGV0Yy4pCiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggY8OhYyBlbGVtZW50IGNvbiB0w6xtIHRo4bqleQogICAgICAgICAgICAKICAgICAgICBFeGFtcGxlOgogICAgICAgICAgICAjIFTDrG0gdOG6pXQgY+G6oyBHcmlkVmlldyB0cm9uZyBt4buZdCBWaWV3R3JvdXAKICAgICAgICAgICAgcGFyZW50ID0gaGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5WaWV3R3JvdXAiKQogICAgICAgICAgICBncmlkX3ZpZXdzID0gaGVscGVyLmZpbmRfY2hpbGRfZWxlbWVudHMocGFyZW50LCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5HcmlkVmlldyIpCiAgICAgICAgIiIiCiAgICAgICAgeG1sX2NvbnRlbnQgPSBzZWxmLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgcmV0dXJuIHNlbGYuZmluZF9jaGlsZF9lbGVtZW50c19pbl94bWwoeG1sX2NvbnRlbnQsIHBhcmVudF9lbGVtZW50LCB0ZXh0LCBjb250ZW50X2Rlc2MsIHJlc291cmNlX2lkLCBjbGFzc19uYW1lLCB2aXNpYmxlX3RvX3VzZXIsIGNvbnRhaW5zKQoKICAgIGRlZiBmaW5kX2NoaWxkX2VsZW1lbnQoc2VsZiwgcGFyZW50X2VsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLAogICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyID0gTm9uZSwgY29udGVudF9kZXNjOiBzdHIgPSBOb25lLCAKICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gZWxlbWVudCBjb24gxJHhuqd1IHRpw6puIGPhu6dhIG3hu5l0IGVsZW1lbnQgY2hhIHRyw6puIG3DoG4gaMOsbmggaGnhu4duIHThuqFpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcGFyZW50X2VsZW1lbnQ6IEVsZW1lbnQgY2hhIChkaWN0IHbhu5tpIGPDoWMgdGh14buZYyB0w61uaCBuaMawIGJvdW5kcywgdGV4dCwgZXRjLikKICAgICAgICAgICAgdGV4dDogVGV4dCBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgICAgIHJlc291cmNlX2lkOiBSZXNvdXJjZSBJRCBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IFRydWUgxJHhu4MgdMOsbSBlbGVtZW50IGhp4buDbiB0aOG7iyB24bubaSB1c2VyICht4bq3YyDEkeG7i25oKSwgRmFsc2UgxJHhu4MgdMOsbSBlbGVtZW50IOG6qW4sIE5vbmUgxJHhu4MgYuG7jyBxdWEgxJFp4buBdSBraeG7h24gbsOgeQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06IEVsZW1lbnQgY29uIMSR4bqndSB0acOqbiB0w6xtIHRo4bqleSBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAgICAgCiAgICAgICAgRXhhbXBsZToKICAgICAgICAgICAgIyBUw6xtIG3hu5l0IFRleHRWaWV3IHRyb25nIG3hu5l0IExpbmVhckxheW91dCBj4bulIHRo4buDCiAgICAgICAgICAgIHBhcmVudCA9IGhlbHBlci5maW5kX2VsZW1lbnQoY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0IiwgcmVzb3VyY2VfaWQ9ImNvbS5leGFtcGxlOmlkL2NvbnRhaW5lciIpCiAgICAgICAgICAgIHRleHRfdmlldyA9IGhlbHBlci5maW5kX2NoaWxkX2VsZW1lbnQocGFyZW50LCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIpCiAgICAgICAgIiIiCiAgICAgICAgeG1sX2NvbnRlbnQgPSBzZWxmLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgcmV0dXJuIHNlbGYuZmluZF9jaGlsZF9lbGVtZW50X2luX3htbCh4bWxfY29udGVudCwgcGFyZW50X2VsZW1lbnQsIHRleHQsIGNvbnRlbnRfZGVzYywgcmVzb3VyY2VfaWQsIGNsYXNzX25hbWUsIHZpc2libGVfdG9fdXNlciwgY29udGFpbnMpCgogICAgZGVmIGdldF9uZXh0X2VsZW1lbnRfaW5feG1sKHNlbGYsIHhtbF9jb250ZW50OiBzdHIsIGN1cnJlbnRfZWxlbWVudDogRGljdFtzdHIsIEFueV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IGJvb2wgPSBUcnVlLCBjb250YWluczogYm9vbCA9IEZhbHNlKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgVMOsbSBlbGVtZW50IHRp4bq/cCB0aGVvIChhbmggZW0pIGPhu6dhIGVsZW1lbnQgaGnhu4duIHThuqFpIHRyb25nIFhNTAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHhtbF9jb250ZW50OiBO4buZaSBkdW5nIFhNTAogICAgICAgICAgICBjdXJyZW50X2VsZW1lbnQ6IEVsZW1lbnQgaGnhu4duIHThuqFpIMSR4buDIGzDoG0gbeG7kWMKICAgICAgICAgICAgdGV4dDogVGV4dCBj4bunYSBlbGVtZW50IHRp4bq/cCB0aGVvIGPhuqduIHTDrG0KICAgICAgICAgICAgY29udGVudF9kZXNjOiBDb250ZW50IGRlc2NyaXB0aW9uIGPhu6dhIGVsZW1lbnQgdGnhur9wIHRoZW8gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgZWxlbWVudCB0aeG6v3AgdGhlbyBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgZWxlbWVudCB0aeG6v3AgdGhlbyBj4bqnbiB0w6xtCiAgICAgICAgICAgIHZpc2libGVfdG9fdXNlcjogVHJ1ZSDEkeG7gyB0w6xtIGVsZW1lbnQgaGnhu4NuIHRo4buLIHbhu5tpIHVzZXIgKG3hurdjIMSR4buLbmgpLCBGYWxzZSDEkeG7gyB0w6xtIGVsZW1lbnQg4bqpbiwgTm9uZSDEkeG7gyBi4buPIHF1YSDEkWnhu4F1IGtp4buHbiBuw6B5CiAgICAgICAgICAgIGNvbnRhaW5zOiBGYWxzZSDEkeG7gyB0w6xtIGtp4bq/bSBraOG7m3AgY2jDrW5oIHjDoWMgKG3hurdjIMSR4buLbmgpLCBUcnVlIMSR4buDIHTDrG0ga2nhur9tIGNo4bupYSB04burIGtow7NhCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXTogRWxlbWVudCB0aeG6v3AgdGhlbyBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAiIiIKICAgICAgICBpZiBub3QgeG1sX2NvbnRlbnQgb3Igbm90IGN1cnJlbnRfZWxlbWVudDoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgaWYgTFhNTF9BVkFJTEFCTEU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgWOG7rSBsw70gY8OhYyBrw70gdOG7sSDEkeG6t2MgYmnhu4d0IHRyb25nIFhNTAogICAgICAgICAgICAgICAgeG1sX2NvbnRlbnQgPSBzZWxmLl9zYW5pdGl6ZV94bWwoeG1sX2NvbnRlbnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUGFyc2UgWE1MIHbhu5tpIHTDuXkgY2jhu41uIHJlY292ZXIgxJHhu4MgeOG7rSBsw70gbOG7l2kKICAgICAgICAgICAgICAgIHBhcnNlciA9IGV0cmVlLlhNTFBhcnNlcihyZWNvdmVyPVRydWUpCiAgICAgICAgICAgICAgICByb290ID0gZXRyZWUuZnJvbXN0cmluZyh4bWxfY29udGVudC5lbmNvZGUoJ3V0Zi04JyksIHBhcnNlcj1wYXJzZXIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBlbGVtZW50IGhp4buHbiB04bqhaSB0csaw4bubYwogICAgICAgICAgICAgICAgY3VycmVudF9jb25kaXRpb25zID0gW10KICAgICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIGN1cnJlbnRfZWxlbWVudC5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgIGlmIGtleSBpbiBbJ3RleHQnLCAnY29udGVudC1kZXNjJywgJ3Jlc291cmNlLWlkJywgJ2NsYXNzJywgJ2JvdW5kcycsICd2aXNpYmxlLXRvLXVzZXInXToKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jb25kaXRpb25zLmFwcGVuZChmJ0B7a2V5fT0ie3ZhbHVlfSInKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgY3VycmVudF9jb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGN1cnJlbnRfeHBhdGggPSAiLy9ub2RlWyIgKyAiIGFuZCAiLmpvaW4oY3VycmVudF9jb25kaXRpb25zKSArICJdIgogICAgICAgICAgICAgICAgY3VycmVudF9ub2RlcyA9IHJvb3QueHBhdGgoY3VycmVudF94cGF0aCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IGN1cnJlbnRfbm9kZXM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY3VycmVudF9ub2RlID0gY3VycmVudF9ub2Rlc1swXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gZWxlbWVudCB0aeG6v3AgdGhlbyAoZm9sbG93aW5nLXNpYmxpbmcpCiAgICAgICAgICAgICAgICBuZXh0X2NvbmRpdGlvbnMgPSBbXQogICAgICAgICAgICAgICAgaWYgdGV4dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jb25kaXRpb25zLmFwcGVuZChmJ2NvbnRhaW5zKEB0ZXh0LCAie3RleHR9IiknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRfY29uZGl0aW9ucy5hcHBlbmQoZidAdGV4dD0ie3RleHR9IicpCiAgICAgICAgICAgICAgICBpZiBjb250ZW50X2Rlc2MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGFpbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRfY29uZGl0aW9ucy5hcHBlbmQoZidjb250YWlucyhAY29udGVudC1kZXNjLCAie2NvbnRlbnRfZGVzY30iKScpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jb25kaXRpb25zLmFwcGVuZChmJ0Bjb250ZW50LWRlc2M9Intjb250ZW50X2Rlc2N9IicpCiAgICAgICAgICAgICAgICBpZiByZXNvdXJjZV9pZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBuZXh0X2NvbmRpdGlvbnMuYXBwZW5kKGYnQHJlc291cmNlLWlkPSJ7cmVzb3VyY2VfaWR9IicpCiAgICAgICAgICAgICAgICBpZiBjbGFzc19uYW1lIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIG5leHRfY29uZGl0aW9ucy5hcHBlbmQoZidAY2xhc3M9IntjbGFzc19uYW1lfSInKQogICAgICAgICAgICAgICAgaWYgdmlzaWJsZV90b191c2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHZpc2libGVfdmFsdWUgPSAidHJ1ZSIgaWYgdmlzaWJsZV90b191c2VyIGVsc2UgImZhbHNlIgogICAgICAgICAgICAgICAgICAgIG5leHRfY29uZGl0aW9ucy5hcHBlbmQoZidAdmlzaWJsZS10by11c2VyPSJ7dmlzaWJsZV92YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGFuaCBlbSB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgbmV4dF94cGF0aCA9ICJmb2xsb3dpbmctc2libGluZzo6bm9kZSIKICAgICAgICAgICAgICAgIGlmIG5leHRfY29uZGl0aW9uczoKICAgICAgICAgICAgICAgICAgICBuZXh0X3hwYXRoICs9ICJbIiArICIgYW5kICIuam9pbihuZXh0X2NvbmRpdGlvbnMpICsgIl0iCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIG5leHRfbm9kZXMgPSBjdXJyZW50X25vZGUueHBhdGgobmV4dF94cGF0aCkKICAgICAgICAgICAgICAgIGlmIG5leHRfbm9kZXM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VsZW1lbnRfdG9fZGljdChuZXh0X25vZGVzWzBdKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0w6xtIGVsZW1lbnQgdGnhur9wIHRoZW8gduG7m2kgbHhtbDoge2V9IikKICAgICAgICAKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfcHJldl9lbGVtZW50X2luX3htbChzZWxmLCB4bWxfY29udGVudDogc3RyLCBjdXJyZW50X2VsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzdHIgPSBOb25lLCBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gZWxlbWVudCB0csaw4bubYyDEkcOzIChhbmggZW0pIGPhu6dhIGVsZW1lbnQgaGnhu4duIHThuqFpIHRyb25nIFhNTAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHhtbF9jb250ZW50OiBO4buZaSBkdW5nIFhNTAogICAgICAgICAgICBjdXJyZW50X2VsZW1lbnQ6IEVsZW1lbnQgaGnhu4duIHThuqFpIMSR4buDIGzDoG0gbeG7kWMKICAgICAgICAgICAgdGV4dDogVGV4dCBj4bunYSBlbGVtZW50IHRyxrDhu5tjIMSRw7MgY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgZWxlbWVudCB0csaw4bubYyDEkcOzIGPhuqduIHTDrG0KICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IFJlc291cmNlIElEIGPhu6dhIGVsZW1lbnQgdHLGsOG7m2MgxJHDsyBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgZWxlbWVudCB0csaw4bubYyDEkcOzIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOiBFbGVtZW50IHRyxrDhu5tjIMSRw7MgaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5CiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHhtbF9jb250ZW50IG9yIG5vdCBjdXJyZW50X2VsZW1lbnQ6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgIGlmIExYTUxfQVZBSUxBQkxFOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIFjhu60gbMO9IGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdCB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5fc2FuaXRpemVfeG1sKHhtbF9jb250ZW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFBhcnNlIFhNTCB24bubaSB0w7l5IGNo4buNbiByZWNvdmVyIMSR4buDIHjhu60gbMO9IGzhu5dpCiAgICAgICAgICAgICAgICBwYXJzZXIgPSBldHJlZS5YTUxQYXJzZXIocmVjb3Zlcj1UcnVlKQogICAgICAgICAgICAgICAgcm9vdCA9IGV0cmVlLmZyb21zdHJpbmcoeG1sX2NvbnRlbnQuZW5jb2RlKCd1dGYtOCcpLCBwYXJzZXI9cGFyc2VyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gZWxlbWVudCBoaeG7h24gdOG6oWkgdHLGsOG7m2MKICAgICAgICAgICAgICAgIGN1cnJlbnRfY29uZGl0aW9ucyA9IFtdCiAgICAgICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBjdXJyZW50X2VsZW1lbnQuaXRlbXMoKToKICAgICAgICAgICAgICAgICAgICBpZiBrZXkgaW4gWyd0ZXh0JywgJ2NvbnRlbnQtZGVzYycsICdyZXNvdXJjZS1pZCcsICdjbGFzcycsICdib3VuZHMnLCAndmlzaWJsZS10by11c2VyJ106CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY29uZGl0aW9ucy5hcHBlbmQoZidAe2tleX09Int2YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IGN1cnJlbnRfY29uZGl0aW9uczoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjdXJyZW50X3hwYXRoID0gIi8vbm9kZVsiICsgIiBhbmQgIi5qb2luKGN1cnJlbnRfY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgIGN1cnJlbnRfbm9kZXMgPSByb290LnhwYXRoKGN1cnJlbnRfeHBhdGgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBjdXJyZW50X25vZGVzOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGN1cnJlbnRfbm9kZSA9IGN1cnJlbnRfbm9kZXNbMF0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGVsZW1lbnQgdHLGsOG7m2MgxJHDsyAocHJlY2VkaW5nLXNpYmxpbmcpCiAgICAgICAgICAgICAgICBwcmV2X2NvbmRpdGlvbnMgPSBbXQogICAgICAgICAgICAgICAgaWYgdGV4dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBpZiBjb250YWluczoKICAgICAgICAgICAgICAgICAgICAgICAgcHJldl9jb25kaXRpb25zLmFwcGVuZChmJ2NvbnRhaW5zKEB0ZXh0LCAie3RleHR9IiknKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZfY29uZGl0aW9ucy5hcHBlbmQoZidAdGV4dD0ie3RleHR9IicpCiAgICAgICAgICAgICAgICBpZiBjb250ZW50X2Rlc2MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgaWYgY29udGFpbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZfY29uZGl0aW9ucy5hcHBlbmQoZidjb250YWlucyhAY29udGVudC1kZXNjLCAie2NvbnRlbnRfZGVzY30iKScpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJldl9jb25kaXRpb25zLmFwcGVuZChmJ0Bjb250ZW50LWRlc2M9Intjb250ZW50X2Rlc2N9IicpCiAgICAgICAgICAgICAgICBpZiByZXNvdXJjZV9pZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBwcmV2X2NvbmRpdGlvbnMuYXBwZW5kKGYnQHJlc291cmNlLWlkPSJ7cmVzb3VyY2VfaWR9IicpCiAgICAgICAgICAgICAgICBpZiBjbGFzc19uYW1lIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHByZXZfY29uZGl0aW9ucy5hcHBlbmQoZidAY2xhc3M9IntjbGFzc19uYW1lfSInKQogICAgICAgICAgICAgICAgaWYgdmlzaWJsZV90b191c2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHZpc2libGVfdmFsdWUgPSAidHJ1ZSIgaWYgdmlzaWJsZV90b191c2VyIGVsc2UgImZhbHNlIgogICAgICAgICAgICAgICAgICAgIHByZXZfY29uZGl0aW9ucy5hcHBlbmQoZidAdmlzaWJsZS10by11c2VyPSJ7dmlzaWJsZV92YWx1ZX0iJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGFuaCBlbSB0csaw4bubYyDEkcOzIChs4bqleSBjw6FpIGN14buRaSBjw7luZyB2w6wgcHJlY2VkaW5nLXNpYmxpbmcgdHLhuqMgduG7gSB0aGVvIHRo4bupIHThu7EgbmfGsOG7o2MpCiAgICAgICAgICAgICAgICBwcmV2X3hwYXRoID0gInByZWNlZGluZy1zaWJsaW5nOjpub2RlIgogICAgICAgICAgICAgICAgaWYgcHJldl9jb25kaXRpb25zOgogICAgICAgICAgICAgICAgICAgIHByZXZfeHBhdGggKz0gIlsiICsgIiBhbmQgIi5qb2luKHByZXZfY29uZGl0aW9ucykgKyAiXSIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcHJldl9ub2RlcyA9IGN1cnJlbnRfbm9kZS54cGF0aChwcmV2X3hwYXRoKQogICAgICAgICAgICAgICAgaWYgcHJldl9ub2RlczoKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGVsZW1lbnQgY3Xhu5FpIGPDuW5nIHbDrCBwcmVjZWRpbmctc2libGluZyB0cuG6oyB24buBIHRoZW8gdGjhu6kgdOG7sSBuZ8aw4bujYwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbGVtZW50X3RvX2RpY3QocHJldl9ub2Rlc1stMV0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHTDrG0gZWxlbWVudCB0csaw4bubYyDEkcOzIHbhu5tpIGx4bWw6IHtlfSIpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgZ2V0X25leHRfZWxlbWVudChzZWxmLCBjdXJyZW50X2VsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzdHIgPSBOb25lLCBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIAogICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFTDrG0gZWxlbWVudCB0aeG6v3AgdGhlbyAoYW5oIGVtKSBj4bunYSBlbGVtZW50IGhp4buHbiB04bqhaSB0csOqbiBtw6BuIGjDrG5oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgY3VycmVudF9lbGVtZW50OiBFbGVtZW50IGhp4buHbiB04bqhaSDEkeG7gyBsw6BtIG3hu5FjCiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgZWxlbWVudCB0aeG6v3AgdGhlbyBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBlbGVtZW50IHRp4bq/cCB0aGVvIGPhuqduIHTDrG0KICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IFJlc291cmNlIElEIGPhu6dhIGVsZW1lbnQgdGnhur9wIHRoZW8gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIGVsZW1lbnQgdGnhur9wIHRoZW8gY+G6p24gdMOsbQogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IFRydWUgxJHhu4MgdMOsbSBlbGVtZW50IGhp4buDbiB0aOG7iyB24bubaSB1c2VyICht4bq3YyDEkeG7i25oKSwgRmFsc2UgxJHhu4MgdMOsbSBlbGVtZW50IOG6qW4sIE5vbmUgxJHhu4MgYuG7jyBxdWEgxJFp4buBdSBraeG7h24gbsOgeQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06IEVsZW1lbnQgdGnhur9wIHRoZW8gaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5CiAgICAgICAgICAgIAogICAgICAgIEV4YW1wbGU6CiAgICAgICAgICAgICMgVMOsbSBidXR0b24gdGnhur9wIHRoZW8gc2F1IGJ1dHRvbiBoaeG7h24gdOG6oWkKICAgICAgICAgICAgY3VycmVudF9idG4gPSBoZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlByZXZpb3VzIikKICAgICAgICAgICAgbmV4dF9idG4gPSBoZWxwZXIuZ2V0X25leHRfZWxlbWVudChjdXJyZW50X2J0biwgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIikKICAgICAgICAiIiIKICAgICAgICB4bWxfY29udGVudCA9IHNlbGYuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICByZXR1cm4gc2VsZi5nZXRfbmV4dF9lbGVtZW50X2luX3htbCh4bWxfY29udGVudCwgY3VycmVudF9lbGVtZW50LCB0ZXh0LCBjb250ZW50X2Rlc2MsIHJlc291cmNlX2lkLCBjbGFzc19uYW1lLCB2aXNpYmxlX3RvX3VzZXIsIGNvbnRhaW5zKQoKICAgIGRlZiBnZXRfcHJldl9lbGVtZW50KHNlbGYsIGN1cnJlbnRfZWxlbWVudDogRGljdFtzdHIsIEFueV0sCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IGJvb2wgPSBUcnVlLCBjb250YWluczogYm9vbCA9IEZhbHNlKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgVMOsbSBlbGVtZW50IHRyxrDhu5tjIMSRw7MgKGFuaCBlbSkgY+G7p2EgZWxlbWVudCBoaeG7h24gdOG6oWkgdHLDqm4gbcOgbiBow6xuaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGN1cnJlbnRfZWxlbWVudDogRWxlbWVudCBoaeG7h24gdOG6oWkgxJHhu4MgbMOgbSBt4buRYwogICAgICAgICAgICB0ZXh0OiBUZXh0IGPhu6dhIGVsZW1lbnQgdHLGsOG7m2MgxJHDsyBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBlbGVtZW50IHRyxrDhu5tjIMSRw7MgY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgZWxlbWVudCB0csaw4bubYyDEkcOzIGPhuqduIHTDrG0KICAgICAgICAgICAgY2xhc3NfbmFtZTogQ2xhc3MgbmFtZSBj4bunYSBlbGVtZW50IHRyxrDhu5tjIMSRw7MgY+G6p24gdMOsbQogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IFRydWUgxJHhu4MgdMOsbSBlbGVtZW50IGhp4buDbiB0aOG7iyB24bubaSB1c2VyICht4bq3YyDEkeG7i25oKSwgRmFsc2UgxJHhu4MgdMOsbSBlbGVtZW50IOG6qW4sIE5vbmUgxJHhu4MgYuG7jyBxdWEgxJFp4buBdSBraeG7h24gbsOgeQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06IEVsZW1lbnQgdHLGsOG7m2MgxJHDsyBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAgICAgCiAgICAgICAgRXhhbXBsZToKICAgICAgICAgICAgIyBUw6xtIGJ1dHRvbiB0csaw4bubYyDEkcOzIHRyxrDhu5tjIGJ1dHRvbiBoaeG7h24gdOG6oWkKICAgICAgICAgICAgY3VycmVudF9idG4gPSBoZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9Ik5leHQiKQogICAgICAgICAgICBwcmV2X2J0biA9IGhlbHBlci5nZXRfcHJldl9lbGVtZW50KGN1cnJlbnRfYnRuLCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iKQogICAgICAgICIiIgogICAgICAgIHhtbF9jb250ZW50ID0gc2VsZi5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgIHJldHVybiBzZWxmLmdldF9wcmV2X2VsZW1lbnRfaW5feG1sKHhtbF9jb250ZW50LCBjdXJyZW50X2VsZW1lbnQsIHRleHQsIGNvbnRlbnRfZGVzYywgcmVzb3VyY2VfaWQsIGNsYXNzX25hbWUsIHZpc2libGVfdG9fdXNlciwgY29udGFpbnMpCgogICAgZGVmIGlzX2VsZW1lbnRfc2VsZWN0ZWQoc2VsZiwgZWxlbWVudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0gcGjhuqduIHThu60gY8OzIMSRxrDhu6NjIGNo4buNbiBoYXkga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KCJzZWxlY3RlZCIpID09ICJ0cnVlIgoKICAgIGRlZiB3YWl0X2Zvcl9lbGVtZW50KHNlbGYsIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IGJvb2wgPSBUcnVlLCB0aW1lb3V0OiBpbnQgPSAzMCwgCiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2ludGVydmFsOiBpbnQgPSAxLCBjb250YWluczogYm9vbCA9IEZhbHNlKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgQ2jhu50gxJHhu6NpIGNobyDEkeG6v24ga2hpIG3hu5l0IHBo4bqnbiB04butIHh14bqldCBoaeG7h24gdHLDqm4gbcOgbiBow6xuaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRleHQ6IFRleHQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjb250ZW50X2Rlc2M6IENvbnRlbnQgZGVzY3JpcHRpb24gY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICByZXNvdXJjZV9pZDogUmVzb3VyY2UgSUQgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgdGltZW91dDogVGjhu51pIGdpYW4gY2jhu50gdOG7kWkgxJFhIChnacOieSkKICAgICAgICAgICAgY2hlY2tfaW50ZXJ2YWw6IEtob+G6o25nIHRo4budaSBnaWFuIGdp4buvYSBjw6FjIGzhuqduIGtp4buDbSB0cmEgKGdpw6J5KQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06IFBo4bqnbiB04butIHTDrG0gdGjhuqV5IGhv4bq3YyBOb25lIG7hur91IHRpbWVvdXQKICAgICAgICAiIiIKICAgICAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUgPCB0aW1lb3V0OgogICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5maW5kX2VsZW1lbnQodGV4dCwgY29udGVudF9kZXNjLCByZXNvdXJjZV9pZCwgY2xhc3NfbmFtZSwgdmlzaWJsZV90b191c2VyLCBjb250YWlucykKICAgICAgICAgICAgaWYgZWxlbWVudDoKICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdGltZS5zbGVlcChjaGVja19pbnRlcnZhbCkKICAgICAgICAKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiB3YWl0X3RvX3RhcF9lbGVtZW50KHNlbGYsIHRleHQ6IHN0ciA9IE5vbmUsIGNvbnRlbnRfZGVzYzogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLCBjbGFzc19uYW1lOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IGJvb2wgPSBUcnVlLCB0aW1lb3V0OiBpbnQgPSAzMCwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2ludGVydmFsOiBpbnQgPSAxLCBkZWxheV9iZWZvcmVfdGFwOiBpbnQgPSAxLCBjb250YWluczogYm9vbCA9IEZhbHNlKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIENo4budIMSR4bujaSBlbGVtZW50IHh14bqldCBoaeG7h24sIGRlbGF5IG3hu5l0IGtob+G6o25nIHRo4budaSBnaWFuLCBy4buTaSB0YXAgdsOgbyBlbGVtZW50CiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGV4dDogVGV4dCBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIHJlc291cmNlX2lkOiBSZXNvdXJjZSBJRCBj4bunYSBwaOG6p24gdOG7rSBj4bqnbiB0w6xtCiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI6IFRydWUgxJHhu4MgdMOsbSBlbGVtZW50IGhp4buDbiB0aOG7iyB24bubaSB1c2VyICht4bq3YyDEkeG7i25oKSwgRmFsc2UgxJHhu4MgdMOsbSBlbGVtZW50IOG6qW4sIE5vbmUgxJHhu4MgYuG7jyBxdWEgxJFp4buBdSBraeG7h24gbsOgeQogICAgICAgICAgICB0aW1lb3V0OiBUaOG7nWkgZ2lhbiBjaOG7nSB04buRaSDEkWEgxJHhu4MgdMOsbSBlbGVtZW50IChnacOieSkKICAgICAgICAgICAgY2hlY2tfaW50ZXJ2YWw6IEtob+G6o25nIHRo4budaSBnaWFuIGdp4buvYSBjw6FjIGzhuqduIGtp4buDbSB0cmEgKGdpw6J5KQogICAgICAgICAgICBkZWxheV9iZWZvcmVfdGFwOiBUaOG7nWkgZ2lhbiBkZWxheSB0csaw4bubYyBraGkgdGFwIChnacOieSwgbeG6t2MgxJHhu4tuaCAxIGdpw6J5KQogICAgICAgICAgICBjb250YWluczogRmFsc2UgxJHhu4MgdMOsbSBraeG6v20ga2jhu5twIGNow61uaCB4w6FjICht4bq3YyDEkeG7i25oKSwgVHJ1ZSDEkeG7gyB0w6xtIGtp4bq/bSBjaOG7qWEgdOG7qyBraMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENo4budIGVsZW1lbnQgeHXhuqV0IGhp4buHbgogICAgICAgICAgICBlbGVtZW50ID0gc2VsZi53YWl0X2Zvcl9lbGVtZW50KAogICAgICAgICAgICAgICAgdGV4dD10ZXh0LCAKICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYz1jb250ZW50X2Rlc2MsIAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9cmVzb3VyY2VfaWQsIAogICAgICAgICAgICAgICAgY2xhc3NfbmFtZT1jbGFzc19uYW1lLAogICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyPXZpc2libGVfdG9fdXNlciwgCiAgICAgICAgICAgICAgICB0aW1lb3V0PXRpbWVvdXQsIAogICAgICAgICAgICAgICAgY2hlY2tfaW50ZXJ2YWw9Y2hlY2tfaW50ZXJ2YWwsCiAgICAgICAgICAgICAgICBjb250YWlucz1jb250YWlucwogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgZWxlbWVudDoKICAgICAgICAgICAgICAgICMgVOG6oW8gdGjDtG5nIGLDoW8gbOG7l2kgY2hpIHRp4bq/dAogICAgICAgICAgICAgICAgY3JpdGVyaWEgPSBbXQogICAgICAgICAgICAgICAgaWYgdGV4dDoKICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYS5hcHBlbmQoZiJ0ZXh0PSd7dGV4dH0nIikKICAgICAgICAgICAgICAgIGlmIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYS5hcHBlbmQoZiJjb250ZW50X2Rlc2M9J3tjb250ZW50X2Rlc2N9JyIpCiAgICAgICAgICAgICAgICBpZiByZXNvdXJjZV9pZDoKICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYS5hcHBlbmQoZiJyZXNvdXJjZV9pZD0ne3Jlc291cmNlX2lkfSciKQogICAgICAgICAgICAgICAgaWYgY2xhc3NfbmFtZToKICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYS5hcHBlbmQoZiJjbGFzc19uYW1lPSd7Y2xhc3NfbmFtZX0nIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY3JpdGVyaWFfc3RyID0gIiwgIi5qb2luKGNyaXRlcmlhKSBpZiBjcml0ZXJpYSBlbHNlICJraMO0bmcgeMOhYyDEkeG7i25oIgogICAgICAgICAgICAgICAgZXJyb3JfbXNnID0gZiJLaMO0bmcgdMOsbSB0aOG6pXkgZWxlbWVudCBzYXUge3RpbWVvdXR9cyB24bubaSB0acOqdSBjaMOtOiB7Y3JpdGVyaWFfc3RyfSIKICAgICAgICAgICAgICAgIHByaW50KGVycm9yX21zZykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIERlbGF5IHRyxrDhu5tjIGtoaSB0YXAKICAgICAgICAgICAgaWYgZGVsYXlfYmVmb3JlX3RhcCA+IDA6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKGRlbGF5X2JlZm9yZV90YXApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRhcCB2w6BvIGVsZW1lbnQKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi50YXBfZWxlbWVudF9jZW50ZXIoZWxlbWVudCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBxdeG6oyB0YXAKICAgICAgICAgICAgaWYgcmVzdWx0LmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICAgICAgZWxlbWVudF9pbmZvID0gW10KICAgICAgICAgICAgICAgIGlmIHRleHQ6CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudF9pbmZvLmFwcGVuZChmInRleHQ9J3t0ZXh0fSciKQogICAgICAgICAgICAgICAgaWYgY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfaW5mby5hcHBlbmQoZiJjb250ZW50X2Rlc2M9J3tjb250ZW50X2Rlc2N9JyIpCiAgICAgICAgICAgICAgICBpZiByZXNvdXJjZV9pZDoKICAgICAgICAgICAgICAgICAgICBlbGVtZW50X2luZm8uYXBwZW5kKGYicmVzb3VyY2VfaWQ9J3tyZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgICAgIGlmIGNsYXNzX25hbWU6CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudF9pbmZvLmFwcGVuZChmImNsYXNzX25hbWU9J3tjbGFzc19uYW1lfSciKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbGVtZW50X3N0ciA9ICIsICIuam9pbihlbGVtZW50X2luZm8pIGlmIGVsZW1lbnRfaW5mbyBlbHNlICJlbGVtZW50IgogICAgICAgICAgICAgICAgcHJpbnQoZiLEkMOjIHRhcCB0aMOgbmggY8O0bmcgdsOgbyB7ZWxlbWVudF9zdHJ9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0YXAgZWxlbWVudDoge3Jlc3VsdC5nZXQoJ21lc3NhZ2UnLCAnS2jDtG5nIHjDoWMgxJHhu4tuaCcpfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBlcnJvcl9tc2cgPSBmIkzhu5dpIHRyb25nIHdhaXRfdG9fdGFwX2VsZW1lbnQ6IHtzdHIoZSl9IgogICAgICAgICAgICBwcmludChlcnJvcl9tc2cpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBnZXRfZWxlbWVudF90ZXh0KHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGV4dCBj4bunYSBt4buZdCBwaOG6p24gdOG7rQogICAgICAgICIiIgogICAgICAgIHJldHVybiBlbGVtZW50LmdldCgidGV4dCIsICIiKQogICAgCiAgICBkZWYgZ2V0X2VsZW1lbnRfY29udGVudF9kZXNjKHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgY29udGVudC1kZXNjIGPhu6dhIG3hu5l0IHBo4bqnbiB04butCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgIAogICAgZGVmIGdldF9lbGVtZW50X3Jlc291cmNlX2lkKHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgcmVzb3VyY2UtaWQgY+G7p2EgbeG7mXQgcGjhuqduIHThu60KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZWxlbWVudC5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAKICAgIGRlZiBnZXRfZWxlbWVudF9jbGFzcyhzZWxmLCBlbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGNsYXNzIGPhu6dhIG3hu5l0IHBo4bqnbiB04butCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KCJjbGFzcyIsICIiKQogICAgCiAgICBkZWYgZ2V0X2VsZW1lbnRfZW5hYmxlZChzZWxmLCBlbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSBwaOG6p24gdOG7rSBjw7MgxJHGsOG7o2Mga8OtY2ggaG/huqF0IGtow7RuZwogICAgICAgICIiIgogICAgICAgIHJldHVybiBlbGVtZW50LmdldCgiZW5hYmxlZCIpID09ICJ0cnVlIgogICAgCiAgICBkZWYgZ2V0X2VsZW1lbnRfY2xpY2thYmxlKHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIHBo4bqnbiB04butIGPDsyB0aOG7gyBuaOG6pXAgdsOgbyBraMO0bmcKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZWxlbWVudC5nZXQoImNsaWNrYWJsZSIpID09ICJ0cnVlIgogICAgCiAgICBkZWYgZ2V0X2VsZW1lbnRfZm9jdXNlZChzZWxmLCBlbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSBwaOG6p24gdOG7rSBjw7MgxJHGsOG7o2MgZm9jdXMga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KCJmb2N1c2VkIikgPT0gInRydWUiCiAgICAKICAgIGRlZiBnZXRfZWxlbWVudF9jaGVja2VkKHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIHBo4bqnbiB04butIGPDsyDEkcaw4bujYyBjaOG7jW4ga2jDtG5nIChjaG8gY2hlY2tib3gpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0KCJjaGVja2VkIikgPT0gInRydWUiCiAgICAKICAgIGRlZiBnZXRfZWxlbWVudF9ib3VuZHMoc2VsZiwgZWxlbWVudDogRGljdFtzdHIsIEFueV0pIC0+IFR1cGxlW2ludCwgaW50LCBpbnQsIGludF06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdOG7jWEgxJHhu5kgYm91bmRzIGPhu6dhIHBo4bqnbiB04butIGTGsOG7m2kgZOG6oW5nIHR1cGxlICh4MSwgeTEsIHgyLCB5MikKICAgICAgICBY4butIGzDvSBjw6FjIHRyxrDhu51uZyBo4bujcCBib3VuZHMga2jDtG5nIGjhu6NwIGzhu4cgKMOibSwgMCwgaG/hurdjIGZvcm1hdCBzYWkpCiAgICAgICAgIiIiCiAgICAgICAgYm91bmRzID0gZWxlbWVudC5nZXQoImJvdW5kcyIsICJbMCwwXVswLDBdIikKICAgICAgICAKICAgICAgICAjIFRo4butIGPDoWMgcGF0dGVybiBraMOhYyBuaGF1IMSR4buDIHBhcnNlIGJvdW5kcwogICAgICAgIHBhdHRlcm5zID0gWwogICAgICAgICAgICByIlxbKC0/XGQrKSwoLT9cZCspXF1cWygtP1xkKyksKC0/XGQrKVxdIiwgICMgUGF0dGVybiBoaeG7h24gdOG6oWksIGNobyBwaMOpcCBz4buRIMOibQogICAgICAgICAgICByIigtP1xkKyksKC0/XGQrKSwoLT9cZCspLCgtP1xkKykiLCAgICAgICAgICMgUGF0dGVybjogeDEseTEseDIseTIKICAgICAgICAgICAgciJcWygtP1xkKyk7KC0/XGQrKVxdXFsoLT9cZCspOygtP1xkKylcXSIgICAjIFBhdHRlcm4gduG7m2kgZOG6pXUgOwogICAgICAgIF0KICAgICAgICAKICAgICAgICBmb3IgcGF0dGVybiBpbiBwYXR0ZXJuczoKICAgICAgICAgICAgbWF0Y2ggPSByZS5tYXRjaChwYXR0ZXJuLCBib3VuZHMpCiAgICAgICAgICAgIGlmIG1hdGNoOgogICAgICAgICAgICAgICAgeDEsIHkxLCB4MiwgeTIgPSBtYXAoaW50LCBtYXRjaC5ncm91cHMoKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBT4butYSBjaOG7r2EgYm91bmRzIGtow7RuZyBo4bujcCBs4buHCiAgICAgICAgICAgICAgICAjIE7hur91IGPDsyB04buNYSDEkeG7mSDDom0sIMSRaeG7gXUgY2jhu4luaAogICAgICAgICAgICAgICAgaWYgeTEgPCAwIG9yIHkyIDwgMDoKICAgICAgICAgICAgICAgICAgICBwcmludChmIkPhuqNuaCBiw6FvOiBCb3VuZHMgY8OzIHThu41hIMSR4buZIHkgw6JtOiAoe3gxfSwge3kxfSwge3gyfSwge3kyfSkiKQogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgeTIgw6JtLCBjw7MgdGjhu4MgZWxlbWVudCBu4bqxbSB0csOqbiB0aGFuaCBzdGF0dXMgYmFyCiAgICAgICAgICAgICAgICAgICAgaWYgeTIgPCAwOgogICAgICAgICAgICAgICAgICAgICAgICAjIMSQaeG7gXUgY2jhu4luaCDEkeG7gyBlbGVtZW50IGPDsyB0aOG7gyB0YXAgxJHGsOG7o2MKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gYWJzKHkyIC0geTEpICAjIENoaeG7gXUgY2FvIGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBtYXgoMCwgeTEpICAjIMSQ4bqjbSBi4bqjbyB5MSA+PSAwCiAgICAgICAgICAgICAgICAgICAgICAgIHkyID0geTEgKyBoZWlnaHQgICMgxJDhurd0IHkyIGTGsMahbmcKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLEkMOjIMSRaeG7gXUgY2jhu4luaCBib3VuZHMgdGjDoG5oOiAoe3gxfSwge3kxfSwge3gyfSwge3kyfSkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB4MSA8IDAgb3IgeDIgPCAwOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiQ+G6o25oIGLDoW86IEJvdW5kcyBjw7MgdOG7jWEgxJHhu5kgeCDDom06ICh7eDF9LCB7eTF9LCB7eDJ9LCB7eTJ9KSIpCiAgICAgICAgICAgICAgICAgICAgIyBUxrDGoW5nIHThu7EgduG7m2kgeAogICAgICAgICAgICAgICAgICAgIGlmIHgyIDwgMDoKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBhYnMoeDIgLSB4MSkKICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBtYXgoMCwgeDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHgyID0geDEgKyB3aWR0aAogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIsSQw6MgxJFp4buBdSBjaOG7iW5oIGJvdW5kcyB0aMOgbmg6ICh7eDF9LCB7eTF9LCB7eDJ9LCB7eTJ9KSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBib3VuZHMgaOG7o3AgbOG7hyBzYXUga2hpIMSRaeG7gXUgY2jhu4luaAogICAgICAgICAgICAgICAgaWYgeDEgPCB4MiBhbmQgeTEgPCB5MiBhbmQgbm90ICh4MSA9PSAwIGFuZCB5MSA9PSAwIGFuZCB4MiA9PSAwIGFuZCB5MiA9PSAwKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHgxLCB5MSwgeDIsIHkyKQogICAgICAgIAogICAgICAgICMgTuG6v3Uga2jDtG5nIHBhcnNlIMSRxrDhu6NjIGhv4bq3YyB04bqldCBj4bqjIGzDoCAwLCB0aOG7rSBs4bqleSB04burIHRodeG7mWMgdMOtbmgga2jDoWMKICAgICAgICBwcmludChmIkPhuqNuaCBiw6FvOiBLaMO0bmcgdGjhu4MgcGFyc2UgYm91bmRzICd7Ym91bmRzfScgY+G7p2EgZWxlbWVudCwgdGjhu60gcGjGsMahbmcgcGjDoXAga2jDoWMuLi4iKQogICAgICAgIAogICAgICAgICMgVGjhu60gbOG6pXkgdOG7qyBjw6FjIHRodeG7mWMgdMOtbmgga2jDoWMgbuG6v3UgY8OzCiAgICAgICAgeCA9IGVsZW1lbnQuZ2V0KCJ4IiwgMCkKICAgICAgICB5ID0gZWxlbWVudC5nZXQoInkiLCAwKQogICAgICAgIHdpZHRoID0gZWxlbWVudC5nZXQoIndpZHRoIiwgMTAwKSAgIyBEZWZhdWx0IHdpZHRoCiAgICAgICAgaGVpZ2h0ID0gZWxlbWVudC5nZXQoImhlaWdodCIsIDUwKSAgIyBEZWZhdWx0IGhlaWdodAogICAgICAgIAogICAgICAgIGlmIHggb3IgeSBvciB3aWR0aCAhPSAxMDAgb3IgaGVpZ2h0ICE9IDUwOiAgIyBDw7Mgw610IG5o4bqldCBt4buZdCB0aHXhu5ljIHTDrW5oIGtow6FjIDAvZGVmYXVsdAogICAgICAgICAgICByZXR1cm4gKHgsIHksIHggKyB3aWR0aCwgeSArIGhlaWdodCkKICAgICAgICAKICAgICAgICBwcmludChmIkPhuqNuaCBiw6FvOiBFbGVtZW50IGJvdW5kcyBraMO0bmcgaOG7o3AgbOG7hywgc+G7rSBk4bulbmcgdOG7jWEgxJHhu5kgbeG6t2MgxJHhu4tuaCIpCiAgICAgICAgcmV0dXJuICgwLCAwLCAxMDAsIDUwKSAgIyBGYWxsYmFjayBib3VuZHMgbmjhu48KICAgIAogICAgZGVmIGdldF9lbGVtZW50X2NlbnRlcihzZWxmLCBlbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gVHVwbGVbaW50LCBpbnRdOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHThu41hIMSR4buZIHRydW5nIHTDom0gY+G7p2EgcGjhuqduIHThu60gduG7m2kgeOG7rSBsw70gbOG7l2kgbsOibmcgY2FvCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IGVsZW1lbnQ6CiAgICAgICAgICAgIHByaW50KCJD4bqjbmggYsOhbzogRWxlbWVudCBsw6AgTm9uZSBob+G6t2MgcuG7l25nIikKICAgICAgICAgICAgcmV0dXJuICgwLCAwKQogICAgICAgICAgICAKICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IHNlbGYuZ2V0X2VsZW1lbnRfYm91bmRzKGVsZW1lbnQpCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIGJvdW5kcyBo4bujcCBs4buHCiAgICAgICAgaWYgeDEgPj0geDIgb3IgeTEgPj0geTI6CiAgICAgICAgICAgIGJvdW5kc19zdHIgPSBlbGVtZW50LmdldCgiYm91bmRzIiwgIiIpCiAgICAgICAgICAgIHByaW50KGYiQ+G6o25oIGLDoW86IEJvdW5kcyBraMO0bmcgaOG7o3AgbOG7hyAne2JvdW5kc19zdHJ9JzogKHt4MX0sIHt5MX0sIHt4Mn0sIHt5Mn0pIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgYm91bmRzIGtow7RuZyBo4bujcCBs4buHLCB0cuG6oyB24buBIHThu41hIMSR4buZIGFuIHRvw6BuIOG7nyBnaeG7r2EgbcOgbiBow6xuaAogICAgICAgICAgICBzY3JlZW5fd2lkdGgsIHNjcmVlbl9oZWlnaHQgPSBzZWxmLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgIGlmIHNjcmVlbl93aWR0aCA+IDAgYW5kIHNjcmVlbl9oZWlnaHQgPiAwOgogICAgICAgICAgICAgICAgY2VudGVyX3ggPSBzY3JlZW5fd2lkdGggLy8gMgogICAgICAgICAgICAgICAgY2VudGVyX3kgPSBzY3JlZW5faGVpZ2h0IC8vIDIKICAgICAgICAgICAgICAgIHJldHVybiAoY2VudGVyX3gsIGNlbnRlcl95KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuICg1NDAsIDk2MCkgICMgVOG7jWEgxJHhu5kgbeG6t2MgxJHhu4tuaCBjaG8gbcOgbiBow6xuaCAxMDgweDE5MjAKICAgICAgICAKICAgICAgICBjZW50ZXJfeCA9ICh4MSArIHgyKSAvLyAyCiAgICAgICAgY2VudGVyX3kgPSAoeTEgKyB5MikgLy8gMgogICAgICAgIAogICAgICAgICMgVGjDqm0gbeG7mXQgY2jDunQgcmFuZG9tIMSR4buDIHRyw6FuaCBkZXRlY3Rpb24gKMKxMyBwaXhlbHMpCiAgICAgICAgY2VudGVyX3ggKz0gcmFuZG9tLnJhbmRpbnQoLTMsIDMpCiAgICAgICAgY2VudGVyX3kgKz0gcmFuZG9tLnJhbmRpbnQoLTMsIDMpCiAgICAgICAgCiAgICAgICAgIyDEkOG6o20gYuG6o28gdOG7jWEgxJHhu5kgdHJvbmcgcGjhuqFtIHZpIG3DoG4gaMOsbmgKICAgICAgICBzY3JlZW5fd2lkdGgsIHNjcmVlbl9oZWlnaHQgPSBzZWxmLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgaWYgc2NyZWVuX3dpZHRoID4gMCBhbmQgc2NyZWVuX2hlaWdodCA+IDA6CiAgICAgICAgICAgIGNlbnRlcl94ID0gbWF4KDEwLCBtaW4oY2VudGVyX3gsIHNjcmVlbl93aWR0aCAtIDEwKSkgICMgTWFyZ2luIDEwcHggdOG7qyBiacOqbgogICAgICAgICAgICBjZW50ZXJfeSA9IG1heCgxMCwgbWluKGNlbnRlcl95LCBzY3JlZW5faGVpZ2h0IC0gMTApKQogICAgICAgIAogICAgICAgIHJldHVybiAoY2VudGVyX3gsIGNlbnRlcl95KQogICAgCiAgICBkZWYgdGFwX2VsZW1lbnRfY2VudGVyKHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaOG6oW0gdsOgbyBwaOG6p24gdOG7rSB24bubaSB0w61uaCByYW5kb20gKHPhu60gZOG7pW5nIHRhcF9lbGVtZW50IGLDqm4gdHJvbmcpCiAgICAgICAgTuG6v3UgZWxlbWVudCBxdcOhIG5o4buPIHRow6wgbeG7m2kgZMO5bmcgY2VudGVyLCBuZ8aw4bujYyBs4bqhaSBz4bq9IHRhcCByYW5kb20KICAgICAgICAiIiIKICAgICAgICBpZiBub3QgZWxlbWVudDoKICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiRWxlbWVudCBsw6AgTm9uZSBob+G6t2MgcuG7l25nIn0KICAgICAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgdmlzaWJsZS10by11c2VyIHRyxrDhu5tjCiAgICAgICAgICAgIHZpc2libGUgPSBlbGVtZW50LmdldCgidmlzaWJsZS10by11c2VyIiwgInRydWUiKQogICAgICAgICAgICBpZiB2aXNpYmxlID09ICJmYWxzZSI6CiAgICAgICAgICAgICAgICBwcmludCgiQ+G6o25oIGLDoW86IEVsZW1lbnQgY8OzIHZpc2libGUtdG8tdXNlcj0nZmFsc2UnLCB24bqrbiB0aOG7rSB0YXAuLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBib3VuZHMgY+G7p2EgZWxlbWVudCDEkeG7gyBraeG7g20gdHJhIGvDrWNoIHRoxrDhu5tjCiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gc2VsZi5nZXRfZWxlbWVudF9ib3VuZHMoZWxlbWVudCkKICAgICAgICAgICAgd2lkdGggPSB4MiAtIHgxCiAgICAgICAgICAgIGhlaWdodCA9IHkyIC0geTEKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgZWxlbWVudCBxdcOhIG5o4buPICg8IDIwcHggd2lkdGggaG/hurdjIGhlaWdodCksIGTDuW5nIGNlbnRlcgogICAgICAgICAgICBpZiB3aWR0aCA8IDIwIG9yIGhlaWdodCA8IDIwOgogICAgICAgICAgICAgICAgcHJpbnQoZiJFbGVtZW50IG5o4buPICh7d2lkdGh9eHtoZWlnaHR9cHgpLCBz4butIGThu6VuZyB0YXAgY2VudGVyIikKICAgICAgICAgICAgICAgIHgsIHkgPSBzZWxmLmdldF9lbGVtZW50X2NlbnRlcihlbGVtZW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgdOG7jWEgxJHhu5kgaOG7o3AgbOG7hwogICAgICAgICAgICAgICAgaWYgeCA8PSAwIGFuZCB5IDw9IDA6CiAgICAgICAgICAgICAgICAgICAgYm91bmRzX3N0ciA9IGVsZW1lbnQuZ2V0KCJib3VuZHMiLCAiIikKICAgICAgICAgICAgICAgICAgICBpZiBib3VuZHNfc3RyIGFuZCBib3VuZHNfc3RyICE9ICJbMCwwXVswLDBdIjoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYudGFwX2VsZW1lbnQoYm91bmRzX3N0cikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAiZXJyb3IiLCAibWVzc2FnZSI6ICJLaMO0bmcgdGjhu4MgeMOhYyDEkeG7i25oIHThu41hIMSR4buZIMSR4buDIHRhcCJ9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnRhcCh4LCB5KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBFbGVtZW50IMSR4bunIGzhu5tuLCBz4butIGThu6VuZyB0YXBfZWxlbWVudCDEkeG7gyB0YXAgcmFuZG9tCiAgICAgICAgICAgICAgICAjIHByaW50KGYiRWxlbWVudCDEkeG7pyBs4bubbiAoe3dpZHRofXh7aGVpZ2h0fXB4KSwgc+G7rSBk4bulbmcgdGFwIHJhbmRvbSIpICAjIELhu48gbG9nIG7DoHkKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnRhcF9lbGVtZW50KGVsZW1lbnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgdGFwIGVsZW1lbnQ6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogZiJM4buXaSBraGkgdGFwIGVsZW1lbnQ6IHtzdHIoZSl9In0KICAgIAogICAgZGVmIGxvbmdfcHJlc3Moc2VsZiwgeDogaW50LCB5OiBpbnQsIGR1cmF0aW9uOiBpbnQgPSAxMDAwKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBOaOG6pW4gZ2nhu68gdOG6oWkgduG7iyB0csOtIHgseSB0cm9uZyBt4buZdCBraG/huqNuZyB0aOG7nWkgZ2lhbgogICAgICAgICIiIgogICAgICAgIHBhcmFtcyA9IHsKICAgICAgICAgICAgIngiOiB4LAogICAgICAgICAgICAieSI6IHksCiAgICAgICAgICAgICJkdXJhdGlvbiI6IGR1cmF0aW9uCiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoImxvbmdfcHJlc3MiLCBwYXJhbXM9cGFyYW1zKQogICAgCiAgICBkZWYgbG9uZ19wcmVzc19lbGVtZW50KHNlbGYsIGVsZW1lbnQ6IERpY3Rbc3RyLCBBbnldLCBkdXJhdGlvbjogaW50ID0gMTAwMCkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTmjhuqVuIGdp4buvIHThuqFpIHRydW5nIHTDom0gY+G7p2EgcGjhuqduIHThu60KICAgICAgICAiIiIKICAgICAgICB4LCB5ID0gc2VsZi5nZXRfZWxlbWVudF9jZW50ZXIoZWxlbWVudCkKICAgICAgICByZXR1cm4gc2VsZi5sb25nX3ByZXNzKHgsIHksIGR1cmF0aW9uKQogICAgCiAgICBkZWYgc3dpcGUoc2VsZiwgc3RhcnRfeDogaW50LCBzdGFydF95OiBpbnQsIGVuZF94OiBpbnQsIGVuZF95OiBpbnQsIAogICAgICAgICAgICAgZHVyYXRpb246IGludCA9IDUwMCkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVnXhu5F0IHThu6sgxJFp4buDbSAoc3RhcnRfeCwgc3RhcnRfeSkgxJHhur9uIMSRaeG7g20gKGVuZF94LCBlbmRfeSkKICAgICAgICAiIiIKICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICJzdGFydF94Ijogc3RhcnRfeCwKICAgICAgICAgICAgInN0YXJ0X3kiOiBzdGFydF95LAogICAgICAgICAgICAiZW5kX3giOiBlbmRfeCwKICAgICAgICAgICAgImVuZF95IjogZW5kX3ksCiAgICAgICAgICAgICJkdXJhdGlvbiI6IGR1cmF0aW9uCiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInN3aXBlIiwgcGFyYW1zPXBhcmFtcykKICAgIAogICAgZGVmIHN3aXBlX2JldHdlZW5fZWxlbWVudHMoc2VsZiwgc3RhcnRfZWxlbWVudDogRGljdFtzdHIsIEFueV0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRfZWxlbWVudDogRGljdFtzdHIsIEFueV0sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogaW50ID0gNTAwKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBWdeG7kXQgdOG7qyBwaOG6p24gdOG7rSBzdGFydF9lbGVtZW50IMSR4bq/biBwaOG6p24gdOG7rSBlbmRfZWxlbWVudAogICAgICAgICIiIgogICAgICAgIHN0YXJ0X3gsIHN0YXJ0X3kgPSBzZWxmLmdldF9lbGVtZW50X2NlbnRlcihzdGFydF9lbGVtZW50KQogICAgICAgIGVuZF94LCBlbmRfeSA9IHNlbGYuZ2V0X2VsZW1lbnRfY2VudGVyKGVuZF9lbGVtZW50KQogICAgICAgIHJldHVybiBzZWxmLnN3aXBlKHN0YXJ0X3gsIHN0YXJ0X3ksIGVuZF94LCBlbmRfeSwgZHVyYXRpb24pCiAgICAKICAgIGRlZiB3YWl0X2Zvcl9lbGVtZW50X3RvX2Rpc2FwcGVhcihzZWxmLCB0ZXh0OiBzdHIgPSBOb25lLCBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZDogc3RyID0gTm9uZSwgdGltZW91dDogaW50ID0gMzAsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja19pbnRlcnZhbDogaW50ID0gMSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBDaOG7nSDEkeG7o2kgY2hvIMSR4bq/biBraGkgbeG7mXQgcGjhuqduIHThu60gYmnhur9uIG3huqV0IGto4buPaSBtw6BuIGjDrG5oCiAgICAgICAgIiIiCiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgd2hpbGUgdGltZS50aW1lKCkgLSBzdGFydF90aW1lIDwgdGltZW91dDoKICAgICAgICAgICAgZWxlbWVudCA9IHNlbGYuZmluZF9lbGVtZW50KHRleHQsIGNvbnRlbnRfZGVzYywgcmVzb3VyY2VfaWQsIGNvbnRhaW5zPWNvbnRhaW5zKQogICAgICAgICAgICBpZiBub3QgZWxlbWVudDoKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdGltZS5zbGVlcChjaGVja19pbnRlcnZhbCkKICAgICAgICAKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHdhaXRfZm9yX2FueV9lbGVtZW50KHNlbGYsIGVsZW1lbnRzX3RvX2ZpbmQ6IExpc3RbRGljdFtzdHIsIHN0cl1dLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogaW50ID0gMzAsIGNoZWNrX2ludGVydmFsOiBpbnQgPSAxKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgQ2jhu50gxJHhu6NpIGNobyDEkeG6v24ga2hpIGLhuqV0IGvhu7MgcGjhuqduIHThu60gbsOgbyB0cm9uZyBkYW5oIHPDoWNoIHh14bqldCBoaeG7h24KICAgICAgICAKICAgICAgICBlbGVtZW50c190b19maW5kIGzDoCBkYW5oIHPDoWNoIGPDoWMgZGljdCB24bubaSBjw6FjIGtow7NhOiB0ZXh0LCBjb250ZW50X2Rlc2MsIHJlc291cmNlX2lkCiAgICAgICAgIiIiCiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgd2hpbGUgdGltZS50aW1lKCkgLSBzdGFydF90aW1lIDwgdGltZW91dDoKICAgICAgICAgICAgZm9yIGVsZW1lbnRfY3JpdGVyaWEgaW4gZWxlbWVudHNfdG9fZmluZDoKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBzZWxmLmZpbmRfZWxlbWVudCgKICAgICAgICAgICAgICAgICAgICBlbGVtZW50X2NyaXRlcmlhLmdldCgidGV4dCIpLCAKICAgICAgICAgICAgICAgICAgICBlbGVtZW50X2NyaXRlcmlhLmdldCgiY29udGVudF9kZXNjIiksIAogICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfY3JpdGVyaWEuZ2V0KCJyZXNvdXJjZV9pZCIpCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpZiBlbGVtZW50OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdGltZS5zbGVlcChjaGVja19pbnRlcnZhbCkKICAgICAgICAKICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgZ2V0X3NjcmVlbl9zaXplKHNlbGYpIC0+IFR1cGxlW2ludCwgaW50XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBrw61jaCB0aMaw4bubYyBtw6BuIGjDrG5oICh3aWR0aCwgaGVpZ2h0KQogICAgICAgICIiIgogICAgICAgIGRldmljZV9pbmZvID0gc2VsZi5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgIGlmIGRldmljZV9pbmZvWyJzdGF0dXMiXSA9PSAic3VjY2VzcyI6CiAgICAgICAgICAgIHJldHVybiAoZGV2aWNlX2luZm9bImRhdGEiXVsic2NyZWVuX3dpZHRoIl0sIGRldmljZV9pbmZvWyJkYXRhIl1bInNjcmVlbl9oZWlnaHQiXSkKICAgICAgICByZXR1cm4gKDAsIDApCiAgICAKICAgIGRlZiB0YWtlX3NjcmVlbnNob3Qoc2VsZiwgZmlsZV9wYXRoOiBzdHIgPSBOb25lKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBDaOG7pXAg4bqjbmggbcOgbiBow6xuaCB2w6AgbMawdSB2w6BvIGZpbGVfcGF0aCAobuG6v3UgxJHGsOG7o2MgY3VuZyBj4bqlcCkKICAgICAgICAiIiIKICAgICAgICBwYXJhbXMgPSB7fQogICAgICAgIGlmIGZpbGVfcGF0aDoKICAgICAgICAgICAgcGFyYW1zWyJmaWxlX3BhdGgiXSA9IGZpbGVfcGF0aAogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInNjcmVlbnNob3QiLCBwYXJhbXM9cGFyYW1zKQogICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfYWN0aXZpdHkoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHTDqm4gYWN0aXZpdHkgaGnhu4duIHThuqFpCiAgICAgICAgIiIiCiAgICAgICAgZGV2aWNlX2luZm8gPSBzZWxmLmdldF9kZXZpY2VfaW5mbygpCiAgICAgICAgaWYgZGV2aWNlX2luZm9bInN0YXR1cyJdID09ICJzdWNjZXNzIiBhbmQgImN1cnJlbnRfYWN0aXZpdHkiIGluIGRldmljZV9pbmZvWyJkYXRhIl06CiAgICAgICAgICAgIHJldHVybiBkZXZpY2VfaW5mb1siZGF0YSJdWyJjdXJyZW50X2FjdGl2aXR5Il0KICAgICAgICByZXR1cm4gIiIKICAgIAogICAgZGVmIGdldF9jdXJyZW50X3BhY2thZ2Uoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHTDqm4gcGFja2FnZSBoaeG7h24gdOG6oWkKICAgICAgICAiIiIKICAgICAgICByZXNwb25zZSA9IHNlbGYuX21ha2VfcmVxdWVzdCgiY3VycmVudC1wYWNrYWdlIikKICAgICAgICBpZiByZXNwb25zZS5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIiBhbmQgImRhdGEiIGluIHJlc3BvbnNlOgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbImRhdGEiXS5nZXQoInBhY2thZ2UiLCAiIikKICAgICAgICByZXR1cm4gIiIKICAgIAogICAgZGVmIHByZXNzX2VudGVyKHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIE5o4bqlbiBuw7p0IEVudGVyIGLhurFuZyBBREIga2V5ZXZlbnQKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxq91IHRpw6puIHPhu60gZOG7pW5nIEFEQiBu4bq/dSDEkcOjIGvhur90IG7hu5FpCiAgICAgICAgICAgIGlmIHNlbGYuaXNfYWRiX2Nvbm5lY3RlZDoKICAgICAgICAgICAgICAgICMgTOG6pXkgdGhhbSBz4buRIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgZGV2aWNlX3BhcmFtcyA9IHNlbGYuX2dldF9hZGJfZGV2aWNlX3BhcmFtKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUaOG7sWMgdGhpIEFEQiBrZXlldmVudCBFTlRFUiAoNjYpCiAgICAgICAgICAgICAgICBjbWQgPSBbImFkYiJdICsgZGV2aWNlX3BhcmFtcyArIFsic2hlbGwiLCAiaW5wdXQiLCAia2V5ZXZlbnQiLCAiNjYiXQogICAgICAgICAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgIHRleHQ9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTEwCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgIm1lc3NhZ2UiOiAixJDDoyBuaOG6pW4gRW50ZXIgYuG6sW5nIEFEQiJ9CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEZhbGxiYWNrIHbhu4EgQVBJIG7hur91IGtow7RuZyBjw7MgQURCCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJwcmVzc19lbnRlciIpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5UaW1lb3V0RXhwaXJlZDoKICAgICAgICAgICAgcHJpbnQoIlRpbWVvdXQga2hpIGfhu61pIEFEQiBrZXlldmVudCBFbnRlciIpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInByZXNzX2VudGVyIikKICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5TdWJwcm9jZXNzRXJyb3IgYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBBREIga2V5ZXZlbnQgRW50ZXI6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInByZXNzX2VudGVyIikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2jDtG5nIHjDoWMgxJHhu4tuaCBraGkgZ+G7rWkgQURCIGtleWV2ZW50IEVudGVyOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJwcmVzc19lbnRlciIpCiAgICAKICAgIGRlZiBwcmVzc19iYWNrKHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIE5o4bqlbiBuw7p0IEJhY2sKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJwcmVzc19iYWNrIikKICAgIAogICAgZGVmIHByZXNzX2hvbWUoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTmjhuqVuIG7DunQgSG9tZQogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoInByZXNzX2hvbWUiKQogICAgCiAgICBkZWYgcHJlc3NfcmVjZW50X2FwcHMoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTmjhuqVuIG7DunQgUmVjZW50IEFwcHMKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbWFrZV9yZXF1ZXN0KCJwcmVzc19yZWNlbnRfYXBwcyIpCgogICAgZGVmIGlzX2FwcF9pbnN0YWxsZWQoc2VsZiwgcGFja2FnZV9uYW1lOiBzdHIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB4ZW0g4bupbmcgZOG7pW5nIMSRw6MgxJHGsOG7o2MgY8OgaSDEkeG6t3QgdHLDqm4gdGhp4bq/dCBi4buLIGNoxrBhCiAgICAgICAgxq91IHRpw6puIHPhu60gZOG7pW5nIEFEQiBu4bq/dSDEkcOjIGvhur90IG7hu5FpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcGFja2FnZV9uYW1lOiBUw6puIHBhY2thZ2UgY+G7p2Eg4bupbmcgZOG7pW5nIGPhuqduIGtp4buDbSB0cmEKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSDhu6luZyBk4bulbmcgxJHDoyBjw6BpIMSR4bq3dCwgRmFsc2UgbuG6v3UgY2jGsGEKICAgICAgICAiIiIKICAgICAgICAjIMavdSB0acOqbiBz4butIGThu6VuZyBBREIgbuG6v3UgxJHDoyBr4bq/dCBu4buRaQogICAgICAgIGlmIHNlbGYuaXNfYWRiX2Nvbm5lY3RlZDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBM4bqleSB0aGFtIHPhu5EgdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICBkZXZpY2VfcGFyYW1zID0gc2VsZi5fZ2V0X2FkYl9kZXZpY2VfcGFyYW0oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEg4bupbmcgZOG7pW5nIGLhurFuZyBBREIKICAgICAgICAgICAgICAgIGNtZCA9IFsiYWRiIl0gKyBkZXZpY2VfcGFyYW1zICsgWyJzaGVsbCIsIGYicG0gbGlzdCBwYWNrYWdlcyB8IGdyZXAgLXggcGFja2FnZTp7cGFja2FnZV9uYW1lfSJdCiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bigKICAgICAgICAgICAgICAgICAgICBjbWQsCiAgICAgICAgICAgICAgICAgICAgY2hlY2s9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgICAgICAgICAgdGV4dD1UcnVlCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3UgY8OzIGvhur90IHF14bqjLCDhu6luZyBk4bulbmcgxJHDoyDEkcaw4bujYyBjw6BpIMSR4bq3dAogICAgICAgICAgICAgICAgcmV0dXJuIHBhY2thZ2VfbmFtZSBpbiByZXN1bHQuc3Rkb3V0CiAgICAgICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLlN1YnByb2Nlc3NFcnJvcjoKICAgICAgICAgICAgICAgICMgTuG6v3UgbOG7l2kgQURCLCBz4butIGThu6VuZyBBUEkgSFRUUAogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIAogICAgICAgICMgU+G7rSBk4bulbmcgSFRUUCBBUEkKICAgICAgICByZXNwb25zZSA9IHNlbGYuX21ha2VfcmVxdWVzdCgiaXNfaW5zdGFsbGVkIiwgeyJwYWNrYWdlIjogcGFja2FnZV9uYW1lfSkKICAgICAgICBpZiByZXNwb25zZVsic3RhdHVzIl0gPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VbImRhdGEiXS5nZXQoImluc3RhbGxlZCIsIEZhbHNlKQogICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgZGVmIGZpbmRfZWxlbWVudHMoc2VsZiwgY2xhc3NfbmFtZTogc3RyID0gTm9uZSwgdGV4dDogc3RyID0gTm9uZSwgCiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2M6IHN0ciA9IE5vbmUsIHJlc291cmNlX2lkOiBzdHIgPSBOb25lLAogICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBib29sID0gVHJ1ZSwgY29udGFpbnM6IGJvb2wgPSBGYWxzZSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgVMOsbSB04bqldCBj4bqjIGPDoWMgcGjhuqduIHThu60gdGhlbyBjbGFzc19uYW1lLCB0ZXh0LCBjb250ZW50X2Rlc2MsIHJlc291cmNlX2lkIGhv4bq3YyB2aXNpYmxlLXRvLXVzZXIKICAgICAgICDEkMOieSBsw6AgbeG7mXQgcGjGsMahbmcgdGjhu6ljIHRp4buHbiBs4bujaSBr4bq/dCBo4bujcCBkdW1wX3NjcmVlbl94bWwgdsOgIGZpbmRfYWxsX2VsZW1lbnRzX2luX3htbAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGNsYXNzX25hbWU6IENsYXNzIG5hbWUgY+G7p2EgcGjhuqduIHThu60gY+G6p24gdMOsbQogICAgICAgICAgICB0ZXh0OiBUZXh0IGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgY29udGVudF9kZXNjOiBDb250ZW50IGRlc2NyaXB0aW9uIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgcmVzb3VyY2VfaWQ6IFJlc291cmNlIElEIGPhu6dhIHBo4bqnbiB04butIGPhuqduIHTDrG0KICAgICAgICAgICAgdmlzaWJsZV90b191c2VyOiBUcnVlIMSR4buDIHTDrG0gZWxlbWVudCBoaeG7g24gdGjhu4sgduG7m2kgdXNlciAobeG6t2MgxJHhu4tuaCksIEZhbHNlIMSR4buDIHTDrG0gZWxlbWVudCDhuqluLCBOb25lIMSR4buDIGLhu48gcXVhIMSRaeG7gXUga2nhu4duIG7DoHkKICAgICAgICAgICAgY29udGFpbnM6IEZhbHNlIMSR4buDIHTDrG0ga2nhur9tIGto4bubcCBjaMOtbmggeMOhYyAobeG6t2MgxJHhu4tuaCksIFRydWUgxJHhu4MgdMOsbSBraeG6v20gY2jhu6lhIHThu6sga2jDs2EKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggY8OhYyBwaOG6p24gdOG7rSB0w6xtIHRo4bqleQogICAgICAgICIiIgogICAgICAgICMgTOG6pXkgWE1MIG3DoG4gaMOsbmggaGnhu4duIHThuqFpCiAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgICAgICMgU+G7rSBk4bulbmcgZmluZF9hbGxfZWxlbWVudHNfaW5feG1sIMSR4buDIHTDrG0gY8OhYyBwaOG6p24gdOG7rQogICAgICAgIHJldHVybiBzZWxmLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgIHRleHQ9dGV4dCwgCiAgICAgICAgICAgIGNvbnRlbnRfZGVzYz1jb250ZW50X2Rlc2MsIAogICAgICAgICAgICByZXNvdXJjZV9pZD1yZXNvdXJjZV9pZCwKICAgICAgICAgICAgY2xhc3NfbmFtZT1jbGFzc19uYW1lLAogICAgICAgICAgICB2aXNpYmxlX3RvX3VzZXI9dmlzaWJsZV90b191c2VyLAogICAgICAgICAgICBjb250YWlucz1jb250YWlucwogICAgICAgICkKCiAgICBkZWYgb3Blbl91cmwoc2VsZiwgdXJsOiBzdHIsIHBhY2thZ2U6IHN0ciA9IE5vbmUpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIE3hu58gbeG7mXQgVVJMIHRyw6puIHRoaeG6v3QgYuG7iy4gSOG7r3Ugw61jaCDEkeG7gyBt4bufIGPDoWMgbGluayBt4bqhbmcgeMOjIGjhu5lpIHRy4buxYyB0aeG6v3AuCiAgICAgICAgVHLGsOG7m2Mga2hpIG3hu58gbGluayBz4bq9IGLhuqVtIEhvbWUgdsOgIGNo4budIDItNSBnacOieS4KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1cmw6IFVSTCBj4bqnbiBt4bufICh2w60gZOG7pTogaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS91c2VybmFtZS8pCiAgICAgICAgICAgIHBhY2thZ2U6IFBhY2thZ2UgbmFtZSBj4bunYSDhu6luZyBk4bulbmcgxJHhu4MgbeG7nyBVUkwgKHTDuXkgY2jhu41uKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgdOG7qyBzZXJ2ZXIKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgQsaw4bubYyAxOiBC4bqlbSBuw7p0IEhvbWUgdHLGsOG7m2MKICAgICAgICAgICAgcHJpbnQoIkLhuqVtIG7DunQgSG9tZSB0csaw4bubYyBraGkgbeG7nyBVUkwuLi4iKQogICAgICAgICAgICBzZWxmLnByZXNzX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCxrDhu5tjIDI6IENo4budIG5n4bqrdSBuaGnDqm4gMi01IGdpw6J5CiAgICAgICAgICAgIGltcG9ydCByYW5kb20KICAgICAgICAgICAgaW1wb3J0IHRpbWUKICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnVuaWZvcm0oMiwgNSkKICAgICAgICAgICAgcHJpbnQoZiJDaOG7nSB7d2FpdF90aW1lOi4xZn1zIHRyxrDhu5tjIGtoaSBt4bufIFVSTC4uLiIpCiAgICAgICAgICAgIHRpbWUuc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCxrDhu5tjIDM6IFRp4bq/biBow6BuaCBt4bufIFVSTAogICAgICAgICAgICBwcmludChmIk3hu58gVVJMOiB7dXJsfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFVSTCBlbmNvZGUgxJHhu4MgdHLDoW5oIGzhu5dpIHbhu5tpIGPDoWMga8O9IHThu7EgxJHhurdjIGJp4buHdAogICAgICAgICAgICAjIENo4buJIGVuY29kZSBwaOG6p24gc2F1IGRvbWFpbiDEkeG7gyBnaeG7ryBuZ3V5w6puIHByb3RvY29sIHbDoCBkb21haW4KICAgICAgICAgICAgaWYgJzovLycgaW4gdXJsOgogICAgICAgICAgICAgICAgcGFydHMgPSB1cmwuc3BsaXQoJzovLycsIDEpCiAgICAgICAgICAgICAgICBpZiBsZW4ocGFydHMpID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2wgPSBwYXJ0c1swXQogICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IHBhcnRzWzFdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgJy8nIGluIHJlbWFpbmluZzoKICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluX3BhcnRzID0gcmVtYWluaW5nLnNwbGl0KCcvJywgMSkKICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluID0gZG9tYWluX3BhcnRzWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBkb21haW5fcGFydHNbMV0KICAgICAgICAgICAgICAgICAgICAgICAgIyBFbmNvZGUgcGF0aCBwYXJ0LCBuaMawbmcgZ2nhu68gbmd1ecOqbiBjw6FjIGvDvSB04buxIGFuIHRvw6BuCiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZWRfcGF0aCA9IHF1b3RlKHBhdGgsIHNhZmU9Jy9AOj8jW10hJCZcJygpKissOz0nKQogICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVkX3VybCA9IGYie3Byb3RvY29sfTovL3tkb21haW59L3tlbmNvZGVkX3BhdGh9IgogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZWRfdXJsID0gdXJsICAjIENo4buJIGPDsyBkb21haW4sIGtow7RuZyBj4bqnbiBlbmNvZGUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZF91cmwgPSB1cmwKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgS2jDtG5nIGPDsyBwcm90b2NvbCwgZW5jb2RlIHRvw6BuIGLhu5kKICAgICAgICAgICAgICAgIGVuY29kZWRfdXJsID0gcXVvdGUodXJsLCBzYWZlPScvQDo/I1tdISQmXCcoKSorLDs9JykKICAgICAgICAgICAgCiAgICAgICAgICAgIHBhcmFtcyA9IHsidXJsIjogZW5jb2RlZF91cmx9CiAgICAgICAgICAgIGlmIHBhY2thZ2U6CiAgICAgICAgICAgICAgICBwYXJhbXNbInBhY2thZ2UiXSA9IHBhY2thZ2UKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgib3Blbl91cmwiLCBwYXJhbXM9cGFyYW1zKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGVuY29kZSBVUkw6IHtlfSIpCiAgICAgICAgICAgICMgRmFsbGJhY2s6IGfhu61pIFVSTCBn4buRYyBu4bq/dSBjw7MgbOG7l2kgZW5jb2RlCiAgICAgICAgICAgIHBhcmFtcyA9IHsidXJsIjogdXJsfQogICAgICAgICAgICBpZiBwYWNrYWdlOgogICAgICAgICAgICAgICAgcGFyYW1zWyJwYWNrYWdlIl0gPSBwYWNrYWdlCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoIm9wZW5fdXJsIiwgcGFyYW1zPXBhcmFtcykKCiAgICBkZWYgZ2V0X2NsaXBib2FyZChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgbuG7mWkgZHVuZyBjbGlwYm9hcmQgdOG7qyB0aGnhur90IGLhu4sKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IE7hu5lpIGR1bmcgY2xpcGJvYXJkIGhv4bq3YyBjaHXhu5dpIHLhu5duZyBu4bq/dSBraMO0bmcgY8OzIG7hu5lpIGR1bmcKICAgICAgICAiIiIKICAgICAgICByZXNwb25zZSA9IHNlbGYuX21ha2VfcmVxdWVzdCgiY2xpcGJvYXJkIikKICAgICAgICBpZiByZXNwb25zZS5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIiBhbmQgcmVzcG9uc2UuZ2V0KCJkYXRhIiwge30pLmdldCgiaGFzX2NvbnRlbnQiKToKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlWyJkYXRhIl1bImNsaXBib2FyZF90ZXh0Il0KICAgICAgICByZXR1cm4gIiIKCiAgICBkZWYgc3dpcGVfbGVmdChzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBWdeG7kXQgc2FuZyB0csOhaSAodOG7kWkgxrB1IGNobyBuZ8OzbiBjw6FpIHRheSBwaOG6o2kpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgic3dpcGVfbGVmdCIpCgogICAgZGVmIHN3aXBlX3JpZ2h0KHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFZ14buRdCBzYW5nIHBo4bqjaSAodOG7kWkgxrB1IGNobyBuZ8OzbiBjw6FpIHRheSBwaOG6o2kpCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX21ha2VfcmVxdWVzdCgic3dpcGVfcmlnaHQiKQoKICAgIGRlZiBpc19pbnN0YWxsZWQoc2VsZiwgcGFja2FnZTogc3RyKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSDhu6luZyBk4bulbmcgY8OzIMSRxrDhu6NjIGPDoGkgxJHhurd0IGhheSBraMO0bmcgKGTDuW5nIEFQSSBt4bubaSkKICAgICAgICBBcmdzOgogICAgICAgICAgICBwYWNrYWdlOiBUw6puIHBhY2thZ2UgY+G7p2Eg4bupbmcgZOG7pW5nCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgZGljdDogS+G6v3QgcXXhuqMga2nhu4NtIHRyYQogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLl9tYWtlX3JlcXVlc3QoImlzX2luc3RhbGxlZCIsIHBhcmFtcz17InBhY2thZ2UiOiBwYWNrYWdlfSkKCiAgICBkZWYgc2V0dXBfcHJveHkoc2VsZiwgcHJveHlfY29uZmlnOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaGnhur90IGzhuq1wIHByb3h5IGNobyBwaGnDqm4gbMOgbSB2aeG7h2MKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5IHbhu5tpIGPDoWMgdHLGsOG7nW5nOgogICAgICAgICAgICAgICAgLSBpZDogSUQgY+G7p2EgcHJveHkKICAgICAgICAgICAgICAgIC0gdHlwZTogTG/huqFpIHByb3h5IChwcG9lLCBodHRwLCBzb2NrczUsIGV0Yy4pCiAgICAgICAgICAgICAgICAtIGhvc3Q6IMSQ4buLYSBjaOG7iSBzZXJ2ZXIgcHJveHkKICAgICAgICAgICAgICAgIC0gcG9ydDogUG9ydCBj4bunYSBwcm94eQogICAgICAgICAgICAgICAgLSB1c2VybmFtZTogVXNlcm5hbWUgKG7hur91IGPDsykKICAgICAgICAgICAgICAgIC0gcGFzc3dvcmQ6IFBhc3N3b3JkIChu4bq/dSBjw7MpCiAgICAgICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRoaeG6v3QgbOG6rXAgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHByb3h5X3R5cGUgPSBwcm94eV9jb25maWcuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgcHJveHlfaWQgPSBwcm94eV9jb25maWcuZ2V0KCJpZCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBwcm94eV90eXBlID09ICJwcG9lIjoKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9zZXR1cF9wcG9lX3Byb3h5KHByb3h5X2NvbmZpZykKICAgICAgICAgICAgZWxpZiBwcm94eV90eXBlIGluIFsiaHR0cCIsICJodHRwcyJdOgogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3NldHVwX2h0dHBfcHJveHkocHJveHlfY29uZmlnKQogICAgICAgICAgICBlbGlmIHByb3h5X3R5cGUgPT0gInNvY2tzNSI6CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fc2V0dXBfc29ja3M1X3Byb3h5KHByb3h5X2NvbmZpZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYiTG/huqFpIHByb3h5IGtow7RuZyDEkcaw4bujYyBo4buXIHRy4bujOiB7cHJveHlfdHlwZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHRoaeG6v3QgbOG6rXAgcHJveHk6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBfc2V0dXBfcHBvZV9wcm94eShzZWxmLCBwcm94eV9jb25maWc6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRoaeG6v3QgbOG6rXAgcHJveHkgUFBQb0UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5IFBQUG9FCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGhvc3QgPSBwcm94eV9jb25maWcuZ2V0KCJzZXJ2ZXJfaXAiKQogICAgICAgICAgICBwcm94eV9pZCA9IHByb3h5X2NvbmZpZy5nZXQoInByb3h5X2lkIikKICAgICAgICAgICAgcHJveHlfbmFtZSA9IHByb3h5X2NvbmZpZy5nZXQoIm5hbWUiKQogICAgICAgICAgICBpZiBub3QgaG9zdDoKICAgICAgICAgICAgICAgIHByaW50KCJUaGnhur91IHRow7RuZyB0aW4gaG9zdCBjaG8gcHJveHkgUFBQb0UiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBBUEkgcmVnaXN0ZXIgdHLGsOG7m2MKICAgICAgICAgICAgcmVnaXN0ZXJfdXJsID0gZiJodHRwOi8ve2hvc3R9L3JlZ2lzdGVyIgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBsb2NhbCBJUCB04burIGRldmljZSBpbmZvCiAgICAgICAgICAgIGRldmljZV9pbmZvID0gc2VsZi5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgICAgICBsb2NhbF9pcCA9ICIiCiAgICAgICAgICAgIGlmIGRldmljZV9pbmZvLmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiIGFuZCAiZGF0YSIgaW4gZGV2aWNlX2luZm86CiAgICAgICAgICAgICAgICBsb2NhbF9pcCA9IGRldmljZV9pbmZvWyJkYXRhIl0uZ2V0KCJsb2NhbF9pcCIsICIiKQogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmVnaXN0ZXJfZGF0YSA9IHsibmFtZSI6IHByb3h5X25hbWV9CiAgICAgICAgICAgICAgICBpZiBsb2NhbF9pcDoKICAgICAgICAgICAgICAgICAgICByZWdpc3Rlcl9kYXRhWyJsb2NhbF9pcCJdID0gbG9jYWxfaXAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJlZ2lzdGVyX3Jlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICByZWdpc3Rlcl91cmwsIAogICAgICAgICAgICAgICAgICAgIGpzb249cmVnaXN0ZXJfZGF0YSwgCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17IkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIn0sIAogICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ9MTAKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGlmIHJlZ2lzdGVyX3Jlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICBwcmludChmIsSQw6MgxJHEg25nIGvDvSB0aMOgbmggY8O0bmcgduG7m2kgcHJveHkgUFBQb0Ugc2VydmVyOiB7aG9zdH0iKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSDEkcSDbmcga8O9IHbhu5tpIHByb3h5IFBQUG9FIHNlcnZlcjoge3JlZ2lzdGVyX3Jlc3BvbnNlLnN0YXR1c19jb2RlfSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIktow7RuZyB0aOG7gyBr4bq/dCBu4buRaSDEkeG6v24gcHJveHkgUFBQb0Ugc2VydmVyIHtob3N0fToge2V9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmVzZXQgSVAgcHJveHkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Jlc2V0X3Byb3h5X2lwKHByb3h5X2NvbmZpZykKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0aGnhur90IGzhuq1wIHByb3h5IFBQUG9FOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgX3NldHVwX2h0dHBfcHJveHkoc2VsZiwgcHJveHlfY29uZmlnOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaGnhur90IGzhuq1wIHByb3h5IEhUVFAvSFRUUFMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5IEhUVFAKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG7kWkgduG7m2kgSFRUUCBwcm94eSwgY2jhu4kgY+G6p24gcmVzZXQgSVAKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Jlc2V0X3Byb3h5X2lwKHByb3h5X2NvbmZpZykKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSB0aGnhur90IGzhuq1wIHByb3h5IEhUVFA6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBfc2V0dXBfc29ja3M1X3Byb3h5KHNlbGYsIHByb3h5X2NvbmZpZzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGhp4bq/dCBs4bqtcCBwcm94eSBTT0NLUzUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5IFNPQ0tTNQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4buRaSB24bubaSBTT0NLUzUgcHJveHksIGNo4buJIGPhuqduIHJlc2V0IElQCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZXNldF9wcm94eV9pcChwcm94eV9jb25maWcpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgdGhp4bq/dCBs4bqtcCBwcm94eSBTT0NLUzU6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBfcmVzZXRfcHJveHlfaXAoc2VsZiwgcHJveHlfY29uZmlnOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBSZXNldCBJUCBwcm94eSAobG9naWMgY8WpIMSRxrDhu6NjIGNodXnhu4NuIHbDoG8gxJHDonkpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJveHlfY29uZmlnOiBD4bqldSBow6xuaCBwcm94eQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIExvZ2ljIHJlc2V0IElQIHByb3h5IHPhur0gxJHGsOG7o2MgaW1wbGVtZW50IHTDuXkgdGhlbyBsb+G6oWkgcHJveHkKICAgICAgICAgICAgIyBIaeG7h24gdOG6oWkgcmV0dXJuIFRydWUgxJHhu4Mga2jDtG5nIGJsb2NrIHdvcmtmbG93CiAgICAgICAgICAgIHByb3h5X2lkID0gcHJveHlfY29uZmlnLmdldCgiaWQiKQogICAgICAgICAgICBwcm94eV90eXBlID0gcHJveHlfY29uZmlnLmdldCgidHlwZSIsICJ1bmtub3duIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KGYiUmVzZXQgSVAgY2hvIHByb3h5IHtwcm94eV9pZH0gKHR5cGU6IHtwcm94eV90eXBlfSkiKQogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgY8OzIHRow7RuZyB0aW4gcmVzZXQgSVAKICAgICAgICAgICAgcmVzZXRfaXBfbGluayA9IHByb3h5X2NvbmZpZy5nZXQoImxpbmtfcmVzZXRfaXAiKQogICAgICAgICAgICBwcG9lX25hbWUgPSBwcm94eV9jb25maWcuZ2V0KCJwcG9lX25hbWUiKQoKICAgICAgICAgICAgaWYgcmVzZXRfaXBfbGluayBhbmQgcHBvZV9uYW1lOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgR+G7rWkgUE9TVCByZXF1ZXN0IMSR4buDIHJlc2V0IElQCiAgICAgICAgICAgICAgICAgICAgcmVzZXRfZGF0YSA9IHsicHBvZV9uYW1lIjogcHBvZV9uYW1lfQogICAgICAgICAgICAgICAgICAgIHJlc2V0X3Jlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRfaXBfbGluaywgCiAgICAgICAgICAgICAgICAgICAgICAgIGpzb249cmVzZXRfZGF0YSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9eyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiJ9LCAKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dD0xMAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiByZXNldF9yZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYixJDDoyByZXNldCBJUCB0aMOgbmggY8O0bmcgY2hvIHByb3h5IHtwcG9lX25hbWV9IikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSByZXNldCBJUDogSFRUUCB7cmVzZXRfcmVzcG9uc2Uuc3RhdHVzX2NvZGV9IikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLlJlcXVlc3RFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBn4butaSByZXF1ZXN0IHJlc2V0IElQOiB7ZX0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIlRoaeG6v3UgdGjDtG5nIHRpbiBsaW5rX3Jlc2V0X2lwIGhv4bq3YyBwcm94eV9uYW1lIikKICAgICAgICAgICAgIyBUT0RPOiBJbXBsZW1lbnQgbG9naWMgcmVzZXQgSVAgY+G7pSB0aOG7gyBjaG8gdOG7q25nIGxv4bqhaSBwcm94eQogICAgICAgICAgICAjIFbDrSBk4bulOiBn4buNaSBBUEkgcmVzZXQgSVAsIGhv4bq3YyB0aOG7sWMgaGnhu4duIGPDoWMgbOG7h25oIGPhuqduIHRoaeG6v3QKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgcmVzZXQgSVAgcHJveHk6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiByZXNldF9wcm94eV9pcChzZWxmLCBwcm94eV9jb25maWc6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFBoxrDGoW5nIHRo4bupYyBwdWJsaWMgxJHhu4MgcmVzZXQgSVAgcHJveHkgKMSR4buDIHTGsMahbmcgdGjDrWNoIHbhu5tpIGNvZGUgY8WpKQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb3h5X2NvbmZpZzogQ+G6pXUgaMOsbmggcHJveHkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLl9yZXNldF9wcm94eV9pcChwcm94eV9jb25maWcpCgogICAgZGVmIHVucmVnaXN0ZXJfcHJveHkoc2VsZiwgcHJveHlfY29uZmlnOiBEaWN0W3N0ciwgQW55XSA9IE5vbmUpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgSOG7p3kgxJHEg25nIGvDvSBwcm94eSBzYXUga2hpIHPhu60gZOG7pW5nIHhvbmcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5ICh0w7l5IGNo4buNbiwgY8OzIHRo4buDIGzhuqV5IHThu6sgZGF0YWJhc2UgbuG6v3Uga2jDtG5nIHRydXnhu4FuKQogICAgICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBo4buneSDEkcSDbmcga8O9IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE7hur91IGtow7RuZyB0cnV54buBbiBwcm94eV9jb25maWcsIGPDsyB0aOG7gyBs4bqleSB04burIGRhdGFiYXNlIGhv4bq3YyBjb250ZXh0IGhp4buHbiB04bqhaQogICAgICAgICAgICBpZiBub3QgcHJveHlfY29uZmlnOgogICAgICAgICAgICAgICAgcHJpbnQoIktow7RuZyBjw7MgcHJveHkgY29uZmlnIMSR4buDIHVucmVnaXN0ZXIiKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgQ29pIG5oxrAgdGjDoG5oIGPDtG5nIG7hur91IGtow7RuZyBjw7MgZ8OsIMSR4buDIHVucmVnaXN0ZXIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBwcm94eV90eXBlID0gcHJveHlfY29uZmlnLmdldCgidHlwZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgIHByb3h5X2lkID0gcHJveHlfY29uZmlnLmdldCgiaWQiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcHJveHlfdHlwZSA9PSAicHBvZSI6CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fdW5yZWdpc3Rlcl9wcG9lX3Byb3h5KHByb3h5X2NvbmZpZykKICAgICAgICAgICAgZWxpZiBwcm94eV90eXBlIGluIFsiaHR0cCIsICJodHRwcyJdOgogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3VucmVnaXN0ZXJfaHR0cF9wcm94eShwcm94eV9jb25maWcpCiAgICAgICAgICAgIGVsaWYgcHJveHlfdHlwZSA9PSAic29ja3M1IjoKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl91bnJlZ2lzdGVyX3NvY2tzNV9wcm94eShwcm94eV9jb25maWcpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIkxv4bqhaSBwcm94eSBraMO0bmcgY+G6p24gdW5yZWdpc3RlciBob+G6t2Mga2jDtG5nIMSRxrDhu6NjIGjhu5cgdHLhu6M6IHtwcm94eV90eXBlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBo4buneSDEkcSDbmcga8O9IHByb3h5OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgX3VucmVnaXN0ZXJfcHBvZV9wcm94eShzZWxmLCBwcm94eV9jb25maWc6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEjhu6d5IMSRxINuZyBrw70gcHJveHkgUFBQb0UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9jb25maWc6IEPhuqV1IGjDrG5oIHByb3h5IFBQUG9FCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGhvc3QgPSBwcm94eV9jb25maWcuZ2V0KCJzZXJ2ZXJfaXAiKQogICAgICAgICAgICBwcm94eV9pZCA9IHByb3h5X2NvbmZpZy5nZXQoInByb3h5X2lkIikKICAgICAgICAgICAgcHJveHlfbmFtZSA9IHByb3h5X2NvbmZpZy5nZXQoIm5hbWUiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGhvc3Q6CiAgICAgICAgICAgICAgICBwcmludCgiVGhp4bq/dSB0aMO0bmcgdGluIGhvc3QgY2hvIHByb3h5IFBQUG9FLCBi4buPIHF1YSB1bnJlZ2lzdGVyIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBBUEkgdW5yZWdpc3RlcgogICAgICAgICAgICB1bnJlZ2lzdGVyX3VybCA9IGYiaHR0cDovL3tob3N0fS91bnJlZ2lzdGVyIgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBsb2NhbCBJUCB04burIGRldmljZSBpbmZvCiAgICAgICAgICAgIGRldmljZV9pbmZvID0gc2VsZi5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgICAgICBsb2NhbF9pcCA9ICIiCiAgICAgICAgICAgIGlmIGRldmljZV9pbmZvLmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiIGFuZCAiZGF0YSIgaW4gZGV2aWNlX2luZm86CiAgICAgICAgICAgICAgICBsb2NhbF9pcCA9IGRldmljZV9pbmZvWyJkYXRhIl0uZ2V0KCJsb2NhbF9pcCIsICIiKQogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdW5yZWdpc3Rlcl9kYXRhID0geyJuYW1lIjogcHJveHlfbmFtZX0KICAgICAgICAgICAgICAgIGlmIGxvY2FsX2lwOgogICAgICAgICAgICAgICAgICAgIHVucmVnaXN0ZXJfZGF0YVsibG9jYWxfaXAiXSA9IGxvY2FsX2lwCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyX3Jlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyX3VybCwgCiAgICAgICAgICAgICAgICAgICAganNvbj11bnJlZ2lzdGVyX2RhdGEsIAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9eyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiJ9LCAKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTEwCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpZiB1bnJlZ2lzdGVyX3Jlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICBwcmludChmIsSQw6MgaOG7p3kgxJHEg25nIGvDvSB0aMOgbmggY8O0bmcgduG7m2kgcHJveHkgUFBQb0Ugc2VydmVyOiB7aG9zdH0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGjhu6d5IMSRxINuZyBrw70gduG7m2kgcHJveHkgUFBQb0Ugc2VydmVyOiB7dW5yZWdpc3Rlcl9yZXNwb25zZS5zdGF0dXNfY29kZX0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJLaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgxJHhur9uIHByb3h5IFBQUG9FIHNlcnZlciB7aG9zdH0gxJHhu4MgdW5yZWdpc3Rlcjoge2V9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBo4buneSDEkcSDbmcga8O9IHByb3h5IFBQUG9FOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgX3VucmVnaXN0ZXJfaHR0cF9wcm94eShzZWxmLCBwcm94eV9jb25maWc6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEjhu6d5IMSRxINuZyBrw70gcHJveHkgSFRUUC9IVFRQUwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb3h5X2NvbmZpZzogQ+G6pXUgaMOsbmggcHJveHkgSFRUUAogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEhUVFAgcHJveHkgdGjGsOG7nW5nIGtow7RuZyBj4bqnbiB1bnJlZ2lzdGVyIMSR4bq3YyBiaeG7h3QKICAgICAgICAgICAgcHJveHlfaWQgPSBwcm94eV9jb25maWcuZ2V0KCJpZCIpCiAgICAgICAgICAgIHByaW50KGYiSOG7p3kgxJHEg25nIGvDvSBwcm94eSBIVFRQIHtwcm94eV9pZH0gKGtow7RuZyBj4bqnbiB0aGFvIHTDoWMgxJHhurdjIGJp4buHdCkiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGjhu6d5IMSRxINuZyBrw70gcHJveHkgSFRUUDoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgZGVmIF91bnJlZ2lzdGVyX3NvY2tzNV9wcm94eShzZWxmLCBwcm94eV9jb25maWc6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEjhu6d5IMSRxINuZyBrw70gcHJveHkgU09DS1M1CiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJveHlfY29uZmlnOiBD4bqldSBow6xuaCBwcm94eSBTT0NLUzUKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBTT0NLUzUgcHJveHkgdGjGsOG7nW5nIGtow7RuZyBj4bqnbiB1bnJlZ2lzdGVyIMSR4bq3YyBiaeG7h3QKICAgICAgICAgICAgcHJveHlfaWQgPSBwcm94eV9jb25maWcuZ2V0KCJpZCIpCiAgICAgICAgICAgIHByaW50KGYiSOG7p3kgxJHEg25nIGvDvSBwcm94eSBTT0NLUzUge3Byb3h5X2lkfSAoa2jDtG5nIGPhuqduIHRoYW8gdMOhYyDEkeG6t2MgYmnhu4d0KSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgaOG7p3kgxJHEg25nIGvDvSBwcm94eSBTT0NLUzU6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBkZWJ1Z19lbGVtZW50X2JvdW5kcyhzZWxmLCBlbGVtZW50OiBEaWN0W3N0ciwgQW55XSkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBEZWJ1ZyB0aMO0bmcgdGluIGJvdW5kcyBj4bunYSBlbGVtZW50IMSR4buDIGtp4buDbSB0cmEgeGVtIGPDsyB0YXAgxJHGsOG7o2Mga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IGVsZW1lbnQ6CiAgICAgICAgICAgIHByaW50KCJERUJVRzogRWxlbWVudCBpcyBOb25lIG9yIGVtcHR5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgIHByaW50KCI9PT0gREVCVUcgRUxFTUVOVCBCT1VORFMgPT09IikKICAgICAgICBib3VuZHNfc3RyID0gZWxlbWVudC5nZXQoImJvdW5kcyIsICIiKQogICAgICAgIHByaW50KGYiT3JpZ2luYWwgYm91bmRzIHN0cmluZzogJ3tib3VuZHNfc3RyfSciKQogICAgICAgIAogICAgICAgICMgVGVzdCBnZXRfZWxlbWVudF9ib3VuZHMKICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IHNlbGYuZ2V0X2VsZW1lbnRfYm91bmRzKGVsZW1lbnQpCiAgICAgICAgcHJpbnQoZiJQYXJzZWQgYm91bmRzOiAoe3gxfSwge3kxfSwge3gyfSwge3kyfSkiKQogICAgICAgIAogICAgICAgICMgVGVzdCBnZXRfZWxlbWVudF9jZW50ZXIKICAgICAgICBjZW50ZXJfeCwgY2VudGVyX3kgPSBzZWxmLmdldF9lbGVtZW50X2NlbnRlcihlbGVtZW50KQogICAgICAgIHByaW50KGYiQ2FsY3VsYXRlZCBjZW50ZXI6ICh7Y2VudGVyX3h9LCB7Y2VudGVyX3l9KSIpCiAgICAgICAgCiAgICAgICAgIyBUZXN0IHbhu5tpIHbDrSBk4bulIGPhu6UgdGjhu4MKICAgICAgICBwcmludCgiXG4tLS0gVGVzdGluZyB3aXRoIGV4YW1wbGUgYm91bmRzIFszNiwwXVs4NCwtMzBdIC0tLSIpCiAgICAgICAgdGVzdF9lbGVtZW50ID0geyJib3VuZHMiOiAiWzM2LDBdWzg0LC0zMF0iLCAiY29udGVudC1kZXNjIjogIlTDrG0ga2nhur9tIn0KICAgICAgICAKICAgICAgICB0ZXN0X3gxLCB0ZXN0X3kxLCB0ZXN0X3gyLCB0ZXN0X3kyID0gc2VsZi5nZXRfZWxlbWVudF9ib3VuZHModGVzdF9lbGVtZW50KQogICAgICAgIHByaW50KGYiVGVzdCBwYXJzZWQgYm91bmRzOiAoe3Rlc3RfeDF9LCB7dGVzdF95MX0sIHt0ZXN0X3gyfSwge3Rlc3RfeTJ9KSIpCiAgICAgICAgCiAgICAgICAgdGVzdF9jZW50ZXJfeCwgdGVzdF9jZW50ZXJfeSA9IHNlbGYuZ2V0X2VsZW1lbnRfY2VudGVyKHRlc3RfZWxlbWVudCkKICAgICAgICBwcmludChmIlRlc3QgY2FsY3VsYXRlZCBjZW50ZXI6ICh7dGVzdF9jZW50ZXJfeH0sIHt0ZXN0X2NlbnRlcl95fSkiKQogICAgICAgIAogICAgICAgICMgVGVzdCB0YXBfZWxlbWVudAogICAgICAgIHByaW50KCJcbi0tLSBUZXN0aW5nIHRhcF9lbGVtZW50IC0tLSIpCiAgICAgICAgcmVzdWx0ID0gc2VsZi50YXBfZWxlbWVudCh0ZXN0X2VsZW1lbnQpCiAgICAgICAgcHJpbnQoZiJUYXAgcmVzdWx0OiB7cmVzdWx0fSIpCiAgICAgICAgCiAgICAgICAgcHJpbnQoIj09PSBFTkQgREVCVUcgPT09IikKCiAgICBkZWYgZG93bmxvYWRfaW1hZ2Uoc2VsZiwgc2VydmVyOiBzdHIgPSAiaHR0cDovLzEwLjAuMC41OjUwMDAiLCBjb3VudDogaW50ID0gMSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBU4bqjaSDhuqNuaCB04burIHNlcnZlciB24buBIHRoaeG6v3QgYuG7iyB0aMO0bmcgcXVhIGhlbHBlciBzZXJ2aWNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2VydmVyOiBTZXJ2ZXIgxJHhu4thIGNo4buJIChu4bq/dSBOb25lIHRow6wgxJHhu41jIHThu6sgY29uZmlnIGRiLCBt4bq3YyDEkeG7i25oICJodHRwOi8vMTAuMC4wLjU6NTAwMCIpCiAgICAgICAgICAgIGNvdW50OiBT4buRIGzGsOG7o25nIOG6o25oIGPhuqduIHThuqNpICht4bq3YyDEkeG7i25oIDEpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdOG6o2kgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgc2VydmVyIHThu6sgZGF0YWJhc2UgbuG6v3Uga2jDtG5nIHRydXnhu4FuIHbDoG8KICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIHNlcnZlciBjw7MgcHJvdG9jb2wKICAgICAgICAgICAgaWYgbm90IHNlcnZlci5zdGFydHN3aXRoKCgiaHR0cDovLyIsICJodHRwczovLyIpKToKICAgICAgICAgICAgICAgIHNlcnZlciA9IGYiaHR0cDovL3tzZXJ2ZXJ9IgogICAgICAgICAgICAKICAgICAgICAgICAgIyBYw6J5IGThu7FuZyBVUkwgZOG7sWEgdHLDqm4gc+G7kSBsxrDhu6NuZyDhuqNuaAogICAgICAgICAgICBpZiBjb3VudCA9PSAxOgogICAgICAgICAgICAgICAgIyBUcsaw4budbmcgaOG7o3AgdOG6o2kgMSDhuqNuaCAtIHPhu60gZOG7pW5nIGVuZHBvaW50IHJhbmRvbS1hdmF0YXIKICAgICAgICAgICAgICAgIGltYWdlX3VybCA9IGYie3NlcnZlcn0vcmFuZG9tLWF2YXRhciIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVHLGsOG7nW5nIGjhu6NwIHThuqNpIG5oaeG7gXUg4bqjbmggLSBz4butIGThu6VuZyBlbmRwb2ludCBnZXQtc2ltaWxhci1pbWFnZXMKICAgICAgICAgICAgICAgIGltYWdlX3VybCA9IGYie3NlcnZlcn0vZ2V0LXNpbWlsYXItaW1hZ2VzP2NvdW50PXtjb3VudH0iCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFPhu60gZOG7pW5nIF9tYWtlX3JlcXVlc3QgxJHhu4MgdOG6rW4gZOG7pW5nIGPGoSBjaOG6vyByZXRyeSB2w6AgZXJyb3IgaGFuZGxpbmcgY8OzIHPhurVuCiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuX21ha2VfcmVxdWVzdCgiZG93bmxvYWQtaW1hZ2UiLCBwYXJhbXM9eyJ1cmwiOiBpbWFnZV91cmx9KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBY4butIGzDvSByZXNwb25zZSBmb3JtYXQgdGjhu7FjIHThur8KICAgICAgICAgICAgIyBSZXNwb25zZTogeyJkYXRhIjogeyJzdWNjZXNzIjogdHJ1ZSwgIm1lc3NhZ2UiOiAiLi4uIiwgImRhdGEiOiB7Li4ufX0sICJtZXNzYWdlIjogIi4uLiIsICJzdGF0dXMiOiAic3VjY2VzcyJ9CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmVzdWx0LCBkaWN0KSBhbmQgcmVzdWx0LmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGRhdGEuc3VjY2VzcyB2w6AgZGF0YS5tZXNzYWdlCiAgICAgICAgICAgICAgICBkYXRhX3NlY3Rpb24gPSByZXN1bHQuZ2V0KCJkYXRhIiwge30pCiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZGF0YV9zZWN0aW9uLmdldCgic3VjY2VzcyIsIEZhbHNlKQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGRhdGFfc2VjdGlvbi5nZXQoIm1lc3NhZ2UiLCAiIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3MgYW5kICJ0aMOgbmggY8O0bmciIGluIG1lc3NhZ2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHThuqNpIOG6o25oOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiMgVGVzdCBmdW5jdGlvbiBmb3IgdGhlIHByb2JsZW1hdGljIGVsZW1lbnQKZGVmIHRlc3RfcHJvYmxlbWF0aWNfZWxlbWVudCgpOgogICAgIiIiCiAgICBUZXN0IGZ1bmN0aW9uIMSR4buDIGtp4buDbSB0cmEgZWxlbWVudCBjw7MgYm91bmRzIMOibQogICAgIiIiCiAgICBoZWxwZXIgPSBIZWxwZXJTZXJ2aWNlKCkKICAgIAogICAgIyBFbGVtZW50IHThu6sgdsOtIGThu6UgY+G7p2EgdXNlcgogICAgcHJvYmxlbWF0aWNfZWxlbWVudCA9IHsKICAgICAgICAiY2xhc3MiOiAiYW5kcm9pZC53aWRnZXQuSW1hZ2VWaWV3IiwKICAgICAgICAicGFja2FnZSI6ICJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGwiLCAKICAgICAgICAicmVzb3VyY2UtaWQiOiAiY29tLnNzLmFuZHJvaWQudWdjLnRyaWxsOmlkL2RlbCIsCiAgICAgICAgInRleHQiOiAibnVsbCIsCiAgICAgICAgImNvbnRlbnQtZGVzYyI6ICJUw6xtIGtp4bq/bSIsCiAgICAgICAgImJvdW5kcyI6ICJbMzYsMF1bODQsLTMwXSIsCiAgICAgICAgImNsaWNrYWJsZSI6ICJmYWxzZSIsCiAgICAgICAgImVuYWJsZWQiOiAidHJ1ZSIsCiAgICAgICAgInZpc2libGUtdG8tdXNlciI6ICJmYWxzZSIKICAgIH0KICAgIAogICAgcHJpbnQoIlRlc3RpbmcgcHJvYmxlbWF0aWMgZWxlbWVudCB3aXRoIGJvdW5kcyBbMzYsMF1bODQsLTMwXSIpCiAgICBoZWxwZXIuZGVidWdfZWxlbWVudF9ib3VuZHMocHJvYmxlbWF0aWNfZWxlbWVudCkKICAgIAogICAgcHJpbnQoIlxuVHJ5aW5nIHRvIHRhcCB0aGUgZWxlbWVudC4uLiIpCiAgICByZXN1bHQgPSBoZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2JsZW1hdGljX2VsZW1lbnQpCiAgICBwcmludChmIkZpbmFsIHRhcCByZXN1bHQ6IHtyZXN1bHR9IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB0ZXN0X3Byb2JsZW1hdGljX2VsZW1lbnQoKQogICAgCiAgICAjIFbDrSBk4bulIHPhu60gZOG7pW5nCiAgICBoZWxwZXIgPSBIZWxwZXJTZXJ2aWNlKCkKICAgIAogICAgIyBM4bqleSBrw61jaCB0aMaw4bubYyBtw6BuIGjDrG5oCiAgICB3aWR0aCwgaGVpZ2h0ID0gaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICBwcmludChmIkvDrWNoIHRoxrDhu5tjIG3DoG4gaMOsbmg6IHt3aWR0aH14e2hlaWdodH0iKQogICAgCiAgICAjIE3hu58gVGlrVG9rCiAgICBoZWxwZXIub3Blbl9hcHAoImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbCIpCiAgICAKICAgICMgQ2jhu50gxJHhu6NpIGNobyDEkeG6v24ga2hpIG7DunQgIlRyYW5nIGNo4bunIiBob+G6t2MgbsO6dCAiS2jDoW0gcGjDoSIgeHXhuqV0IGhp4buHbgogICAgZWxlbWVudHNfdG9fZmluZCA9IFsKICAgICAgICB7ImNvbnRlbnRfZGVzYyI6ICJUcmFuZyBjaOG7pyJ9LAogICAgICAgIHsiY29udGVudF9kZXNjIjogIktow6FtIHBow6EifQogICAgXQogICAgCiAgICBlbGVtZW50ID0gaGVscGVyLndhaXRfZm9yX2FueV9lbGVtZW50KGVsZW1lbnRzX3RvX2ZpbmQpCiAgICAKICAgIGlmIGVsZW1lbnQ6CiAgICAgICAgcHJpbnQoZiLEkMOjIHTDrG0gdGjhuqV5IHBo4bqnbiB04butOiB7aGVscGVyLmdldF9lbGVtZW50X2NvbnRlbnRfZGVzYyhlbGVtZW50KX0iKQogICAgICAgIGhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZWxlbWVudCkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIktow7RuZyB0w6xtIHRo4bqleSBwaOG6p24gdOG7rSBuw6BvIHNhdSB0aOG7nWkgZ2lhbiBjaOG7nSIp').decode('utf-8'))
