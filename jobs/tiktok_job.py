import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsCmZyb20gam9icy5qb2JfYmFzZSBpbXBvcnQgQmFzZUpvYgoKY2xhc3MgVGlrdG9rSm9iKEJhc2VKb2IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZSkKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbCIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gInRpa3RvayIKICAgICAgICAKICAgICAgICAjIE92ZXJyaWRlIGRlZmF1bHQgY29uZmlnIGNobyBUaWtUb2sKICAgICAgICBzZWxmLl9kZWZhdWx0X2NvbmZpZy51cGRhdGUoewogICAgICAgICAgICAiYWN0aW9uX3dlaWdodHMiOiB7CiAgICAgICAgICAgICAgICAibmV3c2ZlZWQiOiAxMCwgICAgICAjIDEwJSB2deG7kXQgYuG6o25nIHRpbiAow610IGjGoW4gdsOsIFRpa1RvayBjaOG7pyB54bq/dSBsw6AgdmlkZW8pCiAgICAgICAgICAgICAgICAicmVlbHMiOiAyNSwgICAgICAgICAjIDI1JSB4ZW0gdmlkZW8gKGNow61uaCBj4bunYSBUaWtUb2spIAogICAgICAgICAgICAgICAgIm5vdGlmaWNhdGlvbiI6IDgsICAgIyA4JSB4ZW0gdGjDtG5nIGLDoW8KICAgICAgICAgICAgICAgICJwcm9maWxlIjogMTIsICAgICAgICMgMTIlIHhlbSBwcm9maWxlCiAgICAgICAgICAgICAgICAiam9iIjogMjAsICAgICAgICAgICAjIDIwJSBsw6BtIGpvYiAoZ2nhu68gbmd1ecOqbikKICAgICAgICAgICAgICAgICJleHBsb3JlIjogMTUsICAgICAgICMgMTUlIGtow6FtIHBow6EgKGNhbyBoxqFuIHbDrCBUaWtUb2sgaGF5IHN1Z2dlc3QpCiAgICAgICAgICAgICAgICAic2VhcmNoIjogNSwgICAgICAgICAjIDUlIHTDrG0ga2nhur9tICjDrXQgaMahbiB2w6wgVGlrVG9rIGThu7FhIHbDoG8gYWxnb3JpdGhtKQogICAgICAgICAgICAgICAgInBvc3QiOiA1ICAgICAgICAgICAgIyA1JSB4ZW0gbGl2ZXN0cmVhbSAoYWN0aW9uIHJpw6puZyBj4bunYSBUaWtUb2spCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZWxheV9wb3N0X3ZpZGVvX21pbnV0ZSI6IDE0NDAsICAjIFRo4budaSBnaWFuIGNo4budIGdp4buvYSBjw6FjIGzhuqduIMSRxINuZyB2aWRlbyAocGjDunQpIC0gMSBnaeG7nQogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgIyBDYWNoZSBjaG8gY3VycmVudCB1c2VybmFtZSDEkeG7gyB0csOhbmggY2hlY2sgcXXDoSBuaGnhu4F1CiAgICAgICAgc2VsZi5fY2FjaGVkX3VzZXJuYW1lID0gTm9uZQogICAgICAgIHNlbGYuX3VzZXJuYW1lX2NhY2hlX3RpbWUgPSAwCiAgICAgICAgc2VsZi5fdXNlcm5hbWVfY2FjaGVfdHRsID0gNjAgICMgQ2FjaGUgNjAgZ2nDonkKICAgIAogICAgZGVmIGdldF9zdXBwb3J0ZWRfYWN0aW9ucyhzZWxmKSAtPiBMaXN0W3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgT3ZlcnJpZGUgZGFuaCBzw6FjaCBhY3Rpb25zIMSRxrDhu6NjIFRpa1RvayBo4buXIHRy4bujCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtzdHJdOiBEYW5oIHPDoWNoIGFjdGlvbnMgVGlrVG9rIGjhu5cgdHLhu6MKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmdldF9hY3Rpb25fd2VpZ2h0cygpLmtleXMoKSkKICAgICAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrdG9rIHThu6sgdGhp4bq/dCBi4buLIiIiCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIAogICAgICAgIHRyeToKCiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgZW5zdXJlX2hvbWVfc2NyZWVuKCkgdGhheSB2w6wgY2jhu4kgd2FpdF9mb3JfZWxlbWVudAogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdOG6o2kgbcOgbiBow6xuaCBjaMOtbmggVGlrVG9rIHNhdSAyMCBnacOieSIpCiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCAiSOG7kyBzxqEiIHbDoCBuaOG6pXAgdsOgbwogICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBtZW51IGjhu5Mgc8ahIMSR4buDIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfbWVudSgpOgogICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IFhNTCBtw6BuIGjDrG5oIHNhdSBraGkgbeG7nyBtZW51CiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgYWRkX2FjY291bnRfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow6ptIHTDoGkga2hv4bqjbiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBhZGRfYWNjb3VudF9idXR0b246CiAgICAgICAgICAgICAgICAjIFTDrG0gZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gKFJlY3ljbGVyVmlldykgLSBsw6AgY2hhIGPhu6dhIG7DunQgIlRow6ptIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgIHJlY3ljbGVyX3ZpZXcgPSBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIFJlY3ljbGVyVmlldwogICAgICAgICAgICAgICAgYWxsX3JlY3ljbGVyX3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWR4LnJlY3ljbGVydmlldy53aWRnZXQuUmVjeWNsZXJWaWV3IgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gUmVjeWNsZXJWaWV3IGNo4bupYSBjw6FjIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgZm9yIHJ2IGluIGFsbF9yZWN5Y2xlcl92aWV3czoKICAgICAgICAgICAgICAgICAgICBydl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMocnYpCiAgICAgICAgICAgICAgICAgICAgYWRkX2FjY291bnRfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGFkZF9hY2NvdW50X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGFkZF9hY2NvdW50X2J1dHRvbiBjw7MgbuG6sW0gdHJvbmcgcmVjeWNsZXJfdmlldyBraMO0bmcKICAgICAgICAgICAgICAgICAgICBpZiAocnZfYm91bmRzWzBdIDw9IGFkZF9hY2NvdW50X2JvdW5kc1swXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzFdIDw9IGFkZF9hY2NvdW50X2JvdW5kc1sxXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzJdID49IGFkZF9hY2NvdW50X2JvdW5kc1syXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcnZfYm91bmRzWzNdID49IGFkZF9hY2NvdW50X2JvdW5kc1szXSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3ljbGVyX3ZpZXcgPSBydgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiByZWN5Y2xlcl92aWV3OgogICAgICAgICAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIG7DunQgKEJ1dHRvbikgdHJvbmcgUmVjeWNsZXJWaWV3IGLhurFuZyBjbGFzcyB0aGF5IHbDrCByZXNvdXJjZS1pZAogICAgICAgICAgICAgICAgICAgIGFjY291bnRfYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgYnV0dG9uIGluIGFjY291bnRfYnV0dG9uczoKICAgICAgICAgICAgICAgICAgICAgICAgIyBC4buPIHF1YSBuw7p0ICJUaMOqbSB0w6BpIGtob+G6o24iCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICJUaMOqbSB0w6BpIGtob+G6o24iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgTOG6pXkgdMOqbiB0w6BpIGtob+G6o24gdOG7qyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBidXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIFRleHRWaWV3IHRyb25nIGJ1dHRvbiBi4bqxbmcgY2xhc3MgdGhheSB2w6wgcmVzb3VyY2UtaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEzhu41jIHRleHR2aWV3IHRoZW8gYm91bmRzIMSR4buDIHTDrG0gxJHDum5nIGPDoWkgdGh14buZYyB24buBIGJ1dHRvbiBuw6B5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25fYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0diBpbiB0ZXh0dmlld3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dl9ib3VuZHNbMF0gPj0gYnV0dG9uX2JvdW5kc1swXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbM10gPD0gYnV0dG9uX2JvdW5kc1szXSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgxJHhu4Mga2jDtG5nIGzhuqV5IHBo4bqjaSB0ZXh0IHLhu5duZyBob+G6t2MgIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRleHQgYW5kIHRleHQgIT0gIm51bGwiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBC4buPIHF1YSBuw7p0ICLEkMOzbmciCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lID09ICLEkMOzbmciOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIGPDsyDEkWFuZyDEkcSDbmcgbmjhuq1wIGtow7RuZwogICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOsbSBk4bqldSBraeG7g20gdHJvbmcgYnV0dG9uIGLhurFuZyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2ttYXJrcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2M9IkThuqV1IGtp4buDbSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBk4bqldSBraeG7g20gY8OzIHRodeG7mWMgduG7gSBidXR0b24gbsOgeSBraMO0bmcKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uX2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhidXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBjaGVjayBpbiBjaGVja21hcmtzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKGNoZWNrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrX2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1sxXSA+PSBidXR0b25fYm91bmRzWzFdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1syXSA8PSBidXR0b25fYm91bmRzWzJdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIEPFqW5nIGPDsyB0aOG7gyBraeG7g20gdHJhIHRodeG7mWMgdMOtbmggc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uLmdldCgic2VsZWN0ZWQiKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc19jdXJyZW50ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHVzZXJuYW1lIGjhu6NwIGzhu4cgdHLGsOG7m2Mga2hpIHRow6ptIHbDoG8gZGFuaCBzw6FjaAogICAgICAgICAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBhbmQgdXNlcm5hbWUgIT0gIm51bGwiIGFuZCB1c2VybmFtZS5zdHJpcCgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBM4buNYyB0aMOqbSBjw6FjIHTDqm4ga2jDtG5nIHBo4bqjaSB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lIG5vdCBpbiBbIkPDoGkgxJHhurd0IiwgIkPDoGkgxJHhurd0IHTDoGkga2hv4bqjbiIsICJUw7l5IGNo4buNbiIsICJNZW51Il06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5pY2tuYW1lIjogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfdXNlcm5hbWUiOiB1c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImFjdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19sb2dpbiI6IGlzX2N1cnJlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZChhY2NvdW50KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFF1YXkgbOG6oWkgbcOgbiBow6xuaCBjaMOtbmgKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBhY2NvdW50cwogICAgCiAgICBkZWYgcGVyZm9ybV9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIlRo4buxYyBoaeG7h24gY8O0bmcgdmnhu4djIHbhu5tpIHTDoGkga2hv4bqjbiBUaWtUb2siIiIKICAgICAgICAjIFPhu60gZOG7pW5nIHBoxrDGoW5nIHRo4bupYyBj4bunYSBs4bubcCBjaGEKICAgICAgICBzdXBlcigpLnBlcmZvcm1fam9iKGFjY291bnQpCiAgICAgICAgCiAgICBkZWYgcGVyZm9ybV9jYXJlKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKToKICAgICAgICAiIiIKICAgICAgICBOdcO0aSB0w6BpIGtob+G6o24gVGlrVG9rIC0gTGVnYWN5IG1ldGhvZCwgc+G7rSBk4bulbmcgU21hcnQgQ2FyZSBt4bubaQogICAgICAgIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IGNodXnhu4NuIGjGsOG7m25nIHNhbmcgU21hcnQgQ2FyZSBtZXRob2RzCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIG51w7RpIHTDoGkga2hv4bqjbiBUaWtUb2s6IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0gKGxlZ2FjeSBtZXRob2QpIikKICAgICAgICAKICAgICAgICAjIFPhu60gZOG7pW5nIFNtYXJ0IENhcmUgbWV0aG9kIHRoYXkgdsOsIG1pbmkgY2FyZSBjxakKICAgICAgICBpbXBvcnQgcmFuZG9tCiAgICAgICAgY2FyZV9tZXRob2RzID0gWyJfY2FyZV9zd2lwZV9mZWVkIiwgIl9jYXJlX3dhdGNoX3ZpZGVvcyJdCiAgICAgICAgc2VsZWN0ZWRfbWV0aG9kID0gcmFuZG9tLmNob2ljZShjYXJlX21ldGhvZHMpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBtZXRob2QgPSBnZXRhdHRyKHNlbGYsIHNlbGVjdGVkX21ldGhvZCkKICAgICAgICAgICAgc3VjY2VzcyA9IG1ldGhvZChhY2NvdW50KQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTGVnYWN5IGNhcmUgdXNpbmcge3NlbGVjdGVkX21ldGhvZH06IHsnc3VjY2VzcycgaWYgc3VjY2VzcyBlbHNlICdmYWlsZWQnfSIpCiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkxlZ2FjeSBjYXJlIGVycm9yOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIGRlZiBwZXJmb3JtX21pbmlfY2FyZShzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIG1pbmkgY2FyZSBjaG8gdMOgaSBraG/huqNuIFRpa1RvazoKICAgICAgICAxLiBW4buBIHRyYW5nIGNo4bunLCB4w6FjIG5o4bqtbiB0YWIgxJHhu4EgeHXhuqV0CiAgICAgICAgMi4gTMaw4bubdCDEkeG7gSB4deG6pXQgdHJvbmcgMi0zIHBow7p0CiAgICAgICAgMy4gTmfhuqt1IG5oacOqbiBi4bqlbSB2w6BvIEjhu5lwIHRoxrAsIGThu6tuZyAyLTVzLCB2deG7kXQgbMOqbiwgcXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgbWluaSBjYXJlIGNobyB0w6BpIGtob+G6o24gVGlrVG9rOiB7YWNjb3VudFsndW5pcXVlX3VzZXJuYW1lJ119IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMS4gxJDhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cgdsOgIHjDoWMgbmjhuq1uIHRhYiDEkeG7gSB4deG6pXQKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB2w6AgY2xpY2sgdsOgbyB0YWIgIkTDoG5oIGNobyBi4bqhbiIgKHRhYiDEkeG7gSB4deG6pXQpCiAgICAgICAgICAgIGZvcl95b3VfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkTDoG5oIGNobyBi4bqhbiIpCiAgICAgICAgICAgIGlmIG5vdCBmb3JfeW91X3RhYjoKICAgICAgICAgICAgICAgIGZvcl95b3VfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iRMOgbmggY2hvIGLhuqFuIikKICAgICAgICAgICAgaWYgbm90IGZvcl95b3VfdGFiOgogICAgICAgICAgICAgICAgZm9yX3lvdV90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iRm9yIFlvdSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgZm9yX3lvdV90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgxJHhu4EgeHXhuqV0LCDEkWFuZyBjbGljayB2w6BvLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihmb3JfeW91X3RhYikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IHRhYiDEkeG7gSB4deG6pXQsIGdp4bqjIMSR4buLbmggxJFhbmcg4bufIHRhYiDEkcO6bmciKQoKICAgICAgICAgICAgIyAyLiBMxrDhu5t0IMSR4buBIHh14bqldCB0cm9uZyAxLTMgcGjDunQKICAgICAgICAgICAgc2Nyb2xsX2R1cmF0aW9uID0gcmFuZG9tLnJhbmRpbnQoNjAsIDE4MCkgICMgMS0zIHBow7p0CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgbMaw4bubdCDEkeG7gSB4deG6pXQgdHJvbmcge3Njcm9sbF9kdXJhdGlvbn0gZ2nDonkuLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIHZpZGVvX2NvdW50ID0gMAogICAgICAgICAgICAKICAgICAgICAgICAgd2hpbGUgKHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSkgPCBzY3JvbGxfZHVyYXRpb246CiAgICAgICAgICAgICAgICAjIEzGsOG7m3QgbMOqbiDEkeG7gyBjaHV54buDbiB2aWRlbyB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgdmlkZW9fY291bnQgKz0gMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE5naOG7iSBuZ+G6q3Ugbmhpw6puIDMtOCBnacOieSBnaeG7r2EgY8OhYyB2aWRlbyAobmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQpCiAgICAgICAgICAgICAgICB3YXRjaF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMywgOCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF90aW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJhbmRvbSBjw7MgMTAlIGto4bqjIG7Eg25nIGLhuqVtIGxpa2UgdmlkZW8KICAgICAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kb20oKSA8IDAuMTogICMgMTAlIGNoYW5jZQogICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgICAgICAgICAgICAgaWYgbGlrZV9idXR0b24gYW5kIG5vdCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUmFuZG9tIGxpa2UgdmlkZW8gdHJvbmcga2hpIG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgUmFuZG9tIGPDsyA1JSBraOG6oyBuxINuZyBi4bqlbSBzaGFyZQogICAgICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC4wNTogICMgNSUgY2hhbmNlCiAgICAgICAgICAgICAgICAgICAgc2hhcmVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iQ2hpYSBz4bq7IikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2hhcmVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBzaGFyZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJTaGFyZSIpCiAgICAgICAgICAgICAgICAgICAgaWYgc2hhcmVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJSYW5kb20gY2xpY2sgc2hhcmUgdHJvbmcga2hpIG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzaGFyZV9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAjIE5o4bqlbiBiYWNrIMSR4buDIMSRw7NuZyBkaWFsb2cgc2hhcmUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbMaw4bubdCB7dmlkZW9fY291bnR9IHZpZGVvIHRyb25nIHtzY3JvbGxfZHVyYXRpb259IGdpw6J5IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMy4gTmfhuqt1IG5oacOqbiBi4bqlbSB2w6BvIEjhu5lwIHRoxrAgKDUwJSBraOG6oyBuxINuZykKICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC41OiAgIyA1MCUgY2hhbmNlCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJSYW5kb20gdHJ1eSBj4bqtcCBI4buZcCB0aMawLi4uIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBjbGljayB2w6BvIEjhu5lwIHRoxrAKICAgICAgICAgICAgICAgIGluYm94X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9Ikjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgaWYgaW5ib3hfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IEjhu5lwIHRoxrAsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihpbmJveF9idXR0b24pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBE4burbmcgbOG6oWkgMi01IGdpw6J5CiAgICAgICAgICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMiwgNSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiROG7q25nIGzhuqFpIHt3YWl0X3RpbWV9IGdpw6J5IHRyb25nIEjhu5lwIHRoxrAuLi4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiB0cm9uZyBI4buZcCB0aMawCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVnXhu5F0IGzDqm4gdHJvbmcgSOG7mXAgdGjGsC4uLiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlF1YXkgbOG6oWkgdHJhbmcgY2jhu6cgdOG7qyBI4buZcCB0aMawLi4uIikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5iYWNrX3RvX2hvbWUoKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIHF1YXkgduG7gSB0cmFuZyBjaOG7pyB04burIEjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBI4buZcCB0aMawIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlNraXAgdHJ1eSBj4bqtcCBI4buZcCB0aMawIGzhuqduIG7DoHkiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gduG7gSB0cmFuZyBjaOG7pyBjdeG7kWkgY8O5bmcKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgxJHhuqNtIGLhuqNvIHbhu4EgdHJhbmcgY2jhu6cgc2F1IG1pbmkgY2FyZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkhvw6BuIHRow6BuaCBtaW5pIGNhcmUgY2hvIHTDoGkga2hv4bqjbiBUaWtUb2s6IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIG1pbmkgY2FyZSBjaG8gdMOgaSBraG/huqNuIFRpa1Rvazoge2FjY291bnRbJ3VuaXF1ZV91c2VybmFtZSddfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhu5EgZ+G6r25nIHbhu4EgdHJhbmcgY2jhu6cgbuG6v3UgY8OzIGzhu5dpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3Jlc3RhcnRfYXBwKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDDs25nIGFwcCB2w6AgbeG7nyBs4bqhaQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQYW5nIMSRw7NuZyBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDDs25nIGFwcAogICAgICAgICAgICBzZWxmLmhlbHBlci5mb3JjZV9zdG9wX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTeG7nyBs4bqhaSBhcHAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJBhbmcgbeG7nyBs4bqhaSBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu50gYXBwIHThuqNpIHhvbmcKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgYXBwIMSRw6MgbeG7nyB0aMOgbmggY8O0bmcgY2jGsGEKICAgICAgICAgICAgaWYgc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfYXBwKCkgPT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgcmVzdGFydCBhcHAgVGlrVG9rIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIlJlc3RhcnQgYXBwIFRpa1RvayB0aOG6pXQgYuG6oWkiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIHJlc3RhcnQgYXBwIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9zY3JvbGxfZm9yX3lvdV9mZWVkKHNlbGYsIGR1cmF0aW9uX3NlY29uZHM6IGludCkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBMxrDhu5t0IGZlZWQgxJHhu4EgeHXhuqV0IHRyb25nIGtob+G6o25nIHRo4budaSBnaWFuIG5o4bqldCDEkeG7i25oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZHVyYXRpb25fc2Vjb25kczogVGjhu51pIGdpYW4gbMaw4bubdCAoZ2nDonkpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBzY3JvbGxfY291bnQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUgPCBkdXJhdGlvbl9zZWNvbmRzOgogICAgICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiDEkeG7gyBjaHV54buDbiB2aWRlbyB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2Nyb2xsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOZ2jhu4kgbmfhuqt1IG5oacOqbiAyLTYgZ2nDonkgbmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQgeGVtIHZpZGVvCiAgICAgICAgICAgICAgICB3YXRjaF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMiwgNikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF90aW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJhbmRvbSB0aOG7iW5oIHRob+G6o25nIGThu6tuZyBsw6J1IGjGoW4gKG5oxrAgxJFhbmcgeGVtIHZpZGVvIHRow7ogduG7iykKICAgICAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kaW50KDEsIDEwKSA9PSAxOiAgIyAxMCUgeMOhYyBzdeG6pXQKICAgICAgICAgICAgICAgICAgICBsb25nX3dhdGNoX3RpbWUgPSByYW5kb20ucmFuZGludCg4LCAxNSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiROG7q25nIHhlbSB2aWRlbyBsw6J1IGjGoW46IHtsb25nX3dhdGNoX3RpbWV9cyIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKGxvbmdfd2F0Y2hfdGltZSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBMb2cgdGnhur9uIHRyw6xuaCBt4buXaSAzMCBnacOieQogICAgICAgICAgICAgICAgZWxhcHNlZCA9IHRpbWUudGltZSgpIC0gc3RhcnRfdGltZQogICAgICAgICAgICAgICAgaWYgZWxhcHNlZCA+IDAgYW5kIGludChlbGFwc2VkKSAlIDMwID09IDAgYW5kIHNjcm9sbF9jb3VudCA+IDA6CiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nID0gZHVyYXRpb25fc2Vjb25kcyAtIGVsYXBzZWQKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBsxrDhu5t0IHtzY3JvbGxfY291bnR9IHZpZGVvLCBjw7JuIGzhuqFpIHtpbnQocmVtYWluaW5nKX1zIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJIb8OgbiB0aMOgbmggbMaw4bubdCDEkeG7gSB4deG6pXQ6IHtzY3JvbGxfY291bnR9IHZpZGVvIHRyb25nIHtkdXJhdGlvbl9zZWNvbmRzfXMiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzGsOG7m3QgZmVlZCDEkeG7gSB4deG6pXQiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9pbnRlcmFjdF93aXRoX2luYm94KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVMawxqFuZyB0w6FjIHbhu5tpIEjhu5lwIHRoxrA6IGLhuqVtIHbDoG8sIGThu6tuZyAyLTVzLCB2deG7kXQgbMOqbgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVMOsbSBuw7p0IEjhu5lwIHRoxrAKICAgICAgICAgICAgaW5ib3hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iSOG7mXAgdGjGsCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgaW5ib3hfYnV0dG9uOgogICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgaW5ib3hfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9Ikjhu5lwIHRoxrAiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGluYm94X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IEjhu5lwIHRoxrAiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENsaWNrIHbDoG8gSOG7mXAgdGjGsAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkGFuZyBjbGljayB2w6BvIEjhu5lwIHRoxrAiKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaW5ib3hfYnV0dG9uKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBE4burbmcgbOG6oWkgMi01IGdpw6J5CiAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDUpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJE4burbmcgdHJvbmcgSOG7mXAgdGjGsCB7d2FpdF90aW1lfXMiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiB0cm9uZyBI4buZcCB0aMawCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlZ14buRdCBsw6puIHRyb25nIEjhu5lwIHRoxrAiKQogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSB0aGFvIHTDoWMgdnXhu5F0IGzDqm4gdGjDqm0gMS0yIGzhuqduIG7hu69hCiAgICAgICAgICAgIGFkZGl0aW9uYWxfc3dpcGVzID0gcmFuZG9tLnJhbmRpbnQoMSwgMikKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoYWRkaXRpb25hbF9zd2lwZXMpOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDAuNSwgMS41KSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCB0xrDGoW5nIHTDoWMgduG7m2kgSOG7mXAgdGjGsCIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgdMawxqFuZyB0w6FjIHbhu5tpIEjhu5lwIHRoxrAiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ2V0X2F2YWlsYWJsZV9qb2JzKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBkYW5oIHPDoWNoIGPDoWMgam9iIGto4bqjIGThu6VuZyB04burIEdvTGlrZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIGpvYiBob+G6t2MgbGlzdCBy4buXbmcgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBzZWxmLmdvbGlrZV9zZXJ2aWNlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGzhuqV5IGpvYjogR29MaWtlU2VydmljZSBjaMawYSDEkcaw4bujYyBjdW5nIGPhuqVwIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBH4buNaSBBUEkgbOG6pXkgam9iCiAgICAgICAgICAgIGpvYl91cmwgPSBzZWxmLmdldF9qb2JzX3VybCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIHRoYW0gc+G7kQogICAgICAgICAgICBwYXJhbXMgPSBzZWxmLmdldF9qb2JfcGFyYW1zKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSQogICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuYXBpX3JlcXVlc3Qoam9iX3VybCwgIkdFVCIsIHBhcmFtcykKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICBqb2JfZGF0YSA9IHJlc3BvbnNlLmdldCgiZGF0YSIsIE5vbmUpCiAgICAgICAgICAgICAgICBpZiBqb2JfZGF0YToKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSBqb2IKICAgICAgICAgICAgICAgICAgICBqb2IgPSBzZWxmLm1hcF9qb2JfZGF0YShqb2JfZGF0YSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0w6xtIHRo4bqleSBqb2Ige2pvYlsnaWQnXX0gbG/huqFpIHtqb2JbJ3R5cGUnXX0gY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudFsndW5pcXVlX3VzZXJuYW1lJ119IikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2pvYl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggam9iIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBleGVjdXRlX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiwgYmFvIGfhu5NtOgogICAgICAgICAgICAgICAgLSBzdGF0dXMgKGludCk6IE3DoyB0cuG6oW5nIHRow6FpIGpvYgogICAgICAgICAgICAgICAgICAgIDA6IENoxrBhIHRo4buxYyBoaeG7h24KICAgICAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgICAgICAyOiBUaOG6pXQgYuG6oWksIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcKICAgICAgICAgICAgICAgICAgICAzOiBUaOG6pXQgYuG6oWksIMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgICAgICA0OiBUaOG6pXQgYuG6oWksIHnDqnUgY+G6p3UgxJFhbmcgY2jhu50KICAgICAgICAgICAgICAgIC0gbWVzc2FnZSAoc3RyKTogVGjDtG5nIGLDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgICAgIC0gc3VjY2VzcyAoYm9vbCk6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgIGpvYl9saW5rID0gam9iLmdldCgibGluayIsICIiKQogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl9pZH0gbG/huqFpIHtqb2JfdHlwZX0gduG7m2kgbGluayB7am9iX2xpbmt9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBsb+G6oWkgam9iIMSRxrDhu6NjIGjhu5cgdHLhu6MKICAgICAgICAgICAgaWYgam9iX3R5cGUgbm90IGluIFsiZm9sbG93IiwgImxpa2UiXToKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIkxv4bqhaSBqb2Ige2pvYl90eXBlfSBraMO0bmcgxJHGsOG7o2MgaOG7lyB0cuG7oyIKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6IDIsCiAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBqb2IgdGhlbyBsb+G6oWkKICAgICAgICAgICAgam9iX3N0YXR1cyA9IDAgICMgTeG6t2MgxJHhu4tuaCBsw6AgY2jGsGEgbMOgbQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgam9iX3R5cGUgPT0gImZvbGxvdyI6CiAgICAgICAgICAgICAgICBqb2Jfc3RhdHVzID0gc2VsZi5fcGVyZm9ybV9mb2xsb3dfam9iKGpvYl9saW5rKQogICAgICAgICAgICBlbGlmIGpvYl90eXBlID09ICJsaWtlIjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2xpa2Vfam9iKGpvYl9saW5rKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKCiAgICAgICAgICAgICMgVOG6oW8ga+G6v3QgcXXhuqMgdHLhuqMgduG7gSBk4buxYSB0csOqbiBqb2Jfc3RhdHVzCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdF9mcm9tX3N0YXR1cyhqb2Jfc3RhdHVzLCBqb2JfdHlwZSkKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbWVzc2FnZSA9IGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iOiB7c3RyKGUpfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgyLCBtZXNzYWdlLCBGYWxzZSkKICAgIAogICAgZGVmIF9jcmVhdGVfam9iX3Jlc3VsdF9mcm9tX3N0YXR1cyhzZWxmLCBqb2Jfc3RhdHVzOiBpbnQsIGpvYl90eXBlOiBzdHIpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFThuqFvIGvhur90IHF14bqjIGpvYiB04burIHN0YXR1cyBjb2RlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX3N0YXR1czogTcOjIHRy4bqhbmcgdGjDoWkgam9iIHThu6sgX3BlcmZvcm1feHh4X2pvYgogICAgICAgICAgICBqb2JfdHlwZTogTG/huqFpIGpvYiAoZm9sbG93LCBsaWtlKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgam9iCiAgICAgICAgIiIiCiAgICAgICAgaWYgam9iX3N0YXR1cyA9PSAxOiAgIyBUaMOgbmggY8O0bmcKICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBob8OgbiB0aMOgbmggam9iIHtqb2JfdHlwZX0gdGjDoG5oIGPDtG5nIgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKG1lc3NhZ2UpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVfam9iX3Jlc3VsdCgxLCBtZXNzYWdlLCBUcnVlKQogICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAyOiAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIktow7RuZyB0aOG7gyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcgxJHhu4MgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl90eXBlfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY3JlYXRlX2pvYl9yZXN1bHQoMiwgbWVzc2FnZSwgRmFsc2UpCiAgICAgICAgZWxpZiBqb2Jfc3RhdHVzID09IDM6ICAjIELhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIsSQ4buRaSB0xrDhu6NuZyDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlIgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHVuZm9sbG93IMSR4buDIEpvYlNlcnZpY2UgeOG7rSBsw70KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDMsIG1lc3NhZ2UsIEZhbHNlLCB1bmZvbGxvdz1UcnVlKQogICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSA0OiAgIyBZw6p1IGPhuqd1IMSRYW5nIGNo4budCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlnDqnUgY+G6p3UgxJFhbmcgY2jhu50gdHJvbmcgam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDQsIG1lc3NhZ2UsIEZhbHNlKQogICAgICAgIGVsc2U6ICAjIFRo4bqldCBi4bqhaSBob+G6t2MgdHLhuqFuZyB0aMOhaSBraMOhYwogICAgICAgICAgICBtZXNzYWdlID0gZiJUaOG7sWMgaGnhu4duIGpvYiB7am9iX3R5cGV9IHRo4bqldCBi4bqhaSB24bubaSB0cuG6oW5nIHRow6FpIHtqb2Jfc3RhdHVzfSIKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KGpvYl9zdGF0dXMgaWYgam9iX3N0YXR1cyA+IDAgZWxzZSAwLCBtZXNzYWdlLCBGYWxzZSkKICAgICAgICAgICAgCiAgICBkZWYgX2NoZWNrX2FjY291bnRfc3RhdHVzX2RpYWxvZyhzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgZGlhbG9nICJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIgdsOgIHjhu60gbMO9IG7hur91IGPDswogICAgICAgIFNhdSBraGkgYuG6pW0gT0ssIGtp4buDbSB0cmEgeGVtIGPDsyB24buBIHRyYW5nIGNo4bunIGtow7RuZyB2w6Agc3luYyBhY2NvdW50cwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgY8OzIGRpYWxvZyB2w6AgY+G6p24gbmfhu6tuZyBob+G6oXQgxJHhu5luZyB0w6BpIGtob+G6o24sIEZhbHNlIG7hur91IGtow7RuZyBjw7MgZGlhbG9nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENo4budIG3hu5l0IGNow7p0IMSR4buDIGRpYWxvZyBjw7MgdGjhu4MgeHXhuqV0IGhp4buHbgogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBkaWFsb2cgY8OzIHRleHQgIlRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIgogICAgICAgICAgICBzdGF0dXNfZGlhbG9nID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN0YXR1c19kaWFsb2c6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJQaMOhdCBoaeG7h24gZGlhbG9nICdUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiciKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTDrG0gZWxlbWVudCBjw7MgcmVzb3VyY2UtaWQ9ImFuZHJvaWQ6aWQvbWVzc2FnZSIKICAgICAgICAgICAgICAgIG1lc3NhZ2VfZWxlbWVudCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChyZXNvdXJjZV9pZD0iYW5kcm9pZDppZC9tZXNzYWdlIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbWVzc2FnZV9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQobWVzc2FnZV9lbGVtZW50KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVGjDtG5nIGLDoW8gdHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o246IHttZXNzYWdlX3RleHR9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEzGsHUgdGjDtG5nIGLDoW8gdsOgbyBkYXRhYmFzZSBob+G6t2MgbG9nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJDUklUSUNBTDogVMOgaSBraG/huqNuIGLhu4sgaOG6oW4gY2jhur8gLSB7bWVzc2FnZV90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHbDoCBjbGljayBuw7p0IE9LL8SQw7NuZyDEkeG7gyDEkcOzbmcgZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgb2tfY2xpY2tlZCA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgb2tfYnV0dG9ucyA9IFsiT0siLCAixJDDs25nIiwgIlTDtGkgaGnhu4N1IiwgIsSQ4buTbmcgw70iXQogICAgICAgICAgICAgICAgICAgIGZvciBidG5fdGV4dCBpbiBva19idXR0b25zOgogICAgICAgICAgICAgICAgICAgICAgICBva19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD1idG5fdGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgb2tfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG9rX2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLhuqVtIG7DunQgJ3tidG5fdGV4dH0nIMSR4buDIMSRw7NuZyBkaWFsb2ciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tfY2xpY2tlZCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgb2tfY2xpY2tlZDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBDaOG7nSA1IGdpw6J5IHbDoCBraeG7g20gdHJhIHRyYW5nIGNo4bunIHRyb25nIDUgbOG6p24KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQ2jhu50gNXMgdsOgIGtp4buDbSB0cmEgdHJhbmcgY2jhu6cgdHJvbmcgNSBs4bqnbi4uLiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaG9tZV9zY3JlZW5fZGV0ZWN0ZWQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZSg1KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJLaeG7g20gdHJhIHRyYW5nIGNo4bunIGzhuqduIHthdHRlbXB0ICsgMX0vNSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIMSRw6MgduG7gSB0cmFuZyBjaOG7pyAtIGPDsyBraOG6oyBuxINuZyB0w6BpIGtob+G6o24gYuG7iyBsb2dvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbWVfc2NyZWVuX2RldGVjdGVkID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhvbWVfc2NyZWVuX2RldGVjdGVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIHN5bmMgYWNjb3VudHMgxJHhu4Mga2nhu4NtIHRyYSBhY2NvdW50IGPDsyBjw7JuIHRyb25nIGRhbmggc8OhY2gga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIHN5bmMgYWNjb3VudHMgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbi4uLiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBoaeG7h24gdOG6oWkgdOG7qyB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2RldmljZV9hY2NvdW50cyA9IHNlbGYuZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lcyA9IHthY2MuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikubG93ZXIoKSBmb3IgYWNjIGluIGN1cnJlbnRfZGV2aWNlX2FjY291bnRzfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gVGlrVG9rIHThu6sgREIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYl9hY2NvdW50cyA9IHNlbGYuZGIuZ2V0X2FjY291bnRzKGFwcD1zZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw6FjIHTDoGkga2hv4bqjbiB0cm9uZyBEQiBjw7MgY8OybiB04buTbiB04bqhaSB0csOqbiB0aGnhur90IGLhu4sga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGRiX2FjY291bnQgaW4gZGJfYWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiX3VzZXJuYW1lID0gZGJfYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIsICIiKS5sb3dlcigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRiX3VzZXJuYW1lIGFuZCBkYl91c2VybmFtZSBub3QgaW4gY3VycmVudF91c2VybmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBraMO0bmcgY8OybiB04buTbiB04bqhaSB0csOqbiB0aGnhur90IGLhu4sgLSDEkcOhbmggZOG6pXUgbmfhu6tuZyBob+G6oXQgxJHhu5luZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlTDoGkga2hv4bqjbiB7ZGJfYWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSBraMO0bmcgY8OybiB0cm9uZyBkYW5oIHPDoWNoIHRoaeG6v3QgYuG7iyAtIMSRw6FuaCBk4bqldSBuZ+G7q25nIGhv4bqhdCDEkeG7mW5nIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJpbmFjdGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVhc29uIjogIlTDoGkga2hv4bqjbiBi4buLIGxvZyBvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChkYl9hY2NvdW50WyJpZCJdLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIMSRw6FuaCBk4bqldSB0w6BpIGtob+G6o24ge2RiX2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gbmfhu6tuZyBob+G6oXQgxJHhu5luZyB24bubaSBsw70gZG86IFTDoGkga2hv4bqjbiBi4buLIGxvZyBvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU3luYyBs4bqhaSBhY2NvdW50cyBt4bubaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3luY19hY2NvdW50c190b19kYigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIHN5bmNfZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKHN5bmNfZXJyb3IsICJM4buXaSBraGkgc3luYyBhY2NvdW50cyBzYXUga2hpIHBow6F0IGhp4buHbiBkaWFsb2cgdHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIlTDrG0gdGjhuqV5IGRpYWxvZyAnVHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24nIG5oxrBuZyBraMO0bmcgdMOsbSB0aOG6pXkgbWVzc2FnZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGtp4buDbSB0cmEgZGlhbG9nIHRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9wZXJmb3JtX2ZvbGxvd19qb2Ioc2VsZiwgcHJvZmlsZV9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBmb2xsb3cgdHLDqm4gVGlrVG9rCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIMSR4bq/biB0cmFuZyBjw6EgbmjDom4gY+G6p24gZm9sbG93IChk4bqhbmc6IGh0dHBzOi8vd3d3LnRpa3Rvay5jb20vQHVzZXJuYW1lKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiBi4buLIHVuZm9sbG93LCA0OiB5w6p1IGPhuqd1IGNo4budLCA1OiBn4butaSB5w6p1IGPhuqd1KQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBVUkwgVGlrVG9rIMSR4buDIHPhu60gZOG7pW5nIGNobyBsb2dnaW5nCiAgICAgICAgICAgIHVzZXJuYW1lX21hdGNoID0gcmUuc2VhcmNoKHIndGlrdG9rXC5jb20vQChbXi8/XSspJywgcHJvZmlsZV9saW5rKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfbWF0Y2g6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB0csOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgbGluazoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB1c2VybmFtZSA9IHVzZXJuYW1lX21hdGNoLmdyb3VwKDEpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gdHJhbmcgY8OhIG5ow6JuCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfcGFnZShwcm9maWxlX2xpbmspOgogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu50gdGjDqm0gY2hvIHRyYW5nIGjhu5Mgc8ahIHThuqNpIHhvbmcKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCBGb2xsb3cgdGhlbyBjw6FjIGPDoWNoIGtow6FjIG5oYXUKICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IE5vbmUKICAgICAgICAgICAgIyBM4bqleSBYTUwgbeG7mXQgbOG6p24gxJHhu4Mgc28gc8OhbmgKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCgogICAgICAgICAgICAjIEPDoWNoIDE6IFTDrG0gdGhlbyB0ZXh0IHRp4bq/bmcgVmnhu4d0IHbDoCB0aeG6v25nIEFuaAogICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwiR+G7rWkg8J+RiyJdCiAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgIGlmIGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgICMgQ8OhY2ggMjogVMOsbSB0aGVvIGNvbnRlbnQtZGVzYyBu4bq/dSBjaMawYSB0w6xtIHRo4bqleQogICAgICAgICAgICBpZiBub3QgZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgIGZvbGxvd19kZXNjcyA9IFsiVGhlbyBkw7VpIiwgIkZvbGxvdyIsICLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIl0KICAgICAgICAgICAgICAgIGZvciBkZXNjIGluIGZvbGxvd19kZXNjczoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9ZGVzYykKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICAjIFRo4butIGzhuqFpIHThuqV0IGPhuqMgY8OhYyBjw6FjaAogICAgICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgdGhlbyBkw7VpIHNhdSBuaGnhu4F1IGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRleHQgY+G7p2EgbsO6dAogICAgICAgICAgICBidXR0b25fdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgYnV0dG9uX3Jlc291cmNlX2lkID0gZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiAne2J1dHRvbl90ZXh0fScsIHJlc291cmNlLWlkOiAne2J1dHRvbl9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaQogICAgICAgICAgICBpZiBidXR0b25fdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCJH4butaSDwn5GLIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aGVvIGTDtWkgdMOgaSBraG/huqNuIHt1c2VybmFtZX0gdOG7qyB0csaw4bubYyIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiA1CiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGzDoCAiVGhlbyBkw7VpIiBob+G6t2MgIkZvbGxvdyIgdGjDrCBjbGljayB2w6BvIG7DunQKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyJUaGVvIGTDtWkiLCAiRm9sbG93Il06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIGNsaWNrIHbDoG8gbsO6dCB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg0KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nICJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIKICAgICAgICAgICAgICAgIGlmIHNlbGYuX2NoZWNrX2FjY291bnRfc3RhdHVzX2RpYWxvZygpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJUw6BpIGtob+G6o24gYuG7iyBo4bqhbiBjaOG6vywgbmfhu6tuZyBob+G6oXQgxJHhu5luZyB2w6AgaOG7p3kgam9iIikKICAgICAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gbmfhu6tuZyBob+G6oXQgxJHhu5luZwogICAgICAgICAgICAgICAgICAgICMgVHLhuqMgduG7gSBzdGF0dXMgMiDEkeG7gyBiw6FvIGzhu5dpIHbDoCBo4buneSBqb2IKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFZ14buRdCB4deG7kW5nIDEgbOG6p24gxJHhu4MgcmVmcmVzaCB0cuG6oW5nIHRow6FpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgZGlhbG9nIGhp4buHbiBsw6puIGtow7RuZwogICAgICAgICAgICAgICAgIyBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgICMgaWYgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICMgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgY+G6o25oIGLDoW8gaG/hurdjIGdp4bubaSBo4bqhbgogICAgICAgICAgICAgICAgIyAgICAgZGlhbG9ncyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChzY3JlZW5feG1sLCBjbGFzc19uYW1lPSJhbmRyb2lkLmFwcC5EaWFsb2ciKQogICAgICAgICAgICAgICAgIyAgICAgZm9yIGRpYWxvZyBpbiBkaWFsb2dzOgogICAgICAgICAgICAgICAgIyAgICAgICAgIGRpYWxvZ190ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChkaWFsb2cpCiAgICAgICAgICAgICAgICAjICAgICAgICAgaWYgYW55KGtleXdvcmQgaW4gZGlhbG9nX3RleHQubG93ZXIoKSBmb3Iga2V5d29yZCBpbiBbInRo4butIGzhuqFpIHNhdSIsICJnaeG7m2kgaOG6oW4iLCAibGltaXQiLCAidHJ5IGFnYWluIl0pOgogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAjIFTDrG0gdsOgIG5o4bqlbiBuw7p0IE9LL8SQw7NuZwogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICBva19idXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIpCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgIGZvciBidG4gaW4gb2tfYnV0dG9uczoKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgIGJ0bl90ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChidG4pCiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICAgICBpZiBidG5fdGV4dCBhbmQgYnRuX3RleHQubG93ZXIoKSBpbiBbIm9rIiwgIsSRw7NuZyIsICJ0w7RpIGhp4buDdSIsICLEkeG7k25nIMO9Il06CiAgICAgICAgICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ0bikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgIyAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJKb2Iga2jDtG5nIGhvw6BuIHRow6BuaCwgYuG7iyBnaeG7m2kgaOG6oW4gdGhlbyBkw7VpIikKICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgcmV0dXJuIDMKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIHRleHQgc2F1IGtoaSBuaOG6pW4gdGhlbyBkw7VpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIGzhuqFpIG7DunQgZm9sbG93IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAtIMawdSB0acOqbiB0aGVvIHJlc291cmNlLWlkIG7hur91IGPDswogICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGPDsyByZXNvdXJjZV9pZCwgdMOsbSB0aGVvIHJlc291cmNlX2lkIHRyxrDhu5tjCiAgICAgICAgICAgICAgICBpZiBidXR0b25fcmVzb3VyY2VfaWQ6CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHJlc291cmNlX2lkPWJ1dHRvbl9yZXNvdXJjZV9pZCkKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gbOG6oWkgbsO6dCBmb2xsb3cgdGhlbyByZXNvdXJjZS1pZDoge2J1dHRvbl9yZXNvdXJjZV9pZH0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlX2lkIGhv4bq3YyBraMO0bmcgY8OzIHJlc291cmNlX2lkLCB0w6xtIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgaWYgbm90IHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciLCAixJDDoyB5w6p1IGPhuqd1IiwgIlJlcXVlc3RlZCIsICJUaGVvIGTDtWkiLCAiRm9sbG93Il0KICAgICAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBmb2xsb3dfdGV4dHM6CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgRmFsbGJhY2s6IHTDrG0gdGhlbyBjb250ZW50LWRlc2MKICAgICAgICAgICAgICAgIGlmIG5vdCB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgZm9sbG93X2Rlc2NzID0gWyJUaGVvIGTDtWkiLCAiRm9sbG93IiwgIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciXQogICAgICAgICAgICAgICAgICAgIGZvciBkZXNjIGluIGZvbGxvd19kZXNjczoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz1kZXNjKQogICAgICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF90ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh1cGRhdGVkX2ZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9yZXNvdXJjZV9pZCA9IHVwZGF0ZWRfZm9sbG93X2J1dHRvbi5nZXQoInJlc291cmNlLWlkIiwgIiIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlNhdSBraGkgY2xpY2sgZm9sbG93OiB0ZXh0PSd7dXBkYXRlZF90ZXh0fScsIHJlc291cmNlLWlkPSd7dXBkYXRlZF9yZXNvdXJjZV9pZH0nIikKICAgICAgICAgICAgICAgICAgICAjIFRyaW0gd2hpdGVzcGFjZSB04burIHVwZGF0ZWRfdGV4dAogICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRfdGV4dCA9IHVwZGF0ZWRfdGV4dC5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGPDoWMgdHLGsOG7nW5nIGjhu6NwIGtow6FjIG5oYXUKICAgICAgICAgICAgICAgICAgICBpZiB1cGRhdGVkX3RleHQgaW4gWyLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIiwgIk5o4bqvbiB0aW4iLCAiTWVzc2FnZSIsIkfhu61pIPCfkYsiXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiRm9sbG93IHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsixJDDoyB5w6p1IGPhuqd1IiwgIlJlcXVlc3RlZCJdOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGfhu61pIHnDqnUgY+G6p3UgdGhlbyBkw7VpIHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsiVGhlbyBkw7VpIiwgIkZvbGxvdyJdOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkZvbGxvdyBraMO0bmcgdGjDoG5oIGPDtG5nLCB0ZXh0IGPhu6dhIG7DunQgduG6q24gbMOgOiB7dXBkYXRlZF90ZXh0fSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJGb2xsb3cga2jDtG5nIHRow6BuaCBjw7RuZywgdGV4dCBj4bunYSBuw7p0IGzDoDoge3VwZGF0ZWRfdGV4dH0iKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBuw7p0LCBjw7MgdGjhu4MgxJHDoyBmb2xsb3cgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgZm9sbG93IHNhdSBraGkgbmjhuqVuLCBnaeG6oyDEkeG7i25oIMSRw6MgdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJUZXh0IGPhu6dhIG7DunQga2jDtG5nIGto4bubcCB24bubaSAnVGhlbyBkw7VpJyBob+G6t2MgJ0ZvbGxvdyc6IHtidXR0b25fdGV4dH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGZvbGxvdzoge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgogICAgCiAgICBkZWYgX29wZW5fcHJvZmlsZV9wYWdlKHNlbGYsIHByb2ZpbGVfbGluazogc3RyKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE3hu58gdHJhbmcgcHJvZmlsZSBUaWtUb2sgYuG6sW5nIHTDrG0ga2nhur9tIGhv4bq3YyBsaW5rIHRy4buxYyB0aeG6v3AKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm9maWxlX2xpbms6IExpbmsgxJHhur9uIHRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBVUkwgVGlrVG9rCiAgICAgICAgICAgIHVzZXJuYW1lX21hdGNoID0gcmUuc2VhcmNoKHIndGlrdG9rXC5jb20vQChbXi8/XSspJywgcHJvZmlsZV9saW5rKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfbWF0Y2g6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB0csOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgbGluazoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZV9tYXRjaC5ncm91cCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIDEgdHJvbmcgMiBjw6FjaDogdMOsbSBraeG6v20gaG/hurdjIG3hu58gdHLhu7FjIHRp4bq/cCBsaW5rCiAgICAgICAgICAgIGlmIHJhbmRvbS5jaG9pY2UoW1RydWUsIEZhbHNlXSk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTeG7nyB0cmFuZyBjw6EgbmjDom4gYuG6sW5nIGPDoWNoIHTDrG0ga2nhur9tOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgICMgVGjhu60gbeG7nyBi4bqxbmcgdMOsbSBraeG6v20KICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHVzZXJuYW1lKToKICAgICAgICAgICAgICAgICAgICAjIE7hur91IHTDrG0ga2nhur9tIHRo4bqldCBi4bqhaSwgZmFsbGJhY2sgc2FuZyBt4bufIGxpbmsKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIGtp4bq/bSB0aOG6pXQgYuG6oWksIG3hu58gYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cCIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rLHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEPDoWNoIDI6IE3hu58gdHLhu7FjIHRp4bq/cCBVUkwgdGjDtG5nIHF1YSBoZWxwZXIub3Blbl91cmwoKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gdHJhbmcgY8OhIG5ow6JuIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3A6IHtwcm9maWxlX2xpbmt9IikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluayxzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIHRow6ptIGNobyB0cmFuZyBo4buTIHPGoSB04bqjaSB4b25nCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIHbDoG8gxJHDum5nIHByb2ZpbGUga2jDtG5nIGLhurFuZyBjw6FjaCB0w6xtIGJ1dHRvbiBjw7MgdGV4dCA9IEB1c2VybmFtZQogICAgICAgICAgICAjIFTDrG0gYnV0dG9uIGPDsyB0ZXh0IGNow61uaCB4w6FjIGLhurFuZyBAdXNlcm5hbWUgKFRpa1RvayBsdcO0biBjw7MgQCB0csaw4bubYyB1c2VybmFtZSkKICAgICAgICAgICAgYXRfdXNlcm5hbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkJ1dHRvbiIsIHRleHQ9ZiJAe3VzZXJuYW1lfSIpCiAgICAgICAgICAgIGlmIGF0X3VzZXJuYW1lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHjDoWMgbmjhuq1uIHbDoG8gxJHDum5nIHByb2ZpbGUgY+G7p2Ege3VzZXJuYW1lfSAodMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0OiAnQHt1c2VybmFtZX0nKSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgYnV0dG9uIGPDsyB0ZXh0ID0gJ0B7dXNlcm5hbWV9JyB0csOqbiBtw6BuIGjDrG5oLCBjw7MgdGjhu4Mga2jDtG5nIHbDoG8gxJHDum5nIHByb2ZpbGUiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIG3hu58gdHJhbmcgcHJvZmlsZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9vcGVuX3Byb2ZpbGVfYnlfc2VhcmNoKHNlbGYsIHVzZXJuYW1lOiBzdHIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTeG7nyB0cmFuZyBwcm9maWxlIFRpa1RvayBi4bqxbmcgY8OhY2ggdMOsbSBraeG6v20gdXNlcm5hbWUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1c2VybmFtZTogVXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIGPhuqduIHTDrG0KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUw6xtIHRhYiB0w6xtIGtp4bq/bSAtIHRo4butIHBoxrDGoW5nIHBow6FwIHRy4buxYyB0aeG6v3AgdHLGsOG7m2MKICAgICAgICAgICAgc2VhcmNoX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IlTDrG0ga2nhur9tIikKICAgICAgICAgICAgaWYgc2VhcmNoX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IHRhYiB0w6xtIGtp4bq/bSB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSwgZMO5bmcgcGjGsMahbmcgcGjDoXAgYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSB0YWIgVMOsbSBraeG6v20gdHLhu7FjIHRp4bq/cCwgdGjhu60gcGjGsMahbmcgcGjDoXAgYWx0ZXJuYXRpdmUiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIER1bXAgWE1MIG3hu5l0IGzhuqduIMSR4buDIHjhu60gbMO9CiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBYTUwgbcOgbiBow6xuaCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBjw6FjIHRleHQgdGhheSB0aOG6vyB0cm9uZyBYTUwKICAgICAgICAgICAgICAgIGFsdGVybmF0aXZlX3RleHRzID0gWyJC4bqhbiBiw6giLCAixJBhbmcgZm9sbG93IiwgIkTDoG5oIGNobyBi4bqhbiJdCiAgICAgICAgICAgICAgICBmb3VuZF9lbGVtZW50ID0gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBhbHRlcm5hdGl2ZV90ZXh0czoKICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBlbGVtZW50OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgdGV4dCB0aGFtIGNoaeG6v3UgJ3t0ZXh0fScgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRfZWxlbWVudCA9IGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbm90IGZvdW5kX2VsZW1lbnQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0ZXh0IHRoYW0gY2hp4bq/dSBuw6BvIHRyb25nIFhNTCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSBlbGVtZW50IGNoYQogICAgICAgICAgICAgICAgcGFyZW50X2VsZW1lbnQgPSBzZWxmLmhlbHBlci5maW5kX3BhcmVudF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBmb3VuZF9lbGVtZW50KQogICAgICAgICAgICAgICAgaWYgbm90IHBhcmVudF9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgdMOsbSB0aOG6pXkgZWxlbWVudCBjaGEgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZ3JhbmRfZWxlbWVudCA9IHNlbGYuaGVscGVyLmZpbmRfcGFyZW50X2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHBhcmVudF9lbGVtZW50KQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBncmFuZF9lbGVtZW50OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHTDrG0gdGjhuqV5IGdyYW5kX2VsZW1lbnQgdHJvbmcgWE1MIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOtbmggdG/DoW4gdOG7jWEgxJHhu5kgdsOgIGNsaWNrCiAgICAgICAgICAgICAgICBib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoZ3JhbmRfZWxlbWVudCkKICAgICAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gYm91bmRzCiAgICAgICAgICAgICAgICB4ID0geDIgKyA1MAogICAgICAgICAgICAgICAgeSA9ICh5MSArIHkyKSAvLyAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw61uaCB0b8OhbiB04buNYSDEkeG7mSB0YWIgdMOsbSBraeG6v206IHg9e3h9LCB5PXt5fSAodOG7qyBib3VuZHMgY2hhOiB7Ym91bmRzfSkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIELhuqVtIHbDoG8gdOG7jWEgxJHhu5kgxJHDoyB0w61uaAogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIHbDoG8gxJHGsOG7o2MgdHJhbmcgdMOsbSBraeG6v20ga2jDtG5nCiAgICAgICAgICAgIHNlYXJjaF9pbnB1dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5FZGl0VGV4dCIpCiAgICAgICAgICAgIGlmIG5vdCBzZWFyY2hfaW5wdXQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHbDoG8gdHJhbmcgdMOsbSBraeG6v20gLSBraMO0bmcgdMOsbSB0aOG6pXkgw7Qgbmjhuq1wIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6rXAgdXNlcm5hbWUgY+G6p24gdMOsbQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2lucHV0KQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBow6BtIGlucHV0X3RleHQgbeG7mXQgbOG6p24gZHV5IG5o4bqldAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgbmjhuq1wIHRleHQ6ICd7dXNlcm5hbWV9JyIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmlucHV0X3RleHQoZiJ7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg2KQoKICAgICAgICAgICAgIyBUw6xtIG7DunQgVMOsbSBraeG6v20gdsOgIGNsaWNrCiAgICAgICAgICAgIHNlYXJjaF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuQnV0dG9uIiwgdGV4dD0iVMOsbSBraeG6v20iKQogICAgICAgICAgICBpZiBzZWFyY2hfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVMOsbSB0aOG6pXkgbsO6dCAnVMOsbSBraeG6v20nLCDEkWFuZyBjbGljay4uLiIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgJ1TDrG0ga2nhur9tJyIpCiAgICAgICAgICAgICAgICAjIFRo4buxYyBoaeG7h24gc2VhcmNoIHbhu5tpIGVudGVyIGtleQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfZW50ZXIoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHRhYiAiTmfGsOG7nWkgZMO5bmciIHbDoCBjbGljayB2w6BvIG7DsyAtIMSR4bujaSB04buRaSDEkWEgMTBzCiAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJOZ8aw4budaSBkw7luZyIsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIGlmIG5vdCB1c2VyX3RhYjoKICAgICAgICAgICAgICAgIHVzZXJfdGFiID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjb250ZW50X2Rlc2M9Ik5nxrDhu51pIGTDuW5nIiwgdGltZW91dD02KQoKICAgICAgICAgICAgaWYgdXNlcl90YWI6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSB0YWIgTmfGsOG7nWkgZMO5bmcsIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfdGFiKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIE5nxrDhu51pIGTDuW5nIHNhdSAxMHMiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBUZXh0VmlldyBjw7MgdGV4dCBjaMOtbmggeMOhYyBi4bqxbmcgdXNlcm5hbWUgKGtow7RuZyBjw7MgQCkgLSDEkeG7o2kgdOG7kWkgxJFhIDZzCiAgICAgICAgICAgIHVzZXJuYW1lX2VsZW1lbnQgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9dXNlcm5hbWUsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LlRleHRWaWV3IiwgdGltZW91dD02KQoKICAgICAgICAgICAgaWYgdXNlcm5hbWVfZWxlbWVudDoKICAgICAgICAgICAgICAgICMgQ2xpY2sgdsOgbyBlbGVtZW50IMSR4bqndSB0acOqbiB0w6xtIMSRxrDhu6NjCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt1c2VybmFtZX0sIMSRYW5nIGNsaWNrIHbDoG8uLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJuYW1lX2VsZW1lbnQpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB0cm9uZyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSBzYXUgMTBzIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgdMOsbSBraeG6v20gdMOgaSBraG/huqNuOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX3BlcmZvcm1fbGlrZV9qb2Ioc2VsZiwgcG9zdF9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBsaWtlIHZpZGVvIHRyw6puIFRpa1RvawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBvc3RfbGluazogTGluayDEkeG6v24gdmlkZW8gY+G6p24gbGlrZQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiDEkcOjIGxpa2UgdHLGsOG7m2MgxJHDsykKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwoKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIHZpZGVvIFRpa1RvayBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wOiB7cG9zdF9saW5rfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gdHLhu7FjIHRp4bq/cCBVUkwgdGjDtG5nIHF1YSBoZWxwZXIub3Blbl91cmwoKQogICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwb3N0X2xpbmssc2VsZi5hcHBfcGFja2FnZSkKCiAgICAgICAgICAgICMgUmFuZG9tIG5naOG7iSAzLTEwIGdpw6J5IG5oxrAgbmfGsOG7nWkgZMO5bmcgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICB3YWl0X3RpbWUgPSByYW5kb20ucmFuZGludCgzLCAxMCkKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIG5naOG7iSB7d2FpdF90aW1lfXMgbmjGsCBuZ8aw4budaSBkw7luZyB0aMO0bmcgdGjGsOG7nW5nLi4uIikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXRfdGltZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGxpa2UgYuG6sW5nIGNvbnRlbnQtZGVzYyAiVGjDrWNoIHZpZGVvLiIKICAgICAgICAgICAgbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UgdHLDqm4gbcOgbiBow6xuaCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0aMO0bmcgdGluIG7DunQgbGlrZSBiYW4gxJHhuqd1CiAgICAgICAgICAgIGluaXRpYWxfY29udGVudF9kZXNjID0gbGlrZV9idXR0b24uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9yZXNvdXJjZV9pZCA9IGxpa2VfYnV0dG9uLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgaW5pdGlhbF9zZWxlY3RlZCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVHLhuqFuZyB0aMOhaSBuw7p0IGxpa2UgYmFuIMSR4bqndTogc2VsZWN0ZWQ9e2luaXRpYWxfc2VsZWN0ZWR9LCBjb250ZW50LWRlc2M9J3tpbml0aWFsX2NvbnRlbnRfZGVzY30nLCByZXNvdXJjZS1pZD0ne2luaXRpYWxfcmVzb3VyY2VfaWR9JyIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgxJHDoyBsaWtlIHThu6sgdHLGsOG7m2MKICAgICAgICAgICAgaWYgaW5pdGlhbF9zZWxlY3RlZCBvciAiQuG7jyB0aMOtY2giIGluIGluaXRpYWxfY29udGVudF9kZXNjIG9yICJVbmxpa2UiIGluIGluaXRpYWxfY29udGVudF9kZXNjOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiVmlkZW8gxJHDoyDEkcaw4bujYyBsaWtlIHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmVzdWx0ID0gMyAgIyDEkMOjIGxpa2UgdHLGsOG7m2MgxJHDswogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGxpa2UgdmlkZW8KICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuX2F0dGVtcHRfbGlrZV92aWRlbyhsaWtlX2J1dHRvbikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2F1IGtoaSBsaWtlIHhvbmcsIHZ14buRdCByYW5kb20gMi01IHZpZGVvIHLhu5NpIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgcmVzdWx0ID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgc2VsZi5fc2Nyb2xsX3ZpZGVvc19hbmRfcmV0dXJuX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2IgbGlrZToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgoKICAgIGRlZiBfZmluZF9saWtlX2J1dHRvbihzZWxmKToKICAgICAgICAiIiJUw6xtIG7DunQgbGlrZSB0csOqbiB2aWRlbyBUaWtUb2siIiIKICAgICAgICAjIFRo4butIGPDoWMgY8OhY2ggdMOsbSBraMOhYyBuaGF1IGNobyBuw7p0IGxpa2UKICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IlRow61jaCIpCiAgICAgICAgaWYgbm90IGxpa2VfYnV0dG9uOgogICAgICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9Ikxpa2UiKQogICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgIyBUw6xtIHRoZW8gcmVzb3VyY2UtaWQgaG/hurdjIHhwYXRoCiAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHJlc291cmNlX2lkPSJjb20uc3MuYW5kcm9pZC51Z2MudHJpbGw6aWQvbGlrZV9idXR0b24iKQogICAgICAgIHJldHVybiBsaWtlX2J1dHRvbgoKICAgIGRlZiBfYXR0ZW1wdF9saWtlX3ZpZGVvKHNlbGYsIGxpa2VfYnV0dG9uKToKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIGxpa2UgdmlkZW8sIMawdSB0acOqbiBi4bqlbSByYW5kb20gdOG7jWEgxJHhu5ksIGZhbGxiYWNrIHNhbmcgYuG6pW0gbsO6dCBsaWtlIiIiCiAgICAgICAgIyBM4bqleSBrw61jaCB0aMaw4bubYyBtw6BuIGjDrG5oIMSR4buDIHTDrW5oIHThu41hIMSR4buZIHJhbmRvbQogICAgICAgIHdpZHRoLCBoZWlnaHQgPSBzZWxmLmhlbHBlci5nZXRfc2NyZWVuX3NpemUoKQogICAgICAgIAogICAgICAgICMgVGjhu60gYuG6pW0gcmFuZG9tIHThu41hIMSR4buZIHRyxrDhu5tjIChkb3VibGUgY2xpY2spCiAgICAgICAgeCA9IGludCh3aWR0aCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICB5ID0gaW50KGhlaWdodCAqIHJhbmRvbS51bmlmb3JtKDAuNSwgMC42KSkKICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVGjhu60gZG91YmxlIGNsaWNrIHThuqFpIHThu41hIMSR4buZICh7eH0sIHt5fSkgxJHhu4MgbGlrZSB2aWRlbyIpCiAgICAgICAgCiAgICAgICAgIyBUaOG7sWMgaGnhu4duIGRvdWJsZSBjbGljawogICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjEpCiAgICAgICAgc2VsZi5oZWxwZXIudGFwKHgsIHkpCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAjIENo4budIGFuaW1hdGlvbgogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBr4bq/dCBxdeG6oyBzYXUgZG91YmxlIGNsaWNrCiAgICAgICAgaWYgc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0ixJDDoyB0aMOtY2ggdmlkZW8iKToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIHZpZGVvIHRow6BuaCBjw7RuZyBi4bqxbmcgZG91YmxlIGNsaWNrIikKICAgICAgICAgICAgcmV0dXJuIDEKCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSBkb3VibGUgY2xpY2sga2jDtG5nIHRow6BuaCBjw7RuZywgYuG6pW0gdHLhu7FjIHRp4bq/cCB2w6BvIG7DunQgbGlrZQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkRvdWJsZSBjbGljayBjaMawYSBsaWtlIMSRxrDhu6NjLCBi4bqlbSB0cuG7sWMgdGnhur9wIHbDoG8gbsO6dCBsaWtlIikKICAgICAgICAKICAgICAgICAjIEzhuqV5IGzhuqFpIHRow7RuZyB0aW4gbsO6dCBsaWtlIG3hu5tpIG5o4bqldAogICAgICAgIGN1cnJlbnRfbGlrZV9idXR0b24gPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBub3QgY3VycmVudF9saWtlX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgbGlrZSDEkeG7gyBi4bqlbSB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAKICAgICAgICAjIELhuqVtIHbDoG8gbsO6dCBsaWtlCiAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnQoY3VycmVudF9saWtlX2J1dHRvbikKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMgc2F1IGtoaSBi4bqlbSBuw7p0CiAgICAgICAgbGlrZV9idXR0b25fZmluYWwgPSBzZWxmLl9maW5kX2xpa2VfYnV0dG9uKCkKICAgICAgICBpZiBsaWtlX2J1dHRvbl9maW5hbDoKICAgICAgICAgICAgaXNfc2VsZWN0ZWRfZmluYWwgPSBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uX2ZpbmFsKQogICAgICAgICAgICBjb250ZW50X2Rlc2NfZmluYWwgPSBsaWtlX2J1dHRvbl9maW5hbC5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICByZXNvdXJjZV9pZF9maW5hbCA9IGxpa2VfYnV0dG9uX2ZpbmFsLmdldCgicmVzb3VyY2UtaWQiLCAiIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJTYXUga2hpIGLhuqVtIG7DunQgbGlrZTogc2VsZWN0ZWQ9e2lzX3NlbGVjdGVkX2ZpbmFsfSwgY29udGVudC1kZXNjPSd7Y29udGVudF9kZXNjX2ZpbmFsfScsIHJlc291cmNlLWlkPSd7cmVzb3VyY2VfaWRfZmluYWx9JyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBpc19zZWxlY3RlZF9maW5hbCBvciAiQuG7jyB0aMOtY2giIGluIGNvbnRlbnRfZGVzY19maW5hbCBvciAiVW5saWtlIiBpbiBjb250ZW50X2Rlc2NfZmluYWw6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGxpa2UgdmlkZW8gdGjDoG5oIGPDtG5nIGLhurFuZyBjbGljayBuw7p0IikKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgbGlrZSB2aWRlbyBzYXUga2hpIHRo4butIGPhuqMgMiBjw6FjaCIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgxJHhu4Mga2nhu4NtIHRyYSwgZ2nhuqMgxJHhu4tuaCB0aMOgbmggY8O0bmcKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgbGlrZSDEkeG7gyBraeG7g20gdHJhLCBnaeG6oyDEkeG7i25oIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiAxCgogICAgZGVmIF9zY3JvbGxfdmlkZW9zX2FuZF9yZXR1cm5faG9tZShzZWxmKToKICAgICAgICAiIiJWdeG7kXQgcmFuZG9tIDItNSB2aWRlbyBy4buTaSB24buBIHRyYW5nIGNo4bunIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFJhbmRvbSBz4buRIGzGsOG7o25nIHZpZGVvIHPhur0gdnXhu5F0ICgyLTUpCiAgICAgICAgICAgIG51bV92aWRlb3MgPSByYW5kb20ucmFuZGludCgyLCA1KQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiU+G6vSB2deG7kXQgcXVhIHtudW1fdmlkZW9zfSB2aWRlbyB0csaw4bubYyBraGkgduG7gSB0cmFuZyBjaOG7pyIpCiAgICAgICAgICAgIAogICAgICAgICAgICB3aWR0aCwgaGVpZ2h0ID0gc2VsZi5oZWxwZXIuZ2V0X3NjcmVlbl9zaXplKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG51bV92aWRlb3MpOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVnXhu5F0IHZpZGVvIHRo4bupIHtpKzF9L3tudW1fdmlkZW9zfSIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmdo4buJIHJhbmRvbSAyLTQgZ2nDonkgbmjGsCBuZ8aw4budaSBkw7luZyB0aOG6rXQKICAgICAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDIsIDQpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF90aW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBW4buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkhvw6BuIHRow6BuaCB2deG7kXQgdmlkZW8sIMSRYW5nIHF1YXkgduG7gSB0cmFuZyBjaOG7pyIpCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB2deG7kXQgdmlkZW86IHtzdHIoZSl9IikKICAgICAgICAgICAgIyBW4bqrbiBj4buRIGfhuq9uZyB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9wYXJhbXMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRoYW0gc+G7kSDEkeG7gyBn4buNaSBBUEkgbOG6pXkgam9iIGNobyBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZDoKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJhY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiZGF0YSI6ICJudWxsIgogICAgICAgIH0KICAgICAgICAKICAgIGRlZiBzeW5jX2FjY291bnRzX3RvX2RiKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIMSQ4buTbmcgYuG7mSB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgdsOgbyBkYXRhYmFzZQogICAgICAgIEdoaSDEkcOoIHBoxrDGoW5nIHRo4bupYyBj4bunYSBs4bubcCBjaGEgxJHhu4MgxJHhuqNtIGLhuqNvIGNo4buJIGPDsyBt4buZdCB0w6BpIGtob+G6o24gxJHGsOG7o2MgxJHDoW5oIGThuqV1IGzDoCDEkWFuZyBsb2dpbgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6t3QgbOG6oWkgdHLhuqFuZyB0aMOhaSBsb2dpbiBjaG8gdOG6pXQgY+G6oyB0w6BpIGtob+G6o24gVGlrVG9rIHRyb25nIERCCiAgICAgICAgICAgIHNlbGYuZGIucmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChzZWxmLmFwcF9uYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHMgPSBzZWxmLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRldmljZV9pZCB04burIGRhdGFiYXNlCiAgICAgICAgICAgIGFuZHJvaWRfaWQgPSBzZWxmLmRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gaGnhu4duIGPDsyB0cm9uZyBEQiBjaG8gYXBwIG7DoHkKICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9c2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gc2V0IGPDoWMgdW5pcXVlX3VzZXJuYW1lIHThu6sgdGhp4bq/dCBi4buLIMSR4buDIGThu4Ugc28gc8OhbmgKICAgICAgICAgICAgZGV2aWNlX3VzZXJuYW1lcyA9IHNldCgpCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfdXNlcm5hbWVzLmFkZCh1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gdHJvbmcgREIgbcOgIGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iyAtPiDEkcOhbmggZOG6pXUgbG9nb3V0CiAgICAgICAgICAgIGZvciBleGlzdGluZ19hY2NvdW50IGluIGV4aXN0aW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgZXhpc3RpbmdfdXNlcm5hbWUgPSBleGlzdGluZ19hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX3VzZXJuYW1lIGFuZCBleGlzdGluZ191c2VybmFtZSBub3QgaW4gZGV2aWNlX3VzZXJuYW1lczoKICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBjw7MgdHJvbmcgREIgbmjGsG5nIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIC0+IGxvZ291dAogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSAhPSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7ZXhpc3RpbmdfdXNlcm5hbWV9IGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iywgxJHDoW5oIGThuqV1IGxvZ291dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoZXhpc3RpbmdfYWNjb3VudFsiaWQiXSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJsb2dvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImluYWN0aXZlX3JlYXNvbiI6ICJUw6BpIGtob+G6o24ga2jDtG5nIGPDsm4gdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19sb2dpbiI6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgaG/hurdjIHRow6ptIG3hu5tpIHbDoG8gREIKICAgICAgICAgICAgZm9yIGFjY291bnQgaW4gZGV2aWNlX2FjY291bnRzOgogICAgICAgICAgICAgICAgIyBUaMOqbSB0aMO0bmcgdGluIGFwcCB2w6AgZGV2aWNlX2lkCiAgICAgICAgICAgICAgICBhY2NvdW50WyJhcHAiXSA9IHNlbGYuYXBwX25hbWUKICAgICAgICAgICAgICAgIGFjY291bnRbImRldmljZV9pZCJdID0gYW5kcm9pZF9pZAogICAgICAgICAgICAgICAgIyDEkMOhbmggZOG6pXUgbMOgIGNoxrBhIMSR4buTbmcgYuG7mSDEkeG7gyBn4butaSBsw6puIHNlcnZlcgogICAgICAgICAgICAgICAgYWNjb3VudFsiaXNfc3luYyJdID0gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHTDoGkga2hv4bqjbiDEkcOjIHThu5NuIHThuqFpIGNoxrBhIGThu7FhIHbDoG8gdW5pcXVlX3VzZXJuYW1lICsgYXBwCiAgICAgICAgICAgICAgICBleGlzdGluZ19hY2NvdW50ID0gc2VsZi5kYi5nZXRfYWNjb3VudF9ieV91bmlxdWVfdXNlcm5hbWUoc2VsZi5hcHBfbmFtZSwgYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBleGlzdGluZ19hY2NvdW50OgogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbiBoaeG7h24gY8OzIC0gY2jhu4kgxJHhu5NuZyBi4buZIHRy4bqhbmcgdGjDoWkgbG9naW4vbG9nb3V0CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGV4aXN0aW5nX2FjY291bnRbImlkIl0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIENodeG6qW4gYuG7iyBk4buvIGxp4buHdSBj4bqtcCBuaOG6rXQgdOG7kWkgdGhp4buDdQogICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAiaXNfbG9naW4iOiBhY2NvdW50LmdldCgiaXNfbG9naW4iLCBGYWxzZSksCiAgICAgICAgICAgICAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGFjY291bnQuZ2V0KCJsYXN0X3VwZGF0ZSIsIGludCh0aW1lLnRpbWUoKSkpLAogICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBu4bq/dSB0w6BpIGtob+G6o24gdHJvbmcgREIgxJFhbmcg4bufIHRy4bqhbmcgdGjDoWkgbG9nb3V0IG5oxrBuZyB4deG6pXQgaGnhu4duIGzhuqFpIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSA9PSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXNldCB04burIGxvZ291dCB24buBIGFjdGl2ZSB2w6AgeMOzYSBpbmFjdGl2ZV9yZWFzb24KICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGFbInN0YXR1cyJdID0gImFjdGl2ZSIKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGFbImluYWN0aXZlX3JlYXNvbiJdID0gIiIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSDEkcOjIHh14bqldCBoaeG7h24gbOG6oWkgdHLDqm4gdGhp4bq/dCBi4buLLCByZXNldCB04burIGxvZ291dCB24buBIGFjdGl2ZSIpCiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSDEkcOjIGFjdGl2ZSB0aMOsIGdp4buvIG5ndXnDqm4gc3RhdHVzLCBraMO0bmcgdGhheSDEkeG7lWkgZ8OsIGtow6FjCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSDEkcSDbmcgbmjhuq1wIGNobyB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gdHJvbmcge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBUaMOqbSB0w6BpIGtob+G6o24gbeG7m2kgduG7m2kgdHLhuqFuZyB0aMOhaSBhY3RpdmUKICAgICAgICAgICAgICAgICAgICBhY2NvdW50WyJzdGF0dXMiXSA9ICJhY3RpdmUiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5hZGRfYWNjb3VudChhY2NvdW50KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHRow6ptIHTDoGkga2hv4bqjbiBt4bubaSB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSBjaG8ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZGV2aWNlX2FjY291bnRzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICByZXR1cm4gW10KCiAgICBkZWYgbWFwX2dvbGlrZV9hY2NvdW50cyhzZWxmLCBnb2xpa2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dLCBkZXZpY2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICDDgW5oIHjhuqEgdMOgaSBraG/huqNuIHThu6sgR29MaWtlIHbDoG8gdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgQVBJCiAgICAgICAgICAgIGRldmljZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiDEkcOjIMOhbmggeOG6oQogICAgICAgICIiIgogICAgICAgIG1hcHBlZF9hY2NvdW50cyA9IFtdCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSB04burIEdvTGlrZQogICAgICAgICAgICBnb2xpa2VfZGF0YSA9IHt9CiAgICAgICAgICAgIGZvciBhY2MgaW4gZ29saWtlX2FjY291bnRzOgogICAgICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHRow7RuZyB0aW4gdOG7qyB0w6BpIGtob+G6o24gR29MaWtlCiAgICAgICAgICAgICAgICBnb2xpa2VfYWNjb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICAiZ29saWtlX2lkIjogYWNjLmdldCgiaWQiKSwKICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiBhY2MuZ2V0KCJuaWNrbmFtZSIpLAogICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfaWQiOiBhY2MuZ2V0KCJ1bmlxdWVfaWQiKSwKICAgICAgICAgICAgICAgICAgICAidW5pcXVlX3VzZXJuYW1lIjogYWNjLmdldCgidW5pcXVlX3VzZXJuYW1lIiksCiAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGFjYy5nZXQoImF2YXRhcl90aHVtYiIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU+G7rSBk4bulbmcgdW5pcXVlX3VzZXJuYW1lIGzDoG0ga2jDs2EgxJHhu4MgZOG7hSDDoW5oIHjhuqEKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZ29saWtlX2FjY291bnRbInVuaXF1ZV91c2VybmFtZSJdCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBnb2xpa2VfZGF0YVt1c2VybmFtZS5sb3dlcigpXSA9IGdvbGlrZV9hY2NvdW50CiAgICAgICAgICAgIAogICAgICAgICAgICAjIMOBbmggeOG6oSB24bubaSB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGZvciBkZXZpY2VfYWNjb3VudCBpbiBkZXZpY2VfYWNjb3VudHM6CiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGRldmljZV9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgaW4gZ29saWtlX2RhdGE6CiAgICAgICAgICAgICAgICAgICAgIyDEkMOjIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB0cm9uZyBkYW5oIHPDoWNoIEdvTGlrZQogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdOG7qyBHb0xpa2UgdsOgbyB0w6BpIGtob+G6o24gdGhp4bq/dCBi4buLCiAgICAgICAgICAgICAgICAgICAgZ29saWtlX2luZm8gPSBnb2xpa2VfZGF0YVt1c2VybmFtZV0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJnb2xpa2VfaWQiOiBnb2xpa2VfaW5mb1siZ29saWtlX2lkIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICJpc19nb2xpa2VfbGlua2VkIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGdvbGlrZV9pbmZvWyJhdmF0YXJfdGh1bWIiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoImF2YXRhcl90aHVtYiIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGdvbGlrZV9pbmZvWyJ1bmlxdWVfaWQiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoInVuaXF1ZV9pZCIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gSUQgdMOgaSBraG/huqNuIHRyb25nIERCCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGRldmljZV9hY2NvdW50LmdldCgiaWQiKQogICAgICAgICAgICAgICAgICAgIGlmIGFjY291bnRfaWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHbDoG8gREIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdsOgbyBkZXZpY2VfYWNjb3VudAogICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfYWNjb3VudC51cGRhdGUodXBkYXRlX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZF9hY2NvdW50cy5hcHBlbmQoZGV2aWNlX2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDDoW5oIHjhuqEgdMOgaSBraG/huqNuIFRpa1Rvazoge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gbWFwcGVkX2FjY291bnRzCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIMOhbmggeOG6oSB0w6BpIGtob+G6o24gVGlrVG9rIikKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBfbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkGnhu4F1IGjGsOG7m25nIMSR4bq/biB0YWIgaOG7kyBzxqEgVGlrVG9rCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdsOgIGLhuqVtIHbDoG8gbsO6dCAiSOG7kyBzxqEiCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBwcm9maWxlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJI4buTIHPGoSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcHJvZmlsZV9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgSOG7kyBzxqEiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB2w6AgeOG7rSBsw70gZGlhbG9nICJLaMO0bmcgY2hvIHBow6lwIiBu4bq/dSBjw7MKICAgICAgICAgICAgbm90X2FsbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJLaMO0bmcgY2hvIHBow6lwIikKICAgICAgICAgICAgaWYgbm90X2FsbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBkaWFsb2cgJ0tow7RuZyBjaG8gcGjDqXAnLCDEkWFuZyBjbGljayDEkeG7gyDEkcOzbmcuLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG5vdF9hbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB2w6AgeOG7rSBsw70gZGlhbG9nICJMxrB1IGzhuqFpIMSRxINuZyBuaOG6rXAgbOG6p24gc2F1IiBu4bq/dSBjw7MKICAgICAgICAgICAgc2F2ZV9sb2dpbl9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iTMawdSB0aMO0bmcgdGluIMSRxINuZyBuaOG6rXAiKQogICAgICAgICAgICBpZiBzYXZlX2xvZ2luX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlBow6F0IGhp4buHbiBkaWFsb2cgJ0zGsHUgbOG6oWkgxJHEg25nIG5o4bqtcCBs4bqnbiBzYXUnLCDEkWFuZyBjbGljayDEkeG7gyDEkcOzbmcuLi4iKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNhdmVfbG9naW5fYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCgoKICAgICAgICAgICAgIyBWdeG7kXQgbMOqbiAxIGzhuqduIMSR4buDIHThuqNpIMSR4bqneSDEkeG7pyBu4buZaSBkdW5nCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX2Rvd24oKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgxJFp4buBdSBoxrDhu5tuZyDEkeG6v24gdGFiIGjhu5Mgc8ahIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBfb3Blbl9wcm9maWxlX21lbnUoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBN4bufIG1lbnUgaOG7kyBzxqEgKGRhbmggc8OhY2ggdMOgaSBraG/huqNuKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVnXhu5F0IGzDqm4gMSBs4bqnbiDEkeG7gyBsw6BtIG3hu5tpIGdpYW8gZGnhu4duIHRyxrDhu5tjIGtoaSB0w6xtIG7DunQgbWVudQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgIyBUw6xtIG7DunQgbWVudSBo4buTIHPGoQogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgbWVudV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iTWVudSBo4buTIHPGoSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgbWVudV9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgTWVudSBo4buTIHPGoSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHThu41hIMSR4buZIGPhu6dhIG7DunQgbWVudSB2w6AgY2xpY2sgduG7m2kgxJHhu5kgbOG7h2NoIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgYm91bmRzID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfYm91bmRzKG1lbnVfYnV0dG9uKQogICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IGJvdW5kcwogICAgICAgICAgICB5ID0gKCh5MiAtIHkxKSAvLyAyKSArIHkxCiAgICAgICAgICAgIHggPSB4MiAvLyAyCiAgICAgICAgICAgIHggKz0gcmFuZG9tLnJhbmRpbnQoLTEwLCAxMCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcCh4LCB5KQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKCiAgICAgICAgICAgICMga2nhu4NtIHRyYSBkaWFsb2cgdGV4dD0iRm9sbG93IGLhuqFuIGLDqCBj4bunYSBi4bqhbiIKCiAgICAgICAgICAgIGZvbGxvd19mcmllbmRzX2RpYWxvZyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuIikKICAgICAgICAgICAgaWYgZm9sbG93X2ZyaWVuZHNfZGlhbG9nOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZyAnRm9sbG93IGLhuqFuIGLDqCBj4bunYSBi4bqhbicsIMSRYW5nIGNsaWNrIMSR4buDIMSRw7NuZy4uLiIpCiAgICAgICAgICAgICAgICBjbG9zZV9kaWFsb2cgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciKQogICAgICAgICAgICAgICAgaWYgY2xvc2VfZGlhbG9nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihjbG9zZV9kaWFsb2cpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIG3hu58gbWVudSBo4buTIHPGoSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGRlZiBpc19ob21lX3NjcmVlbihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBUaWtUb2sga2jDtG5nCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSDEkWFuZyDhu58gdHJhbmcgY2jhu6csIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHBhY2thZ2UgaGnhu4duIHThuqFpIHRyxrDhu5tjIHRpw6puCiAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGPDsyBuw7p0ICJUcmFuZyBjaOG7pyIgxJHGsOG7o2MgY2jhu41uIChzZWxlY3RlZD10cnVlKSB0cm9uZyB0aGFuaCB0YWIga2jDtG5nCiAgICAgICAgICAgIGhvbWVfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciKQogICAgICAgICAgICBpZiBob21lX3RhYjoKICAgICAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQoaG9tZV90YWIpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgdMOsbSB0aOG6pXkgdGFiICJUcmFuZyBjaOG7pyIgbmjGsG5nIGNoxrBhIMSRxrDhu6NjIGNo4buNbiwgY2xpY2sgdsOgbyDEkcOzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfdGFiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxLjUpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgY8OhYyB54bq/dSB04buRIGPhu6dhIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGtp4buDbSB0cmEgbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBUaWtUb2siKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIGVuc3VyZV9ob21lX3NjcmVlbihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBUaWtUb2sKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZyB24buBIHRyYW5nIGNo4bunCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgcGFja2FnZSBoaeG7h24gdOG6oWkgdHLGsOG7m2MgdGnDqm4KICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkFwcCBoaeG7h24gdOG6oWkgKHtjdXJyZW50X3BhY2thZ2V9KSBraMO0bmcgcGjhuqNpIFRpa1RvaywgbeG7nyBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMTApICAjIFTEg25nIGzDqm4gMTAgZ2nDonkgxJHhu4MgYXBwIGto4bufaSDEkeG7mW5nIGhvw6BuIHRvw6BuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBwb3B1cCBQSU4gdHJvbmcgNXMgc2F1IGtoaSBt4bufIGFwcAogICAgICAgICAgICAgICAgc2VsZi5fY2hlY2tfcGluX3BvcHVwKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBWYWxpZGF0ZSBhcHAga2jDtG5nIGLhu4sgYmFubmVkIHNhdSBraGkgbeG7nwogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYudmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiQXBwIFRpa1RvayBjw7MgduG6pW4gxJHhu4EgKGJhbm5lZC9j4bqjbmggYsOhbykiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0ixJDDs25nIiwgdGltZW91dD0zKQogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6Mg4bufIHRyYW5nIGNo4bunIGNoxrBhCiAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6Mg4bufIHRyYW5nIGNo4bunIFRpa1RvayIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgY2jGsGEsIGPhu5EgZ+G6r25nIHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgcmV0dXJuIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSDEkeG6o20gYuG6o28gduG7gSB0cmFuZyBjaOG7pyBUaWtUb2siKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyBraMO0bmcgY8OzIHTDoGkga2hv4bqjbiBuw6BvIGLhu4sgYmFubmVkCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyBj4bqjbmggYsOhbyBjaHVuZwogICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIkPhuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawIgogICAgICAgIHByaXZhY3lfdXBkYXRlX2VsZW1lbnRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICB0ZXh0PSJD4bqtcCBuaOG6rXQgQ2jDrW5oIHPDoWNoIHF1eeG7gW4gcmnDqm5nIHTGsCIKICAgICAgICApCgogICAgICAgIGlmIHByaXZhY3lfdXBkYXRlX2VsZW1lbnRzOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gZGlhbG9nICdD4bqtcCBuaOG6rXQgQ2jDrW5oIHPDoWNoIHF1eeG7gW4gcmnDqm5nIHTGsCcsIMSRYW5nIHjhu60gbMO9Li4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0ICLEkMOjIGhp4buDdSIgdsOgIGLhuqVtIHRy4buxYyB0aeG6v3AKICAgICAgICAgICAgdW5kZXJzdGFuZF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0ixJDDoyBoaeG7g3UiKQogICAgICAgICAgICBpZiB1bmRlcnN0YW5kX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcih1bmRlcnN0YW5kX2J1dHRvbikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFRo4butIHTDrG0gduG7m2kgY8OhYyB0ZXh0IGtow6FjCiAgICAgICAgICAgICAgICBmb3IgdGV4dCBpbiBbIlRp4bq/cCB04bulYyIsICLEkOG7k25nIMO9IiwgIkNvbnRpbnVlIiwgIkFncmVlIiwgIkNo4bqlcCBuaOG6rW4iLCAiQWNjZXB0Il06CiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBidXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihidXR0b24pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nICJUcuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbiIKICAgICAgICBhY2NvdW50X3N0YXR1c19lbGVtZW50cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgdGV4dD0iVHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24iCiAgICAgICAgKQoKICAgICAgICBpZiBhY2NvdW50X3N0YXR1c19lbGVtZW50czoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUGjDoXQgaGnhu4duIGRpYWxvZyDEkcSDbmcgeHXhuqV0IHTDoGkga2hv4bqjbi4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gbsO6dCBjw7MgaWQgbMOgIGJ1dHRvbjEgdsOgIGLhuqVtCiAgICAgICAgICAgIGJ1dHRvbjEgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImFuZHJvaWQ6aWQvYnV0dG9uMSIpCiAgICAgICAgICAgIGlmIGJ1dHRvbjE6CiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYnV0dG9uMSkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxMCkKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQoKICAgICAgICAjIFTDrG0gZGlhbG9nIGPhuqNuaCBiw6FvIGLhurFuZyBJRCBob+G6t2MgY29udGVudC1kZXNjIGPDsyBjaOG7qWEgImPhuqNuaCBiw6FvIiwgImzhu5dpIiwgInRow7RuZyBiw6FvIgogICAgICAgIGFsZXJ0X2RpYWxvZ3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQuYXBwLkRpYWxvZyIKICAgICAgICApCiAgICAgICAgCiAgICAgICAgZm9yIGRpYWxvZyBpbiBhbGVydF9kaWFsb2dzOgogICAgICAgICAgICAjIFTDrG0gdGV4dCB0cm9uZyBkaWFsb2cKICAgICAgICAgICAgdGV4dF92aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIHRleHRfdmlldyBpbiB0ZXh0X3ZpZXdzOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodGV4dF92aWV3KQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgYW55KGtleXdvcmQgaW4gdGV4dC5sb3dlcigpIGZvciBrZXl3b3JkIGluIFsiY+G6o25oIGLDoW8iLCAibOG7l2kiLCAidGjDtG5nIGLDoW8iLCAiYuG7iyBraMOzYSIsICJ2aSBwaOG6oW0iXSk6CiAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIGPhuqNuaCBiw6FvIGhp4buHbiB04bqhaSB04burIGRiCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF93YXJuaW5ncyA9IHNlbGYuZGIuZ2V0KCJsb2dzLXdhcm5pbmctbWVzc2FnZSIsIFtdKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVGjDqm0gY+G6o25oIGLDoW8gbeG7m2kKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzLmFwcGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lIjogZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzIjogdGV4dAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaOG7iSBnaeG7ryBs4bqhaSB04buRaSDEkWEgMjAgbG9nIGfhuqduIG5o4bqldAogICAgICAgICAgICAgICAgICAgIGlmIGxlbihjdXJyZW50X3dhcm5pbmdzKSA+IDIwOgogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzID0gY3VycmVudF93YXJuaW5nc1stMjA6XQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTMawdSBs4bqhaSB2w6BvIGRiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImxvZ3Mtd2FybmluZy1tZXNzYWdlIiwgY3VycmVudF93YXJuaW5ncykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYixJDDoyBsxrB1IGPhuqNuaCBiw6FvIFRpa1Rvazoge3RleHR9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCBPSyBob+G6t2MgxJDDs25nIMSR4buDIMSRw7NuZyBkaWFsb2cKICAgICAgICAgICAgICAgICAgICBidXR0b25zID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBidXR0b24gaW4gYnV0dG9uczoKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgYW5kIGJ1dHRvbl90ZXh0Lmxvd2VyKCkgaW4gWyJvayIsICLEkcOzbmciLCAidMO0aSBoaeG7g3UiLCAixJHhu5NuZyDDvSJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgQ8OzIGPhuqNuaCBiw6FvIHRow6wgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIFRydWUgICMgS2jDtG5nIGPDsyBj4bqjbmggYsOhbwogICAgCiAgICBkZWYgX2hhbmRsZV9kaWFsb2dzX2FuZF9uYXZpZ2F0ZV9ob21lKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIE92ZXJyaWRlIMSR4buDIHjhu60gbMO9IGRpYWxvZyBzcGVjaWZpYyBj4bunYSBUaWtUb2sgdsOgIG5hdmlnYXRlIHbhu4EgaG9tZQogICAgICAgICIiIgogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCLEkGFuZyB44butIGzDvSBUaWtUb2sgZGlhbG9ncyB2w6AgbmF2aWdhdGUgduG7gSBob21lLi4uIikKICAgICAgICAKICAgICAgICAjIFjhu60gbMO9IGPDoWMgZGlhbG9nIFRpa1RvayBzcGVjaWZpYwogICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBkaWFsb2cgIkPhuq1wIG5o4bqtdCBDaMOtbmggc8OhY2ggcXV54buBbiByacOqbmcgdMawIgogICAgICAgIHVuZGVyc3RhbmRfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IsSQw6MgaGnhu4N1IikKICAgICAgICBpZiB1bmRlcnN0YW5kX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDs25nIGRpYWxvZyAnxJDDoyBoaeG7g3UnIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVuZGVyc3RhbmRfYnV0dG9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nICJMxrB1IHRow7RuZyB0aW4gxJHEg25nIG5o4bqtcCIKICAgICAgICBzYXZlX2xvZ2luX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJMxrB1IHRow7RuZyB0aW4gxJHEg25nIG5o4bqtcCIpCiAgICAgICAgaWYgc2F2ZV9sb2dpbl9idXR0b246CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw7NuZyBkaWFsb2cgJ0zGsHUgdGjDtG5nIHRpbiDEkcSDbmcgbmjhuq1wJyIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzYXZlX2xvZ2luX2J1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIGRpYWxvZyAiRm9sbG93IGLhuqFuIGLDqCBj4bunYSBi4bqhbiIKICAgICAgICBjbG9zZV9mcmllbmRzX2RpYWxvZyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IsSQw7NuZyIpCiAgICAgICAgaWYgY2xvc2VfZnJpZW5kc19kaWFsb2c6CiAgICAgICAgICAgIGZvbGxvd19mcmllbmRzX2RpYWxvZyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJGb2xsb3cgYuG6oW4gYsOoIGPhu6dhIGLhuqFuIikKICAgICAgICAgICAgaWYgZm9sbG93X2ZyaWVuZHNfZGlhbG9nOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDs25nIGRpYWxvZyAnRm9sbG93IGLhuqFuIGLDqCBj4bunYSBi4bqhbiciKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNsb3NlX2ZyaWVuZHNfZGlhbG9nKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgCiAgICAgICAgIyBTYXUga2hpIHjhu60gbMO9IGRpYWxvZywgdGjhu60gbmF2aWdhdGUgduG7gSBob21lCiAgICAgICAgaWYgbm90IHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgIyBUw6xtIG7DunQgIlRyYW5nIGNo4bunIgogICAgICAgICAgICBob21lX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIGlmIG5vdCBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciKQogICAgICAgICAgICBpZiBub3QgaG9tZV9idXR0b246CiAgICAgICAgICAgICAgICBob21lX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJIb21lIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuqVtIG7DunQgVHJhbmcgY2jhu6ciKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEZhbGxiYWNrOiBuaOG6pW4gYmFjayBt4buZdCB2w6BpIGzhuqduCiAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZSgzKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgCiAgICBkZWYgYmFja190b19ob21lKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgUXVheSB24buBIHRyYW5nIGNo4bunIFRpa1RvayB04burIGLhuqV0IGvhu7MgbcOgbiBow6xuaCBuw6BvCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcgduG7gSB0cmFuZyBjaOG7pwogICAgICAgICIiIgogICAgICAgIG1heF9hdHRlbXB0cyA9IDUKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJRdWF5IHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfYXR0ZW1wdHMpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6Mg4bufIHRyYW5nIGNo4bunIGNoxrBhCiAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyDhu58gdHJhbmcgY2jhu6cgVGlrVG9rIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgcGFja2FnZSBoaeG7h24gdOG6oWkgdHLGsOG7m2Mga2hpIHRo4buxYyBoaeG7h24gdGhhbyB0w6FjCiAgICAgICAgICAgICAgICBjdXJyZW50X3BhY2thZ2UgPSBzZWxmLmhlbHBlci5nZXRfY3VycmVudF9wYWNrYWdlKCkKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRfcGFja2FnZSAhPSBzZWxmLmFwcF9wYWNrYWdlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJBcHAgaGnhu4duIHThuqFpICh7Y3VycmVudF9wYWNrYWdlfSkga2jDtG5nIHBo4bqjaSBUaWtUb2ssIG3hu58gbOG6oWkgYXBwIFRpa1Rvay4uLiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMTApICAjIFTEg25nIGzDqm4gMTAgZ2nDonkgxJHhu4MgYXBwIGto4bufaSDEkeG7mW5nIGhvw6BuIHRvw6BuCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIHNhdSBraGkgbeG7nyBhcHAKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIG7DunQgIlRyYW5nIGNo4bunIiDhu58gYm90dG9tIG5hdmlnYXRpbwogICAgICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iVHJhbmcgY2jhu6ciKQogICAgICAgICAgICAgICAgaWYgbm90IGhvbWVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciKQogICAgICAgICAgICAgICAgaWYgbm90IGhvbWVfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IkhvbWUiKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgaG9tZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaQogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBob21lLCB0aOG7rSBuaOG6pW4gYmFjawogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIGPhu5EgZ+G6r25nIHbhu4EgdHJhbmcgY2jhu6cgKGzhuqduIHthdHRlbXB0ICsgMX0pOiB7ZX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgVGlrVG9rIHNhdSBuaGnhu4F1IGzhuqduIHRo4butIikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHN3aXRjaF9hY2NvdW50KHNlbGYsIHRhcmdldF9hY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgQ2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24gVGlrVG9rIGtow6FjCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGJvb2wsCiAgICAgICAgICAgICAgICAncmVhc29uJzogc3RyIChu4bq/dSB0aOG6pXQgYuG6oWkpLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBzdHIKICAgICAgICAgICAgfQogICAgICAgICIiIgogICAgICAgIHRhcmdldF91c2VybmFtZSA9IHRhcmdldF9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJBhbmcgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24gVGlrVG9rOiB7dGFyZ2V0X3VzZXJuYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEludmFsaWRhdGUgdXNlcm5hbWUgY2FjaGUga2hpIGLhuq90IMSR4bqndSBzd2l0Y2gKICAgICAgICAgICAgc2VsZi5pbnZhbGlkYXRlX3VzZXJuYW1lX2NhY2hlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pyAocmV0cnkgbWVjaGFuaXNtKQogICAgICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZSgzKTogICMgVGjhu60gMyBs4bqnbgogICAgICAgICAgICAgICAgaWYgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBhdHRlbXB0ID09IDI6ICAjIEzhuqduIGN14buRaSBjw7luZwogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIMSR4bq/biB0cmFuZyBjaOG7pyBUaWtUb2sgc2F1IDMgbOG6p24gdGjhu60iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ25hdmlnYXRpb25fZXJyb3InLAogICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgxJHhur9uIHRyYW5nIGNo4bunIFRpa1RvayBzYXUgbmhp4buBdSBs4bqnbiB0aOG7rScKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJUaOG7rSBs4bqnbiB7YXR0ZW1wdCArIDF9OiBLaMO0bmcgdGjhu4MgxJHhur9uIHRyYW5nIGNo4bunLCB0aOG7rSBs4bqhaS4uLiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFbDoG8gdHJhbmcgaOG7kyBzxqEKICAgICAgICAgICAgaWYgbm90IHNlbGYuX25hdmlnYXRlX3RvX3Byb2ZpbGVfdGFiKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnbmF2aWdhdGlvbl9lcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiAnS2jDtG5nIHRo4buDIHbDoG8gdHJhbmcgaOG7kyBzxqEgVGlrVG9rJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAja2nhu4NtIHRyYSDEkcO6bmcgdXNlcm5hbWUgcuG7k2kgdGjDrCByZXR1cm4gdHJ1ZQogICAgICAgICAgICBpZiBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD1mIkB7dGFyZ2V0X3VzZXJuYW1lfSIpOgogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmIsSQw6MgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24gVGlrVG9rOiB7dGFyZ2V0X3VzZXJuYW1lfSIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgVnXhu5F0IGzDqm4gMSBs4bqnbgogICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58gbWVudSBo4buTIHPGoQogICAgICAgICAgICBpZiBub3Qgc2VsZi5fb3Blbl9wcm9maWxlX21lbnUoKToKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICd1aV9lcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiAnS2jDtG5nIHRo4buDIG3hu58gbWVudSBo4buTIHPGoSBUaWtUb2snCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBhZGRfYWNjb3VudF9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iVGjDqm0gdMOgaSBraG/huqNuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBhZGRfYWNjb3VudF9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG1lbnUgdMOgaSBraG/huqNuIikKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICd1aV9lcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiAnS2jDtG5nIHTDrG0gdGjhuqV5IG1lbnUgdMOgaSBraG/huqNuIFRpa1RvaycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuCiAgICAgICAgICAgIGFjY291bnRfYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIHRhcmdldF9pdGVtID0gTm9uZQogICAgICAgICAgICBmb3IgYnV0dG9uIGluIGFjY291bnRfYnV0dG9uczoKICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICJUaMOqbSB0w6BpIGtob+G6o24iIG9yIGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIpID09ICLEkMOzbmciOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGJ1dHRvbi5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIHRleHR2aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC53aWRnZXQuVGV4dFZpZXciCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGJ1dHRvbl9ib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMoYnV0dG9uKQogICAgICAgICAgICAgICAgICAgIGZvciB0diBpbiB0ZXh0dmlld3M6CiAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyh0dikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR2X2JvdW5kc1swXSA+PSBidXR0b25fYm91bmRzWzBdIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHZfYm91bmRzWzFdID49IGJ1dHRvbl9ib3VuZHNbMV0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dl9ib3VuZHNbMl0gPD0gYnV0dG9uX2JvdW5kc1syXSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2X2JvdW5kc1szXSA8PSBidXR0b25fYm91bmRzWzNdKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHR2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dCAhPSAibnVsbCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIHRhcmdldF9pdGVtID0gYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHRhcmdldF9pdGVtOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHRyb25nIGRhbmggc8OhY2giKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIMSQw6FuaCBk4bqldSB0w6BpIGtob+G6o24gbMOgIGLhu4sgdsO0IGhp4buHdSBow7NhIHRyb25nIERCCiAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KHRhcmdldF9hY2NvdW50WyJpZCJdLCB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJkaXNhYmxlZCIsCiAgICAgICAgICAgICAgICAgICAgImRpc2FibGVfcmVhc29uIjogIlTDoGkga2hv4bqjbiBraMO0bmcgY8OzIHRyw6puIHRoaeG6v3QgYuG7iyIsCiAgICAgICAgICAgICAgICAgICAgImxhc3RfdXBkYXRlIjogaW50KHRpbWUudGltZSgpKSwKICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE5o4bqlbiBCYWNrIMSR4buDIMSRw7NuZyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBRdWF5IHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ2FjY291bnRfbm90X2ZvdW5kJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGYnS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSB0cm9uZyBkYW5oIHPDoWNoIFRpa1RvaycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE5o4bqlcCB2w6BvIHTDoGkga2hv4bqjbiBt4bulYyB0acOqdQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIodGFyZ2V0X2l0ZW0pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgc2FmZV9zbGVlcCByZXR1cm4gdmFsdWUgxJHhu4MgY8OzIHRo4buDIHRob8OhdCBz4bubbQogICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKDYpOiAgIyDEkOG7o2kgY2h1eeG7g24gdMOgaSBraG/huqNuIGhvw6BuIHThuqV0CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJOaOG6rW4gxJHGsOG7o2MgecOqdSBj4bqndSBk4burbmcgdHJvbmcgc3dpdGNoX3RvX2FjY291bnQiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAncmVhc29uJzogJ2ludGVycnVwdGVkJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdC4buLIGThu6tuZyB0cm9uZyBxdcOhIHRyw6xuaCBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgY2jGsGEKICAgICAgICAgICAgY3VycmVudF91c2VybmFtZSA9IHNlbGYuZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGN1cnJlbnRfdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY2h1eeG7g24gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyBzYW5nIHt0YXJnZXRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBUcnVlLCAKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGYnxJDDoyBjaHV54buDbiB0w6BpIGtob+G6o24gdGjDoG5oIGPDtG5nIHNhbmcge3RhcmdldF91c2VybmFtZX0nCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIsSQw6MgYuG6pW0gdsOgbyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gbmjGsG5nIGtp4buDbSB0cmEgbOG6oWkgdGjhuqV5IMSRYW5nIMSRxINuZyBuaOG6rXAgbMOgIHtjdXJyZW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnc3dpdGNoX3ZlcmlmaWNhdGlvbl9mYWlsZWQnLAogICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZifEkMOjIGLhuqVtIHbDoG8gdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IG5oxrBuZyBraeG7g20gdHJhIGzhuqFpIHRo4bqleSDEkWFuZyDEkcSDbmcgbmjhuq1wIGzDoCB7Y3VycmVudF91c2VybmFtZX0nCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2siKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gcXVheSB24buBIHRyYW5nIGNo4bunCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICdyZWFzb24nOiAnZXhjZXB0aW9uJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZidM4buXaSBraGkgY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1Rvazoge3N0cihlKX0nCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICBkZWYgX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2goc2VsZiwgdGFyZ2V0X2FjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGPDoWMgdGhhbyB0w6FjIFVJIMSR4buDIGNodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXJnZXRfYWNjb3VudDogVMOgaSBraG/huqNuIGPhuqduIGNodXnhu4NuIMSR4bq/bgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogewogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBib29sLAogICAgICAgICAgICAgICAgJ3JlYXNvbic6IHN0ciAobuG6v3UgdGjhuqV0IGLhuqFpKSwKICAgICAgICAgICAgICAgICdtZXNzYWdlJzogc3RyCiAgICAgICAgICAgIH0KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN3aXRjaF9yZXN1bHQgPSBzZWxmLnN3aXRjaF9hY2NvdW50KHRhcmdldF9hY2NvdW50KQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHN3aXRjaF9yZXN1bHQsIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0dXJuIHN3aXRjaF9yZXN1bHQKICAgICAgICAgICAgZWxpZiBzd2l0Y2hfcmVzdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuIHsnc3VjY2Vzcyc6IFRydWUsICdtZXNzYWdlJzogJ0NodXnhu4NuIHTDoGkga2hv4bqjbiBUaWtUb2sgdGjDoG5oIGPDtG5nJ30KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdzd2l0Y2hfZmFpbGVkJywKICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvaycKICAgICAgICAgICAgICAgIH0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihlLCAiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gY2h1eeG7g24gdMOgaSBraG/huqNuIFRpa1RvayIpCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICdyZWFzb24nOiAnZXhjZXB0aW9uJywKICAgICAgICAgICAgICAgICdtZXNzYWdlJzogZidM4buXaSBraGkgdGjhu7FjIGhp4buHbiBjaHV54buDbiB0w6BpIGtob+G6o24gVGlrVG9rOiB7c3RyKGUpfScKICAgICAgICAgICAgfQogICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIFRpa1RvayDEkWFuZyDEkcSDbmcgbmjhuq1wICh24bubaSBjYWNoZSkKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHIgaG/hurdjIE5vbmU6IFVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wLCBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgY2FjaGUgdHLGsOG7m2MKICAgICAgICAgICAgY3VycmVudF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgaWYgKHNlbGYuX2NhY2hlZF91c2VybmFtZSBhbmQgCiAgICAgICAgICAgICAgICBjdXJyZW50X3RpbWUgLSBzZWxmLl91c2VybmFtZV9jYWNoZV90aW1lIDwgc2VsZi5fdXNlcm5hbWVfY2FjaGVfdHRsKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiU+G7rSBk4bulbmcgY2FjaGVkIHVzZXJuYW1lOiB7c2VsZi5fY2FjaGVkX3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fY2FjaGVkX3VzZXJuYW1lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgYXBwIGPDsyDEkWFuZyBt4bufIGtow7RuZyB0csaw4bubYwogICAgICAgICAgICBjdXJyZW50X3BhY2thZ2UgPSBzZWxmLmhlbHBlci5nZXRfY3VycmVudF9wYWNrYWdlKCkKICAgICAgICAgICAgaWYgY3VycmVudF9wYWNrYWdlICE9IHNlbGYuYXBwX3BhY2thZ2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiQXBwIFRpa1RvayBjaMawYSBt4bufLCBraMO0bmcgdGjhu4MgbOG6pXkgdXNlcm5hbWUiKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgICAgICMgTMawdSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaSAoa2jDtG5nIGZvcmNlIHbhu4EgaG9tZSDEkeG7gyB0csOhbmggY29uZmxpY3QpCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRyxrDhu5tjIHRpw6puIHRo4butIHTDrG0gdXNlcm5hbWUg4bufIG3DoG4gaMOsbmggaGnhu4duIHThuqFpCiAgICAgICAgICAgIHVzZXJuYW1lID0gc2VsZi5fZXh0cmFjdF91c2VybmFtZV9mcm9tX3NjcmVlbihzY3JlZW5feG1sKQogICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IGNhY2hlCiAgICAgICAgICAgICAgICBzZWxmLl9jYWNoZWRfdXNlcm5hbWUgPSB1c2VybmFtZQogICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWVfY2FjaGVfdGltZSA9IGN1cnJlbnRfdGltZQogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSwgdGjhu60gbmF2aWdhdGUgxJHhur9uIHByb2ZpbGUgKGNo4buJIGtoaSBj4bqnbiB0aGnhur90KQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFZ14buRdCB4deG7kW5nIHbDoCBjaOG7nQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkgICMgR2nhuqNtIHRo4budaSBnaWFuIGNo4budCgogICAgICAgICAgICAgICAgIyBUw6xtIHVzZXJuYW1lIHRyb25nIHRyYW5nIGjhu5Mgc8ahCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gc2VsZi5fZXh0cmFjdF91c2VybmFtZV9mcm9tX3NjcmVlbihzY3JlZW5feG1sKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFF1YXkgbOG6oWkgdHJhbmcgY2jhu6cgbmhhbmgKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWU6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJM4bqleSB1c2VybmFtZSB04burIHByb2ZpbGU6IHt1c2VybmFtZX0iKQogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IGNhY2hlCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2FjaGVkX3VzZXJuYW1lID0gdXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICBzZWxmLl91c2VybmFtZV9jYWNoZV90aW1lID0gY3VycmVudF90aW1lCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyBs4bqleSB1c2VybmFtZSB04burIHByb2ZpbGUiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBuYXZpZ2F0ZSBwcm9maWxlIMSR4buDIGzhuqV5IHVzZXJuYW1lOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBs4bqleSB1c2VybmFtZToge2V9IikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgZGVmIGludmFsaWRhdGVfdXNlcm5hbWVfY2FjaGUoc2VsZik6CiAgICAgICAgIiIiWMOzYSBjYWNoZSB1c2VybmFtZSAoZ+G7jWkga2hpIHN3aXRjaCBhY2NvdW50KSIiIgogICAgICAgIHNlbGYuX2NhY2hlZF91c2VybmFtZSA9IE5vbmUKICAgICAgICBzZWxmLl91c2VybmFtZV9jYWNoZV90aW1lID0gMAogICAgCiAgICBkZWYgX2V4dHJhY3RfdXNlcm5hbWVfZnJvbV9zY3JlZW4oc2VsZiwgc2NyZWVuX3htbDogc3RyKSAtPiBPcHRpb25hbFtzdHJdOgogICAgICAgICIiIgogICAgICAgIEV4dHJhY3QgdXNlcm5hbWUgdOG7qyBYTUwgbcOgbiBow6xuaCBoaeG7h24gdOG6oWkKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBzY3JlZW5feG1sOiBYTUwgY+G7p2EgbcOgbiBow6xuaAogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBVc2VybmFtZSBob+G6t2MgTm9uZQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBUw6xtIHRyb25nIGPDoWMgQnV0dG9uIGPDsyB0aOG7gyBjaOG7qWEgdXNlcm5hbWUKICAgICAgICAgICAgYnV0dG9ucyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBidXR0b24gaW4gYnV0dG9uczoKICAgICAgICAgICAgICAgIHRleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGJ1dHRvbikKICAgICAgICAgICAgICAgIGlmIHRleHQgYW5kIHRleHQuc3RhcnRzd2l0aCgiQCIpIGFuZCBsZW4odGV4dCkgPiAxOgogICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGV4dFsxOl0gICMgQuG7jyBrw70gdOG7sSBACiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHVzZXJuYW1lKSA+IDI6ICAjIFVzZXJuYW1lIGjhu6NwIGzhu4cKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRo4butIHTDrG0gdHJvbmcgVGV4dFZpZXcKICAgICAgICAgICAgdGV4dF92aWV3cyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9yIHRleHRfdmlldyBpbiB0ZXh0X3ZpZXdzOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodGV4dF92aWV3KQogICAgICAgICAgICAgICAgaWYgdGV4dCBhbmQgdGV4dC5zdGFydHN3aXRoKCJAIikgYW5kIGxlbih0ZXh0KSA+IDE6CiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB0ZXh0WzE6XSAgIyBC4buPIGvDvSB04buxIEAKICAgICAgICAgICAgICAgICAgICBpZiBsZW4odXNlcm5hbWUpID4gMjogICMgVXNlcm5hbWUgaOG7o3AgbOG7hwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGV4dHJhY3QgdXNlcm5hbWU6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PSBTTUFSVCBDQVJFIE1FVEhPRFMgKMSQ4buTbmcgbmjhuqV0IHbhu5tpIEluc3RhZ3JhbSkgPT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBkZWYgX2NhcmVfc3dpcGVfZmVlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJMxrDhu5t0IGZlZWQgVGlrVG9rIG5o4bq5IG5ow6BuZyAtIHTGsMahbmcgxJHGsMahbmcgSW5zdGFncmFtIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqvdCDEkeG6p3UgbMaw4bubdCBmZWVkIFRpa1Rvay4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAjIELhuqVtIHbDoG8gY2jhu68gxJDhu4EgeHXhuqV0IGhv4bq3YyBEw6BuaCBjaG8gYuG6oW4KICAgICAgICAgICAgYnRuX2ZvcnlvdSA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQodGV4dD0ixJDhu4EgeHXhuqV0IiwgdGltZW91dD0yKQogICAgICAgICAgICBpZiBub3QgYnRuX2ZvcnlvdToKICAgICAgICAgICAgICAgIGJ0bl9mb3J5b3UgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9IkTDoG5oIGNobyBi4bqhbiIsIHRpbWVvdXQ9MikKICAgICAgICAgICAgaWYgYnRuX2ZvcnlvdToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihidG5fZm9yeW91KQoKICAgICAgICAgICAgIyBMxrDhu5t0IDUtMTAgdmlkZW8gbmfhuqt1IG5oacOqbgogICAgICAgICAgICBudW1fc3dpcGVzID0gcmFuZG9tLnJhbmRpbnQoNSwgMTApCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG51bV9zd2lwZXMpOgogICAgICAgICAgICAgICAgIyBUaOG7nWkgZ2lhbiB4ZW0gbmfhuqt1IG5oacOqbiAyLTUgZ2nDonkKICAgICAgICAgICAgICAgIHdhdGNoX3RpbWUgPSByYW5kb20udW5pZm9ybSgyLCA1KQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJMxrDhu5t0IHZpZGVvIHtpKzF9L3tudW1fc3dpcGVzfSwgeGVtIHt3YXRjaF90aW1lOi4xZn1zIikKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YXRjaF90aW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEPDsyAxMCUga2jhuqMgbsSDbmcgbGlrZSB2aWRlbyBraGkgeGVtID49IDMgZ2nDonkgKGdp4bqjbSB04burIDE1JSkKICAgICAgICAgICAgICAgIGlmIHdhdGNoX3RpbWUgPj0gMyBhbmQgcmFuZG9tLnJhbmRvbSgpIDwgMC4xMDoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxpa2VfYnV0dG9uIGFuZCBub3Qgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRo4butIGRvdWJsZSB0YXAgxJHhu4MgbGlrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCA9IHNlbGYuaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gaW50KHdpZHRoICogcmFuZG9tLnVuaWZvcm0oMC41LCAwLjYpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGludChoZWlnaHQgKiByYW5kb20udW5pZm9ybSgwLjUsIDAuNikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIsSQw6MgbGlrZSB2aWRlbyB7aSsxfSB0cm9uZyBjYXJlIGZlZWQiKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcyAgIyBC4buPIHF1YSBs4buXaSBsaWtlLCB0aeG6v3AgdOG7pWMgeGVtCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGZvcmNlIHN0b3AKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoMC4xKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGzGsOG7m3Qge251bV9zd2lwZXN9IHZpZGVvIFRpa1RvayIpCiAgICAgICAgICAgICMgVuG7gSB0cmFuZyBjaOG7pyBzYXUga2hpIGNhcmUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBsxrDhu5t0IGZlZWQgVGlrVG9rOiB7ZX0iKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBfY2FyZV93YXRjaF92aWRlb3Moc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiWGVtIHZpZGVvIFRpa1RvayB0cm9uZyB0aOG7nWkgZ2lhbiBkw6BpIC0gdMawxqFuZyDEkcawxqFuZyB3YXRjaF9yZWVscyBJbnN0YWdyYW0iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuq90IMSR4bqndSB4ZW0gdmlkZW8gVGlrVG9rLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgdG90YWxfd2F0Y2hfdGltZSA9IHJhbmRvbS5yYW5kaW50KDYwLCAxNTApICAjIDEtMi41IHBow7p0CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJT4bq9IHhlbSB2aWRlbyBUaWtUb2sgdHJvbmcge3RvdGFsX3dhdGNoX3RpbWV9IGdpw6J5IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHZpZGVvX2NvdW50ID0gMAogICAgICAgICAgICB3aGlsZSAodGltZS50aW1lKCkgLSBzdGFydF90aW1lKSA8IHRvdGFsX3dhdGNoX3RpbWU6CiAgICAgICAgICAgICAgICB2aWRlb19jb3VudCArPSAxCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgWGVtIHZpZGVvIGhp4buHbiB04bqhaQogICAgICAgICAgICAgICAgd2F0Y2hfZHVyYXRpb24gPSByYW5kb20ucmFuZGludCgzLCAxMikgICMgMy0xMiBnacOieSBt4buXaSB2aWRlbwogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoZiJYZW0gdmlkZW8ge3ZpZGVvX2NvdW50fSB0cm9uZyB7d2F0Y2hfZHVyYXRpb259cyIpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2F0Y2hfZHVyYXRpb24pCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQ8OzIDI1JSBraOG6oyBuxINuZyBsaWtlIHZpZGVvIGtoaSB4ZW0gPj0gNSBnacOieSAoZ2nhuqNtIHThu6sgMjAlKQogICAgICAgICAgICAgICAgaWYgd2F0Y2hfZHVyYXRpb24gPj0gNSBhbmQgcmFuZG9tLnJhbmRvbSgpIDwgMC4yNToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5fZmluZF9saWtlX2J1dHRvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxpa2VfYnV0dG9uIGFuZCBub3Qgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChsaWtlX2J1dHRvbik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFRo4butIGRvdWJsZSB0YXAgxJHhu4MgbGlrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCA9IHNlbGYuaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gaW50KHdpZHRoICogcmFuZG9tLnVuaWZvcm0oMC41LCAwLjYpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGludChoZWlnaHQgKiByYW5kb20udW5pZm9ybSgwLjUsIDAuNikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXAoeCwgeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIsSQw6MgbGlrZSB2aWRlbyB7dmlkZW9fY291bnR9IHRyb25nIGNhcmUgd2F0Y2giKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcyAgIyBC4buPIHF1YSBs4buXaSBsaWtlLCB0aeG6v3AgdOG7pWMgeGVtCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVnXhu5F0IHNhbmcgdmlkZW8gdGnhur9wIHRoZW8KICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBmb3JjZSBzdG9wCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKDAuMSk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB4ZW0ge3ZpZGVvX2NvdW50fSB2aWRlbyBUaWtUb2sgdHJvbmcge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfXMiKQogICAgICAgICAgICAjIFbhu4EgdHJhbmcgY2jhu6cgc2F1IGtoaSBjYXJlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgeGVtIHZpZGVvIFRpa1Rvazoge2V9IikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX2NhcmVfdmlld19ub3RpZmljYXRpb25zKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlhlbSB0aMO0bmcgYsOhbyBUaWtUb2sgLSB0xrDGoW5nIMSRxrDGoW5nIEluc3RhZ3JhbSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiQuG6r3QgxJHhuqd1IHhlbSB0aMO0bmcgYsOhbyBUaWtUb2suLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB2w6AgYuG6pW0gdsOgbyBI4buZcCB0aMawIChpbmJveCkKICAgICAgICAgICAgaW5ib3hfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCgKICAgICAgICAgICAgICAgIHRpbWVvdXQ9NSwKICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYz0iSOG7mXAgdGjGsCIKICAgICAgICAgICAgKSBvciBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KAogICAgICAgICAgICAgICAgdGltZW91dD01LAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5zcy5hbmRyb2lkLnVnYy50cmlsbDppZC9jdTkiICAjIFRpa1RvayBpbmJveCBidXR0b24KICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGluYm94X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IEjhu5lwIHRoxrAgVGlrVG9rIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGluYm94X2J1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFhlbSB0aMO0bmcgYsOhbyB0cm9uZyAxMC0yMCBnacOieQogICAgICAgICAgICB2aWV3X3RpbWUgPSByYW5kb20ucmFuZGludCgxMCwgMjApCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiWGVtIHRow7RuZyBiw6FvIHRyb25nIHt2aWV3X3RpbWV9cyIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZ14buRdCBsw6puIHh14buRbmcgxJHhu4MgeGVtIHRow7RuZyBiw6FvCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHJhbmRvbS5yYW5kaW50KDIsIDQpKToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxLCAzKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh2aWV3X3RpbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFF1YXkgbOG6oWkgdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyB4ZW0gdGjDtG5nIGLDoW8gVGlrVG9rIikKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHhlbSB0aMO0bmcgYsOhbyBUaWtUb2s6IHtlfSIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09IEVORCBTTUFSVCBDQVJFIE1FVEhPRFMgPT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBkZWYgX2NoZWNrX3Bpbl9wb3B1cChzZWxmKToKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHBvcHVwIFBJTiB2w6Agbmjhuq1wIG3DoyBQSU4gbuG6v3UgY8OzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiS2nhu4NtIHRyYSBwb3B1cCBQSU4gVGlrVG9rIHRyb25nIDUgZ2nDonkuLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBT4butIGThu6VuZyB3YWl0X2Zvcl9lbGVtZW50IMSR4buDIGtp4buDbSB0cmEgcG9wdXAgdHJvbmcgNSBnacOieQogICAgICAgICAgICBwaW5fcG9wdXAgPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KAogICAgICAgICAgICAgICAgY29udGVudF9kZXNjPSJC4bqhbiDEkcOjIHPhurVuIHPDoG5nIMSRw7NuZyBUaWtUb2s/IiwKICAgICAgICAgICAgICAgIHRpbWVvdXQ9NQogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBwaW5fcG9wdXA6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJQaMOhdCBoaeG7h24gcG9wdXAgUElOIFRpa1RvaywgxJFhbmcgbmjhuq1wIG3Doy4uLiIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVMOsbSB2w6AgYuG6pW0gdsOgbyBz4buRICIxIiAKICAgICAgICAgICAgICAgIGRpZ2l0XzEgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iMSIpCiAgICAgICAgICAgICAgICBpZiBkaWdpdF8xOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihkaWdpdF8xKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBOaOG6rXAgbcOjIFBJTiAxMjM0CiAgICAgICAgICAgICAgICAgICAgZm9yIGRpZ2l0IGluIFsiMSIsIjIiLCAiMyIsICI0Il06CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0X2VsZW1lbnQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRzKHRleHQ9ZGlnaXQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRpZ2l0X2VsZW1lbnQgYW5kIGxlbihkaWdpdF9lbGVtZW50KSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZGlnaXRfZWxlbWVudFtsZW4oZGlnaXRfZWxlbWVudCktMV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIktow7RuZyB0w6xtIHRo4bqleSBz4buRIHtkaWdpdH0gdHJvbmcgcG9wdXAgUElOIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudCh0ZXh0PSJRdWF5IGzhuqFpIHRpa3RvayIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIG5o4bqtcCBtw6MgUElOIDEyMzQiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKSAgIyBDaOG7nSBwb3B1cCDEkcOzbmcKCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIlTDrG0gdGjhuqV5IHBvcHVwIFBJTiBuaMawbmcga2jDtG5nIHTDrG0gdGjhuqV5IHPhu5EgMSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiS2jDtG5nIGPDsyBwb3B1cCBQSU4iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBraeG7g20gdHJhIHBvcHVwIFBJTjoge2V9IikKICAgIAogICAgZGVmIHBlcmZvcm1fcG9zdF9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDEg25nIHZpZGVvIGNobyBUaWtUb2sgduG7m2kga2nhu4NtIHRyYSB0aOG7nWkgZ2lhbiBkZWxheQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nIMSRxINuZyB2aWRlbyBob+G6t2MgxJHDoyDEkcSDbmcgZ+G6p24gxJHDonkKICAgICAgICAiIiIKCiAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgIGFjYyA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgYWNjb3VudF9pZCA9IGFjY291bnQuZ2V0KCdpZCcpCiAgICAgICAgCiAgICAgICAgaWYgYWNjID09ICJuZGQxMTg5MCI6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB0aOG7nWkgZ2lhbiBwb3N0IGfhuqduIG5o4bqldAogICAgICAgIGRlbGF5X21pbnV0ZXMgPSBzZWxmLmdldF9jb25maWcoImRlbGF5X3Bvc3RfdmlkZW9fbWludXRlIikKICAgICAgICBpZiBkZWxheV9taW51dGVzIGFuZCBhY2NvdW50X2lkOgogICAgICAgICAgICBsYXN0X3Bvc3RfdGltZSA9IHNlbGYuZGIuZ2V0X2FjY291bnRfbGFzdF9wb3N0X3RpbWUoYWNjb3VudF9pZCwgc2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgY3VycmVudF90aW1lID0gaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbGFzdF9wb3N0X3RpbWU6CiAgICAgICAgICAgICAgICB0aW1lX2RpZmZfbWludXRlcyA9IChjdXJyZW50X3RpbWUgLSBsYXN0X3Bvc3RfdGltZSkgLyA2MAogICAgICAgICAgICAgICAgaWYgdGltZV9kaWZmX21pbnV0ZXMgPCBkZWxheV9taW51dGVzOgogICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ19taW51dGVzID0gZGVsYXlfbWludXRlcyAtIHRpbWVfZGlmZl9taW51dGVzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7YWNjfSDEkcOjIMSRxINuZyB2aWRlbyBn4bqnbiDEkcOieSwgY+G6p24gY2jhu50gdGjDqm0ge3JlbWFpbmluZ19taW51dGVzOi4xZn0gcGjDunQiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlICAjIFRy4bqjIHbhu4EgVHJ1ZSDEkeG7gyBraMO0bmcgY29pIGzDoCBs4buXaQogICAgICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQuG6r3QgxJHhuqd1IMSRxINuZyB2aWRlbyBjaG8gVGlrVG9rIHTDoGkga2hv4bqjbjoge2FjY30iKQoKICAgICAgICAjIELGsOG7m2MgMTogQuG6pW0gcXVheQogICAgICAgIG5leHRfYnV0dG9uMiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSJRdWF5IiwgdGltZW91dD01KQogICAgICAgIGlmIG5vdCBuZXh0X2J1dHRvbjI6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBRdWF5IMSR4buDIMSRxINuZyB2aWRlbyIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgICMgQsaw4bubYyAyIGLhuqVtIGNobyBwaMOpcAogICAgICAgIHdoaWxlIHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5hbmRyb2lkLnBhY2thZ2VpbnN0YWxsZXI6aWQvcGVybWlzc2lvbl9hbGxvd19idXR0b24iLCB0aW1lb3V0PTUpOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJC4bqlbSBuw7p0IGNobyBwaMOpcC4uLiIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQoKICAgICAgICAjQsaw4bubYyAzIGLhuqVtIHbDoG8gYuG7mSBzxrB1IHThuq1wCiAgICAgICAgcmVjb3JkX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoY29udGVudF9kZXNjPSJRdWF5IHZpZGVvIiwgdGltZW91dD0xMCkKICAgICAgICBpZiBub3QgcmVjb3JkX2J1dHRvbjoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0ICdRdWF5IHZpZGVvJyIpCiAgICAgICAgICAgIGNsb3NlX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciLCB0aW1lb3V0PTIpCiAgICAgICAgICAgIGlmIGNsb3NlX2J1dHRvbjoKICAgICAgICAgICAgICAgIGNsb3NlX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciLCB0aW1lb3V0PTIpCiAgICAgICAgICAgIGlmIGNsb3NlX2J1dHRvbjoKICAgICAgICAgICAgICAgIGNsb3NlX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQoY29udGVudF9kZXNjPSLEkMOzbmciLCB0aW1lb3V0PTIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgICMgQsaw4bubYyAyOiBSYW5kb20gc+G7kSBsxrDhu6NuZyDhuqNuaCB2w6AgdOG6o2kgduG7gQogICAgICAgIGltYWdlX2NvdW50ID0gcmFuZG9tLnJhbmRpbnQoMywgNSkKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiUmFuZG9tIHtpbWFnZV9jb3VudH0g4bqjbmggxJHhu4MgxJHEg25nIGLDoGkiKQogICAgICAgIGlmIG5vdCBzZWxmLmhlbHBlci5kb3dubG9hZF9pbWFnZShjb3VudD1pbWFnZV9jb3VudCk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIlThuqNpIOG6o25oIHRo4bqldCBi4bqhaSwgYuG7jyBxdWEgxJHEg25nIGLDoGkiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgIyBM4bqleSBib3VuZHMgY+G7p2EgcmVjb3JkX2J1dHRvbiB2w6AgdMOtbmggdG/DoW4gdOG7jWEgxJHhu5kKICAgICAgICBib3VuZHMgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF9ib3VuZHMocmVjb3JkX2J1dHRvbikKICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IGJvdW5kcwogICAgICAgIHkgPSAoeTEgKyB5MikgLy8gMiAgIyB5IOG7nyBnaeG7r2EgY+G7p2EgZWxlbWVudAogICAgICAgIHggPSB4MiAgIyB4IOG7nyBj4bqhbmggcGjhuqNpCiAgICAgICAgdGFwX3ggPSB4ICsgNjAgICMgeCArIDYwCiAgICAgICAgdGFwX3kgPSB5CgogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUYXAgdsOgbyB04buNYSDEkeG7mSAoe3RhcF94fSwge3RhcF95fSkgLSBj4bqhbmggcGjhuqNpIGPhu6dhIG7DunQgUXVheSB2aWRlbyArIDYwcHgiKQogICAgICAgIHNlbGYuaGVscGVyLnRhcCh0YXBfeCwgdGFwX3kpCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgCiAgICAgICAgIyBCxrDhu5tjIDQgYuG6pW0gY2hvIHBow6lwCiAgICAgICAgd2hpbGUgc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChyZXNvdXJjZV9pZD0iY29tLmFuZHJvaWQucGFja2FnZWluc3RhbGxlcjppZC9wZXJtaXNzaW9uX2FsbG93X2J1dHRvbiIsIHRpbWVvdXQ9NSk6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIkLhuqVtIG7DunQgY2hvIHBow6lwLi4uIikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgCiAgICAgICAgIyBCxrDhu5tjIDUgY2jhu41uIOG6o25oCiAgICAgICAgIyBUw6xtIEdyaWRWaWV3IMSR4buDIGNo4buNbiDhuqNuaAogICAgICAgIGdyaWRfdmlldyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5HcmlkVmlldyIpCiAgICAgICAgaWYgbm90IGdyaWRfdmlldzoKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBHcmlkVmlldyDEkeG7gyBjaOG7jW4g4bqjbmgiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAjIEzhuqV5IHThuqV0IGPhuqMgY8OhYyBidXR0b24gbMOgIGNvbiBj4bunYSBHcmlkVmlldwogICAgICAgIGJ1dHRvbnNfaW5fZ3JpZCA9IHNlbGYuaGVscGVyLmZpbmRfY2hpbGRfZWxlbWVudHMoZ3JpZF92aWV3LCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5CdXR0b24iKQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6xtIHRo4bqleSB7bGVuKGJ1dHRvbnNfaW5fZ3JpZCl9IGJ1dHRvbiB0cm9uZyBHcmlkVmlldyIpCiAgICAgICAgaWYgbm90IGJ1dHRvbnNfaW5fZ3JpZCBvciBsZW4oYnV0dG9uc19pbl9ncmlkKSA9PSAwOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIGPDsyDhuqNuaCBuw6BvIHRyb25nIEdyaWRWaWV3IMSR4buDIGNo4buNbiIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgICMgQ2jhu41uIHThu6sgaXRlbSB04burIDAgxJHhur9uIGltYWdlX2NvdW50LTEKICAgICAgICBpdGVtc190b19zZWxlY3QgPSBtaW4oaW1hZ2VfY291bnQsIGxlbihidXR0b25zX2luX2dyaWQpKQogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJDaOG7jW4ge2l0ZW1zX3RvX3NlbGVjdH0g4bqjbmggdOG7qyBHcmlkVmlldyIpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoaXRlbXNfdG9fc2VsZWN0KToKICAgICAgICAgICAgYnV0dG9uID0gYnV0dG9uc19pbl9ncmlkW2ldCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiQ2jhu41uIOG6o25oIHRo4bupIHtpKzF9IikKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGJ1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDAuNSkKCiAgICAgICAgIyBUw6xtIHbDoCBi4bqlbSBuw7p0IEF1dG9DdXQKICAgICAgICBuZXh0X2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfdG9fdGFwX2VsZW1lbnQodGV4dD0iQXV0b0N1dCIsIHRpbWVvdXQ9NSkKICAgICAgICBpZiBub3QgbmV4dF9idXR0b246CiAgICAgICAgICAgIG5leHRfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudChjb250ZW50X2Rlc2M9IkF1dG9DdXQiLCB0aW1lb3V0PTUpCiAgICAgICAgaWYgbm90IG5leHRfYnV0dG9uOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgJ0F1dG9DdXQnIHNhdSBraGkgY2jhu41uIOG6o25oIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQoKICAgICAgICAjIENo4budIGhp4buHdSDhu6luZyAixJBhbmcgeOG7rSBsw70uLi4iIGhvw6BuIHThuqV0CiAgICAgICAgd2FpdF9jb3VudD0wCiAgICAgICAgd2hpbGUgc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSLEkGFuZyB44butIGzDvS4uLiIsIHRpbWVvdXQ9MikgOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkGFuZyB44butIGzDvS4uLiIpCiAgICAgICAgICAgIHdhaXRfY291bnQgKz0gMQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgaWYgd2FpdF9jb3VudCA+PSAyMDA6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiQ2jhu50gcXXDoSBsw6J1IGNobyBoaeG7h3Ug4bupbmcgJ8SQYW5nIHjhu60gbMO9Li4uJywgYuG7jyBxdWEiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgcGFja2FnZSBoaeG7h24gdOG6oWkKICAgICAgICBjdXJyZW50X3BhY2thZ2UgPSBzZWxmLmhlbHBlci5nZXRfY3VycmVudF9wYWNrYWdlKCkKICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlBhY2thZ2UgaGnhu4duIHThuqFpICh7Y3VycmVudF9wYWNrYWdlfSkga2jDtG5nIMSRw7puZywgbeG7nyBs4bqhaSBhcHAgVGlrVG9rLi4uIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbOG6oWkgcGFja2FnZSBzYXUga2hpIG3hu58gYXBwCiAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiVuG6q24ga2jDtG5nIG3hu58gxJHGsOG7o2MgYXBwIFRpa1RvayDEkcO6bmcgY8OhY2gsIHBhY2thZ2UgaGnhu4duIHThuqFpOiB7Y3VycmVudF9wYWNrYWdlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgbeG7nyBs4bqhaSBhcHAgVGlrVG9rIHRow6BuaCBjw7RuZyIpCgogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKSAgICAKICAgICAgICAjIEtp4buDbSB0cmEgY8OzIHRleHQgIk5o4bqtdCBrw70gY+G7p2EgYuG6oW4iIHbDoCAidGnhur9wIiDEkeG7gyB0aeG6v3AgdOG7pWMKICAgICAgICBkaWFyeV90ZXh0ID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudCh0ZXh0PSJOaOG6rXQga8O9IGPhu6dhIGLhuqFuIiwgdGltZW91dD01KQogICAgICAgIGNvbnRpbnVlX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQodGV4dD0iVGnhur9wIiwgdGltZW91dD0yKQoKICAgICAgICBpZiBub3QgZGlhcnlfdGV4dCBvciBub3QgY29udGludWVfYnV0dG9uOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5ICdOaOG6rXQga8O9IGPhu6dhIGLhuqFuJyBob+G6t2MgbsO6dCAndGnhur9wJywga2jDtG5nIHRo4buDIHRp4bq/cCB04bulYyIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAjIENo4budIFJlY3ljbGVyVmlldyB4deG6pXQgaGnhu4duIHbDoCB0YXAgdsOgbyBuw7MKICAgICAgICByZWN5Y2xlcl92aWV3ID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkeC5yZWN5Y2xlcnZpZXcud2lkZ2V0LlJlY3ljbGVyVmlldyIsIHRpbWVvdXQ9NSkKICAgICAgICBpZiByZWN5Y2xlcl92aWV3OgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSBSZWN5Y2xlclZpZXcsIMSRYW5nIHRhcCB2w6BvLi4uIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHJlY3ljbGVyX3ZpZXcpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxMCkKCiAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNvbnRpbnVlX2J1dHRvbikKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCgogICAgICAgICMgS2nhu4NtIHRyYSBjw7MgdGV4dCAiVGjDqm0gbcO0IHThuqMuLi4iIHbDoCBi4bqlbSB2w6BvIMSRw7MgxJHhu4MgdGjDqm0gaGFzaHRhZwogICAgICAgIGFkZF9kZXNjcmlwdGlvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudCh0ZXh0PSJUaMOqbSBtw7QgdOG6oy4uLiIpCiAgICAgICAgaWYgYWRkX2Rlc2NyaXB0aW9uOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUw6xtIHRo4bqleSAndGjDqm0gbcO0IHThuqMuLi4nLCDEkWFuZyBi4bqlbSB2w6BvIMSR4buDIHRow6ptIGhhc2h0YWciKQogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoYWRkX2Rlc2NyaXB0aW9uKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiAxIGhhc2h0YWcgdOG7qyBkYW5oIHPDoWNoCiAgICAgICAgICAgIGhhc2h0YWdzID0gWwogICAgICAgICAgICAgICAgIiN4dWh1b25nIiwgIiN0aWt0b2t2biIsICIjdHJlbmRpbmciLCAiI2xpZmV2biIsICIjY3VvY3NvbmciLCAKICAgICAgICAgICAgICAgICIjYW1uaGFjIiwgIiN0aW5oeWV1IiwgIiNuaG8iLCAiI3RoYW5oeHVhbiIsICIjYnVvbiIsICIjdnVpIiwgCiAgICAgICAgICAgICAgICAiI2hhbmhwaHVjIiwgIiNjYW14dWMiLCAiI25nYXltb2kiLCAiI211YWhlIiwgIiN0aHVnaWFuIiwgCiAgICAgICAgICAgICAgICAiI2NoaWxsIiwgIiNtb3RuZ2F5Y3VhdG9pIgogICAgICAgICAgICBdCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxlY3RlZF9oYXNodGFnID0gcmFuZG9tLmNob2ljZShoYXNodGFncykKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk5o4bqtcCBoYXNodGFnOiB7c2VsZWN0ZWRfaGFzaHRhZ30iKQogICAgICAgICAgICBzZWxmLmhlbHBlci5pbnB1dF90ZXh0KHNlbGVjdGVkX2hhc2h0YWcpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19lbnRlcigpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSAndGjDqm0gbcO0IHThuqMuLi4nLCBi4buPIHF1YSBixrDhu5tjIHRow6ptIGhhc2h0YWciKQoKICAgICAgICAjIFTDrG0gdsOgIGLhuqVtIG7DunQgxJDEg25nCiAgICAgICAgcG9zdF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X3RvX3RhcF9lbGVtZW50KGNvbnRlbnRfZGVzYz0ixJDEg25nIiwgdGltZW91dD0xMCkKICAgICAgICBpZiBub3QgcG9zdF9idXR0b246CiAgICAgICAgICAgIHBvc3RfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF90b190YXBfZWxlbWVudCh0ZXh0PSLEkMSDbmciLCB0aW1lb3V0PTUpCiAgICAgICAgICAgIGlmIG5vdCBwb3N0X2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCAnxJDEg25nJyDEkeG7gyBob8OgbiB0aMOgbmggxJHEg25nIHZpZGVvIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMTApCiAgICAgICAgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKQogICAgICAgIAogICAgICAgICMgTMawdSB0aOG7nWkgZ2lhbiDEkcSDbmcgdmlkZW8gdGjDoG5oIGPDtG5nIHbDoG8gREIKICAgICAgICBpZiBhY2NvdW50X2lkOgogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIHNlbGYuZGIuc2V0X2FjY291bnRfbGFzdF9wb3N0X3RpbWUoYWNjb3VudF9pZCwgc2VsZi5hcHBfbmFtZSwgY3VycmVudF90aW1lKQogICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJIb8OgbiB0aMOgbmggxJHEg25nIHZpZGVvIGNobyBUaWtUb2sgdMOgaSBraG/huqNuOiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsICdVbmtub3duJyl9IikKICAgICAgICByZXR1cm4gVHJ1ZQogICAgCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAjIENBUkUgQUNUSU9OUyBJTVBMRU1FTlRBVElPTiAoQUJTVFJBQ1QgTUVUSE9EUyBGUk9NIEJBU0UpCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBwZXJmb3JtX25ld3NmZWVkX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIHZ14buRdCBuZXdzZmVlZC9Gb3IgWW91IGZlZWQiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgbWV0aG9kIGPDsyBz4bq1biBfY2FyZV9zd2lwZV9mZWVkCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3N3aXBlX2ZlZWQoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fcmVlbHNfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24geGVtIHZpZGVvL3JlZWxzIChUaWtUb2sgbeG6t2MgxJHhu4tuaCBsw6AgdmlkZW8pIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFPhu60gZOG7pW5nIG1ldGhvZCBjw7Mgc+G6tW4gX2NhcmVfd2F0Y2hfdmlkZW9zCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3dhdGNoX3ZpZGVvcyhhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9yZWVsc19hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9ub3RpZmljYXRpb25fYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRo4buxYyBoaeG7h24geGVtIHRow7RuZyBiw6FvL2luYm94IiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFPhu60gZOG7pW5nIG1ldGhvZCBjw7Mgc+G6tW4gX2NhcmVfdmlld19ub3RpZmljYXRpb25zCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJlX3ZpZXdfbm90aWZpY2F0aW9ucyhhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgcGVyZm9ybV9ub3RpZmljYXRpb25fYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fcHJvZmlsZV9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiVGjhu7FjIGhp4buHbiB4ZW0gcHJvZmlsZSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBOYXZpZ2F0ZSDEkeG6v24gcHJvZmlsZSB0YWIKICAgICAgICAgICAgaWYgbm90IHNlbGYuX25hdmlnYXRlX3RvX3Byb2ZpbGVfdGFiKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gdGjhu51pIGdpYW4geGVtIHByb2ZpbGUKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDUsIDE1KSkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHBlcmZvcm1fcHJvZmlsZV9hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcGVyZm9ybV9leHBsb3JlX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIGtow6FtIHBow6EgKERpc2NvdmVyIHRhYikiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTmF2aWdhdGUgxJHhur9uIERpc2NvdmVyIHRhYiAobuG6v3UgY8OzKQogICAgICAgICAgICBkaXNjb3Zlcl9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KGNvbnRlbnRfZGVzYz0iS2jDoW0gcGjDoSIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgaWYgbm90IGRpc2NvdmVyX2J1dHRvbjoKICAgICAgICAgICAgICAgIGRpc2NvdmVyX2J1dHRvbiA9IHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQodGV4dD0iS2jDoW0gcGjDoSIsIHRpbWVvdXQ9NSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGRpc2NvdmVyX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihkaXNjb3Zlcl9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBTY3JvbGwgdHJvbmcgZGlzY292ZXIgZmVlZCAtIHRoYXkgc3dpcGVfZG93biBi4bqxbmcgc3dpcGVfdXAKICAgICAgICAgICAgICAgIHNjcm9sbF9jb3VudCA9IHJhbmRvbS5yYW5kaW50KDUsIDE1KQogICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2Uoc2Nyb2xsX2NvdW50KToKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDEsIDUpKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgRmFsbGJhY2s6IHNjcm9sbCBGb3IgWW91IGZlZWQKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBwZXJmb3JtX2V4cGxvcmVfYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fc2VhcmNoX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJUaOG7sWMgaGnhu4duIHTDrG0ga2nhur9tIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFTDrG0gc2VhcmNoIGJ1dHRvbgogICAgICAgICAgICBzZWFyY2hfYnV0dG9uID0gc2VsZi5oZWxwZXIud2FpdF9mb3JfZWxlbWVudChjb250ZW50X2Rlc2M9IlTDrG0ga2nhur9tIiwgdGltZW91dD01KQogICAgICAgICAgICBpZiBub3Qgc2VhcmNoX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlYXJjaF9idXR0b24gPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KHRleHQ9IlTDrG0ga2nhur9tIiwgdGltZW91dD01KQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc2VhcmNoX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWFyY2hfYnV0dG9uKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgR2nhuqMgbOG6rXAgdMOsbSBraeG6v20KICAgICAgICAgICAgICAgIHNlYXJjaF90ZXJtcyA9IFsiZ2FpeGluaCIsImdhaV94aW5oIiwiaG90Z2lybCIsImhvdGdpcmx2biIsInZpZXRuYW1naXJsIiwicHJldHR5Z2lybCIsCiJjdXRlZ2lybCIsInhpbmhnYWkiLCJtb2RlbCIsImluZmx1ZW5jZXIiLCJzZWxmaWUiLCJtYWtldXAiLCJza2luY2FyZSIsIm9vdGQiLCJmYXNoaW9uIiwKInN0eWxlIiwiaGFpciIsImdsb3d1cCIsInZpcmFsZ2lybCIsInRpa3Rva2dpcmxzIiwidGlrdG9rZ2lybCIsInZpZXRuYW1lc2UiLCJwb3J0cmFpdCIsCiJkYW5jZWdpcmwiLCJjb3NwbGF5Z2lybCIsImNvbGxlZ2VnaXJsIiwic3R1ZGVudGdpcmwiLCJiZWF1dHkiLCJiZWF1dGlmdWwiLCJjdXRlIiwic21pbGUiXQogICAgICAgICAgICAgICAgc2VhcmNoX3Rlcm0gPSByYW5kb20uY2hvaWNlKHNlYXJjaF90ZXJtcykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHNlYXJjaCBib3gKICAgICAgICAgICAgICAgIHNlYXJjaF9ib3ggPSBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkVkaXRUZXh0IiwgdGltZW91dD01KQogICAgICAgICAgICAgICAgaWYgc2VhcmNoX2JveDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX2JveCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5pbnB1dF90ZXh0KHNlYXJjaF90ZXJtKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBUdXhUZXh0TGF5b3V0VmlldyBzYXUga2hpIG5o4bqtcCB0ZXh0CiAgICAgICAgICAgICAgICAgICAgdHV4X3RleHRfZWxlbWVudHMgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRzKGNsYXNzX25hbWU9ImNvbS5ieXRlZGFuY2UudHV4LmlucHV0LlR1eFRleHRMYXlvdXRWaWV3IikKICAgICAgICAgICAgICAgICAgICBpZiB0dXhfdGV4dF9lbGVtZW50czoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDrG0gdGjhuqV5IHtsZW4odHV4X3RleHRfZWxlbWVudHMpfSBr4bq/dCBxdeG6oyBn4bujaSDDvSIpCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ2xpY2sgdsOgbyBlbGVtZW50IMSR4bqndSB0acOqbiAodGjGsOG7nW5nIGzDoCBzdWdnZXN0aW9uIMSR4bqndSB0acOqbikKICAgICAgICAgICAgICAgICAgICAgICAgIyBDbGljayB2w6BvIGVsZW1lbnQgbmfhuqt1IG5oacOqbgogICAgICAgICAgICAgICAgICAgICAgICByYW5kb21fZWxlbWVudCA9IHJhbmRvbS5jaG9pY2UodHV4X3RleHRfZWxlbWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihyYW5kb21fZWxlbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfZW50ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFNjcm9sbCBr4bq/dCBxdeG6oyBzZWFyY2ggLSB0aGF5IHN3aXBlX2Rvd24gYuG6sW5nIHN3aXBlX3VwCiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsX2NvdW50ID0gcmFuZG9tLnJhbmRpbnQoMSwgOCkKICAgICAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZShzY3JvbGxfY291bnQpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxLCAyKSkKICAgICAgICAgICAgICAgICAgICAgICAgIyBSYW5kb20gNTAlIHRhcCB2w6BvIGFuZHJvaWQud2lkZ2V0LkdyaWRWaWV3IHbDoCBk4burbmcgdOG7qyAxMC0zMHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC41OiAgIyA1MCUgcHJvYmFiaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRfdmlldyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5HcmlkVmlldyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBncmlkX3ZpZXc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiUmFuZG9tIHRhcCB2w6BvIEdyaWRWaWV3Li4uIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoZ3JpZF92aWV3KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRfdGltZSA9IHJhbmRvbS5yYW5kaW50KDEwLCAzMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiROG7q25nIHt3YWl0X3RpbWV9cyBzYXUga2hpIHRhcCBHcmlkVmlldyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhaXRfdGltZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIEZhbGxiYWNrCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMTAsIDMwKSkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBwZXJmb3JtX3NlYXJjaF9hY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICMgQVBQIE1BTkFHRU1FTlQgSU1QTEVNRU5UQVRJT04gKEFCU1RSQUNUIE1FVEhPRFMgRlJPTSBCQVNFKQogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBkZWYgb3Blbl9hcHAoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiJN4bufIFRpa1RvayBhcHAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBhcHAgxJHDoyBt4bufIGNoxrBhCiAgICAgICAgICAgIGN1cnJlbnRfcGFja2FnZSA9IHNlbGYuaGVscGVyLmdldF9jdXJyZW50X3BhY2thZ2UoKQogICAgICAgICAgICByZXR1cm4gY3VycmVudF9wYWNrYWdlID09IHNlbGYuYXBwX3BhY2thZ2UKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIG9wZW5fYXBwOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fbGl2ZV9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQWN0aW9uIHJpw6puZyBj4bunYSBUaWtUb2s6IFhlbSBsaXZlc3RyZWFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJYZW0gbGl2ZXN0cmVhbSBUaWtUb2sgY2hvIHt1c2VybmFtZX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28g4bufIGhvbWUgc2NyZWVuCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHRo4buDIMSR4bqjbSBi4bqjbyBob21lIHNjcmVlbiIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSB2w6AgY2xpY2sgdsOgbyB0YWIgTElWRSBu4bq/dSBjw7MKICAgICAgICAgICAgbGl2ZV90YWJfZm91bmQgPSBGYWxzZQogICAgICAgICAgICBsaXZlX3NlbGVjdG9ycyA9IFsKICAgICAgICAgICAgICAgIHsidGV4dCI6ICJMSVZFIn0sCiAgICAgICAgICAgICAgICB7InRleHQiOiAiTGl2ZSJ9LAogICAgICAgICAgICAgICAgeyJjb250ZW50X2Rlc2MiOiAiTElWRSJ9LAogICAgICAgICAgICAgICAgeyJjb250ZW50X2Rlc2MiOiAiTGl2ZSJ9CiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBzZWxlY3RvciBpbiBsaXZlX3NlbGVjdG9yczoKICAgICAgICAgICAgICAgIGlmIHNlbGYuaGVscGVyLndhaXRfZm9yX2VsZW1lbnQoKipzZWxlY3RvciwgdGltZW91dD0zKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5jbGlja19lbGVtZW50KCoqc2VsZWN0b3IpCiAgICAgICAgICAgICAgICAgICAgbGl2ZV90YWJfZm91bmQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBjbGljayB2w6BvIHRhYiBMSVZFIikKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGxpdmVfdGFiX2ZvdW5kOgogICAgICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgdGFiIExJVkUsIHNjcm9sbCBkb3duIMSR4buDIHTDrG0gbGl2ZXN0cmVhbSB0cm9uZyBGb3IgWW91CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIExJVkUsIHTDrG0gbGl2ZXN0cmVhbSB0cm9uZyBGb3IgWW91IikKICAgICAgICAgICAgICAgIHNjcm9sbF9hdHRlbXB0cyA9IDAKICAgICAgICAgICAgICAgIG1heF9zY3JvbGxzID0gNQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aGlsZSBzY3JvbGxfYXR0ZW1wdHMgPCBtYXhfc2Nyb2xsczoKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBsaXZlIGluZGljYXRvciBraMO0bmcgKGThuqV1IGhp4buHdSBsaXZlc3RyZWFtKQogICAgICAgICAgICAgICAgICAgIGxpdmVfaW5kaWNhdG9ycyA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyJ0ZXh0IjogIkxJVkUifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyJjb250ZW50X2Rlc2MiOiAiTElWRSJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7InRleHQiOiAixJFhbmcgcGjDoXQgdHLhu7FjIHRp4bq/cCJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7InRleHQiOiAidmlld2VycyJ9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvdW5kX2xpdmUgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGZvciBpbmRpY2F0b3IgaW4gbGl2ZV9pbmRpY2F0b3JzOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci53YWl0X2Zvcl9lbGVtZW50KCoqaW5kaWNhdG9yLCB0aW1lb3V0PTEpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRfbGl2ZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlTDrG0gdGjhuqV5IGxpdmVzdHJlYW0gdHJvbmcgRm9yIFlvdSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGZvdW5kX2xpdmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBTY3JvbGwgZG93biDEkeG7gyB0w6xtIHZpZGVvIHRp4bq/cCB0aGVvCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHJhbmRvbS51bmlmb3JtKDIsIDQpKQogICAgICAgICAgICAgICAgICAgIHNjcm9sbF9hdHRlbXB0cyArPSAxCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFhlbSBsaXZlc3RyZWFtIHRyb25nIG3hu5l0IGtob+G6o25nIHRo4budaSBnaWFuIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgd2F0Y2hfZHVyYXRpb24gPSByYW5kb20udW5pZm9ybSgxMCwgMzApICAjIDEwLTMwIGdpw6J5CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJYZW0gbGl2ZXN0cmVhbSB0cm9uZyB7d2F0Y2hfZHVyYXRpb246LjFmfSBnacOieSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPDsyB0aOG7gyB0aOG7sWMgaGnhu4duIG3hu5l0IHPhu5EgdMawxqFuZyB0w6FjIG5o4bq5CiAgICAgICAgICAgIGlmIHJhbmRvbS5yYW5kb20oKSA8IDAuMzogICMgMzAlIGPGoSBo4buZaSB0xrDGoW5nIHTDoWMKICAgICAgICAgICAgICAgIGludGVyYWN0aW9uX2FjdGlvbnMgPSBbCiAgICAgICAgICAgICAgICAgICAgbGFtYmRhOiBzZWxmLmhlbHBlci50YXBfc2NyZWVuKHJhbmRvbS5yYW5kaW50KDIwMCwgODAwKSwgcmFuZG9tLnJhbmRpbnQoNDAwLCA4MDApKSwgICMgVGFwIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgICAgICAgICBsYW1iZGE6IE5vbmUgICMgS2jDtG5nIGzDoG0gZ8OsCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGFjdGlvbiA9IHJhbmRvbS5jaG9pY2UoaW50ZXJhY3Rpb25fYWN0aW9ucykKICAgICAgICAgICAgICAgIGFjdGlvbigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2xlZXAgxJHhu4MgeGVtIGxpdmVzdHJlYW0KICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKHdhdGNoX2R1cmF0aW9uKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkhvw6BuIHRow6BuaCB4ZW0gbGl2ZXN0cmVhbSBUaWtUb2sgY2hvIHt1c2VybmFtZX0iKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHhlbSBsaXZlc3RyZWFtIFRpa1Rvazoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQ==').decode('utf-8'))
