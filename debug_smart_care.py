import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoiIiIKRGVidWcgc2NyaXB0IMSR4buDIGtp4buDbSB0cmEgdOG6oWkgc2FvIFNtYXJ0IENhcmUga2jDtG5nIGNo4bqheQoiIiIKaW1wb3J0IHN5cwppbXBvcnQgb3MKc3lzLnBhdGguYXBwZW5kKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmFic3BhdGgoX19maWxlX18pKSkKCmZyb20gc2VydmljZXMuZGJfc2VydmljZSBpbXBvcnQgRGF0YWJhc2VTZXJ2aWNlCmltcG9ydCBjb25maWcKaW1wb3J0IHRpbWUKCmRlZiBkZWJ1Z19zbWFydF9jYXJlKCk6CiAgICBwcmludCgiPT09IERFQlVHIFNNQVJUIENBUkUgU1lTVEVNID09PSIpCiAgICAKICAgICMgS2jhu59pIHThuqFvIGRhdGFiYXNlCiAgICBkYiA9IERhdGFiYXNlU2VydmljZSgpCiAgICAKICAgICMgMS4gS2nhu4NtIHRyYSBjb25maWcgU21hcnQgQ2FyZQogICAgcHJpbnQoIlxuMS4gU01BUlQgQ0FSRSBDT05GSUc6IikKICAgIGVuYWJsZV9jYXJlID0gZGIuZ2V0X2RldmljZV9jb25maWcoImVuYWJsZV9jYXJlIiwgY29uZmlnLlNNQVJUX0NBUkVfRU5BQkxFRCkKICAgIGNhcmVfaW50ZXJ2YWxfaG91cnMgPSBkYi5nZXRfZGV2aWNlX2NvbmZpZygiY2FyZV9pbnRlcnZhbF9ob3VycyIsIGNvbmZpZy5TTUFSVF9DQVJFX0lOVEVSVkFMX0hPVVJTKQogICAgY2FyZV9jaGFuY2VfcGVyY2VudCA9IGRiLmdldF9kZXZpY2VfY29uZmlnKCJjYXJlX2NoYW5jZV9wZXJjZW50IiwgY29uZmlnLlNNQVJUX0NBUkVfQ0hBTkNFX1BFUkNFTlQpCiAgICAKICAgIHByaW50KGYiICAgZW5hYmxlX2NhcmU6IHtlbmFibGVfY2FyZX0iKQogICAgcHJpbnQoZiIgICBjYXJlX2ludGVydmFsX2hvdXJzOiB7Y2FyZV9pbnRlcnZhbF9ob3Vyc30iKQogICAgcHJpbnQoZiIgICBjYXJlX2NoYW5jZV9wZXJjZW50OiB7Y2FyZV9jaGFuY2VfcGVyY2VudH0iKQogICAgCiAgICBpZiBub3QgZW5hYmxlX2NhcmU6CiAgICAgICAgcHJpbnQoIiAgIOKdjCBTbWFydCBDYXJlIGLhu4sgVOG6rlQhIikKICAgICAgICByZXR1cm4KICAgIAogICAgIyAyLiBLaeG7g20gdHJhIHTDoGkga2hv4bqjbgogICAgcHJpbnQoIlxuMi4gVFLhuqBORyBUSMOBSSBUw4BJIEtIT+G6ok46IikKICAgIGVuYWJsZWRfYXBwcyA9IGRiLmdldF9kZXZpY2VfY29uZmlnKCJlbmFibGVkX2FwcHMiLCBjb25maWcuRU5BQkxFRF9BUFBTKQogICAgcHJpbnQoZiIgICBFbmFibGVkIGFwcHM6IHtlbmFibGVkX2FwcHN9IikKICAgIAogICAgY2FyZV9jYW5kaWRhdGVzID0gW10KICAgIGFsbF9hY2NvdW50cyA9IFtdCiAgICAKICAgIGZvciBhcHBfbmFtZSBpbiBlbmFibGVkX2FwcHM6CiAgICAgICAgYWNjb3VudHMgPSBkYi5nZXRfYWNjb3VudHMoYXBwPWFwcF9uYW1lKQogICAgICAgIHByaW50KGYiXG4gICB7YXBwX25hbWUudXBwZXIoKX0gYWNjb3VudHM6IikKICAgICAgICAKICAgICAgICBmb3IgYWNjb3VudCBpbiBhY2NvdW50czoKICAgICAgICAgICAgdXNlcm5hbWUgPSBhY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJywgJ1Vua25vd24nKQogICAgICAgICAgICBzdGF0dXMgPSBhY2NvdW50LmdldCgnc3RhdHVzJywgJ3Vua25vd24nKQogICAgICAgICAgICBpc19sb2dpbiA9IGFjY291bnQuZ2V0KCdpc19sb2dpbicsIEZhbHNlKQogICAgICAgICAgICBsYXN0X2NhcmVfdGltZSA9IGFjY291bnQuZ2V0KCdsYXN0X2NhcmVfdGltZScsIDApCiAgICAgICAgICAgIAogICAgICAgICAgICBhbGxfYWNjb3VudHMuYXBwZW5kKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgICAgICBwcmludChmIiAgICAgLSB7dXNlcm5hbWV9OiBzdGF0dXM9e3N0YXR1c30sIGxvZ2luPXtpc19sb2dpbn0iKQogICAgICAgICAgICBwcmludChmIiAgICAgICBsYXN0X2NhcmU6IHtsYXN0X2NhcmVfdGltZX0gKHt0aW1lLnRpbWUoKSAtIGxhc3RfY2FyZV90aW1lOi4xZn1zIGFnbykiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBMb2dpYyBt4bubaTogY2FyZSBpbmFjdGl2ZSBhY2NvdW50cyBob+G6t2MgbG9nZ2VkLWluIGFjY291bnRzIGtow7RuZyB0aOG7gyBsw6BtIGpvYgogICAgICAgICAgICBpZiBzdGF0dXMgaW4gWyJhY3RpdmUiLCAid2FpdGluZyIsICJpbmFjdGl2ZSJdOgogICAgICAgICAgICAgICAgaWYgc3RhdHVzID09ICJpbmFjdGl2ZSIgb3IgKGlzX2xvZ2luIGFuZCBzdGF0dXMgaW4gWyJ3YWl0aW5nIiwgImFjdGl2ZSJdKToKICAgICAgICAgICAgICAgICAgICBjYXJlX2NhbmRpZGF0ZXMuYXBwZW5kKGFjY291bnQpCiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gImluYWN0aXZlIiBpZiBzdGF0dXMgPT0gImluYWN0aXZlIiBlbHNlICJsb2dpbiBidXQgY2FuJ3QgcnVuIGpvYiIKICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgICAgICDinIUgQ0FORElEQVRFIGZvciBjYXJlICh7cmVhc29ufSkiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIiAgICAgICDinYwgTk9UIGNhbmRpZGF0ZTogc3RhdHVzPXtzdGF0dXN9LCBsb2dpbj17aXNfbG9naW59IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYiICAgICAgIOKdjCBOT1QgY2FuZGlkYXRlOiBpbnZhbGlkIHN0YXR1cz17c3RhdHVzfSIpCiAgICAKICAgIHByaW50KGYiXG4gICDwn5OKIFRvdGFsIGFjY291bnRzOiB7bGVuKGFsbF9hY2NvdW50cyl9IikKICAgIHByaW50KGYiICAg8J+TiiBDYXJlIGNhbmRpZGF0ZXM6IHtsZW4oY2FyZV9jYW5kaWRhdGVzKX0iKQogICAgCiAgICBpZiBub3QgY2FyZV9jYW5kaWRhdGVzOgogICAgICAgIHByaW50KCIgICDinYwgS0jDlE5HIEPDkyBUw4BJIEtIT+G6ok4gTsOATyBDQU5ESURBVEUgQ0hPIENBUkUhIikKICAgICAgICByZXR1cm4KICAgIAogICAgIyAzLiBLaeG7g20gdHJhIMSRaeG7gXUga2nhu4duIGNhcmUgY2hvIHThu6tuZyBjYW5kaWRhdGUKICAgIHByaW50KCJcbjMuIEtJ4buCTSBUUkEgxJBJ4buAVSBLSeG7hk4gQ0FSRToiKQogICAgY3VycmVudF90aW1lID0gdGltZS50aW1lKCkKICAgIGNhcmVfaW50ZXJ2YWxfc2Vjb25kcyA9IGNhcmVfaW50ZXJ2YWxfaG91cnMgKiAzNjAwCiAgICAKICAgIGZvciBhY2NvdW50IGluIGNhcmVfY2FuZGlkYXRlczoKICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpCiAgICAgICAgbGFzdF9jYXJlX3RpbWUgPSBhY2NvdW50LmdldCgnbGFzdF9jYXJlX3RpbWUnLCAwKQogICAgICAgIHRpbWVfc2luY2VfY2FyZSA9IGN1cnJlbnRfdGltZSAtIGxhc3RfY2FyZV90aW1lCiAgICAgICAgCiAgICAgICAgcHJpbnQoZiJcbiAgIHt1c2VybmFtZX06IikKICAgICAgICBwcmludChmIiAgICAgTGFzdCBjYXJlOiB7dGltZV9zaW5jZV9jYXJlOi4xZn1zIGFnbyIpCiAgICAgICAgcHJpbnQoZiIgICAgIFJlcXVpcmVkIGludGVydmFsOiB7Y2FyZV9pbnRlcnZhbF9zZWNvbmRzfXMgKHtjYXJlX2ludGVydmFsX2hvdXJzfWgpIikKICAgICAgICAKICAgICAgICBpZiB0aW1lX3NpbmNlX2NhcmUgPj0gY2FyZV9pbnRlcnZhbF9zZWNvbmRzOgogICAgICAgICAgICBwcmludChmIiAgICAg4pyFIMSQ4bumIFRI4bucSSBHSUFOIGNhcmUgKOKJpXtjYXJlX2ludGVydmFsX2hvdXJzfWgpIikKICAgICAgICBlbHNlOgogICAgICAgICAgICByZW1haW5pbmdfdGltZSA9IGNhcmVfaW50ZXJ2YWxfc2Vjb25kcyAtIHRpbWVfc2luY2VfY2FyZQogICAgICAgICAgICBwcmludChmIiAgICAg4p2MIENIxq9BIMSQ4bumIFRI4bucSSBHSUFOLCBjw7JuIHtyZW1haW5pbmdfdGltZTouMWZ9cyAoe3JlbWFpbmluZ190aW1lLzM2MDA6LjFmfWgpIikKICAgICAgICAKICAgICAgICAjIEdp4bqjIGzhuq1wIHJhbmRvbSBjaGFuY2UKICAgICAgICBwcmludChmIiAgICAgUmFuZG9tIGNoYW5jZToge2NhcmVfY2hhbmNlX3BlcmNlbnR9JSAoaWRsZSBjb250ZXh0KSIpCiAgICAKICAgICMgNC4gS2nhu4NtIHRyYSBwcm94eQogICAgcHJpbnQoIlxuNC4gUFJPWFkgQ09ORklHOiIpCiAgICB1c2VfcHJveHkgPSBkYi5nZXRfZGV2aWNlX2NvbmZpZygidXNlX3Byb3h5IiwgRmFsc2UpCiAgICBwcm94eV9zZXJ2ZXIgPSBkYi5nZXRfZGV2aWNlX2NvbmZpZygicHJveHlfc2VydmVyIiwgIiIpCiAgICAKICAgIHByaW50KGYiICAgdXNlX3Byb3h5OiB7dXNlX3Byb3h5fSIpCiAgICBwcmludChmIiAgIHByb3h5X3NlcnZlcjogJ3twcm94eV9zZXJ2ZXJ9JyIpCiAgICAKICAgIGlmIHVzZV9wcm94eSBhbmQgbm90IHByb3h5X3NlcnZlcjoKICAgICAgICBwcmludCgiICAg4p2MIFBST1hZIELhuq5UIEJV4buYQyBOSMavTkcgQ0jGr0EgQ+G6pFUgSMOMTkghIikKICAgIGVsaWYgdXNlX3Byb3h5OgogICAgICAgIHByaW50KGYiICAg4pyFIFByb3h5IGNvbmZpZ3VyZWQ6IHtwcm94eV9zZXJ2ZXJ9IikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIiAgIOKchSBLaMO0bmcgecOqdSBj4bqndSBwcm94eSIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgZGVidWdfc21hcnRfY2FyZSgpCg==').decode('utf-8'))
