import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdCwgT3B0aW9uYWwsIENhbGxhYmxlCmZyb20gYWJjIGltcG9ydCBBQkMsIGFic3RyYWN0bWV0aG9kCmltcG9ydCB1dGlscwpmcm9tIHV0aWxzIGltcG9ydCBMb2dMZXZlbCwgTG9nZ2VyCmltcG9ydCB1cmxsaWIucGFyc2UKaW1wb3J0IHJhbmRvbQppbXBvcnQgY29uZmlnCiMgVOG6oW8gbG9nZ2VyIGNobyBCYXNlSm9iCmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoIkJhc2VKb2IiKQoKY2xhc3MgQmFzZUpvYihBQkMpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRiX3NlcnZpY2UsIGhlbHBlcl9zZXJ2aWNlLCBnb2xpa2Vfc2VydmljZT1Ob25lKToKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyID0gaGVscGVyX3NlcnZpY2UKICAgICAgICBzZWxmLmdvbGlrZV9zZXJ2aWNlID0gZ29saWtlX3NlcnZpY2UKICAgICAgICBzZWxmLmFwcF9wYWNrYWdlID0gIiIKICAgICAgICBzZWxmLmFwcF9uYW1lID0gIiIKICAgICAgICAjIEjDoG0gc2xlZXAgbeG6t2MgxJHhu4tuaCBsw6AgdGltZS5zbGVlcAogICAgICAgIHNlbGYuX3NsZWVwX2Z1bmMgPSB0aW1lLnNsZWVwCiAgICAgICAgIyBU4bqhbyBsb2dnZXIgY2hvIGluc3RhbmNlIGPhu6UgdGjhu4MKICAgICAgICBzZWxmLmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoZiJKb2Iue3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgCiAgICAgICAgIyBQcm94eSBzZXJ2aWNlIHPhur0gxJHGsOG7o2Mgc2V0IHNhdSBraGkga2jhu59pIHThuqFvCiAgICAgICAgc2VsZi5wcm94eV9zZXJ2aWNlID0gTm9uZQogICAgICAgIAogICAgICAgICMgQXBwLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24gY2FjaGUKICAgICAgICBzZWxmLl9hcHBfY29uZmlnX2NhY2hlID0gTm9uZQogICAgICAgIHNlbGYuX2NvbmZpZ19jYWNoZV90aW1lID0gMAogICAgICAgIHNlbGYuX2NvbmZpZ19jYWNoZV90dGwgPSAzMDAgICMgQ2FjaGUgNSBwaMO6dAogICAgICAgIAogICAgICAgICMgRGVmYXVsdCBjb25maWcgY2hvIGFwcCAoY8OzIHRo4buDIG92ZXJyaWRlIHRyb25nIHN1YmNsYXNzKQogICAgICAgIHNlbGYuX2RlZmF1bHRfY29uZmlnID0gewogICAgICAgICAgICAiYWN0aW9uX3dlaWdodHMiOiB7CiAgICAgICAgICAgICAgICAibmV3c2ZlZWQiOiAxNSwgICAgICAjIDE1JSB2deG7kXQgbmV3c2ZlZWQvYuG6o25nIHRpbgogICAgICAgICAgICAgICAgInJlZWxzIjogMjAsICAgICAgICAgIyAyMCUgeGVtIHJlZWxzL3ZpZGVvCiAgICAgICAgICAgICAgICAibm90aWZpY2F0aW9uIjogMTAsICAgIyAxMCUgeGVtIHRow7RuZyBiw6FvCiAgICAgICAgICAgICAgICAicHJvZmlsZSI6IDE1LCAgICAgICAjIDE1JSB4ZW0gcHJvZmlsZQogICAgICAgICAgICAgICAgImpvYiI6IDIwLCAgICAgICAgICAgIyAyMCUgbMOgbSBqb2IKICAgICAgICAgICAgICAgICJleHBsb3JlIjogNSwgICAgICAgICMgNSUga2jDoW0gcGjDoQogICAgICAgICAgICAgICAgInNlYXJjaCI6IDE1ICAgICAgICAgIyAxNSUgdMOsbSBraeG6v20KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1pbl9hY3Rpb25zX3Blcl9zZXNzaW9uIjogNSwgICAgICAgICAjIFThu5FpIHRoaeG7g3UgYWN0aW9ucyBt4buXaSBzZXNzaW9uCiAgICAgICAgICAgICJtYXhfc2Vzc2lvbl9kdXJhdGlvbl9taW51dGVzIjogMzAsICAgIyBUaOG7nWkgZ2lhbiB04buRaSDEkWEgbeG7l2kgc2Vzc2lvbiAocGjDunQpCiAgICAgICAgICAgICJhY3Rpb25fZGVsYXlfbWluIjogMywgICAgICAgICAgICAgICAgIyBEZWxheSB04buRaSB0aGnhu4N1IGdp4buvYSBhY3Rpb25zIChnacOieSkKICAgICAgICAgICAgImFjdGlvbl9kZWxheV9tYXgiOiAxMCAgICAgICAgICAgICAgICAjIERlbGF5IHThu5FpIMSRYSBnaeG7r2EgYWN0aW9ucyAoZ2nDonkpCiAgICAgICAgfQogICAgICAgIAogICAgZGVmIHNldF9wcm94eV9zZXJ2aWNlKHNlbGYsIHByb3h5X3NlcnZpY2UpOgogICAgICAgICIiIgogICAgICAgIFRoaeG6v3QgbOG6rXAgcHJveHkgc2VydmljZSBjaG8gam9iIGhhbmRsZXIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwcm94eV9zZXJ2aWNlOiBQcm94eVNlcnZpY2UgaW5zdGFuY2UKICAgICAgICAiIiIKICAgICAgICBzZWxmLnByb3h5X3NlcnZpY2UgPSBwcm94eV9zZXJ2aWNlCiAgICAgICAgCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4siIiIKICAgICAgICBwYXNzCgogICAgICAgIAogICAgZGVmIHN5bmNfYWNjb3VudHNfdG9fZGIoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgxJDhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iyB2w6BvIGRhdGFiYXNlIHbDoCBtYXAgduG7m2kgdMOgaSBraG/huqNuIEdvTGlrZQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHMgPSBzZWxmLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGRldmljZV9pZCB04burIGRhdGFiYXNlCiAgICAgICAgICAgIGFuZHJvaWRfaWQgPSBzZWxmLmRiLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gaGnhu4duIGPDsyB0cm9uZyBEQiBjaG8gYXBwIG7DoHkKICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9c2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gc2V0IGPDoWMgdW5pcXVlX3VzZXJuYW1lIHThu6sgdGhp4bq/dCBi4buLIMSR4buDIGThu4Ugc28gc8OhbmgKICAgICAgICAgICAgZGV2aWNlX3VzZXJuYW1lcyA9IHNldCgpCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfdXNlcm5hbWVzLmFkZCh1c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gdHJvbmcgREIgbcOgIGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iyAtPiDEkcOhbmggZOG6pXUgbG9nb3V0CiAgICAgICAgICAgIGZvciBleGlzdGluZ19hY2NvdW50IGluIGV4aXN0aW5nX2FjY291bnRzOgogICAgICAgICAgICAgICAgZXhpc3RpbmdfdXNlcm5hbWUgPSBleGlzdGluZ19hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX3VzZXJuYW1lIGFuZCBleGlzdGluZ191c2VybmFtZSBub3QgaW4gZGV2aWNlX3VzZXJuYW1lczoKICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiBjw7MgdHJvbmcgREIgbmjGsG5nIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIC0+IGxvZ291dAogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nX2FjY291bnQuZ2V0KCJzdGF0dXMiKSAhPSAibG9nb3V0IjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlTDoGkga2hv4bqjbiB7ZXhpc3RpbmdfdXNlcm5hbWV9IGtow7RuZyBjw7JuIHRyw6puIHRoaeG6v3QgYuG7iywgxJHDoW5oIGThuqV1IGxvZ291dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoZXhpc3RpbmdfYWNjb3VudFsiaWQiXSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJsb2dvdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImluYWN0aXZlX3JlYXNvbiI6ICJUw6BpIGtob+G6o24ga2jDtG5nIGPDsm4gdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IGhv4bq3YyB0aMOqbSBt4bubaSB2w6BvIERCCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgICMgVGjDqm0gdGjDtG5nIHRpbiBhcHAgdsOgIGRldmljZV9pZAogICAgICAgICAgICAgICAgYWNjb3VudFsiYXBwIl0gPSBzZWxmLmFwcF9uYW1lCiAgICAgICAgICAgICAgICBhY2NvdW50WyJkZXZpY2VfaWQiXSA9IGFuZHJvaWRfaWQKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IGzDoCBjaMawYSDEkeG7k25nIGLhu5kgxJHhu4MgZ+G7rWkgbMOqbiBzZXJ2ZXIKICAgICAgICAgICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0w6BpIGtob+G6o24gxJHDoyB04buTbiB04bqhaSBjaMawYSBk4buxYSB2w6BvIHVuaXF1ZV91c2VybmFtZSArIGFwcAogICAgICAgICAgICAgICAgZXhpc3RpbmdfYWNjb3VudCA9IHNlbGYuZGIuZ2V0X2FjY291bnRfYnlfdW5pcXVlX3VzZXJuYW1lKHNlbGYuYXBwX25hbWUsIGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgZXhpc3RpbmdfYWNjb3VudDoKICAgICAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24gaGnhu4duIGPDsyAtIGNo4buJIMSR4buTbmcgYuG7mSB0cuG6oW5nIHRow6FpIGxvZ2luL2xvZ291dAogICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBleGlzdGluZ19hY2NvdW50WyJpZCJdCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaHXhuqluIGLhu4sgZOG7ryBsaeG7h3UgY+G6rXAgbmjhuq10IHThu5FpIHRoaeG7g3UKICAgICAgICAgICAgICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImlzX2xvZ2luIjogYWNjb3VudC5nZXQoImlzX2xvZ2luIiwgRmFsc2UpLAogICAgICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBhY2NvdW50LmdldCgibGFzdF91cGRhdGUiLCBpbnQodGltZS50aW1lKCkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgdMOgaSBraG/huqNuIHRyb25nIERCIMSRYW5nIOG7nyB0cuG6oW5nIHRow6FpIGxvZ291dCBuaMawbmcgeHXhuqV0IGhp4buHbiBs4bqhaSB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICBpZiBleGlzdGluZ19hY2NvdW50LmdldCgic3RhdHVzIikgPT0gImxvZ291dCI6CiAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzZXQgdOG7qyBsb2dvdXQgduG7gSBhY3RpdmUgdsOgIHjDs2EgaW5hY3RpdmVfcmVhc29uCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhWyJzdGF0dXMiXSA9ICJhY3RpdmUiCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhWyJpbmFjdGl2ZV9yZWFzb24iXSA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gxJHDoyB4deG6pXQgaGnhu4duIGzhuqFpIHRyw6puIHRoaeG6v3QgYuG7iywgcmVzZXQgdOG7qyBsb2dvdXQgduG7gSBhY3RpdmUiKQogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgxJHDoyBhY3RpdmUgdGjDrCBnaeG7ryBuZ3V5w6puIHN0YXR1cywga2jDtG5nIHRoYXkgxJHhu5VpIGfDrCBraMOhYwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHEg25nIG5o4bqtcCBjaG8gdMOgaSBraG/huqNuIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IHRyb25nIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgVGjDqm0gdMOgaSBraG/huqNuIG3hu5tpIHbhu5tpIHRy4bqhbmcgdGjDoWkgYWN0aXZlCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsic3RhdHVzIl0gPSAiYWN0aXZlIgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGIuYWRkX2FjY291bnQoYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB0aMOqbSB0w6BpIGtob+G6o24gbeG7m2kge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFNhdSBraGkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iywgdGjhu7FjIGhp4buHbiBtYXBwaW5nIHbhu5tpIEdvTGlrZQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQuG6r3QgxJHhuqd1IG1hcHBpbmcgdMOgaSBraG/huqNuIHtzZWxmLmFwcF9uYW1lfSB24bubaSBHb0xpa2UuLi4iKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIEdvTGlrZQogICAgICAgICAgICAgICAgZ29saWtlX2FjY291bnRzID0gc2VsZi5nZXRfZ29saWtlX2FjY291bnRzKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgZ29saWtlX2FjY291bnRzOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6xtIHRo4bqleSB7bGVuKGdvbGlrZV9hY2NvdW50cyl9IHTDoGkga2hv4bqjbiBHb0xpa2UgY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiDEkcOjIGPhuq1wIG5o4bqtdCB04burIERCCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9kZXZpY2VfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9c2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFRo4buxYyBoaeG7h24gbWFwcGluZwogICAgICAgICAgICAgICAgICAgIG1hcHBlZF9jb3VudCA9IHNlbGYubWFwX2dvbGlrZV9hY2NvdW50cyhnb2xpa2VfYWNjb3VudHMsIHVwZGF0ZWRfZGV2aWNlX2FjY291bnRzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UobWFwcGVkX2NvdW50LCBpbnQpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBtYXBwaW5nIHttYXBwZWRfY291bnR9IHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0gduG7m2kgR29MaWtlIikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiSG/DoG4gdGjDoG5oIG1hcHBpbmcgdMOgaSBraG/huqNuIHtzZWxmLmFwcF9uYW1lfSB24bubaSBHb0xpa2UiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiBHb0xpa2UgbsOgbyBjaG8ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSBtYXBwaW5nIHbhu5tpIEdvTGlrZToge2V9IikKICAgICAgICAgICAgICAgICMgS2jDtG5nIHRocm93IGV4Y2VwdGlvbiB2w6wgc3luYyB0w6BpIGtob+G6o24gdOG7qyB0aGnhur90IGLhu4sgxJHDoyB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZGV2aWNlX2FjY291bnRzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgxJHhu5NuZyBi4buZIHTDoGkga2hv4bqjbiB7c2VsZi5hcHBfbmFtZX0iKQogICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgCiAgICBkZWYgaXNfZ29saWtlX2F1dGhlbnRpY2F0ZWQoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSDEkcOjIGPDsyB0aMO0bmcgdGluIHjDoWMgdGjhu7FjIEdvTGlrZSBjaMawYQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJHDoyB4w6FjIHRo4buxYywgRmFsc2UgbuG6v3UgY2jGsGEKICAgICAgICAiIiIKICAgICAgICBnb2xpa2VfaGVhZGVycyA9IHNlbGYuZGIuZ2V0KCJnb2xpa2VfaGVhZGVycyIsIHt9KQogICAgICAgIHJldHVybiBib29sKGdvbGlrZV9oZWFkZXJzIGFuZCAiYXV0aG9yaXphdGlvbiIgaW4gZ29saWtlX2hlYWRlcnMpCiAgICAKICAgIGRlZiBhcGlfcmVxdWVzdChzZWxmLCB1cmw6IHN0ciwgbWV0aG9kOiBzdHIgPSAiR0VUIiwgcGF5bG9hZDogRGljdFtzdHIsIEFueV0gPSBOb25lKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgR+G7jWkgQVBJIEdvTGlrZSB0aMO0bmcgcXVhIEdvTGlrZVNlcnZpY2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1cmw6IFVSTCBj4bunYSBBUEkKICAgICAgICAgICAgbWV0aG9kOiBQaMawxqFuZyB0aOG7qWMgSFRUUCAoR0VUIGhv4bq3YyBQT1NUKQogICAgICAgICAgICBwYXlsb2FkOiBE4buvIGxp4buHdSBn4butaSDEkWkgKGNobyBQT1NUIHJlcXVlc3QpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3QgaG/hurdjIE5vbmU6IEvhur90IHF14bqjIEFQSSBu4bq/dSB0aMOgbmggY8O0bmcsIE5vbmUgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHNlbGYuZ29saWtlX3NlcnZpY2U6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGfhu41pIEFQSTogR29MaWtlU2VydmljZSBjaMawYSDEkcaw4bujYyBjdW5nIGPhuqVwIGNobyB7c2VsZi5hcHBfbmFtZX0gam9iIikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgIyBY4butIGzDvSBwYXlsb2FkIGNobyBHRVQgcmVxdWVzdCAtIHRow6ptIHbDoG8gVVJMCiAgICAgICAgaWYgbWV0aG9kLnVwcGVyKCkgPT0gIkdFVCIgYW5kIHBheWxvYWQ6CiAgICAgICAgICAgICMgVOG6oW8gcXVlcnkgc3RyaW5nIHThu6sgcGF5bG9hZAogICAgICAgICAgICBxdWVyeV9wYXJhbXMgPSBbXQogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBwYXlsb2FkLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICBxdWVyeV9wYXJhbXMuYXBwZW5kKGYie3VybGxpYi5wYXJzZS5xdW90ZShrZXkpfT17dXJsbGliLnBhcnNlLnF1b3RlKHN0cih2YWx1ZSkpfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIHF1ZXJ5IHN0cmluZyB2w6BvIFVSTAogICAgICAgICAgICBpZiBxdWVyeV9wYXJhbXM6CiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSAiJiIgaWYgIj8iIGluIHVybCBlbHNlICI/IgogICAgICAgICAgICAgICAgdXJsID0gZiJ7dXJsfXtzZXBhcmF0b3J9eycmJy5qb2luKHF1ZXJ5X3BhcmFtcyl9IgogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6t3QgcGF5bG9hZCB24buBIE5vbmUgdsOsIMSRw6MgxJHGsGEgdsOgbyBVUkwKICAgICAgICAgICAgcGF5bG9hZCA9IE5vbmUKICAgICAgICAKICAgICAgICByZXR1cm4gc2VsZi5nb2xpa2Vfc2VydmljZS5hcGlfcmVxdWVzdCh1cmwsIG1ldGhvZCwgcGF5bG9hZCkKICAgIAogICAgZGVmIGdldF9nb2xpa2VfYWNjb3VudHMoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gxJHDoyDEkcSDbmcga8O9IHbhu5tpIEdvTGlrZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBHb0xpa2UKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDGsOG7nW5nIGThuqtuIEFQSSBs4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICB1cmwgPSBmIntzZWxmLmdldF9hY2NvdW50X3VybCgpfSIKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdCh1cmwpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2UuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgYWNjb3VudHMgPSByZXNwb25zZS5nZXQoImRhdGEiLCBbXSkKICAgICAgICAgICAgICAgIHJldHVybiBhY2NvdW50cwogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiBHb0xpa2UiKQogICAgICAgICAgICByZXR1cm4gW10KICAgIAogICAgZGVmIG1hcF9nb2xpa2VfYWNjb3VudHMoc2VsZiwgZ29saWtlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSwgZGV2aWNlX2FjY291bnRzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgw4FuaCB44bqhIHTDoGkga2hv4bqjbiB04burIEdvTGlrZSB2w6BvIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBnb2xpa2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHThu6sgR29MaWtlIEFQSQogICAgICAgICAgICBkZXZpY2VfYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gxJHDoyDDoW5oIHjhuqEKICAgICAgICAiIiIKICAgICAgICAjIFBoxrDGoW5nIHRo4bupYyBt4bq3YyDEkeG7i25oLCBj4bqnbiBvdmVycmlkZSDhu58gbOG7m3AgY29uCiAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBmZXRjaF9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aMO0bmcgdGluIGpvYiB04burIEdvTGlrZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3QgaG/hurdjIE5vbmU6IFRow7RuZyB0aW4gam9iIG7hur91IGPDsywgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQxrDhu51uZyBk4bqrbiBBUEkgbOG6pXkgam9iCiAgICAgICAgICAgIHVybCA9IGYie3NlbGYuZ2V0X2pvYnNfdXJsKCl9IgogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaGFtIHPhu5EgdMO5eSB0aGVvIGxv4bqhaSBhcHAKICAgICAgICAgICAgcGFyYW1zID0gc2VsZi5nZXRfam9iX3BhcmFtcyhhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buNaSBBUEkKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLmFwaV9yZXF1ZXN0KHVybCwgIkdFVCIsIHBhcmFtcykKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICBqb2IgPSByZXNwb25zZS5nZXQoImRhdGEiLCBOb25lKQogICAgICAgICAgICAgICAgaWYgam9iOgogICAgICAgICAgICAgICAgICAgICMgQ2h14bqpbiBow7NhIGThu68gbGnhu4d1IGpvYgogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLm1hcF9qb2JfZGF0YShqb2IpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgam9iIikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgZGVmIG1hcF9qb2JfZGF0YShzZWxmLCBqb2JfZGF0YTogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSBqb2IgdOG7qyBBUEkKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBqb2JfZGF0YTogROG7ryBsaeG7h3Ugam9iIHThu6sgQVBJCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBE4buvIGxp4buHdSBqb2IgxJHDoyBjaHXhuqluIGjDs2EKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiYXBwIjogc2VsZi5hcHBfbmFtZSwKICAgICAgICAgICAgImlkIjogam9iX2RhdGEuZ2V0KCJpZCIpLAogICAgICAgICAgICAibGluayI6IGpvYl9kYXRhLmdldCgibGluayIpLAogICAgICAgICAgICAidHlwZSI6IGpvYl9kYXRhLmdldCgidHlwZSIpLAogICAgICAgICAgICAib2JqZWN0X2lkIjogam9iX2RhdGEuZ2V0KCJvYmplY3RfaWQiKSwKICAgICAgICAgICAgInByaWNlX2FmdGVyX2Nvc3QiOiBqb2JfZGF0YS5nZXQoInByaWNlX2FmdGVyX2Nvc3QiKSwKICAgICAgICAgICAgInN0YXR1cyI6ICJpZGxlIiwgICMgU3RhdHVzIG3hurdjIMSR4buLbmggbMOgIGlkbGUKICAgICAgICAgICAgInJhd19kYXRhIjogam9iX2RhdGEgICMgTMawdSBs4bqhaSBk4buvIGxp4buHdSBn4buRYyDEkeG7gyB0aGFtIGto4bqjbyBraGkgY+G6p24KICAgICAgICB9CiAgICAKICAgIGRlZiB2YWxpZGF0ZV9qb2JfYmVmb3JlX2V4ZWN1dGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSB2w6AgdmFsaWRhdGUgam9iIHRyxrDhu5tjIGtoaSB0aOG7sWMgaGnhu4duCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgdmFsaWRhdGlvbjoKICAgICAgICAgICAgICAgIC0gdmFsaWQgKGJvb2wpOiBUcnVlIG7hur91IGpvYiBo4bujcCBs4buHLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAgICAgICAgIC0gc2hvdWxkX3NraXAgKGJvb2wpOiBUcnVlIG7hur91IG7Dqm4gc2tpcCBqb2IsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICAgICAgICAgLSByZWFzb24gKHN0cik6IEzDvSBkbyBraMO0bmcgaOG7o3AgbOG7hyBob+G6t2Mgc2tpcAogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBjaGkgdGnhur90CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBqb2JfdHlwZSA9IGpvYi5nZXQoInR5cGUiLCAiIikubG93ZXIoKQogICAgICAgICAgICBqb2JfcHJpY2UgPSBqb2IuZ2V0KCJwcmljZV9hZnRlcl9jb3N0IiwgMCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBqb2IgZm9sbG93CiAgICAgICAgICAgIGlmIGpvYl90eXBlID09ICJmb2xsb3ciOgogICAgICAgICAgICAgICAgIyAxLiBLaeG7g20gdHJhIGdpw6EgdGnhu4FuIGPhu6dhIGpvYiBmb2xsb3cKICAgICAgICAgICAgICAgIG1pbl9mb2xsb3dfcHJpY2UgPSBzZWxmLmRiLmdldCgibWluX2ZvbGxvd19wcmljZSIsIDMwKSAgIyBN4bq3YyDEkeG7i25oIDMwCiAgICAgICAgICAgICAgICBpZiBqb2JfcHJpY2UgPCBtaW5fZm9sbG93X3ByaWNlOgogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWxpZCI6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAic2hvdWxkX3NraXAiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IGYiSm9iIGZvbGxvdyBjw7MgZ2nDoSB7am9iX3ByaWNlfSA8IHttaW5fZm9sbG93X3ByaWNlfSwgc2tpcCBqb2IuIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDEkMOjIGLhu48ga2nhu4NtIHRyYSBraMOzYSBmb2xsb3cgdsOsIGtow7RuZyBjw7JuIGdp4bubaSBo4bqhbiBmb2xsb3cKICAgICAgICAgICAgCiAgICAgICAgICAgICMgSm9iIGjhu6NwIGzhu4cKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJ2YWxpZCI6IFRydWUsCiAgICAgICAgICAgICAgICAic2hvdWxkX3NraXAiOiBGYWxzZSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogIkpvYiBo4bujcCBs4buHIgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHZhbGlkYXRlIGpvYjoge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgInZhbGlkIjogRmFsc2UsCiAgICAgICAgICAgICAgICAic2hvdWxkX3NraXAiOiBGYWxzZSwKICAgICAgICAgICAgICAgICJyZWFzb24iOiAidmFsaWRhdGlvbl9lcnJvciIsCiAgICAgICAgICAgICAgICAibWVzc2FnZSI6IGYiTOG7l2kga2hpIHZhbGlkYXRlIGpvYjoge3N0cihlKX0iCiAgICAgICAgICAgIH0KICAgIAogICAgZGVmIGV4ZWN1dGVfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iLCBiYW8gZ+G7k206CiAgICAgICAgICAgICAgICAtIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAgICAgMDogQ2jGsGEgdGjhu7FjIGhp4buHbgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgICMgTeG6t2MgxJHhu4tuaCBraMO0bmcgbMOgbSBnw6wsIGPhuqduIG92ZXJyaWRlIOG7nyBs4bubcCBjb24KICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVGjhu7FjIGhp4buHbiBqb2IgY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfSIpCiAgICAgICAgcmV0dXJuIHNlbGYuX2NyZWF0ZV9qb2JfcmVzdWx0KDAsICJDaMawYSB0aOG7sWMgaGnhu4duIGpvYiIsIEZhbHNlKQogICAgCiAgICBkZWYgX2NyZWF0ZV9qb2JfcmVzdWx0KHNlbGYsIHN0YXR1czogaW50LCBtZXNzYWdlOiBzdHIsIHN1Y2Nlc3M6IGJvb2wsICoqa3dhcmdzKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBU4bqhbyBr4bq/dCBxdeG6oyBqb2IgY2h14bqpbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAwOiBDaMawYSB0aOG7sWMgaGnhu4duCiAgICAgICAgICAgICAgICAxOiBUaMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgMzogVGjhuqV0IGLhuqFpLCDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgICAgICA0OiBUaOG6pXQgYuG6oWksIHnDqnUgY+G6p3UgxJFhbmcgY2jhu50KICAgICAgICAgICAgICAgIDU6IEfhu61pIHnDqnUgY+G6p3UgY2jhu50gZHV54buHdCAoSW5zdGFncmFtKQogICAgICAgICAgICBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICAgICAqKmt3YXJnczogQ8OhYyB0aMO0bmcgdGluIGLhu5Ugc3VuZwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgam9iIMSRw6MgY2h14bqpbiBow7NhCiAgICAgICAgIiIiCiAgICAgICAgcmVzdWx0ID0gewogICAgICAgICAgICAic3RhdHVzIjogc3RhdHVzLAogICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICJzdWNjZXNzIjogc3VjY2VzcwogICAgICAgIH0KICAgICAgICAKICAgICAgICAjIFRow6ptIHRow7RuZyB0aW4gYuG7lSBzdW5nIG7hur91IGPDswogICAgICAgIHJlc3VsdC51cGRhdGUoa3dhcmdzKQogICAgICAgIAogICAgICAgIHJldHVybiByZXN1bHQKICAgIAogICAgZGVmIHJlcG9ydF9qb2Ioc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0sIHJlc3VsdDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQsOhbyBjw6FvIGvhur90IHF14bqjIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgcmVzdWx0OiBL4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIGpvYiBiYW8gZ+G7k206CiAgICAgICAgICAgICAgICAtIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAgICAgMTogVGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAgICAgMjogVGjhuqV0IGLhuqFpLCBraMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgICAgICAgICAgMzogVGjhuqV0IGLhuqFpLCDEkcOjIGLhu4sgdW5mb2xsb3cvdW5saWtlCiAgICAgICAgICAgICAgICAtIG1lc3NhZ2UgKHN0cik6IFRow7RuZyBiw6FvIGvhur90IHF14bqjCiAgICAgICAgICAgICAgICAtIHN1Y2Nlc3MgKGJvb2wpOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgYsOhbyBjw6FvIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIsICIiKQogICAgICAgICAgICBqb2Jfc3RhdHVzID0gcmVzdWx0LmdldCgic3RhdHVzIiwgMCkKICAgICAgICAgICAgam9iX3N1Y2Nlc3MgPSByZXN1bHQuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEdoaSBs4bqhaSBs4buLY2ggc+G7rSBqb2IKICAgICAgICAgICAgc2VsZi5yZWNvcmRfam9iX2hpc3RvcnkoYWNjb3VudCwgam9iLCByZXN1bHQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3Qgam9iX2lkOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyBjw7MgSUQgam9iIMSR4buDIGLDoW8gY8OhbyIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBqb2IgdsOgIHjhu60gbMO9IHTGsMahbmcg4bupbmcKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3Ugc3RhdHVzIGzDoCAyIChs4buXaSBraMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nKSwgaOG7p3kgam9iIHbDoCBiw6FvIGPDoW8gdGjhuqV0IGLhuqFpCiAgICAgICAgICAgIGlmIGpvYl9zdGF0dXMgPT0gMjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2Ige2pvYl9pZH0sIGtow7RuZyB0w6xtIHRo4bqleSDEkeG7kWkgdMaw4bujbmcsIGjhu6d5IGpvYiIpCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5za2lwX2pvYihhY2NvdW50LCBqb2IpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHN0YXR1cyBsw6AgNiAoxJHhuqF0IGdp4bubaSBo4bqhbiBob+G6t2MgYuG7iyBraMOzYSksIGjhu6d5IGpvYgogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDY6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiSm9iIHtqb2JfaWR9IGLhu4sgaOG7p3kgZG8gxJHhuqF0IGdp4bubaSBo4bqhbiBob+G6t2MgdMOgaSBraG/huqNuIGLhu4sga2jDs2EiKQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBzdGF0dXMgbMOgIDMgKMSRw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UpLCDEkcOhbmggZOG6pXUgdHJvbmcgcmVzdWx0IMSR4buDIEpvYlNlcnZpY2UgeOG7rSBsw70KICAgICAgICAgICAgaWYgam9iX3N0YXR1cyA9PSAzOgogICAgICAgICAgICAgICAgYWNjb3VudF91c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlBow6F0IGhp4buHbiBi4buLIHVuZm9sbG93L3VubGlrZSwgdMOgaSBraG/huqNuIHthY2NvdW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgSOG7p3kgam9iIGhp4buHbiB04bqhaQogICAgICAgICAgICAgICAgc2VsZi5za2lwX2pvYihhY2NvdW50LCBqb2IpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHVuZm9sbG93IHRyb25nIHJlc3VsdCDEkeG7gyBKb2JTZXJ2aWNlIHjhu60gbMO9IHThuq1wIHRydW5nCiAgICAgICAgICAgICAgICByZXN1bHRbInVuZm9sbG93Il0gPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgam9iX3N0YXR1cyA9PSA0OgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlnDqnUgY+G6p3UgxJFhbmcgY2jhu50gdHJvbmcgam9iIHtqb2JfdHlwZX0sIGjhu6d5IGpvYiIpCiAgICAgICAgICAgICAgICBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBqb2IgdGjDoG5oIGPDtG5nLCBiw6FvIGPDoW8ga+G6v3QgcXXhuqMKICAgICAgICAgICAgaWYgam9iX3N1Y2Nlc3M6CiAgICAgICAgICAgICAgICAjIFVSTCBBUEkgYsOhbyBjw6FvIGpvYgogICAgICAgICAgICAgICAgdXJsID0gc2VsZi5nZXRfY29tcGxldGVfam9ic191cmwoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFThuqFvIHBheWxvYWQgY2hvIGLDoW8gY8OhbyBqb2IKICAgICAgICAgICAgICAgIHBheWxvYWQgPSBzZWxmLmdldF9yZXBvcnRfcGF5bG9hZChhY2NvdW50LCBqb2IpCiAgICAgICAgICAgICAgICBpZiBub3QgcGF5bG9hZDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIHThuqFvIHBheWxvYWQgY2hvIGLDoW8gY8OhbyBqb2IiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRo4butIGfhu41pIEFQSSB04buRaSDEkWEgMyBs4bqnbgogICAgICAgICAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UoMyk6CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLmFwaV9yZXF1ZXN0KHVybCwgIlBPU1QiLCBwYXlsb2FkKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLDoW8gY8OhbyBqb2Ige2pvYl9pZH0gdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN0YXR1cyIpID09IDQwMDoKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbXNnID0gcmVzcG9uc2UuZ2V0KCdtZXNzYWdlJywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiW3thdHRlbXB0ICsgMX1dIELDoW8gY8OhbyBqb2IgbOG7l2k6IHtlcnJvcl9tc2d9LCB0aOG7rSBs4bqhaSBzYXUgNXMuLi4iKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiUGjhuqNuIGjhu5NpIGtow7RuZyBtb25nIMSR4bujaSBraGkgYsOhbyBjw6FvIGpvYjoge3Jlc3BvbnNlfSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDUpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIHRow6BuaCBjw7RuZyBzYXUgMyBs4bqnbiB0aOG7rSwgaOG7p3kgam9iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBiw6FvIGPDoW8gam9iIHtqb2JfaWR9IHNhdSAzIGzhuqduIHRo4butIikKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNraXBfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgSm9iIGtow7RuZyB0aMOgbmggY8O0bmcsIGjhu6d5IGpvYgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkpvYiB7am9iX2lkfSBraMO0bmcgdGjDoG5oIGPDtG5nLCBo4buneSBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBnZXRfcmVwb3J0X3BheWxvYWQoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFThuqFvIHBheWxvYWQgY2hvIHZp4buHYyBiw6FvIGPDoW8gaG/DoG4gdGjDoG5oIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFBheWxvYWQgY2hvIEFQSSBiw6FvIGPDoW8KICAgICAgICAiIiIKICAgICAgICBnb2xpa2VfaWQgPSBhY2NvdW50LmdldCgiZ29saWtlX2lkIikKICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZCBvciBub3Qgam9iX2lkOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiVGhp4bq/dSB0aMO0bmcgdGluIHTDoGkga2hv4bqjbiBob+G6t2Mgam9iIMSR4buDIHThuqFvIHBheWxvYWQgYsOhbyBjw6FvIikKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJhZHNfaWQiOiBqb2JfaWQsCiAgICAgICAgICAgICJhY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiYXN5bmMiOiBUcnVlLAogICAgICAgICAgICAiZGF0YSI6IE5vbmUKICAgICAgICB9CiAgICAKICAgIGRlZiBnZXRfc2tpcF9wYXlsb2FkKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBU4bqhbyBwYXlsb2FkIGNobyB2aeG7h2MgYuG7jyBxdWEvaOG7p3kgam9iCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogUGF5bG9hZCBjaG8gQVBJIHNraXAgam9iCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgam9iX2lkID0gam9iLmdldCgiaWQiKQogICAgICAgIGpvYl90eXBlID0gam9iLmdldCgidHlwZSIpCiAgICAgICAgb2JqZWN0X2lkID0gam9iLmdldCgib2JqZWN0X2lkIikKICAgICAgICAKICAgICAgICBpZiBub3QgZ29saWtlX2lkIG9yIG5vdCBqb2JfaWQ6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJUaGnhur91IHRow7RuZyB0aW4gdMOgaSBraG/huqNuIGhv4bq3YyBqb2IgxJHhu4MgdOG6oW8gcGF5bG9hZCBo4buneSIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAiYWRzX2lkIjogam9iX2lkLAogICAgICAgICAgICAiYWNjb3VudF9pZCI6IGdvbGlrZV9pZCwKICAgICAgICAgICAgIm9iamVjdF9pZCI6IG9iamVjdF9pZCwKICAgICAgICAgICAgInR5cGUiOiBqb2JfdHlwZQogICAgICAgIH0KICAgICAgICAKICAgIGRlZiBza2lwX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBC4buPIHF1YS9o4buneSBqb2IgaGnhu4duIHThuqFpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGjhu6d5IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBVUkwgQVBJIMSR4buDIHNraXAgam9iCiAgICAgICAgICAgIHVybCA9IHNlbGYuZ2V0X3NraXBfam9ic191cmwoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqhbyBwYXlsb2FkIGNobyB2aeG7h2Mgc2tpcCBqb2IKICAgICAgICAgICAgcGF5bG9hZCA9IHNlbGYuZ2V0X3NraXBfcGF5bG9hZChhY2NvdW50LCBqb2IpCiAgICAgICAgICAgIGlmIG5vdCBwYXlsb2FkOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyB04bqhbyBwYXlsb2FkIGNobyBza2lwIGpvYiIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJCiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5hcGlfcmVxdWVzdCh1cmwsICJQT1NUIiwgcGF5bG9hZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN1Y2Nlc3MiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBo4buneSBqb2Ige2pvYi5nZXQoJ2lkJyl9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkjhu6d5IGpvYiB7am9iLmdldCgnaWQnKX0gdGjhuqV0IGLhuqFpOiB7cmVzcG9uc2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBo4buneSBqb2IiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGRlZiBjbG9zZV9hcHAoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgxJDDs25nIGFwcAogICAgICAgICIiIgogICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgZGVmIGdldF9hcGlfYmFzZV91cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBn4buRYyBj4bunYSBBUEkgR29MaWtlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgZ+G7kWMKICAgICAgICAiIiIKICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfSIKICAgIAogICAgZGVmIGdldF9hY2NvdW50X3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSB0w6BpIGtob+G6o24gY+G7p2EgR29MaWtlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIHTDoGkga2hv4bqjbgogICAgICAgICIiIgogICAgICAgIGltcG9ydCBjb25maWcKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0ve3NlbGYuYXBwX25hbWV9LWFjY291bnQiCiAgICAKICAgIGRlZiBnZXRfam9ic191cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgam9icyBj4bunYSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgam9icwogICAgICAgICIiIgogICAgICAgIGltcG9ydCBjb25maWcKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0vYWR2ZXJ0aXNpbmcvcHVibGlzaGVycy97c2VsZi5hcHBfbmFtZX0vam9icyIKICAgIAogICAgZGVmIGdldF9jb21wbGV0ZV9qb2JzX3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBiw6FvIGPDoW8gam9iIGhvw6BuIHRow6BuaCBj4bunYSBHb0xpa2UKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgYsOhbyBjw6FvIGpvYiBob8OgbiB0aMOgbmgKICAgICAgICAiIiIKICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L2FkdmVydGlzaW5nL3B1Ymxpc2hlcnMve3NlbGYuYXBwX25hbWV9L2NvbXBsZXRlLWpvYnMiCiAgICAKICAgIGRlZiBnZXRfc2tpcF9qb2JzX3VybChzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBza2lwIGpvYnMgY+G7p2EgR29MaWtlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIHNraXAgam9icwogICAgICAgICIiIgogICAgICAgIGltcG9ydCBjb25maWcKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0vYWR2ZXJ0aXNpbmcvcHVibGlzaGVycy97c2VsZi5hcHBfbmFtZX0vc2tpcC1qb2JzIgogICAgCiAgICBkZWYgZ2V0X2pvYl9yZXBvcnRfdXJsKHNlbGYsIGpvYl9pZDogc3RyKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgVVJMIEFQSSBiw6FvIGPDoW8gam9iIGPhu6dhIEdvTGlrZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGpvYl9pZDogSUQgY+G7p2Egam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVJMIEFQSSBiw6FvIGPDoW8gam9iCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IGNvbmZpZwogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0vam9icy97am9iX2lkfS9yZXBvcnQiCiAgICAKICAgIGRlZiBnZXRfam9iX3BhcmFtcyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGhhbSBz4buRIMSR4buDIGfhu41pIEFQSSBs4bqleSBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgIyBN4bq3YyDEkeG7i25oIGtow7RuZyBjw7MgdGhhbSBz4buRLCBj4bqnbiBvdmVycmlkZSDhu58gbOG7m3AgY29uCiAgICAgICAgcmV0dXJuIHt9CiAgICAKICAgIGRlZiBnZXRfYWNjb3VudHNfZnJvbV9kZXZpY2Uoc2VsZikgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiUGjGsMahbmcgdGjhu6ljIGPGoSBz4bufIMSR4buDIGzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuLCBj4bqnbiBvdmVycmlkZSDhu58gY2xhc3MgY29uIiIiCiAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIGRlZiBzZXRfc2xlZXBfZnVuY3Rpb24oc2VsZiwgc2xlZXBfZnVuYzogQ2FsbGFibGVbW2Zsb2F0XSwgYm9vbF0pOgogICAgICAgICIiIgogICAgICAgIMSQ4bq3dCBow6BtIHNsZWVwIHTDuXkgY2jhu4luaAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHNsZWVwX2Z1bmM6IEjDoG0gc2xlZXAgbmjhuq1uIG3hu5l0IHRoYW0gc+G7kSBsw6Agc+G7kSBnacOieSB2w6AgdHLhuqMgduG7gSBUcnVlIG7hur91IHNsZWVwIMSR4bunIHRo4budaSBnaWFuLAogICAgICAgICAgICAgICAgICAgICAgICBGYWxzZSBu4bq/dSBi4buLIGThu6tuZyBs4bqhaQogICAgICAgICIiIgogICAgICAgIHNlbGYuX3NsZWVwX2Z1bmMgPSBzbGVlcF9mdW5jCiAgICAgICAgCiAgICBkZWYgc2FmZV9zbGVlcChzZWxmLCBzZWNvbmRzOiBmbG9hdCkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBOZ+G7pyBhbiB0b8OgbiwgY8OzIHRo4buDIGThu6tuZyBs4bqhaSBuZ2F5IGzhuq1wIHThu6ljCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2Vjb25kczogU+G7kSBnacOieSBj4bqnbiBuZ+G7pwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IG5n4bunIMSR4bunIHRo4budaSBnaWFuLCBGYWxzZSBu4bq/dSBi4buLIGThu6tuZyBs4bqhaQogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLl9zbGVlcF9mdW5jKHNlY29uZHMpCiAgICAKICAgIGRlZiBzd2l0Y2hfdG9fYWNjb3VudChzZWxmLCB0YXJnZXRfYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIENodXnhu4NuIMSR4buVaSBzYW5nIHTDoGkga2hv4bqjbiBt4bulYyB0acOqdQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhcmdldF9hY2NvdW50OiBUw6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24gxJHhur9uCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiB7CiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGJvb2wsCiAgICAgICAgICAgICAgICAncmVhc29uJzogc3RyIChu4bq/dSB0aOG6pXQgYuG6oWkpLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBzdHIKICAgICAgICAgICAgfQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQYW5nIGNodXnhu4NuIMSR4buVaSBzYW5nIHTDoGkga2hv4bqjbiB7dGFyZ2V0X2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAndW5rbm93bicpfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bq3dCB0aOG7nWkgZ2lhbiBjaOG7nSB04buRaSDEkWEgKGdpw6J5KQogICAgICAgICAgICB0aW1lb3V0ID0gNjAKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wCiAgICAgICAgICAgIGN1cnJlbnRfdXNlcm5hbWUgPSBzZWxmLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICAgICAgICAgIHRhcmdldF91c2VybmFtZSA9IHRhcmdldF9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgxJHDoyDEkcSDbmcgbmjhuq1wIMSRw7puZyB0w6BpIGtob+G6o24gcuG7k2ksIGtow7RuZyBj4bqnbiBjaHV54buDbiDEkeG7lWkKICAgICAgICAgICAgaWYgY3VycmVudF91c2VybmFtZSBhbmQgY3VycmVudF91c2VybmFtZSA9PSB0YXJnZXRfdXNlcm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyDEkcSDbmcgbmjhuq1wIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSBy4buTaSIpCiAgICAgICAgICAgICAgICByZXR1cm4geydzdWNjZXNzJzogVHJ1ZSwgJ21lc3NhZ2UnOiBmJ8SQw6MgxJHEg25nIG5o4bqtcCB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0nfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBjaMawYSDEkcSDbmcgbmjhuq1wIMSRw7puZyB0w6BpIGtob+G6o24sIHRo4buxYyBoaeG7h24gY2h1eeG7g24gxJHhu5VpCiAgICAgICAgICAgIHdoaWxlIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA8IHRpbWVvdXQ6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgbsOgeSBz4bq9IMSRxrDhu6NjIGdoaSDEkcOoIGLhu59pIGzhu5twIGNvbiB0w7l5IHRoZW8g4bupbmcgZOG7pW5nCiAgICAgICAgICAgICAgICAgICAgc3dpdGNoX3Jlc3VsdCA9IHNlbGYuX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2godGFyZ2V0X2FjY291bnQpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIGvhur90IHF14bqjIHRy4bqjIHbhu4EgdOG7qyBfcGVyZm9ybV9hY2NvdW50X3N3aXRjaAogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3dpdGNoX3Jlc3VsdCwgZGljdCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzd2l0Y2hfcmVzdWx0LmdldCgnc3VjY2VzcycsIEZhbHNlKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2l0Y2hfcmVzdWx0ICAjIFRy4bqjIHbhu4EgbmdheSBs4buXaSB04burIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoCiAgICAgICAgICAgICAgICAgICAgZWxpZiBub3Qgc3dpdGNoX3Jlc3VsdDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBUxrDGoW5nIHRow61jaCB24bubaSBpbXBsZW1lbnRhdGlvbiBjxakgdHLhuqMgduG7gSBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWFzb24nOiAnc3dpdGNoX2ZhaWxlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdLaMO0bmcgdGjhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyDEkOG7o2kgbeG7mXQgY2jDunQgxJHhu4Mg4bupbmcgZOG7pW5nIGxvYWQgeG9uZwogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gxJHDoyBjaHV54buDbiDEkcO6bmcgdMOgaSBraG/huqNuIGNoxrBhCiAgICAgICAgICAgICAgICAgICAgbmV3X3VzZXJuYW1lID0gc2VsZi5nZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIG5ld191c2VybmFtZSBhbmQgbmV3X3VzZXJuYW1lID09IHRhcmdldF91c2VybmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY2h1eeG7g24gc2FuZyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgxJHEg25nIG5o4bqtcCB0cm9uZyBEQgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnJlc2V0X2xvZ2luX3N0YXR1c19ieV9hcHAoc2VsZi5hcHBfbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudCh0YXJnZXRfYWNjb3VudFsiaWQiXSwgeyJpc19sb2dpbiI6IFRydWUsICJpc19zeW5jIjogRmFsc2V9KQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsnc3VjY2Vzcyc6IFRydWUsICdtZXNzYWdlJzogZidDaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSB0aMOgbmggY8O0bmcnfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgY2jGsGEgdGjDoG5oIGPDtG5nLCDEkeG7o2kgbeG7mXQgY2jDunQgcuG7k2kgdGjhu60gbOG6oWkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o246IHtzdHIoZSl9IikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGNodXnhu4NuIHNhbmcgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHNhdSB7dGltZW91dH0gZ2nDonkiKQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBGYWxzZSwgCiAgICAgICAgICAgICAgICAncmVhc29uJzogJ3RpbWVvdXQnLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ0tow7RuZyB0aOG7gyBjaHV54buDbiBzYW5nIHTDoGkga2hv4bqjbiB7dGFyZ2V0X3VzZXJuYW1lfSBzYXUge3RpbWVvdXR9IGdpw6J5JwogICAgICAgICAgICB9CiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgZiJM4buXaSBraGkgY2h1eeG7g24gdMOgaSBraG/huqNuIikKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogRmFsc2UsIAogICAgICAgICAgICAgICAgJ3JlYXNvbic6ICdleGNlcHRpb24nLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBmJ0zhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o246IHtzdHIoZSl9JwogICAgICAgICAgICB9CiAgICAKICAgIGRlZiBfcGVyZm9ybV9hY2NvdW50X3N3aXRjaChzZWxmLCB0YXJnZXRfYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gY8OhYyB0aGFvIHTDoWMgVUkgxJHhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuCiAgICAgICAgUGjGsMahbmcgdGjhu6ljIG7DoHkgY+G6p24gxJHGsOG7o2MgZ2hpIMSRw6ggYuG7n2kgbOG7m3AgY29uCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFyZ2V0X2FjY291bnQ6IFTDoGkga2hv4bqjbiBj4bqnbiBjaHV54buDbiDEkeG6v24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IHsKICAgICAgICAgICAgICAgICdzdWNjZXNzJzogYm9vbCwKICAgICAgICAgICAgICAgICdyZWFzb24nOiBzdHIgKG7hur91IHRo4bqldCBi4bqhaSAtICdhY2NvdW50X25vdF9mb3VuZCcsICd1aV9lcnJvcicsIGV0Yy4pLAogICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBzdHIKICAgICAgICAgICAgfQogICAgICAgICIiIgogICAgICAgICMgUGjGsMahbmcgdGjhu6ljIGPGoSBz4bufIGNo4buJIGxvZyBj4bqjbmggYsOhbwogICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJQaMawxqFuZyB0aOG7qWMgX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2ggY2jGsGEgxJHGsOG7o2MgdHJp4buDbiBraGFpIGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAnc3VjY2Vzcyc6IEZhbHNlLCAKICAgICAgICAgICAgJ3JlYXNvbic6ICdub3RfaW1wbGVtZW50ZWQnLAogICAgICAgICAgICAnbWVzc2FnZSc6IGYnUGjGsMahbmcgdGjhu6ljIF9wZXJmb3JtX2FjY291bnRfc3dpdGNoIGNoxrBhIMSRxrDhu6NjIHRyaeG7g24ga2hhaSBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffScKICAgICAgICB9CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHIgaG/hurdjIE5vbmU6IFVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wLCBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgIyBQaMawxqFuZyB0aOG7qWMgY8ahIHPhu58gY2jhu4kgbG9nIGPhuqNuaCBiw6FvCiAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlBoxrDGoW5nIHRo4bupYyBnZXRfY3VycmVudF9sb2dnZWRfaW5fdXNlcm5hbWUgY2jGsGEgxJHGsOG7o2MgdHJp4buDbiBraGFpIGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gTm9uZQogICAgCiAgICBkZWYgcmVjb3JkX2pvYl9oaXN0b3J5KHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldLCByZXN1bHQ6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgR2hpIGzhuqFpIGzhu4tjaCBz4butIGpvYiB2w6BvIGRhdGFiYXNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICByZXN1bHQ6IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVVVJRCBj4bunYSBi4bqjbiBnaGkgbOG7i2NoIHPhu60gam9iIGhv4bq3YyBjaHXhu5dpIHLhu5duZyBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkCiAgICAgICAgICAgIGRldmljZV9pZCA9IHNlbGYuZGIuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHXhuqluIGLhu4sgZOG7ryBsaeG7h3Ugam9iIGhpc3RvcnkKICAgICAgICAgICAgam9iX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAiYWNjb3VudF91dWlkIjogYWNjb3VudC5nZXQoImFjY291bnRfdXVpZCIsICIiKSwKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsCiAgICAgICAgICAgICAgICAiYXBwIjogc2VsZi5hcHBfbmFtZSwKICAgICAgICAgICAgICAgICJqb2JfaWQiOiBqb2IuZ2V0KCJpZCIsICIiKSwKICAgICAgICAgICAgICAgICJqb2JfdHlwZSI6IGpvYi5nZXQoInR5cGUiLCAiIiksCiAgICAgICAgICAgICAgICAib2JqZWN0X2lkIjogam9iLmdldCgib2JqZWN0X2lkIiwgIiIpLAogICAgICAgICAgICAgICAgImxpbmsiOiBqb2IuZ2V0KCJsaW5rIiwgIiIpLAogICAgICAgICAgICAgICAgInN0YXR1cyI6IHJlc3VsdC5nZXQoInN0YXR1cyIsIDApLAogICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiByZXN1bHQuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpLAogICAgICAgICAgICAgICAgInByaWNlIjogam9iLmdldCgicHJpY2VfYWZ0ZXJfY29zdCIsIDApLAogICAgICAgICAgICAgICAgImVycm9yX21lc3NhZ2UiOiByZXN1bHQuZ2V0KCJtZXNzYWdlIiwgIiIpIGlmIG5vdCByZXN1bHQuZ2V0KCJzdWNjZXNzIiwgRmFsc2UpIGVsc2UgIiIsCiAgICAgICAgICAgICAgICAiY3JlYXRlZF9hdCI6IGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlICAjIMSQ4bqjbSBi4bqjbyB0cuG6oW5nIHRow6FpIGzDoCBjaMawYSDEkeG7k25nIGLhu5kKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBMxrB1IHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgam9iX3V1aWQgPSBzZWxmLmRiLmFkZF9qb2JfaGlzdG9yeShqb2JfZGF0YSkKICAgICAgICAgICAgaWYgam9iX3V1aWQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIsSQw6MgbMawdSBs4buLY2ggc+G7rSBqb2Ige2pvYi5nZXQoJ2lkJyl9IHbDoG8gZGF0YWJhc2UgduG7m2kgVVVJRDoge2pvYl91dWlkfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHRo4buDIGzGsHUgbOG7i2NoIHPhu60gam9iIHtqb2IuZ2V0KCdpZCcpfSB2w6BvIGRhdGFiYXNlIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBqb2JfdXVpZAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgZ2hpIGzhu4tjaCBz4butIGpvYiIpCiAgICAgICAgICAgIHJldHVybiAiIgoKICAgIGRlZiByZXBvcnRfam9iX2NvbXBsZXRlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSwgcmVwb3J0X2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBCw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICByZXBvcnRfZGF0YTogROG7ryBsaeG7h3UgYsOhbyBjw6FvCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBL4bq/dCBxdeG6oyBiw6FvIGPDoW8gdOG7qyBBUEkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgam9iX2lkIHThu6sgam9iCiAgICAgICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICAgICAgaWYgbm90IGpvYl9pZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgam9iX2lkIHRyb25nIGpvYiIpCiAgICAgICAgICAgICAgICByZXR1cm4geyJzdGF0dXMiOiAiZXJyb3IiLCAibWVzc2FnZSI6ICJLaMO0bmcgdMOsbSB0aOG6pXkgam9iX2lkIHRyb25nIGpvYiJ9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHXhuqluIGLhu4sgZOG7ryBsaeG7h3UgYsOhbyBjw6FvCiAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAiaWQiOiBqb2JfaWQsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IGLDoW8gY8OhbyBu4bq/dSBjw7MKICAgICAgICAgICAgaWYgcmVwb3J0X2RhdGE6CiAgICAgICAgICAgICAgICBwYXlsb2FkLnVwZGF0ZShyZXBvcnRfZGF0YSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu41pIEFQSSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oCiAgICAgICAgICAgIHVybCA9IHNlbGYuZ2V0X2NvbXBsZXRlX2pvYnNfdXJsKCkKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5nb2xpa2Vfc2VydmljZS5hcGlfcmVxdWVzdCh1cmwsIG1ldGhvZD0iUE9TVCIsIHBheWxvYWQ9cGF5bG9hZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBob8OgbiB0aMOgbmgifQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLDoW8gY8OhbyBqb2Ige2pvYl9pZH0gaG/DoG4gdGjDoG5oIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJzdWNjZXNzIiwgIm1lc3NhZ2UiOiAixJDDoyBiw6FvIGPDoW8gam9iIGhvw6BuIHRow6BuaCB0aMOgbmggY8O0bmciLCAiZGF0YSI6IHJlc3VsdH0KICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oIikKICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiBmIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgaG/DoG4gdGjDoG5oOiB7c3RyKGUpfSJ9CiAgICAgICAgICAgIAogICAgZGVmIHJlcG9ydF9qb2Jfc2tpcHBlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSwgcmVhc29uOiBzdHIgPSAiIikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgQsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWEKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIHJlYXNvbjogTMO9IGRvIGLhu48gcXVhIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogS+G6v3QgcXXhuqMgYsOhbyBjw6FvIHThu6sgQVBJCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IGpvYl9pZCB04burIGpvYgogICAgICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgICAgIGlmIG5vdCBqb2JfaWQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IGpvYl9pZCB0cm9uZyBqb2IiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiS2jDtG5nIHTDrG0gdGjhuqV5IGpvYl9pZCB0cm9uZyBqb2IifQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2h14bqpbiBi4buLIGThu68gbGnhu4d1IGLDoW8gY8OhbwogICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgImlkIjogam9iX2lkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gbMO9IGRvIG7hur91IGPDswogICAgICAgICAgICBpZiByZWFzb246CiAgICAgICAgICAgICAgICBwYXlsb2FkWyJyZWFzb24iXSA9IHJlYXNvbgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgQVBJIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhCiAgICAgICAgICAgIHVybCA9IHNlbGYuZ2V0X3NraXBfam9ic191cmwoKQogICAgICAgICAgICByZXN1bHQgPSBzZWxmLmdvbGlrZV9zZXJ2aWNlLmFwaV9yZXF1ZXN0KHVybCwgbWV0aG9kPSJQT1NUIiwgcGF5bG9hZD1wYXlsb2FkKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHJlc3VsdDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgYsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWEiKQogICAgICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogImVycm9yIiwgIm1lc3NhZ2UiOiAiS2jDtG5nIHRo4buDIGLDoW8gY8OhbyBqb2IgxJHDoyBi4buLIGLhu48gcXVhIn0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBiw6FvIGPDoW8gam9iIHtqb2JfaWR9IGLhu4sgYuG7jyBxdWEgdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgcmV0dXJuIHsic3RhdHVzIjogInN1Y2Nlc3MiLCAibWVzc2FnZSI6ICLEkMOjIGLDoW8gY8OhbyBqb2IgYuG7iyBi4buPIHF1YSB0aMOgbmggY8O0bmciLCAiZGF0YSI6IHJlc3VsdH0KICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBiw6FvIGPDoW8gam9iIMSRw6MgYuG7iyBi4buPIHF1YSIpCiAgICAgICAgICAgIHJldHVybiB7InN0YXR1cyI6ICJlcnJvciIsICJtZXNzYWdlIjogZiJM4buXaSBraGkgYsOhbyBjw6FvIGpvYiDEkcOjIGLhu4sgYuG7jyBxdWE6IHtzdHIoZSl9In0KICAgIAogICAgZGVmIGdldF9hY2NvdW50X2xpc3RfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfSIKICAgICAgICAKICAgIGRlZiBnZXRfYWNjb3VudF9kZXRhaWxfdXJsKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGNoaSB0aeG6v3QgdMOgaSBraG/huqNuCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBVUkwgQVBJIGNoaSB0aeG6v3QgdMOgaSBraG/huqNuCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGYie2NvbmZpZy5HT0xJS0VfQVBJX0JBU0V9L3tzZWxmLmFwcF9uYW1lfS1hY2NvdW50IgogICAgICAgIAogICAgZGVmIGdldF9qb2JfbGlzdF91cmwoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IFVSTCBBUEkgZGFuaCBzw6FjaCBqb2IKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgZGFuaCBzw6FjaCBqb2IKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gZiJ7Y29uZmlnLkdPTElLRV9BUElfQkFTRX0vYWR2ZXJ0aXNpbmcvcHVibGlzaGVycy97c2VsZi5hcHBfbmFtZX0vam9icyIKICAgICAgICAKICAgIGRlZiBnZXRfam9iX3JlcG9ydF91cmwoc2VsZiwgam9iX2lkOiBzdHIpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBVUkwgQVBJIGLDoW8gY8OhbyBqb2IKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBqb2JfaWQ6IElEIGPhu6dhIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVSTCBBUEkgYsOhbyBjw6FvIGpvYgogICAgICAgICIiIgogICAgICAgIHJldHVybiBmIntjb25maWcuR09MSUtFX0FQSV9CQVNFfS97c2VsZi5hcHBfbmFtZX0vam9icy97am9iX2lkfS9yZXBvcnQiCiAgICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICMgQUJTVFJBQ1QgTUVUSE9EUyBDSE8gQ0FSRSBBQ1RJT05TIChLSMOUTkcgUEjhuqJJIEpPQikKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgZGVmIHBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gaMOgbmggxJHhu5luZyB2deG7kXQgbmV3c2ZlZWQvYuG6o25nIHRpbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmInBlcmZvcm1fbmV3c2ZlZWRfYWN0aW9uIGNoxrBhIMSRxrDhu6NjIGltcGxlbWVudCBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX3JlZWxzX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGjDoG5oIMSR4buZbmcgeGVtIHJlZWxzL3ZpZGVvCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYicGVyZm9ybV9yZWVsc19hY3Rpb24gY2jGsGEgxJHGsOG7o2MgaW1wbGVtZW50IGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fbm90aWZpY2F0aW9uX2FjdGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGjDoG5oIMSR4buZbmcgeGVtIHRow7RuZyBiw6FvCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYicGVyZm9ybV9ub3RpZmljYXRpb25fYWN0aW9uIGNoxrBhIMSRxrDhu6NjIGltcGxlbWVudCBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX3Byb2ZpbGVfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gaMOgbmggxJHhu5luZyB4ZW0gcHJvZmlsZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmInBlcmZvcm1fcHJvZmlsZV9hY3Rpb24gY2jGsGEgxJHGsOG7o2MgaW1wbGVtZW50IGNobyB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHBlcmZvcm1fZXhwbG9yZV9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBow6BuaCDEkeG7mW5nIGtow6FtIHBow6EvdMOsbSBoaeG7g3UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJwZXJmb3JtX2V4cGxvcmVfYWN0aW9uIGNoxrBhIMSRxrDhu6NjIGltcGxlbWVudCBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBwZXJmb3JtX3NlYXJjaF9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBow6BuaCDEkeG7mW5nIHTDrG0ga2nhur9tCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYicGVyZm9ybV9zZWFyY2hfYWN0aW9uIGNoxrBhIMSRxrDhu6NjIGltcGxlbWVudCBjaG8ge3NlbGYuX19jbGFzc19fLl9fbmFtZV9ffSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICMgTUVUSE9EUyBI4buWIFRS4buiIENITyBBUFAgTUFOQUdFTUVOVAogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBvcGVuX2FwcChzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIE3hu58gYXBwIHTGsMahbmcg4bupbmcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHBhc3MKICAgIAogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgZW5zdXJlX2hvbWVfc2NyZWVuKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyBtw6BuIGjDrG5oIGhvbWUgKGltcGxlbWVudGF0aW9uIGNodW5nKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgbWF4X3JldHJpZXMgPSAzCiAgICAgICAgCiAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UobWF4X3JldHJpZXMpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIELGsOG7m2MgMTogS2nhu4NtIHRyYSBwYWNrYWdlIGhp4buHbiB04bqhaQogICAgICAgICAgICAgICAgY3VycmVudF9wYWNrYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2N1cnJlbnRfcGFja2FnZSgpCiAgICAgICAgICAgICAgICBpZiBjdXJyZW50X3BhY2thZ2UgIT0gc2VsZi5hcHBfcGFja2FnZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQXBwIGNoxrBhIG3hu58gKGhp4buHbiB04bqhaToge2N1cnJlbnRfcGFja2FnZX0pLCDEkWFuZyBt4bufIGFwcC4uLiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgICAgICAgICAjIENo4budIDEwIGdpw6J5IGNobyBhcHAga2jhu59pIMSR4buZbmcKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5zYWZlX3NsZWVwKDEwKToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQsaw4bubYyAyOiBLaeG7g20gdHJhIGPDsyBwaOG6o2kgdHJhbmcgY2jhu6cga2jDtG5nCiAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoIsSQw6Mg4bufIG3DoG4gaMOsbmggaG9tZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBCxrDhu5tjIDM6IFZhbGlkYXRlIGFwcCBraMO0bmcgYuG7iyBiYW5uZWQKICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiQXBwIGLhu4sgYmFubmVkLCDEkcOzbmcgdsOgIG3hu58gbOG6oWkuLi4iKQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWxmLnNhZmVfc2xlZXAoMik6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlICAjIFJldHJ5IHThu6sgxJHhuqd1CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQsaw4bubYyA0OiBY4butIGzDvSBjw6FjIGRpYWxvZyB2w6AgduG7gSBob21lCiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVfZGlhbG9nc19hbmRfbmF2aWdhdGVfaG9tZSgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQsaw4bubYyA1OiBLaeG7g20gdHJhIGzhuqFpCiAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkF0dGVtcHQge2F0dGVtcHQgKyAxfTogVuG6q24gY2jGsGEgduG7gSDEkcaw4bujYyBob21lIHNjcmVlbiIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBlbnN1cmVfaG9tZV9zY3JlZW4gYXR0ZW1wdCB7YXR0ZW1wdCArIDF9OiB7ZX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgduG7gSBob21lIHNjcmVlbiBzYXUge21heF9yZXRyaWVzfSBs4bqnbiB0aOG7rSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgdmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIGFwcCBjw7MgYuG7iyBiYW5uZWQga2jDtG5nCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBraMO0bmcgYuG7iyBiYW5uZWQsIEZhbHNlIG7hur91IGLhu4sgYmFubmVkCiAgICAgICAgIiIiCiAgICAgICAgcGFzcwogICAgCiAgICBkZWYgX2hhbmRsZV9kaWFsb2dzX2FuZF9uYXZpZ2F0ZV9ob21lKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIFjhu60gbMO9IGPDoWMgZGlhbG9nIHbDoCBuYXZpZ2F0ZSB24buBIGhvbWUgKGPDsyB0aOG7gyBvdmVycmlkZSB0cm9uZyBzdWJjbGFzcykKICAgICAgICAiIiIKICAgICAgICAjIERlZmF1bHQgaW1wbGVtZW50YXRpb24gLSBzdWJjbGFzcyBjw7MgdGjhu4Mgb3ZlcnJpZGUKICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygixJBhbmcgeOG7rSBsw70gZGlhbG9ncyB2w6AgbmF2aWdhdGUgduG7gSBob21lLi4uIikKICAgICAgICAKICAgICAgICAjIFRo4butIG5o4bqlbiBiYWNrIG3hu5l0IHbDoGkgbOG6p24KICAgICAgICBmb3IgXyBpbiByYW5nZSgzKToKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgIAogICAgICAgICMgTuG6v3UgduG6q24gY2jGsGEgduG7gSDEkcaw4bujYyBob21lLCB0aOG7rSB0w6xtIGhvbWUgYnV0dG9uCiAgICAgICAgaWYgbm90IHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQoY29udGVudF9kZXNjPSJUcmFuZyBjaOG7pyIpCiAgICAgICAgICAgIGlmIG5vdCBob21lX2J1dHRvbjoKICAgICAgICAgICAgICAgIGhvbWVfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHRleHQ9IlRyYW5nIGNo4bunIikKICAgICAgICAgICAgaWYgbm90IGhvbWVfYnV0dG9uOgogICAgICAgICAgICAgICAgaG9tZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQodGV4dD0iSG9tZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgaG9tZV9idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoaG9tZV9idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBpc19ob21lX3NjcmVlbihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gbcOgbiBow6xuaCBob21lIGtow7RuZwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJFhbmcg4bufIGhvbWUgc2NyZWVuCiAgICAgICAgIiIiCiAgICAgICAgcGFzcwogICAgCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAjIE1FVEhPRFMgSOG7liBUUuG7oiBDSE8gQUNUSU9OIFdFSUdIVFMgQ09ORklHVVJBVElPTgogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBkZWYgZ2V0X2FjdGlvbl93ZWlnaHRzKHNlbGYpIC0+IERpY3Rbc3RyLCBpbnRdOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHThu4kgbOG7hyBow6BuaCDEkeG7mW5nIGNobyBhcHAgbsOgeSAtIMawdSB0acOqbiB04burIERCLCBmYWxsYmFjayB24buBIGRlZmF1bHQKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgaW50XTogVOG7iSBs4buHIGjDoG5oIMSR4buZbmcge2FjdGlvbl9uYW1lOiB3ZWlnaHRfcGVyY2VudH0KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFwcF9jb25maWcgPSBzZWxmLmdldF9hcHBfY29uZmlnKCkKICAgICAgICAgICAgcmV0dXJuIGFwcF9jb25maWcuZ2V0KCJhY3Rpb25fd2VpZ2h0cyIsIHNlbGYuX2RlZmF1bHRfY29uZmlnWyJhY3Rpb25fd2VpZ2h0cyJdKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGzhuqV5IGFjdGlvbiB3ZWlnaHRzLCBkw7luZyBkZWZhdWx0OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGVmYXVsdF9jb25maWdbImFjdGlvbl93ZWlnaHRzIl0KICAgIAogICAgZGVmIGdldF9hcHBfY29uZmlnKHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGNvbmZpZyBjaG8gYXBwIG7DoHkgdOG7qyBEQiB24bubaSBwcmlvcml0eTogYXBwX2NvbmZpZyDihpIgZ2xvYmFsX2NvbmZpZyDihpIgZGVmYXVsdAogICAgICAgIEx1w7RuIMSR4buNYyB04burIERCLCBraMO0bmcgY2FjaGUgxJHhu4MgY8OzIHRo4buDIHVwZGF0ZSBxdWEgTVFUVAogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBDb25maWcgY+G7p2EgYXBwLCBtZXJnZSB0aGVvIHByaW9yaXR5CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIFPhu60gZOG7pW5nIERCIHNlcnZpY2UgxJHhu4MgbOG6pXkgY29uZmlnIHbhu5tpIHByaW9yaXR5IGxvZ2ljCiAgICAgICAgICAgIHJldHVybiBzZWxmLmRiLmdldF9hcHBfY29uZmlnKHNlbGYuYXBwX25hbWUsIHNlbGYuX2RlZmF1bHRfY29uZmlnKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGzhuqV5IGFwcCBjb25maWcsIGTDuW5nIGRlZmF1bHQ6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kZWZhdWx0X2NvbmZpZy5jb3B5KCkKICAgIAogICAgZGVmIHNhdmVfYXBwX2NvbmZpZyhzZWxmLCBjb25maWdfdXBkYXRlczogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTMawdSBjb25maWcgY2hvIGFwcCBuw6B5IHbDoG8gREIgKG1lcmdlIHbhu5tpIGNvbmZpZyBoaeG7h24gdOG6oWkpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgY29uZmlnX3VwZGF0ZXM6IEPDoWMgY29uZmlnIGPhuqduIGPhuq1wIG5o4bqtdAogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGIudXBkYXRlX2FwcF9jb25maWcoc2VsZi5hcHBfbmFtZSwgY29uZmlnX3VwZGF0ZXMpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGzGsHUgYXBwIGNvbmZpZzoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBpbml0X2RlZmF1bHRfYXBwX2NvbmZpZyhzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEto4bufaSB04bqhbyBjb25maWcgbeG6t2MgxJHhu4tuaCBjaG8gYXBwIG7hur91IGNoxrBhIGPDsyB0cm9uZyBEQgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IGNvbmZpZyBoaeG7h24gdOG6oWkgKGNo4buJIHJpw6puZyBj4bunYSBhcHAsIGtow7RuZyBtZXJnZSkKICAgICAgICAgICAgYXBwX2NvbmZpZ19rZXkgPSBmIntzZWxmLmFwcF9uYW1lfV9jb25maWciCiAgICAgICAgICAgIGN1cnJlbnRfYXBwX2NvbmZpZyA9IHNlbGYuZGIuZ2V0KGFwcF9jb25maWdfa2V5LCB7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBjdXJyZW50X2FwcF9jb25maWc6CiAgICAgICAgICAgICAgICAjIENoxrBhIGPDsyBjb25maWcgcmnDqm5nIGNobyBhcHAsIGzGsHUgZGVmYXVsdAogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHNlbGYuZGIuc2V0X2FwcF9jb25maWcoc2VsZi5hcHBfbmFtZSwgc2VsZi5fZGVmYXVsdF9jb25maWcpCiAgICAgICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGto4bufaSB04bqhbyBjb25maWcgbeG6t2MgxJHhu4tuaCBjaG8ge3NlbGYuYXBwX25hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIMSQw6MgY8OzIGNvbmZpZywga2nhu4NtIHRyYSB2w6AgYuG7lSBzdW5nIGPDoWMga2V5cyB0aGnhur91CiAgICAgICAgICAgICAgICB1cGRhdGVkID0gRmFsc2UKICAgICAgICAgICAgICAgIGZvciBrZXksIGRlZmF1bHRfdmFsdWUgaW4gc2VsZi5fZGVmYXVsdF9jb25maWcuaXRlbXMoKToKICAgICAgICAgICAgICAgICAgICBpZiBrZXkgbm90IGluIGN1cnJlbnRfYXBwX2NvbmZpZzoKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9hcHBfY29uZmlnW2tleV0gPSBkZWZhdWx0X3ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU3BlY2lhbCBjaGVjayBjaG8gYWN0aW9uX3dlaWdodHMKICAgICAgICAgICAgICAgIGlmICJhY3Rpb25fd2VpZ2h0cyIgaW4gY3VycmVudF9hcHBfY29uZmlnIGFuZCAiYWN0aW9uX3dlaWdodHMiIGluIHNlbGYuX2RlZmF1bHRfY29uZmlnOgogICAgICAgICAgICAgICAgICAgIGZvciBhY3Rpb24sIHdlaWdodCBpbiBzZWxmLl9kZWZhdWx0X2NvbmZpZ1siYWN0aW9uX3dlaWdodHMiXS5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBhY3Rpb24gbm90IGluIGN1cnJlbnRfYXBwX2NvbmZpZ1siYWN0aW9uX3dlaWdodHMiXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfYXBwX2NvbmZpZ1siYWN0aW9uX3dlaWdodHMiXVthY3Rpb25dID0gd2VpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gVHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1cGRhdGVkOgogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBzZWxmLmRiLnNldF9hcHBfY29uZmlnKHNlbGYuYXBwX25hbWUsIGN1cnJlbnRfYXBwX2NvbmZpZykKICAgICAgICAgICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyBj4bqtcCBuaOG6rXQgY29uZmlnIHRoaeG6v3UgY2hvIHtzZWxmLmFwcF9uYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgS2jDtG5nIGPhuqduIHVwZGF0ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraOG7n2kgdOG6oW8gZGVmYXVsdCBhcHAgY29uZmlnOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIGdldF9taW5fYWN0aW9uc19wZXJfc2Vzc2lvbihzZWxmKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgc+G7kSBhY3Rpb24gdOG7kWkgdGhp4buDdSBt4buXaSBzZXNzaW9uIHThu6sgY29uZmlnCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBT4buRIGFjdGlvbiB04buRaSB0aGnhu4N1CiAgICAgICAgIiIiCiAgICAgICAgYXBwX2NvbmZpZyA9IHNlbGYuZ2V0X2FwcF9jb25maWcoKQogICAgICAgIHJldHVybiBhcHBfY29uZmlnLmdldCgibWluX2FjdGlvbnNfcGVyX3Nlc3Npb24iLCA1KQogICAgCiAgICBkZWYgZ2V0X21heF9zZXNzaW9uX2R1cmF0aW9uX21pbnV0ZXMoc2VsZikgLT4gaW50OgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRo4budaSBnaWFuIHThu5FpIMSRYSBt4buXaSBzZXNzaW9uIHThu6sgY29uZmlnCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBUaOG7nWkgZ2lhbiB04buRaSDEkWEgKHBow7p0KQogICAgICAgICIiIgogICAgICAgIGFwcF9jb25maWcgPSBzZWxmLmdldF9hcHBfY29uZmlnKCkKICAgICAgICByZXR1cm4gYXBwX2NvbmZpZy5nZXQoIm1heF9zZXNzaW9uX2R1cmF0aW9uX21pbnV0ZXMiLCAzMCkKICAgIAogICAgZGVmIGdldF9hY3Rpb25fZGVsYXlfcmFuZ2Uoc2VsZikgLT4gdHVwbGVbaW50LCBpbnRdOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGtob+G6o25nIGRlbGF5IGdp4buvYSBjw6FjIGFjdGlvbnMgdOG7qyBjb25maWcKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICB0dXBsZVtpbnQsIGludF06IChtaW5fZGVsYXksIG1heF9kZWxheSkgdHJvbmcgZ2nDonkKICAgICAgICAiIiIKICAgICAgICBhcHBfY29uZmlnID0gc2VsZi5nZXRfYXBwX2NvbmZpZygpCiAgICAgICAgbWluX2RlbGF5ID0gYXBwX2NvbmZpZy5nZXQoImFjdGlvbl9kZWxheV9taW4iLCAzKQogICAgICAgIG1heF9kZWxheSA9IGFwcF9jb25maWcuZ2V0KCJhY3Rpb25fZGVsYXlfbWF4IiwgMTApCiAgICAgICAgcmV0dXJuIChtaW5fZGVsYXksIG1heF9kZWxheSkKICAgIAogICAgZGVmIHNob3VsZF9za2lwX2pvYl9hY3Rpb24oc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgS2nhu4NtIHRyYSBjw7MgbsOqbiBza2lwIGpvYiBhY3Rpb24ga2jDtG5nIGThu7FhIHRyw6puIGNvbmZpZyB2w6AgdHLhuqFuZyB0aMOhaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgbsOqbiBza2lwIGpvYiBhY3Rpb24KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBhY3Rpb25fd2VpZ2h0cyDEkeG7gyBxdXnhur90IMSR4buLbmggY8OzIGzDoG0gam9iIGtow7RuZwogICAgICAgICAgICBhY3Rpb25fd2VpZ2h0cyA9IHNlbGYuZ2V0X2FjdGlvbl93ZWlnaHRzKCkKICAgICAgICAgICAgam9iX3dlaWdodCA9IGFjdGlvbl93ZWlnaHRzLmdldCgiam9iIiwgMCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3Ugam9iIHdlaWdodCA9IDAgdGjDrCBza2lwIGpvYiBhY3Rpb24KICAgICAgICAgICAgaWYgam9iX3dlaWdodCA9PSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBjw6FjIMSRaeG7gXUga2nhu4duIGpvYiB0aMaw4budbmcKICAgICAgICAgICAgcmV0dXJuIG5vdCBzZWxmLl9jYW5fcnVuX2pvYihhY2NvdW50KQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraeG7g20gdHJhIHNraXAgam9iIGFjdGlvbjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgQW4gdG/DoG4gLSBza2lwIG7hur91IGzhu5dpCiAgICAKICAgIGRlZiBnZXRfc3VwcG9ydGVkX2FjdGlvbnMoc2VsZikgLT4gTGlzdFtzdHJdOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGRhbmggc8OhY2ggaMOgbmggxJHhu5luZyDEkcaw4bujYyBo4buXIHRy4bujIGLhu59pIGFwcCBuw6B5CiAgICAgICAgQXBwIGPDsyB0aOG7gyBvdmVycmlkZSDEkeG7gyBo4buXIHRy4bujIGPDoWMgaMOgbmggxJHhu5luZyBraMOhYyBuaGF1CiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtzdHJdOiBEYW5oIHPDoWNoIGFjdGlvbiBuYW1lcyDEkcaw4bujYyBo4buXIHRy4bujCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIGxpc3Qoc2VsZi5nZXRfYWN0aW9uX3dlaWdodHMoKS5rZXlzKCkpCiAgICAKICAgIGRlZiBwZXJmb3JtX2FjdGlvbihzZWxmLCBhY3Rpb246IHN0ciwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBow6BuaCDEkeG7mW5nIMSRxrDhu6NjIGNo4buJIMSR4buLbmggduG7m2kgY29uZmlnLWJhc2VkIGxvZ2ljCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWN0aW9uOiBUw6puIGjDoG5oIMSR4buZbmcKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBhY3Rpb24gY8OzIMSRxrDhu6NjIGjhu5cgdHLhu6Mga2jDtG5nCiAgICAgICAgICAgIGlmIGFjdGlvbiBub3QgaW4gc2VsZi5nZXRfc3VwcG9ydGVkX2FjdGlvbnMoKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJBY3Rpb24gJ3thY3Rpb259JyBraMO0bmcgxJHGsOG7o2MgaOG7lyB0cuG7oyBi4bufaSB7c2VsZi5fX2NsYXNzX18uX19uYW1lX199IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBY4butIGzDvSDEkeG6t2MgYmnhu4d0IGNobyBqb2IgYWN0aW9uIGThu7FhIHRyw6puIGNvbmZpZwogICAgICAgICAgICBpZiBhY3Rpb24gPT0gImpvYiI6CiAgICAgICAgICAgICAgICBpZiBzZWxmLnNob3VsZF9za2lwX2pvYl9hY3Rpb24oYWNjb3VudCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlNraXAgam9iIGFjdGlvbiBjaG8ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX0gdGhlbyBjb25maWciKQogICAgICAgICAgICAgICAgICAgICMgVGhheSB0aOG6vyBi4bqxbmcgYWN0aW9uIGtow6FjIChraMO0bmcgcGjhuqNpIGpvYikKICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZV9hY3Rpb24gPSBzZWxmLl9jaG9vc2VfYWx0ZXJuYXRpdmVfYWN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBpZiBhbHRlcm5hdGl2ZV9hY3Rpb246CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUaOG7sWMgaGnhu4duIHthbHRlcm5hdGl2ZV9hY3Rpb259IHRoYXkgY2hvIGpvYiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBlcmZvcm1fYWN0aW9uKGFsdGVybmF0aXZlX2FjdGlvbiwgYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBO4bq/dSBraMO0bmcgY8OzIGFsdGVybmF0aXZlLCBjb2kgbmjGsCB0aMOgbmggY8O0bmcKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjhu60gZ+G7jWkgbWV0aG9kIMSR4buZbmcgY2hvIGFjdGlvbiB0w7l5IGNo4buJbmggdHLGsOG7m2MKICAgICAgICAgICAgY3VzdG9tX21ldGhvZF9uYW1lID0gZiJwZXJmb3JtX3thY3Rpb259X2FjdGlvbiIKICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCBjdXN0b21fbWV0aG9kX25hbWUpOgogICAgICAgICAgICAgICAgY3VzdG9tX21ldGhvZCA9IGdldGF0dHIoc2VsZiwgY3VzdG9tX21ldGhvZF9uYW1lKQogICAgICAgICAgICAgICAgaWYgY2FsbGFibGUoY3VzdG9tX21ldGhvZCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlPhu60gZOG7pW5nIGN1c3RvbSBtZXRob2QgJ3tjdXN0b21fbWV0aG9kX25hbWV9JyBjaG8gYWN0aW9uICd7YWN0aW9ufSciKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21fbWV0aG9kKGFjY291bnQpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE1hcHBpbmcgY8OhYyBhY3Rpb25zIHThu5tpIG1ldGhvZHMgY2h14bqpbgogICAgICAgICAgICBzdGFuZGFyZF9hY3Rpb25fbWV0aG9kcyA9IHsKICAgICAgICAgICAgICAgICJuZXdzZmVlZCI6IHNlbGYucGVyZm9ybV9uZXdzZmVlZF9hY3Rpb24sCiAgICAgICAgICAgICAgICAicmVlbHMiOiBzZWxmLnBlcmZvcm1fcmVlbHNfYWN0aW9uLAogICAgICAgICAgICAgICAgIm5vdGlmaWNhdGlvbiI6IHNlbGYucGVyZm9ybV9ub3RpZmljYXRpb25fYWN0aW9uLAogICAgICAgICAgICAgICAgInByb2ZpbGUiOiBzZWxmLnBlcmZvcm1fcHJvZmlsZV9hY3Rpb24sCiAgICAgICAgICAgICAgICAiam9iIjogc2VsZi5wZXJmb3JtX2pvYl9hY3Rpb24sCiAgICAgICAgICAgICAgICAiZXhwbG9yZSI6IHNlbGYucGVyZm9ybV9leHBsb3JlX2FjdGlvbiwKICAgICAgICAgICAgICAgICJzZWFyY2giOiBzZWxmLnBlcmZvcm1fc2VhcmNoX2FjdGlvbiwKICAgICAgICAgICAgICAgICJwb3N0Ijogc2VsZi5wZXJmb3JtX3Bvc3RfYWN0aW9uCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgbWV0aG9kIHTGsMahbmcg4bupbmcgduG7m2kgYWN0aW9uCiAgICAgICAgICAgIGFjdGlvbl9tZXRob2QgPSBzdGFuZGFyZF9hY3Rpb25fbWV0aG9kcy5nZXQoYWN0aW9uKQogICAgICAgICAgICBpZiBub3QgYWN0aW9uX21ldGhvZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJLaMO0bmcgdMOsbSB0aOG6pXkgbWV0aG9kIGNobyBhY3Rpb24gJ3thY3Rpb259JyIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBhY3Rpb24KICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIlRo4buxYyBoaeG7h24gYWN0aW9uICd7YWN0aW9ufScgY2hvIHthY2NvdW50LmdldCgndW5pcXVlX3VzZXJuYW1lJyl9IikKICAgICAgICAgICAgcmV0dXJuIGFjdGlvbl9tZXRob2QoYWNjb3VudCkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIHRo4buxYyBoaeG7h24gYWN0aW9uICd7YWN0aW9ufSc6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgX2Nob29zZV9hbHRlcm5hdGl2ZV9hY3Rpb24oc2VsZikgLT4gT3B0aW9uYWxbc3RyXToKICAgICAgICAiIiIKICAgICAgICBDaOG7jW4gYWN0aW9uIHRoYXkgdGjhur8ga2hpIGtow7RuZyB0aOG7gyBsw6BtIGpvYgogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVMOqbiBhY3Rpb24gdGhheSB0aOG6vywgaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIGPDswogICAgICAgICIiIgogICAgICAgIGltcG9ydCByYW5kb20KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgYWN0aW9uIHdlaWdodHMga2jDtG5nIGJhbyBn4buTbSBqb2IKICAgICAgICAgICAgYWN0aW9uX3dlaWdodHMgPSBzZWxmLmdldF9hY3Rpb25fd2VpZ2h0cygpCiAgICAgICAgICAgIGFsdGVybmF0aXZlX3dlaWdodHMgPSB7azogdiBmb3IgaywgdiBpbiBhY3Rpb25fd2VpZ2h0cy5pdGVtcygpIGlmIGsgIT0gImpvYiJ9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgYWx0ZXJuYXRpdmVfd2VpZ2h0czoKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4buNbiByYW5kb20gdGhlbyB3ZWlnaHQKICAgICAgICAgICAgYWN0aW9ucyA9IGxpc3QoYWx0ZXJuYXRpdmVfd2VpZ2h0cy5rZXlzKCkpCiAgICAgICAgICAgIHdlaWdodHMgPSBsaXN0KGFsdGVybmF0aXZlX3dlaWdodHMudmFsdWVzKCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBjaG9zZW5fYWN0aW9uID0gcmFuZG9tLmNob2ljZXMoYWN0aW9ucywgd2VpZ2h0cz13ZWlnaHRzLCBrPTEpWzBdCiAgICAgICAgICAgIHJldHVybiBjaG9zZW5fYWN0aW9uCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIGNo4buNbiBhbHRlcm5hdGl2ZSBhY3Rpb246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiAibmV3c2ZlZWQiICAjIEZhbGxiYWNrIHRvIG5ld3NmZWVkCiAgICAKICAgIGRlZiBjYWxjdWxhdGVfYWN0aW9uc19uZWVkZWRfZm9yX3Nlc3Npb24oc2VsZiwgYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVMOtbmggdG/DoW4gc+G7kSBhY3Rpb25zIGPhuqduIHRoaeG6v3QgY2hvIHNlc3Npb24gZOG7sWEgdHLDqm4gY29uZmlnIHbDoCBz4buRIGpvYnMgY8OzIHRo4buDCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudHM6IERhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGludDogU+G7kSBhY3Rpb25zIGPhuqduIHRo4buxYyBoaeG7h24gdHJvbmcgc2Vzc2lvbgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBjb25maWcgbWluIGFjdGlvbnMKICAgICAgICAgICAgbWluX2FjdGlvbnMgPSBzZWxmLmdldF9taW5fYWN0aW9uc19wZXJfc2Vzc2lvbigpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bq/bSBz4buRIHTDoGkga2hv4bqjbiBjw7MgdGjhu4MgbMOgbSBqb2IKICAgICAgICAgICAgam9iX2NhcGFibGVfYWNjb3VudHMgPSAwCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGFjY291bnRzOgogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuc2hvdWxkX3NraXBfam9iX2FjdGlvbihhY2NvdW50KToKICAgICAgICAgICAgICAgICAgICBqb2JfY2FwYWJsZV9hY2NvdW50cyArPSAxCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEJhc2UgYWN0aW9ucyBk4buxYSB0csOqbiBz4buRIHTDoGkga2hv4bqjbgogICAgICAgICAgICAjIE3hu5dpIHTDoGkga2hv4bqjbiBjw7MgdGjhu4MgbMOgbSBqb2Igc+G6vSB0xrDGoW5nIOG7qW5nIHbhu5tpIDItMyBhY3Rpb25zCiAgICAgICAgICAgIGRlZmF1bHRfYWN0aW9uc19wZXJfYWNjb3VudCA9IDIuNQogICAgICAgICAgICBhY3Rpb25zX2Zyb21fYWNjb3VudHMgPSBpbnQoam9iX2NhcGFibGVfYWNjb3VudHMgKiBkZWZhdWx0X2FjdGlvbnNfcGVyX2FjY291bnQpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IG1heCBnaeG7r2EgYWN0aW9ucyB04burIGFjY291bnRzIHbDoCBtaW4gYWN0aW9ucwogICAgICAgICAgICB0b3RhbF9hY3Rpb25zID0gbWF4KGFjdGlvbnNfZnJvbV9hY2NvdW50cywgbWluX2FjdGlvbnMpCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVMOtbmggdG/DoW4gYWN0aW9ucyBjaG8gc2Vzc2lvbjoge2pvYl9jYXBhYmxlX2FjY291bnRzfSBhY2NvdW50cyBjw7MgdGjhu4MgbMOgbSB2aeG7h2MsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJ7ZGVmYXVsdF9hY3Rpb25zX3Blcl9hY2NvdW50fSBhY3Rpb25zL2FjY291bnQgPSB7YWN0aW9uc19mcm9tX2FjY291bnRzfSBhY3Rpb25zIHThu6sgYWNjb3VudHMsICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJtaW4ge21pbl9hY3Rpb25zfSA9PiB0b3RhbCB7dG90YWxfYWN0aW9uc30gYWN0aW9ucyIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gdG90YWxfYWN0aW9ucwogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kgdMOtbmggdG/DoW4gYWN0aW9ucyBuZWVkZWQ6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBzZWxmLmdldF9taW5fYWN0aW9uc19wZXJfc2Vzc2lvbigpICAjIEZhbGxiYWNrCiAgICAKICAgIGRlZiBjaG9vc2Vfd2VpZ2h0ZWRfYWN0aW9uKHNlbGYsIGV4Y2x1ZGVfYWN0aW9uczogTGlzdFtzdHJdID0gTm9uZSkgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIENo4buNbiBhY3Rpb24gdGhlbyB3ZWlnaHQgdOG7qyBjb25maWcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBleGNsdWRlX2FjdGlvbnM6IERhbmggc8OhY2ggYWN0aW9ucyBj4bqnbiBsb+G6oWkgdHLhu6sKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgc3RyOiBBY3Rpb24gxJHGsOG7o2MgY2jhu41uCiAgICAgICAgIiIiCiAgICAgICAgaW1wb3J0IHJhbmRvbQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgYWN0aW9uX3dlaWdodHMgPSBzZWxmLmdldF9hY3Rpb25fd2VpZ2h0cygpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIExv4bqhaSB0cuG7qyBhY3Rpb25zIGtow7RuZyBtb25nIG114buRbgogICAgICAgICAgICBpZiBleGNsdWRlX2FjdGlvbnM6CiAgICAgICAgICAgICAgICBhY3Rpb25fd2VpZ2h0cyA9IHtrOiB2IGZvciBrLCB2IGluIGFjdGlvbl93ZWlnaHRzLml0ZW1zKCkgaWYgayBub3QgaW4gZXhjbHVkZV9hY3Rpb25zfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGFjdGlvbl93ZWlnaHRzOgogICAgICAgICAgICAgICAgcmV0dXJuICJuZXdzZmVlZCIgICMgRmFsbGJhY2sKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2jhu41uIHJhbmRvbSB0aGVvIHdlaWdodAogICAgICAgICAgICBhY3Rpb25zID0gbGlzdChhY3Rpb25fd2VpZ2h0cy5rZXlzKCkpCiAgICAgICAgICAgIHdlaWdodHMgPSBsaXN0KGFjdGlvbl93ZWlnaHRzLnZhbHVlcygpKQogICAgICAgICAgICAKICAgICAgICAgICAgY2hvc2VuX2FjdGlvbiA9IHJhbmRvbS5jaG9pY2VzKGFjdGlvbnMsIHdlaWdodHM9d2VpZ2h0cywgaz0xKVswXQogICAgICAgICAgICByZXR1cm4gY2hvc2VuX2FjdGlvbgogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBjaOG7jW4gd2VpZ2h0ZWQgYWN0aW9uOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gIm5ld3NmZWVkIiAgIyBGYWxsYmFjawogICAgCiAgICBkZWYgcGVyZm9ybV9qb2JfYWN0aW9uKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gaMOgbmggxJHhu5luZyBsw6BtIGpvYiAtIENvbXBsZXRlIGpvYiBwcm9jZXNzaW5nIHBpcGVsaW5lCiAgICAgICAgCiAgICAgICAgUGlwZWxpbmU6CiAgICAgICAgMS4gVmFsaWRhdGUgR29MaWtlIGhlYWRlcnMKICAgICAgICAyLiBWYWxpZGF0ZSBhY2NvdW50IGNhbiBydW4gam9iCiAgICAgICAgMy4gRmV0Y2ggam9iIGZyb20gR29MaWtlICAKICAgICAgICA0LiBVcGRhdGUgZGV2aWNlIG1lc3NhZ2UKICAgICAgICA1LiBWYWxpZGF0ZSBqb2IgYmVmb3JlIGV4ZWN1dGlvbgogICAgICAgIDYuIEV4ZWN1dGUgam9iCiAgICAgICAgNy4gUmVwb3J0IGpvYiByZXN1bHQgdG8gR29MaWtlCiAgICAgICAgOC4gVXBkYXRlIGpvYiBzdGF0aXN0aWNzCiAgICAgICAgCiAgICAgICAgQXBwIGPDsyB0aOG7gyBvdmVycmlkZSDEkeG7gyBjw7MgbG9naWMgbMOgbSBqb2IgcmnDqm5nCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHVzZXJuYW1lID0gYWNjb3VudC5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgIGFjY291bnRfaWQgPSBhY2NvdW50LmdldCgiaWQiKQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkzDoG0gam9iIGNobyB7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAwOiBLaeG7g20gdHJhIHjDoWMgdGjhu7FjIEdvTGlrZQogICAgICAgICAgICBpZiBub3Qgc2VsZi5pc19nb2xpa2VfYXV0aGVudGljYXRlZCgpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIELGsOG7m2MgMTogS2nhu4NtIHRyYSBjw7MgdGjhu4MgbMOgbSBqb2Iga2jDtG5nCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl9jYW5fcnVuX2pvYihhY2NvdW50KToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJBY2NvdW50IHt1c2VybmFtZX0ga2jDtG5nIHRo4buDIGzDoG0gam9iIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCxrDhu5tjIDI6IEZldGNoIGpvYiB04burIEdvTGlrZQogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiTOG6pXkgam9iIGNobyB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGpvYiA9IHNlbGYuZmV0Y2hfam9iKGFjY291bnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBqb2I6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIktow7RuZyBjw7Mgam9iIGNobyB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGzhuqV5IGpvYiBjaG8gdMOgaSBraG/huqNuIHt1c2VybmFtZX06IHtlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAzOiBD4bqtcCBuaOG6rXQgZGV2aWNlIG1lc3NhZ2UgY2hvIGpvYgogICAgICAgICAgICBzZWxmLnVwZGF0ZV9kZXZpY2VfbWVzc2FnZV9mb3Jfam9iKGFjY291bnQsIGpvYikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA0OiBWYWxpZGF0ZSBqb2IKICAgICAgICAgICAgaWYgbm90IHNlbGYudmFsaWRhdGVfam9iX3dpdGhfaGFuZGxlcihhY2NvdW50LCBqb2IpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkpvYiBraMO0bmcgaOG7o3AgbOG7hyBob+G6t2MgxJHDoyBza2lwIGNobyB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlICAjIFNraXAgam9iIGtow7RuZyBwaOG6o2kgbOG7l2kKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA1OiBUaOG7sWMgaGnhu4duIGpvYgogICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVGjhu7FjIGhp4buHbiBqb2IgY2hvIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9OiB7am9iLmdldCgndHlwZScsICd1bmtub3duJyl9IikKICAgICAgICAgICAgam9iX3Jlc3VsdCA9IHNlbGYuZXhlY3V0ZV9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGpvYl9yZXN1bHQ6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyBuaOG6rW4gxJHGsOG7o2Mga+G6v3QgcXXhuqMgam9iIHThu6sgaGFuZGxlciBjaG8ge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA2OiBCw6FvIGPDoW8ga+G6v3QgcXXhuqMgduG7gSBHb0xpa2UKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5yZXBvcnRfam9iKGFjY291bnQsIGpvYiwgam9iX3Jlc3VsdCkKICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSBqb2JfcmVzdWx0LmdldCgic3VjY2VzcyIsIEZhbHNlKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgYsOhbyBjw6FvIGpvYiBjaG8ge3VzZXJuYW1lfTogc3VjY2Vzcz17c3VjY2Vzc30iKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kgYsOhbyBjw6FvIGpvYiBjaG8ge3VzZXJuYW1lfToge2V9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA3OiBD4bqtcCBuaOG6rXQgdGjhu5FuZyBrw6ogam9iCiAgICAgICAgICAgIHN1Y2Nlc3MgPSBqb2JfcmVzdWx0LmdldCgic3VjY2VzcyIsIEZhbHNlKQogICAgICAgICAgICBqb2JfdHlwZSA9IGpvYi5nZXQoInR5cGUiLCAiIikKICAgICAgICAgICAgc2VsZi51cGRhdGVfam9iX3N0YXRzKGFjY291bnQsIHN1Y2Nlc3MsIGpvYl90eXBlLCBqb2JfcmVzdWx0KQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3MKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGzDoG0gam9iOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF9jYW5fcnVuX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSB0w6BpIGtob+G6o24gY8OzIHRo4buDIGzDoG0gam9iIGtow7RuZwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgY8OzIHRo4buDIGzDoG0gam9iCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIDEuIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBjxqEgYuG6o24KICAgICAgICAgICAgYWNjb3VudF9zdGF0dXMgPSBhY2NvdW50LmdldCgic3RhdHVzIiwgImFjdGl2ZSIpCiAgICAgICAgICAgIGlmIGFjY291bnRfc3RhdHVzIGluIFsiZGlzYWJsZWQiLCAibG9nb3V0Il06CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgaW5hY3RpdmUsIGtp4buDbSB0cmEgam9iX2Rpc2FibGVfdW50aWwKICAgICAgICAgICAgaWYgYWNjb3VudF9zdGF0dXMgPT0gImluYWN0aXZlIjoKICAgICAgICAgICAgICAgIGpvYl9kaXNhYmxlX3VudGlsID0gYWNjb3VudC5nZXQoImpvYl9kaXNhYmxlX3VudGlsIiwgMCkKICAgICAgICAgICAgICAgIGlmIGpvYl9kaXNhYmxlX3VudGlsID4gdGltZS50aW1lKCk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIDIuIEtp4buDbSB0cmEgam9iX2VuYWJsZQogICAgICAgICAgICBpZiBub3QgYWNjb3VudC5nZXQoImpvYl9lbmFibGUiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMy4gS2nhu4NtIHRyYSDEkcOjIGxpw6puIGvhur90IEdvTGlrZSAoY+G6p24gY2hvIGpvYnMpCiAgICAgICAgICAgIGlmIG5vdCBhY2NvdW50LmdldCgiaXNfZ29saWtlX2xpbmtlZCIsIEZhbHNlKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyA0LiBLaeG7g20gdHJhIMSRw6MgbG9naW4KICAgICAgICAgICAgaWYgbm90IGFjY291bnQuZ2V0KCJpc19sb2dpbiIsIEZhbHNlKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyA1LiBLaeG7g20gdHJhIGdp4bubaSBo4bqhbiBkYWlseQogICAgICAgICAgICBkYWlseV9saW1pdCA9IGFjY291bnQuZ2V0KCJqb2JfbWF4X2RheSIsIDEwMCkKICAgICAgICAgICAgZGFpbHlfY291bnQgPSBhY2NvdW50LmdldCgiam9iX3RvZGF5IiwgMCkKICAgICAgICAgICAgaWYgZGFpbHlfY291bnQgPj0gZGFpbHlfbGltaXQ6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJM4buXaSBraeG7g20gdHJhIGNhbiBydW4gam9iOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIF92YWxpZGF0ZV9qb2JfYmVmb3JlX2V4ZWN1dGlvbihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBWYWxpZGF0ZSBqb2IgdHLGsOG7m2Mga2hpIHRo4buxYyBoaeG7h24KICAgICAgICBBcHAgY8OzIHRo4buDIG92ZXJyaWRlIMSR4buDIGPDsyBsb2dpYyB2YWxpZGF0ZSByacOqbmcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3Ugam9iIGjhu6NwIGzhu4cKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbGlkYXRpb25fcmVzdWx0ID0gc2VsZi52YWxpZGF0ZV9qb2JfYmVmb3JlX2V4ZWN1dGlvbihhY2NvdW50LCBqb2IpCiAgICAgICAgICAgIGlmIG5vdCB2YWxpZGF0aW9uX3Jlc3VsdC5nZXQoInZhbGlkIiwgVHJ1ZSk6CiAgICAgICAgICAgICAgICBpZiB2YWxpZGF0aW9uX3Jlc3VsdC5nZXQoInNob3VsZF9za2lwIiwgRmFsc2UpOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJTa2lwIGpvYiB0aGVvIHnDqnUgY+G6p3UgdmFsaWRhdGlvbiIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJKb2Iga2jDtG5nIGjhu6NwIGzhu4cgdGhlbyB2YWxpZGF0aW9uIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkzhu5dpIHZhbGlkYXRlIGpvYjoge2V9IikKICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgVGnhur9wIHThu6VjIG7hur91IHZhbGlkYXRlIGzhu5dpCiAgICAKICAgIGRlZiB1cGRhdGVfZGV2aWNlX21lc3NhZ2VfZm9yX2pvYihzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgam9iOiBEaWN0W3N0ciwgQW55XSk6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IGRldmljZSBtZXNzYWdlIGNobyBqb2IgaGnhu4duIHThuqFpCiAgICAgICAgQXBwIGPDsyB0aOG7gyBvdmVycmlkZSDEkeG7gyBjdXN0b20gbWVzc2FnZSBmb3JtYXQKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICBqb2I6IFRow7RuZyB0aW4gam9iCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsaW5rID0gam9iLmdldCgnbGluaycsICcnKQogICAgICAgICAgICAjIENsZWFuIHVwIGxpbmsgxJHhu4MgaGnhu4NuIHRo4buLIG5n4bqvbiBn4buNbiBoxqFuCiAgICAgICAgICAgIGlmIGxpbmsuc3RhcnRzd2l0aCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nKToKICAgICAgICAgICAgICAgIGxpbmsgPSBsaW5rLnJlcGxhY2UoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywgJycpCiAgICAgICAgICAgIGVsaWYgbGluay5zdGFydHN3aXRoKCdodHRwczovL3d3dy50aWt0b2suY29tLycpOgogICAgICAgICAgICAgICAgbGluayA9IGxpbmsucmVwbGFjZSgnaHR0cHM6Ly93d3cudGlrdG9rLmNvbS8nLCAnJykKICAgICAgICAgICAgCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmIlt7YWNjb3VudC5nZXQoJ2FwcCcpfV1be2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnKX1dW3tqb2IuZ2V0KCd0eXBlJyl9XVt7bGlua31dIgogICAgICAgICAgICAKICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgZGV2aWNlIG1lc3NhZ2UgdGjDtG5nIHF1YSBkYiBzZXJ2aWNlCiAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VsZiwgJ2RiJykgYW5kIHNlbGYuZGI6CiAgICAgICAgICAgICAgICBzZWxmLmRiLnNldCgiZGV2aWNlX21lc3NhZ2UiLCBtZXNzYWdlKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBj4bqtcCBuaOG6rXQgZGV2aWNlIG1lc3NhZ2U6IHtlfSIpCiAgICAKICAgIGRlZiB2YWxpZGF0ZV9qb2Jfd2l0aF9oYW5kbGVyKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFZhbGlkYXRlIGpvYiB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbiAtIHPhu60gZOG7pW5nIGFic3RyYWN0IG1ldGhvZCB2YWxpZGF0aW9uCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudDogVGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgam9iOiBUaMO0bmcgdGluIGpvYgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGpvYiBo4bujcCBs4buHLCBGYWxzZSBu4bq/dSBj4bqnbiBza2lwIGhv4bq3YyBjb250aW51ZQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgdmFsaWRhdGlvbl9yZXN1bHQgPSBzZWxmLnZhbGlkYXRlX2pvYl9iZWZvcmVfZXhlY3V0aW9uKGFjY291bnQsIGpvYikKICAgICAgICAgICAgaWYgbm90IHZhbGlkYXRpb25fcmVzdWx0LmdldCgidmFsaWQiLCBUcnVlKToKICAgICAgICAgICAgICAgIGlmIHZhbGlkYXRpb25fcmVzdWx0LmdldCgic2hvdWxkX3NraXAiLCBGYWxzZSk6CiAgICAgICAgICAgICAgICAgICAgIyBTa2lwIGpvYgogICAgICAgICAgICAgICAgICAgIHNraXBfbWVzc2FnZSA9IHZhbGlkYXRpb25fcmVzdWx0LmdldCgibWVzc2FnZSIsICJKb2Iga2jDtG5nIGjhu6NwIGzhu4ciKQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJTa2lwIGpvYjoge3NraXBfbWVzc2FnZX0iKQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgIyBHaGkgbOG6oWkgaGlzdG9yeSBjaG8gam9iIGLhu4sgc2tpcAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29yZF9qb2JfaGlzdG9yeShhY2NvdW50LCBqb2IsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAyLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdWNjZXNzIjogRmFsc2UsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBza2lwX21lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgIyBCw6FvIHNraXAgam9iIHbhu4EgR29MaWtlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2tpcF9qb2IoYWNjb3VudCwgam9iKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIlNraXAgam9iIGzhu5dpOiB7ZX0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgU2xlZXAgbmfhuq9uIMSR4buDIHRyw6FuaCBzcGFtCiAgICAgICAgICAgICAgICAgICAgc2tpcF9zbGVlcF90aW1lID0gcmFuZG9tLnJhbmRpbnQoMywgMTApCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk5naOG7iSB7c2tpcF9zbGVlcF90aW1lfXMgc2F1IGtoaSBza2lwIGpvYiDEkeG7gyB0csOhbmggc3BhbSIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2xlZXBfZnVuYyhza2lwX3NsZWVwX3RpbWUpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJKb2Iga2jDtG5nIGjhu6NwIGzhu4c6IHt2YWxpZGF0aW9uX3Jlc3VsdC5nZXQoJ21lc3NhZ2UnLCAnVW5rbm93biBlcnJvcicpfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSB2YWxpZGF0ZSBqb2I6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlICAjIFRp4bq/cCB04bulYyBu4bq/dSB2YWxpZGF0ZSBs4buXaQogICAgCiAgICBkZWYgdXBkYXRlX2pvYl9zdGF0cyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSwgc3VjY2VzczogYm9vbCwgam9iX3R5cGU6IHN0ciwgam9iX3Jlc3VsdDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIgogICAgICAgIEPhuq1wIG5o4bqtdCB0aOG7kW5nIGvDqiBqb2IgLSBhcHAgY8OzIHRo4buDIG92ZXJyaWRlIMSR4buDIGN1c3RvbSBsb2dpYwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIHN1Y2Nlc3M6IEpvYiBjw7MgdGjDoG5oIGPDtG5nIGtow7RuZwogICAgICAgICAgICBqb2JfdHlwZTogTG/huqFpIGpvYgogICAgICAgICAgICBqb2JfcmVzdWx0OiBL4bq/dCBxdeG6oyBqb2IKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGFjY291bnRfaWQgPSBhY2NvdW50LmdldCgiaWQiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgICAgICMgVMSDbmcgam9iIGNvdW50IGNobyBhY2NvdW50CiAgICAgICAgICAgICAgICBjdXJyZW50X2NvdW50ID0gYWNjb3VudC5nZXQoImpvYl90b2RheSIsIDApCiAgICAgICAgICAgICAgICBuZXdfY291bnQgPSBjdXJyZW50X2NvdW50ICsgMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFTEg25nIHRvdGFsIGpvYnMKICAgICAgICAgICAgICAgIGN1cnJlbnRfdG90YWwgPSBhY2NvdW50LmdldCgidG90YWxfam9icyIsIDApCiAgICAgICAgICAgICAgICBuZXdfdG90YWwgPSBjdXJyZW50X3RvdGFsICsgMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBqb2IgY291bnQgdHJvbmcgZGF0YWJhc2UKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VsZiwgJ2RiJykgYW5kIHNlbGYuZGI6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfdG9kYXkiOiBuZXdfY291bnQsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0b3RhbF9qb2JzIjogbmV3X3RvdGFsLAogICAgICAgICAgICAgICAgICAgICAgICAibGFzdF9qb2JfdGltZSI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiQ+G6rXAgbmjhuq10IGpvYiBjb3VudCBjaG8gYWNjb3VudCB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScpfTogdG9kYXk9e25ld19jb3VudH0sIHRvdGFsPXtuZXdfdG90YWx9IikKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kgY+G6rXAgbmjhuq10IGpvYiBzdGF0czoge2V9Iik=').decode('utf-8'))
