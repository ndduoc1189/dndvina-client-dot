import base64
exec(base64.b64decode('import time
import threading
import datetime
from typing import Dict, Any, List, Optional
import config
import utils
from utils import LogLevel, Logger
from jobs import TiktokJob, InstagramJob

# Tạo logger cho JobService
logger = utils.get_logger("JobService")

class JobService:
    def __init__(self, db_service, helper_service, golike_service):
        """
        Khởi tạo JobService
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
            golike_service: GoLikeService để gọi API GoLike
        """
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.running = True
        self.force_stop = False
        
        # Khởi tạo các job handler
        self.job_handlers = {}
        
        # Flag điều khiển
        self.is_initialized = False
        
        # Thông tin về các app được kích hoạt - lấy từ database hoặc config
        self.enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        # Lock để đồng bộ trạng thái
        self._lock = threading.Lock()
        
        # Dictionary để lưu số lần thử job thất bại theo account_id
        self.failed_job_attempts = {}
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức khi force_stop được đặt thành True
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        start_time = time.time()
        check_interval = 0.5  # Kiểm tra mỗi 0.5 giây
        
        while time.time() - start_time < seconds:
            # Kiểm tra nếu có yêu cầu dừng
            with self._lock:
                if self.force_stop or not self.running:
                    return False
            
            # Ngủ một khoảng ngắn
            sleep_time = min(check_interval, seconds - (time.time() - start_time))
            if sleep_time > 0:
                time.sleep(sleep_time)
            else:
                break
                
        return True
        
    def initialize(self) -> bool:
        """
        Khởi tạo JobService
        
        Returns:
            bool: True nếu khởi tạo thành công, False nếu không
        """
        logger.info("Đang khởi tạo JobService...")
        
        # 1. Kiểm tra HelperService
        helper_success, helper_data = utils.check_helper_service(self.helper)
        if not helper_success:
            logger.error("Không thể kết nối đến HelperService. Vui lòng kiểm tra lại.")
            return False
            
        # Lưu thông tin thiết bị nếu có
        if helper_data and "data" in helper_data:
            self.db.save_device_info(helper_data)
            logger.info(f"Đã lưu thông tin thiết bị: {helper_data['data'].get('device_model', 'Unknown')}")
            
            
        # 3. Lưu các cấu hình mặc định vào database nếu chưa có
        self._save_default_configs()
            
        # 4. Kiểm tra và lấy GoLike headers nếu cần
        golike_success = self.golike_service.fetch_golike_headers_with_retry()
        if not golike_success:
            logger.error("Không thể lấy GoLike headers. Vui lòng kiểm tra lại.")
            return False
        
        # 5. Khởi tạo các job handler
        self._init_job_handlers()
        
        # 6. Khởi tạo ngày cuối cùng đã reset nếu chưa có trong database
        now = datetime.datetime.now()
        today = now.date()
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        
        if not last_reset_date_str:
            # Nếu hiện tại đã qua giờ reset của ngày hôm nay, đánh dấu đã reset
            if now >= reset_time:
                last_reset_date = today
            else:
                # Nếu chưa đến giờ reset, đánh dấu là đã reset ngày hôm qua
                last_reset_date = today - datetime.timedelta(days=1)
                
            # Lưu vào database
            self.db.set("last_reset_date", last_reset_date.isoformat())
            logger.info(f"Khởi tạo ngày reset: {last_reset_date}")
        else:
            logger.info(f"Đã tìm thấy ngày reset cuối cùng: {last_reset_date_str}")
        
        self.is_initialized = True
        logger.info("Khởi tạo JobService thành công.")
        return True
        
    def _check_account_sync_status(self, app_name: str) -> bool:
        """
        Kiểm tra trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu cần đồng bộ lại, False nếu không cần
        """
        # Lấy trạng thái đồng bộ từ database
        sync_status_key = f"{app_name}_sync_status"
        sync_status = self.db.get(sync_status_key, False)  # Mặc định là chưa đồng bộ
        
        # Nếu chưa đồng bộ thì cần đồng bộ lại
        return not sync_status
        
    def _update_account_sync_status(self, app_name: str, status: bool = True) -> None:
        """
        Cập nhật trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần cập nhật
            status: True nếu đã đồng bộ, False nếu chưa đồng bộ
        """
        sync_status_key = f"{app_name}_sync_status"
        
        # Cập nhật trạng thái đồng bộ
        self.db.set(sync_status_key, status)
        
        logger.info(f"Đã cập nhật trạng thái đồng bộ tài khoản {app_name}: {status}")
        
    def _sync_accounts_for_app(self, app_name: str) -> bool:
        """
        Đồng bộ tài khoản và map tài khoản GoLike cho một app cụ thể
        
        Args:
            app_name: Tên ứng dụng cần đồng bộ
            
        Returns:
            bool: True nếu đồng bộ thành công, False nếu thất bại
        """
        if app_name not in self.job_handlers:
            logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua đồng bộ")
            return False
            
        handler = self.job_handlers[app_name]
        
        try:
            # 1. Đồng bộ tài khoản từ thiết bị
            logger.info(f"Đang đồng bộ tài khoản {app_name}...")
            accounts = handler.sync_accounts_to_db()
            logger.info(f"Đã đồng bộ {len(accounts)} tài khoản {app_name}")
            
            # 2. Map tài khoản GoLike
            logger.info(f"Đang lấy danh sách tài khoản GoLike cho {app_name}...")
            golike_accounts = handler.get_golike_accounts()
            
            if golike_accounts:
                logger.info(f"Đã tìm thấy {len(golike_accounts)} tài khoản GoLike cho {app_name}")
                
                # Lấy tài khoản từ thiết bị
                device_accounts = self.db.get_accounts(app=app_name)
                
                # Ánh xạ tài khoản
                mapped_accounts = handler.map_golike_accounts(golike_accounts, device_accounts)
                
                logger.info(f"Đã ánh xạ {len(mapped_accounts)} tài khoản {app_name} với GoLike")
            else:
                logger.warning(f"Không tìm thấy tài khoản GoLike nào cho {app_name}")
            
            # Cập nhật trạng thái đồng bộ
            self._update_account_sync_status(app_name, True)
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi đồng bộ tài khoản và map GoLike cho {app_name}")
            # Đánh dấu là chưa đồng bộ
            self._update_account_sync_status(app_name, False)
            return False
        
    def _save_default_configs(self):
        """Lưu các cấu hình mặc định vào database nếu chưa có"""
        default_configs = {
            # Cấu hình liên quan đến thời gian làm job
            "job_hour": config.JOB_HOUR,
            "job_cooldown_minutes": config.DEFAULT_COOLDOWN_MINUTES,
            "job_check_interval": config.JOB_CHECK_INTERVAL,
            "cooldown_get_job_golike": 30,  # Thời gian chờ (phút) khi không tìm thấy job GoLike
            
            # Cấu hình liên quan đến số lượng job
            "max_jobs_per_day": config.MAX_JOBS_PER_DAY,
            "max_jobs_per_session": config.MAX_JOBS_PER_SESSION,
            
            # Danh sách các app được kích hoạt
            "enabled_apps": config.ENABLED_APPS,
        }
        
        for key, value in default_configs.items():
            # Chỉ lưu nếu chưa có trong database
            if self.db.get(key) is None:
                self.db.set(key, value)
                logger.debug(f"Đã lưu cấu hình mặc định: {key}={value}")
            else:
                logger.debug(f"Cấu hình {key} đã tồn tại: {self.db.get(key)}")
        
    def _init_job_handlers(self):
        """Khởi tạo các job handler"""
        # init thì sẽ init handlers cho tất cả các app, làm app nào thì sẽ theo cấu hình lấy từ database
        for app_name in config.ENABLED_APPS:
            if app_name == "tiktok":
                self.job_handlers[app_name] = TiktokJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
            elif app_name == "instagram":
                self.job_handlers[app_name] = InstagramJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                
        logger.info(f"Đã khởi tạo {len(self.job_handlers)} job handler: {', '.join(self.job_handlers.keys())}")
        
    def _reset_daily_counters(self):
        """Reset bộ đếm hàng ngày vào giờ được cấu hình"""
        now = datetime.datetime.now()
        today = now.date()
        
        # Lấy giờ reset từ cấu hình hoặc từ database nếu có
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        
        # Tính thời điểm reset của ngày hôm nay
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        last_reset_date = None
        
        if last_reset_date_str:
            try:
                last_reset_date = datetime.date.fromisoformat(last_reset_date_str)
            except ValueError:
                logger.error(f"Định dạng ngày reset không hợp lệ: {last_reset_date_str}")
                last_reset_date = None
        
        # Kiểm tra xem đã qua giờ reset của ngày hôm nay chưa và chưa reset trong ngày hôm nay
        if now >= reset_time and (last_reset_date is None or last_reset_date < today):
            logger.info(f"Thực hiện reset bộ đếm hàng ngày (giờ reset: {job_hour}:00)")
            
            # Reset các bộ đếm cho tất cả tài khoản
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                
                for account in accounts:
                    # Reset số job hôm nay và số job trong phiên
                    self.db.update_account(account["id"], {
                        "job_today": 0,
                        "jobs_done_in_session": 0
                    })
                    
                    # Nếu tài khoản đang ở trạng thái inactive vì đã đạt giới hạn job hàng ngày,
                    # đặt lại trạng thái thành active
                    if account.get("status") == "inactive" and account.get("inactive_reason") == "Đã đạt giới hạn job hàng ngày":
                        self.db.update_account(account["id"], {
                            "status": "active",
                            "job_disable_until": 0
                        })
                        logger.info(f"Đã đặt lại trạng thái active cho tài khoản {account.get('unique_username')} sau khi reset")
                    
            logger.info(f"Đã reset bộ đếm hàng ngày cho tất cả tài khoản vào {now.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Cập nhật ngày đã reset vào database
            self.db.set("last_reset_date", today.isoformat())
        
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể chạy job cho tài khoản không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể chạy job, False nếu không
        """
        # Kiểm tra trạng thái tài khoản
        account_status = account.get("status", "active")
        
        # Nếu tài khoản bị disabled, không cho chạy job
        if account_status == "disabled":
            return False
            
        # Nếu tài khoản đang inactive, kiểm tra thời gian cooldown
        if account_status == "inactive":
            job_disable_until = account.get("job_disable_until", 0)
            
            # Nếu đã hết thời gian cooldown, cập nhật trạng thái về active
            if job_disable_until <= time.time():
                # Cập nhật trạng thái về active
                self.db.update_account(account["id"], {"status": "active"})
                logger.info(f"Tài khoản {account.get('unique_username')} đã hết thời gian chờ, đã chuyển về trạng thái active")
            else:
                # Chưa hết thời gian chờ
                cooldown_remain = int((job_disable_until - time.time()) / 60)
                logger.info(f"Tài khoản {account.get('unique_username')} đang trong thời gian chờ (còn {cooldown_remain} phút)")
                return False
        
        # Kiểm tra xem tài khoản có được bật job không
        if not account.get("job_enable", False):
            return False
            
        # Kiểm tra xem tài khoản đã được liên kết với GoLike chưa
        if not account.get("is_golike_linked", False):
            return False
            
        # Kiểm tra số job hôm nay so với giới hạn trong job_max_day
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0)
        
        # Nếu job_max_day chưa được thiết lập, sử dụng giá trị mặc định từ config
        if job_max_day <= 0:
            job_max_day = config.MAX_JOBS_PER_DAY
            
            # Cập nhật job_max_day vào database
            self.db.update_account(account["id"], {
                "job_max_day": job_max_day
            })
            
        if job_today >= job_max_day:
            logger.info(f"Tài khoản {account.get('unique_username')} đã đạt giới hạn job trong ngày ({job_today}/{job_max_day})")
            
            # Đặt tài khoản vào trạng thái inactive cho đến ngày hôm sau
            self._set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            return False
            
        # Kiểm tra số job trong phiên
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        max_jobs_per_session = account.get("max_jobs_per_session", 0)
        
        # Nếu max_jobs_per_session chưa được thiết lập, sử dụng giá trị mặc định
        if max_jobs_per_session <= 0:
            max_jobs_per_session = config.MAX_JOBS_PER_SESSION
            
            # Cập nhật max_jobs_per_session vào database
            self.db.update_account(account["id"], {
                "max_jobs_per_session": max_jobs_per_session
            })
        
        if jobs_done_in_session >= max_jobs_per_session:
            logger.info(f"Tài khoản {account.get('unique_username')} đã làm đủ {max_jobs_per_session} job trong phiên")
            # Đặt tài khoản vào trạng thái inactive với thời gian chờ mặc định
            self.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
            return False
            
        # Nếu đã kiểm tra qua tất cả các điều kiện, tài khoản có thể chạy job
        return True
        
    def _update_job_stats(self, account: Dict[str, Any], success: bool = True):
        """
        Cập nhật thống kê job
        
        Args:
            account: Thông tin tài khoản
            success: True nếu job thành công, False nếu thất bại
        """
        # Cập nhật thông tin job
        job_today = account.get("job_today", 0)
        jobs_done_in_session = account.get("jobs_done_in_session", 0)
        
        update_data = {
            "last_job_time": int(time.time()),
            "job_today": job_today + 1,
            "jobs_done_in_session": jobs_done_in_session + 1,
            "total_jobs": account.get("total_jobs", 0) + 1
        }
        
        if not success:
            # Nếu job thất bại, tăng số lần thất bại
            update_data["failed_jobs"] = account.get("failed_jobs", 0) + 1
            
        self.db.update_account(account["id"], update_data)
        
        # Reset số lần thử job thất bại nếu job thành công
        if success:
            # Reset trong bộ nhớ
            self.failed_job_attempts[account["id"]] = 0
        
        # Lấy số job tối đa trong phiên từ account
        max_jobs_per_session = account.get("max_jobs_per_session", 0)
        
        # Nếu max_jobs_per_session chưa được thiết lập, sử dụng giá trị mặc định
        if max_jobs_per_session <= 0:
            max_jobs_per_session = config.MAX_JOBS_PER_SESSION
            
            # Cập nhật max_jobs_per_session vào database
            self.db.update_account(account["id"], {
                "max_jobs_per_session": max_jobs_per_session
            })
        
        # Đã làm đủ số job trong phiên, đặt inactive
        if (jobs_done_in_session + 1) >= max_jobs_per_session:
            logger.info(f"Tài khoản {account.get('unique_username')} đã làm đủ {max_jobs_per_session} job trong phiên")
            # Đặt tài khoản vào trạng thái inactive với thời gian chờ mặc định
            self.set_account_inactive(account["id"], inactive_reason="Đã hoàn thành số job tối đa trong phiên")
        
        # Kiểm tra nếu đã đạt giới hạn job hàng ngày
        job_max_day = account.get("job_max_day", 0)
        if job_max_day <= 0:
            job_max_day = config.MAX_JOBS_PER_DAY
        
        # Nếu job vừa làm là job cuối cùng trong ngày, đặt inactive đến ngày hôm sau
        if (job_today + 1) >= job_max_day:
            logger.info(f"Tài khoản {account.get('unique_username')} đã đạt giới hạn job trong ngày ({job_today+1}/{job_max_day})")
            self._set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
        
    def _set_account_inactive_until_next_reset(self, account_id: int, inactive_reason: str = "Đã đạt giới hạn job hàng ngày") -> bool:
        """
        Đặt tài khoản vào trạng thái inactive cho đến giờ reset của ngày hôm sau
        
        Args:
            account_id: ID của tài khoản
            inactive_reason: Lý do đặt tài khoản vào trạng thái inactive
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Lấy thông tin tài khoản
            account = self.db.get_account(account_id)
            if not account:
                logger.error(f"Không tìm thấy tài khoản có ID {account_id}")
                return False
                
            # Lấy giờ reset từ cấu hình hoặc từ database
            job_hour = self.db.get("job_hour", config.JOB_HOUR)
            
            # Tính thời điểm reset tiếp theo
            now = datetime.datetime.now()
            next_reset = now.replace(hour=job_hour, minute=0, second=0, microsecond=0)
            
            # Nếu thời điểm reset đã qua trong ngày hôm nay, cộng thêm 1 ngày
            if now >= next_reset:
                next_reset = next_reset + datetime.timedelta(days=1)
                
            # Tính thời gian đến lần reset tiếp theo (đổi thành timestamp)
            job_disable_until = int(next_reset.timestamp())
            
            # Cập nhật trạng thái tài khoản
            update_data = {
                "status": "inactive",
                "job_disable_until": job_disable_until,
                "jobs_done_in_session": 0,  # Reset số job đã làm trong phiên về 0
                "inactive_reason": inactive_reason  # Lưu lý do inactive
            }
            
            self.db.update_account(account_id, update_data)
            
            # Tính số giờ còn lại đến lần reset tiếp theo
            hours_until_reset = (next_reset - now).total_seconds() / 3600
            
            logger.info(f"Đã đặt tài khoản {account.get('unique_username')} vào trạng thái inactive đến giờ reset tiếp theo ({next_reset.hour}:00), còn khoảng {hours_until_reset:.1f} giờ. Lý do: {inactive_reason}")
            
            # Kill app sau khi đặt tài khoản inactive
            app_name = account.get("app")
            if app_name and app_name in config.APP_PACKAGES:
                package_name = config.APP_PACKAGES[app_name]
                logger.info(f"Đóng ứng dụng {app_name} (package: {package_name}) sau khi đặt inactive")
                self.helper.close_app(package_name)
            
            return True
        except Exception as e:
            logger.exception(e, f"Lỗi khi đặt tài khoản ID {account_id} vào trạng thái inactive đến ngày hôm sau")
            return False
        
    def set_account_inactive(self, account_id: int, cooldown_minutes: int = None, 
                          inactive_reason: str = "Đã hoàn thành số job trong phiên") -> bool:
        """
        Đặt tài khoản vào trạng thái inactive
        
        Args:
            account_id: ID của tài khoản
            cooldown_minutes: Số phút cần chờ trước khi tài khoản được active lại (mặc định lấy từ cấu hình)
            inactive_reason: Lý do đặt tài khoản vào trạng thái inactive
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Lấy thông tin tài khoản
            account = self.db.get_account(account_id)
            if not account:
                logger.error(f"Không tìm thấy tài khoản có ID {account_id}")
                return False
                
            # Nếu không chỉ định thời gian cooldown, lấy từ cấu hình
            if cooldown_minutes is None:
                cooldown_minutes = self.db.get("job_cooldown_minutes", config.DEFAULT_COOLDOWN_MINUTES)
                
            # Tính thời điểm hết hạn inactive
            job_disable_until = int(time.time() + cooldown_minutes * 60)
            
            # Cập nhật trạng thái tài khoản
            update_data = {
                "status": "inactive",
                "job_disable_until": job_disable_until,
                "jobs_done_in_session": 0,  # Reset số job đã làm trong phiên về 0
                "inactive_reason": inactive_reason  # Lưu lý do inactive
            }
            
            self.db.update_account(account_id, update_data)
            
            logger.info(f"Đã đặt tài khoản {account.get('unique_username')} vào trạng thái inactive trong {cooldown_minutes} phút và reset số job trong phiên. Lý do: {inactive_reason}")
            
            # Kill app sau khi đặt tài khoản inactive
            app_name = account.get("app")
            if app_name and app_name in config.APP_PACKAGES:
                package_name = config.APP_PACKAGES[app_name]
                logger.info(f"Đóng ứng dụng {app_name} (package: {package_name}) sau khi đặt inactive")
                self.helper.close_app(package_name)
            
            return True
        except Exception as e:
            logger.exception(e, f"Lỗi khi đặt tài khoản ID {account_id} vào trạng thái inactive")
            return False
        
    def start(self):
        """
        Khởi động JobService trong thread riêng
        
        Returns:
            threading.Thread: Thread đang chạy JobService hoặc None nếu lỗi
        """
        try:
            # Đặt trạng thái running
            self.running = True
            self.force_stop = False
            
            # Tạo thread
            thread = threading.Thread(target=self.run)
            thread.daemon = True
            thread.start()
            
            return thread
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động JobService")
            return None
            
    def reset_inactive_accounts(self):
        """
        Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
        """
        try:
            current_time = int(time.time())
            
            # Lấy danh sách tất cả tài khoản ở trạng thái inactive
            for app_name in self.enabled_apps:
                inactive_accounts = self.db.get_accounts(app=app_name, status="inactive") or []
                
                for account in inactive_accounts:
                    job_disable_until = account.get("job_disable_until", 0)
                    
                    # Nếu đã hết thời gian chờ, chuyển về trạng thái active
                    if job_disable_until <= current_time:
                        self.db.update_account(account["id"], {"status": "active"})
                        logger.info(f"Tài khoản {account.get('unique_username')} (ID: {account['id']}) đã hết thời gian chờ, đã chuyển về trạng thái active")
                    else:
                        remaining_minutes = int((job_disable_until - current_time) / 60)
                        logger.debug(f"Tài khoản {account.get('unique_username')} còn {remaining_minutes} phút ở trạng thái inactive")
                        
        except Exception as e:
            logger.exception(e, "Lỗi khi kiểm tra và khôi phục tài khoản inactive")
    
    def run(self):
        """
        Chạy JobService trong một vòng lặp
        """
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo JobService. Không thể chạy.")
                return
        
        logger.info("Bắt đầu chạy JobService...")
        
        # Kiểm tra device_id
        device_id = self.db.get_or_create_device_id()
            
        if not device_id:
            logger.warning("Không thể xác định device_id hiện tại, JobService không thể chạy")
            return
            
        # Biến lưu trữ tài khoản đang làm việc hiện tại cho mỗi ứng dụng
        current_working_accounts = {}
        
        while self.running:
            # Reset biến force_stop nếu có
            with self._lock:
                self.force_stop = False
                
            # Reset bộ đếm hàng ngày nếu cần
            self._reset_daily_counters()
            
            # Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
            self.reset_inactive_accounts()
            
            try:
                # Duyệt qua từng app được kích hoạt
                enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
                
                for app_name in enabled_apps:
                    # Kiểm tra xem có cần dừng không
                    with self._lock:
                        if self.force_stop or not self.running:
                            break
                    
                    # Kiểm tra xem app có trong job_handlers không
                    if app_name not in self.job_handlers:
                        logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua")
                        continue
                    
                    # Kiểm tra và đồng bộ tài khoản nếu cần
                    if self._check_account_sync_status(app_name):
                        logger.info(f"Đồng bộ tài khoản cho {app_name}...")
                        self._sync_accounts_for_app(app_name)
                        
                    handler = self.job_handlers[app_name]
                    
                    # Lấy tài khoản đang làm việc hiện tại của ứng dụng này
                    current_account = current_working_accounts.get(app_name)
                    
                    # Nếu chưa có tài khoản đang làm việc, kiểm tra tài khoản đang đăng nhập
                    if not current_account:
                        # Lấy username của tài khoản đang đăng nhập
                        current_username = handler.get_current_logged_in_username()
                        
                        if current_username:
                            # Tìm tài khoản tương ứng trong DB (đã lọc theo device_id)
                            accounts = self.db.get_accounts(app=app_name)
                            login_account = next((acc for acc in accounts if acc.get("unique_username") == current_username), None)
                            
                            if login_account:
                                # Cập nhật trạng thái đăng nhập trong DB
                                self.db.reset_login_status_by_app(app_name)
                                self.db.update_account(login_account["id"], {"is_login": True})
                                
                                # Sử dụng tài khoản này
                                current_working_accounts[app_name] = login_account
                                current_account = login_account
                    
                    # Nếu vẫn không có tài khoản nào để làm việc, bỏ qua ứng dụng này
                    if not current_account:
                        logger.info(f"Không có tài khoản nào đang đăng nhập cho {app_name}, bỏ qua")
                        continue
                    
                    # Kiểm tra xem tài khoản hiện tại có thể chạy job không
                    if not self._can_run_job(current_account):
                        logger.info(f"Tài khoản {current_account.get('unique_username')} không thể chạy job, tìm tài khoản khác")
                        
                        # Tìm tài khoản khác thỏa mãn điều kiện (đã lọc theo device_id)
                        accounts = self.db.get_accounts(app=app_name)
                        next_account = next((acc for acc in accounts if self._can_run_job(acc)), None)
                        
                        if not next_account:
                            logger.info(f"Không có tài khoản nào có thể chạy job cho {app_name}, bỏ qua")
                            current_working_accounts[app_name] = None
                            continue
                        
                        # Chuyển đổi sang tài khoản khác
                        switch_success = handler.switch_to_account(next_account)
                        if switch_success:
                            current_working_accounts[app_name] = next_account
                            current_account = next_account
                        else:
                            logger.error(f"Không thể chuyển sang tài khoản {next_account.get('unique_username')}, bỏ qua")
                            current_working_accounts[app_name] = None
                            continue
                    
                    # Thực hiện job với tài khoản hiện tại
                    logger.info(f"Đang chạy job cho tài khoản {current_account.get('unique_username')} ({app_name})...")
                    
                    try:
                        # Lấy thông tin job
                        job = handler.fetch_job(current_account)
                        
                        if job:
                            # Reset số lần thất bại liên tiếp khi có job
                            self.failed_job_attempts[current_account["id"]] = 0
                            
                            # Thực hiện job
                            job_result = handler.execute_job(current_account, job)
                            
                            # Trích xuất thông tin từ kết quả job
                            job_status = job_result["status"]
                            job_success = job_result["success"]
                            job_message = job_result["message"]
                            
                            # Báo cáo kết quả với message từ kết quả job
                            report_success = handler.report_job(current_account, job, job_result)
                            
                            # Cập nhật thống kê
                            self._update_job_stats(current_account, job_success)
                            
                            logger.info(f"Kết quả job: {job_message} (status: {job_status})")
                            
                            # Cập nhật thông tin tài khoản
                            current_account = self.db.get_account(current_account["id"])
                            current_working_accounts[app_name] = current_account
                            
                            # Kiểm tra xem tài khoản còn có thể chạy job nữa không
                            if not self._can_run_job(current_account):
                                logger.info(f"Tài khoản {current_account.get('unique_username')} đã hết job có thể chạy")
                                
                                # Chạy nuôi tài khoản nếu đã chạy hết job
                                if self.db.get(f"{app_name}_care_enable", True):
                                    try:
                                        handler.perform_care(current_account)
                                    except Exception as e:
                                        logger.exception(e, f"Lỗi khi nuôi tài khoản {current_account.get('unique_username')}")
                                
                                # Đánh dấu là cần tìm tài khoản khác
                                current_working_accounts[app_name] = None
                        else:
                            logger.info(f"Không có job khả dụng cho tài khoản {current_account.get('unique_username')}")
                            
                            # Tăng số lần không có job liên tiếp trong bộ nhớ
                            account_id = current_account["id"]
                            self.failed_job_attempts[account_id] = self.failed_job_attempts.get(account_id, 0) + 1
                            failed_attempts = self.failed_job_attempts[account_id]
                            
                            # Nếu 5 lần liên tiếp không có job, đặt tài khoản vào chế độ nghỉ
                            if failed_attempts >= 5:
                                cooldown_minutes = self.db.get("cooldown_get_job_golike", 30)
                                logger.warning(f"Tài khoản {current_account.get('unique_username')} đã 5 lần liên tiếp không có job, cho nghỉ {cooldown_minutes} phút")
                                self.set_account_inactive(current_account["id"], cooldown_minutes=cooldown_minutes, 
                                                         inactive_reason=f"Không tìm thấy job khả dụng sau 5 lần thử liên tiếp")
                                
                                # Cập nhật lại thông tin tài khoản từ database
                                current_account = self.db.get_account(current_account["id"])
                                current_working_accounts[app_name] = current_account
                            
                            # Đợi một khoảng thời gian trước khi kiểm tra lại job
                            job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                            if not self.safe_sleep(job_check_interval):
                                break
                    except Exception as e:
                        logger.exception(e, f"Lỗi khi thực hiện job cho tài khoản {current_account.get('unique_username')}")
                
            except Exception as e:
                logger.exception(e, "Lỗi khi chạy job")
                
            # Đợi trước khi chạy lại
            job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
            if not self.safe_sleep(job_check_interval):
                break
            
    def stop(self):
        """Dừng JobService"""
        with self._lock:
            self.running = False
        logger.info("Đang dừng JobService...")
        
    def force_stop_all(self):
        """Dừng ngay lập tức tất cả các hoạt động"""
        with self._lock:
            self.force_stop = True
            self.running = False
        logger.info("Dừng ngay lập tức tất cả các hoạt động...")

    def shutdown(self):
        """Đóng dịch vụ, dừng tất cả worker threads"""
        try:
            self.logger.info("Dừng ngay lập tức tất cả các hoạt động...")
            
            # Đánh dấu dừng
            self.running = False
            self.force_stop = True
            
            # Đánh thức tất cả worker threads để chúng kiểm tra điều kiện dừng
            for worker in self.workers.values():
                if hasattr(worker, "wake_up") and callable(worker.wake_up):
                    try:
                        worker.wake_up()
                    except:
                        pass
            
            # Đóng kết nối database để tránh lỗi thread
            if hasattr(self, 'db') and self.db:
                try:
                    self.db.close()
                except Exception as e:
                    self.logger.error(f"Lỗi khi đóng kết nối database: {str(e)}")
            
            # Cờ để thông báo đã dừng
            self.stopped = True
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi shutdown JobService") ').decode('utf-8'))
