import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGpzb24KaW1wb3J0IHJlcXVlc3RzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBMaXN0CmltcG9ydCBjb25maWcKaW1wb3J0IHV0aWxzCmZyb20gdXRpbHMgaW1wb3J0IExvZ0xldmVsLCBMb2dnZXIKCiMgVOG6oW8gbG9nZ2VyIHJpw6puZyBjaG8gR29MaWtlU2VydmljZQpsb2dnZXIgPSB1dGlscy5nZXRfbG9nZ2VyKCJHb0xpa2VTZXJ2aWNlIikKCiMgS2nhu4NtIHRyYSB2w6AgaW1wb3J0IGPDoWMgdGjGsCB2aeG7h24gY+G6p24gdGhp4bq/dAp0cnk6CiAgICBpbXBvcnQgcHljaHJvbWUKICAgIFBZQ0hST01FX0FWQUlMQUJMRSA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgbG9nZ2VyLndhcm5pbmcoIlRoxrAgdmnhu4duIHB5Y2hyb21lIGtow7RuZyBraOG6oyBk4bulbmcuIEjDo3kgY8OgaSDEkeG6t3QgYuG6sW5nIGzhu4duaDogcGlwIGluc3RhbGwgcHljaHJvbWUiKQogICAgUFlDSFJPTUVfQVZBSUxBQkxFID0gRmFsc2UKCnRyeToKICAgIGltcG9ydCBjbG91ZHNjcmFwZXIKICAgIENMT1VEU0NSQVBFUl9BVkFJTEFCTEUgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGxvZ2dlci53YXJuaW5nKCJUaMawIHZp4buHbiBjbG91ZHNjcmFwZXIga2jDtG5nIGto4bqjIGThu6VuZy4gSMOjeSBjw6BpIMSR4bq3dCBi4bqxbmcgbOG7h25oOiBwaXAgaW5zdGFsbCBjbG91ZHNjcmFwZXIiKQogICAgQ0xPVURTQ1JBUEVSX0FWQUlMQUJMRSA9IEZhbHNlCgp0cnk6CiAgICBpbXBvcnQgY3VybF9jZmZpCiAgICBmcm9tIGN1cmxfY2ZmaSBpbXBvcnQgcmVxdWVzdHMgYXMgY3VybF9yZXF1ZXN0cwogICAgQ1VSTF9DRkZJX0FWQUlMQUJMRSA9IFRydWUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgbG9nZ2VyLndhcm5pbmcoIlRoxrAgdmnhu4duIGN1cmxfY2ZmaSBraMO0bmcga2jhuqMgZOG7pW5nLiBIw6N5IGPDoGkgxJHhurd0IGLhurFuZyBs4buHbmg6IHBpcCBpbnN0YWxsIGN1cmwtY2ZmaSIpCiAgICBDVVJMX0NGRklfQVZBSUxBQkxFID0gRmFsc2UKCmNsYXNzIEJyb3dzZXI6CiAgICAiIiIKICAgIEzhu5twIGdp4bqjIGzhuq1wIEJyb3dzZXIgY+G7p2EgcHljaHJvbWUgbuG6v3UgdGjGsCB2aeG7h24ga2jDtG5nIGto4bqjIGThu6VuZwogICAgIiIiCiAgICBkZWYgX19pbml0X18oc2VsZiwgdXJsKToKICAgICAgICBzZWxmLnVybCA9IHVybAogICAgICAgIAogICAgZGVmIGxpc3RfdGFiKHNlbGYpOgogICAgICAgIHJldHVybiBbXQogICAgICAgIAogICAgZGVmIG5ld190YWIoc2VsZik6CiAgICAgICAgcmV0dXJuIE5vbmUKCmNsYXNzIEdvTGlrZVNlcnZpY2U6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UpOgogICAgICAgICIiIgogICAgICAgIEto4bufaSB04bqhbyBHb0xpa2UgU2VydmljZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGRiX3NlcnZpY2U6IERhdGFiYXNlIHNlcnZpY2UgxJHhu4MgbMawdSB0aMO0bmcgdGluCiAgICAgICAgICAgIGhlbHBlcl9zZXJ2aWNlOiBIZWxwZXIgc2VydmljZSDEkeG7gyB0xrDGoW5nIHTDoWMgduG7m2kgdGhp4bq/dCBi4buLCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5kYiA9IGRiX3NlcnZpY2UKICAgICAgICBzZWxmLmhlbHBlciA9IGhlbHBlcl9zZXJ2aWNlCiAgICAgICAgCiAgICAgICAgIyBD4bqldSBow6xuaCBjaG8gQVBJIHJlcXVlc3RzCiAgICAgICAgc2VsZi51c2VyX2FnZW50ID0gIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgSykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExNC4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNiIKICAgICAgICAKICAgICAgICAjIFF1eeG6v3QgxJHhu4tuaCBz4butIGThu6VuZyBjdXJsX2NmZmkgaGF5IGNsb3Vkc2NyYXBlcgogICAgICAgICMgVHLDqm4gVGVybXV4IHRoxrDhu51uZyBz4butIGThu6VuZyBjbG91ZHNjcmFwZXIgZG8gY3VybF9jZmZpIGPDsyB0aOG7gyBraMO0bmcgdMawxqFuZyB0aMOtY2gKICAgICAgICAjIGlzX3Rlcm11eCA9IHNlbGYuX2NoZWNrX2lzX3Rlcm11eCgpCiAgICAgICAgc2VsZi51c2VfY3VybF9jZmZpID0gQ1VSTF9DRkZJX0FWQUlMQUJMRQogICAgICAgIAogICAgICAgICMgS2jhu59pIHThuqFvIGNsaWVudAogICAgICAgIGlmIG5vdCBzZWxmLnVzZV9jdXJsX2NmZmkgYW5kIENMT1VEU0NSQVBFUl9BVkFJTEFCTEU6CiAgICAgICAgICAgIHNlbGYuY2xpZW50ID0gY2xvdWRzY3JhcGVyLmNyZWF0ZV9zY3JhcGVyKAogICAgICAgICAgICAgICAgYnJvd3Nlcj17CiAgICAgICAgICAgICAgICAgICAgJ2Jyb3dzZXInOiAnY2hyb21lJywKICAgICAgICAgICAgICAgICAgICAncGxhdGZvcm0nOiAnYW5kcm9pZCcsCiAgICAgICAgICAgICAgICAgICAgJ2Rlc2t0b3AnOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBGYWxsYmFjayB0byByZWd1bGFyIHJlcXVlc3RzIGlmIG5laXRoZXIgaXMgYXZhaWxhYmxlCiAgICAgICAgICAgIHNlbGYuY2xpZW50ID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgICAgIAogICAgICAgICMgQ+G6pXUgaMOsbmggdMO5eSBjaOG7jW4gY2hvIGN1cmxfY2ZmaQogICAgICAgIHNlbGYuaW1wZXJzb25hdGUgPSAiY2hyb21lMTEwIgogICAgICAgIAogICAgICAgICMgQmnhur9uIHRoZW8gZMO1aSB0aHJlYWQgcmVwb3J0CiAgICAgICAgc2VsZi5yZXBvcnRfdGhyZWFkID0gTm9uZQogICAgICAgIAogICAgICAgICMgS2jhu59pIMSR4buZbmcgdGhyZWFkIHJlcG9ydAogICAgICAgIHNlbGYuc3RhcnRfcmVwb3J0X3RocmVhZCgpCgogICAgZGVmIF9jaGVja19pc190ZXJtdXgoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSDhu6luZyBk4bulbmcgY8OzIMSRYW5nIGNo4bqheSB0csOqbiBUZXJtdXgga2jDtG5nCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSDEkWFuZyBjaOG6oXkgdHLDqm4gVGVybXV4CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEtp4buDbSB0cmEgYmnhur9uIG3DtGkgdHLGsOG7nW5nIFRFUk1VWF9WRVJTSU9OIGhv4bq3YyDEkcaw4budbmcgZOG6q24gVGVybXV4IHRyb25nIFBBVEgKICAgICAgICAgICAgaW1wb3J0IG9zCiAgICAgICAgICAgIHJldHVybiAnVEVSTVVYX1ZFUlNJT04nIGluIG9zLmVudmlyb24gb3IgJy9kYXRhL2RhdGEvY29tLnRlcm11eCcgaW4gb3MuZW52aXJvbi5nZXQoJ1BBVEgnLCAnJykKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBmZXRjaF9nb2xpa2VfaGVhZGVycyhzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGhlYWRlcnMgdOG7qyBDaHJvbWUgdsOgIGzGsHUgdsOgbyBkYXRhYmFzZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICBpZiBub3QgUFlDSFJPTUVfQVZBSUxBQkxFOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBs4bqleSBHb0xpa2UgaGVhZGVyczogdGjGsCB2aeG7h24gcHljaHJvbWUga2jDtG5nIGto4bqjIGThu6VuZyIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgICAgIGZyb20gcHljaHJvbWUgaW1wb3J0IEJyb3dzZXIKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBDaHJvbWUgxJHDoyBjw6BpIMSR4bq3dCBjaMawYQogICAgICAgICAgICBpZiBub3Qgc2VsZi5oZWxwZXIuaXNfYXBwX2luc3RhbGxlZCgiY29tLmFuZHJvaWQuY2hyb21lIik6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoIkNocm9tZSBjaMawYSDEkcaw4bujYyBjw6BpIMSR4bq3dCB0csOqbiB0aGnhur90IGLhu4siKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIENocm9tZSB24bubaSBsaW5rIEdvTGlrZSB0cuG7sWMgdGnhur9wIGLhurFuZyBBREIKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIk3hu58gQ2hyb21lIHbhu5tpIGxpbmsgR29MaWtlIHRy4buxYyB0aeG6v3AuLi4iKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci5pc19hZGJfY29ubmVjdGVkOgogICAgICAgICAgICAgICAgICAgICMgTOG6pXkgdGhhbSBz4buRIHRoaeG6v3QgYuG7iyB04burIGhlbHBlcgogICAgICAgICAgICAgICAgICAgIGRldmljZV9wYXJhbXMgPSBzZWxmLmhlbHBlci5fZ2V0X2FkYl9kZXZpY2VfcGFyYW0oKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTeG7nyBDaHJvbWUgduG7m2kgbGluayBHb0xpa2UgdHLhu7FjIHRp4bq/cAogICAgICAgICAgICAgICAgICAgIGNtZCA9IFsiYWRiIl0gKyBkZXZpY2VfcGFyYW1zICsgWwogICAgICAgICAgICAgICAgICAgICAgICAic2hlbGwiLCAiYW0iLCAic3RhcnQiLCAKICAgICAgICAgICAgICAgICAgICAgICAgIi1uIiwgImNvbS5hbmRyb2lkLmNocm9tZS9jb20uZ29vZ2xlLmFuZHJvaWQuYXBwcy5jaHJvbWUuTWFpbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICItYSIsICJhbmRyb2lkLmludGVudC5hY3Rpb24uVklFVyIsCiAgICAgICAgICAgICAgICAgICAgICAgICItZCIsICJodHRwczovL2FwcC5nb2xpa2UubmV0IgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bigKICAgICAgICAgICAgICAgICAgICAgICAgY21kLAogICAgICAgICAgICAgICAgICAgICAgICBjaGVjaz1UcnVlLAogICAgICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIG3hu58gQ2hyb21lIHbhu5tpIEdvTGlrZSBi4bqxbmcgQURCIikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJBREIga2jDtG5nIMSRxrDhu6NjIGvhur90IG7hu5FpLCBraMO0bmcgdGjhu4MgbeG7nyBDaHJvbWUiKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5TdWJwcm9jZXNzRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBt4bufIENocm9tZSBi4bqxbmcgQURCOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4budIENocm9tZSB04bqjaSB4b25nCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMTApCgogICAgICAgICAgICAjIFRoaeG6v3QgbOG6rXAgQ2hyb21lIGRlYnVnIHBvcnQgYuG6sW5nIEFEQgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZXZpY2VfcGFyYW1zID0gc2VsZi5oZWxwZXIuX2dldF9hZGJfZGV2aWNlX3BhcmFtKCkKICAgICAgICAgICAgICAgIGNtZCA9IFsiYWRiIl0gKyBkZXZpY2VfcGFyYW1zICsgWyJmb3J3YXJkIiwgInRjcDo5MjIzIiwgImxvY2FsYWJzdHJhY3Q6Y2hyb21lX2RldnRvb2xzX3JlbW90ZSJdCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bigKICAgICAgICAgICAgICAgICAgICBjbWQsCiAgICAgICAgICAgICAgICAgICAgY2hlY2s9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHRoaeG6v3QgbOG6rXAgQ2hyb21lIGRlYnVnIHBvcnQiKQogICAgICAgICAgICBleGNlcHQgc3VicHJvY2Vzcy5TdWJwcm9jZXNzRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB0aGnhur90IGzhuq1wIENocm9tZSBkZWJ1ZyBwb3J0OiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBL4bq/dCBu4buRaSDEkeG6v24gQ2hyb21lIGLhurFuZyBweWNocm9tZQogICAgICAgICAgICBicm93c2VyID0gQnJvd3NlcigiaHR0cDovL2xvY2FsaG9zdDo5MjIzIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdGFiIGhp4buHbiB04bqhaSAoc+G6vSBsw6AgdGFiIEdvTGlrZSB2w6wgduG7q2EgbeG7nykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGFicyA9IGJyb3dzZXIubGlzdF90YWIoKQogICAgICAgICAgICAgICAgaWYgbm90IHRhYnM6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIG7DoG8gdHJvbmcgQ2hyb21lIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU+G7rSBk4bulbmcgdGFiIMSR4bqndSB0acOqbiAodGFiIEdvTGlrZSB24burYSBt4bufKQogICAgICAgICAgICAgICAgZ29saWtlX3RhYiA9IHRhYnNbMF0KICAgICAgICAgICAgICAgIGdvbGlrZV90YWIuc3RhcnQoKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6Mga+G6v3QgbuG7kWkgxJHhur9uIHRhYiBHb0xpa2UiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBr4bq/dCBu4buRaSDEkeG6v24gQ2hyb21lIHRhYjoge2V9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBC4bqtdCB0aGVvIGTDtWkgbeG6oW5nCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdvbGlrZV90YWIuTmV0d29yay5lbmFibGUoKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgYuG6rXQgdGhlbyBkw7VpIG3huqFuZyIpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBi4bqtdCB0aGVvIGTDtWkgbeG6oW5nOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEJp4bq/biDEkeG7gyBraeG7g20gdHJhIHhlbSByZXF1ZXN0IMSRw6MgxJHGsOG7o2MgZ2hpIG5o4bqtbiBjaMawYQogICAgICAgICAgICByZXF1ZXN0X2NhcHR1cmVkID0gRmFsc2UKICAgICAgICAgICAgaGVhZGVycyA9IE5vbmUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDEg25nIGvDvSBz4buxIGtp4buHbiByZXF1ZXN0V2lsbEJlU2VudAogICAgICAgICAgICBkZWYgcmVxdWVzdF9jYWxsYmFjaygqKmt3YXJncyk6CiAgICAgICAgICAgICAgICBub25sb2NhbCByZXF1ZXN0X2NhcHR1cmVkLCBoZWFkZXJzCiAgICAgICAgICAgICAgICBpZiByZXF1ZXN0X2NhcHR1cmVkOgogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXF1ZXN0ID0ga3dhcmdzLmdldCgicmVxdWVzdCIsIHt9KQogICAgICAgICAgICAgICAgdXJsID0gcmVxdWVzdC5nZXQoInVybCIsICIiKQogICAgICAgICAgICAgICAgbWV0aG9kID0gcmVxdWVzdC5nZXQoIm1ldGhvZCIsICIiKQogICAgICAgICAgICAgICAgaWYgImh0dHBzOi8vZ2F0ZXdheS5nb2xpa2UubmV0L2FwaS9zdGF0aXN0aWNzL3JlcG9ydCIgaW4gdXJsIGFuZCBtZXRob2QgPT0gIkdFVCI6CiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHJlcXVlc3QuZ2V0KCJoZWFkZXJzIiwge30pCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgZ2hpIG5o4bqtbiBoZWFkZXJzIEdvTGlrZSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfY2FwdHVyZWQgPSBUcnVlCiAgICAgICAgICAgIAogICAgICAgICAgICBnb2xpa2VfdGFiLk5ldHdvcmsucmVxdWVzdFdpbGxCZVNlbnQgPSByZXF1ZXN0X2NhbGxiYWNrCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqNpIGzhuqFpIHRyYW5nIMSR4buDIMSR4bqjbSBi4bqjbyBjw7MgcmVxdWVzdCBBUEkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZ29saWtlX3RhYi5jYWxsX21ldGhvZCgiUGFnZS5yZWxvYWQiKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgdOG6o2kgbOG6oWkgdHJhbmcgR29MaWtlIikKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIHThuqNpIGzhuqFpIHRyYW5nOiB7ZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQ4bujaSDEkeG7gyBnaGkgbmjhuq1uIHJlcXVlc3QKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQYW5nIGNo4budIGdoaSBuaOG6rW4gcmVxdWVzdCBHb0xpa2UuLi4iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDE1KQogICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqvdCB0aGVvIGTDtWkgbeG6oW5nCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGdvbGlrZV90YWIuTmV0d29yay5kaXNhYmxlKCkKICAgICAgICAgICAgICAgIGdvbGlrZV90YWIuTmV0d29yay5yZXF1ZXN0V2lsbEJlU2VudCA9IE5vbmUKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHThuq90IHRoZW8gZMO1aSBt4bqhbmciKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkzhu5dpIGtoaSB04bqvdCB0aGVvIGTDtWkgbeG6oW5nOiB7ZX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaGVhZGVyczoKICAgICAgICAgICAgICAgICMgTMawdSBoZWFkZXJzIHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgICAgIHNlbGYuc2F2ZV9nb2xpa2VfaGVhZGVycyhoZWFkZXJzKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgbMawdSBoZWFkZXJzIHbDoG8gZGF0YWJhc2UiKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgbOG6pXkgdGjDtG5nIHRpbiB4w6FjIHRo4buxYyBHb0xpa2UsIHZ1aSBsw7JuZyBraeG7g20gdHJhIGzhuqFpIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgR29MaWtlIGhlYWRlcnMiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkcOzbmcgQ2hyb21lCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcCgiY29tLmFuZHJvaWQuY2hyb21lIikKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgCiAgICBkZWYgc2F2ZV9nb2xpa2VfaGVhZGVycyhzZWxmLCBoZWFkZXJzOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBMxrB1IEdvTGlrZSBoZWFkZXJzIHbDoG8gZ29saWtlX2NvbmZpZwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGhlYWRlcnM6IEhlYWRlcnMgdOG7qyByZXF1ZXN0IEdvTGlrZQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzGsHUgdsOgbyBnb2xpa2VfY29uZmlnIHRoYXkgdsOsIGRldmljZV9jb25maWcKICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfZ29saWtlX2NvbmZpZyh7CiAgICAgICAgICAgICAgICAiaGVhZGVycyI6IGhlYWRlcnMsCiAgICAgICAgICAgICAgICAiaGVhZGVyc191cGRhdGVkIjogaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICB9KQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBsxrB1IEdvTGlrZSBoZWFkZXJzOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIG5lZWRzX2hlYWRlcnNfcmVmcmVzaChzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIGPDsyBj4bqnbiBsw6BtIG3hu5tpIEdvTGlrZSBoZWFkZXJzIGtow7RuZwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgY+G6p24gbMOgbSBt4bubaSwgRmFsc2UgbuG6v3UgaGVhZGVycyBjw7JuIGjhu6NwIGzhu4cKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgY8OzIHRow7RuZyB0aW4geMOhYyB0aOG7sWMgR29MaWtlIGNoxrBhCiAgICAgICAgaWYgbm90IHNlbGYuaXNfZ29saWtlX2F1dGhlbnRpY2F0ZWQoKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIHRo4budaSBnaWFuIGPhuq1wIG5o4bqtdCBjdeG7kWkgdOG7qyBnb2xpa2VfY29uZmlnCiAgICAgICAgZ29saWtlX2NvbmZpZyA9IHNlbGYuZGIuZ2V0X2dvbGlrZV9jb25maWcoe30pCiAgICAgICAgbGFzdF91cGRhdGUgPSBnb2xpa2VfY29uZmlnLmdldCgiaGVhZGVyc191cGRhdGVkIiwgMCkKICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSDEkcOjIGPhuq1wIG5o4bqtdCB0cm9uZyB2w7JuZyAyNCBnaeG7nSBxdWEsIGtow7RuZyBj4bqnbiBs4bqleSBs4bqhaQogICAgICAgIHJldHVybiBjdXJyZW50X3RpbWUgLSBsYXN0X3VwZGF0ZSA+PSA4NjQwMCAgIyAyNCBnaeG7nSA9IDg2NDAwIGdpw6J5CiAgICAKICAgIGRlZiBnZXRfZ29saWtlX2hlYWRlcnMoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgR29MaWtlIGhlYWRlcnMgdOG7qyBnb2xpa2VfY29uZmlnCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEhlYWRlcnMgaG/hurdjIGRpY3Rpb25hcnkgcuG7l25nIG7hur91IGtow7RuZyBjw7MKICAgICAgICAiIiIKICAgICAgICAjIEzhuqV5IHThu6sgZ29saWtlX2NvbmZpZyB0aGF5IHbDrCBkZXZpY2VfY29uZmlnCiAgICAgICAgZ29saWtlX2NvbmZpZyA9IHNlbGYuZGIuZ2V0X2dvbGlrZV9jb25maWcoe30pCiAgICAgICAgcmV0dXJuIGdvbGlrZV9jb25maWcuZ2V0KCJoZWFkZXJzIiwge30pCiAgICAgICAgCiAgICBkZWYgaXNfZ29saWtlX2F1dGhlbnRpY2F0ZWQoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSDEkcOjIGPDsyB0aMO0bmcgdGluIHjDoWMgdGjhu7FjIEdvTGlrZSBo4bujcCBs4buHIGNoxrBhCiAgICAgICAgVmFsaWRhdGUgY+G6oyBBdXRob3JpemF0aW9uIHbDoCB0IHRva2VuCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSDEkcOjIHjDoWMgdGjhu7FjIMSR4bqneSDEkeG7pywgRmFsc2UgbuG6v3UgdGhp4bq/dSB0aMO0bmcgdGluCiAgICAgICAgIiIiCiAgICAgICAgaGVhZGVycyA9IHNlbGYuZ2V0X2dvbGlrZV9oZWFkZXJzKCkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgY8OzIGhlYWRlcnMga2jDtG5nCiAgICAgICAgaWYgbm90IGhlYWRlcnM6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgY8OzIEF1dGhvcml6YXRpb24gdG9rZW4ga2jDtG5nCiAgICAgICAgYXV0aG9yaXphdGlvbiA9IGhlYWRlcnMuZ2V0KCJBdXRob3JpemF0aW9uIikgb3IgaGVhZGVycy5nZXQoImF1dGhvcml6YXRpb24iKQogICAgICAgIGlmIG5vdCBhdXRob3JpemF0aW9uIG9yIG5vdCBhdXRob3JpemF0aW9uLnN0YXJ0c3dpdGgoIkJlYXJlciAiKToKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIkdvTGlrZSBoZWFkZXJzIHRoaeG6v3UgQXV0aG9yaXphdGlvbiB0b2tlbiBo4bujcCBs4buHIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBjw7MgdCB0b2tlbiBraMO0bmcKICAgICAgICB0X3Rva2VuID0gaGVhZGVycy5nZXQoInQiKQogICAgICAgIGlmIG5vdCB0X3Rva2VuOgogICAgICAgICAgICBsb2dnZXIud2FybmluZygiR29MaWtlIGhlYWRlcnMgdGhp4bq/dSB0IHRva2VuIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgIGxvZ2dlci5kZWJ1ZygiR29MaWtlIGhlYWRlcnMgaOG7o3AgbOG7hyB24bubaSDEkeG7pyB0aMO0bmcgdGluIEF1dGhvcml6YXRpb24gdsOgIHQgdG9rZW4iKQogICAgICAgIHJldHVybiBUcnVlCiAgICAKICAgIGRlZiBmZXRjaF9nb2xpa2VfaGVhZGVyc193aXRoX3JldHJ5KHNlbGYsIGZvcmNlX3JlZnJlc2g6IGJvb2wgPSBGYWxzZSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBHb0xpa2UgaGVhZGVycyB24bubaSBjxqEgY2jhur8gdGjhu60gbOG6oWkuIE3hurdjIMSR4buLbmggaXNfYXV0b19nZXRfaGVhZGVycyA9IHRydWUuCiAgICAgICAgVGjhu60gbOG6oWkgdOG7kWkgxJFhIDMgbOG6p24gbuG6v3UgdGjhuqV0IGLhuqFpLgogICAgICAgIE7hur91IGtow7RuZyBs4bqleSDEkcaw4bujYyBoZWFkZXJzIHNhdSB04bqldCBj4bqjIGPDoWMgbOG6p24gdGjhu60sIHThu7EgxJHhu5luZyBjaHV54buDbiBpc19hdXRvX2dldF9oZWFkZXJzID0gZmFsc2UuCiAgICAgICAgQ2jhu4kgbOG6pXkgbOG6oWkgaGVhZGVycyAxIGzhuqduIG3hu5dpIG5nw6B5IGThu7FhIHbDoG8gdGjhu51pIGdpYW4gY+G6rXAgbmjhuq10IGN14buRaSBjw7luZy4KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBmb3JjZV9yZWZyZXNoOiBO4bq/dSBUcnVlLCBz4bq9IGx1w7RuIGzhuqV5IGzhuqFpIGhlYWRlcnMgYuG6pXQga+G7gyB0aOG7nWkgZ2lhbiBj4bqtcCBuaOG6rXQgY3Xhu5FpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJHDoyBjw7MgaGVhZGVycyBo4bujcCBs4buHIGhv4bq3YyBs4bqleSDEkcaw4bujYyBoZWFkZXJzIG3hu5tpLCBGYWxzZSBu4bq/dSBraMO0bmcgbOG6pXkgxJHGsOG7o2MKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgY29uZmlnIGPDsyBjaG8gcGjDqXAgdOG7sSDEkeG7mW5nIGzhuqV5IGhlYWRlcnMga2jDtG5nIHThu6sgZ29saWtlX2NvbmZpZwogICAgICAgIGdvbGlrZV9jb25maWcgPSBzZWxmLmRiLmdldF9nb2xpa2VfY29uZmlnKHt9KQogICAgICAgIGlzX2F1dG9fZ2V0X2hlYWRlciA9IGdvbGlrZV9jb25maWcuZ2V0KCJpc19hdXRvX2dldF9oZWFkZXJzIiwgVHJ1ZSkgICMgTeG6t2MgxJHhu4tuaCB0cnVlCiAgICAgICAgCiAgICAgICAgaWYgbm90IGlzX2F1dG9fZ2V0X2hlYWRlciBhbmQgbm90IGZvcmNlX3JlZnJlc2g6CiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiQ29uZmlnIGlzX2F1dG9fZ2V0X2hlYWRlcnMgPSBmYWxzZSwgYuG7jyBxdWEgdmnhu4djIHThu7EgxJHhu5luZyBs4bqleSBoZWFkZXJzIikKICAgICAgICAgICAgIyBDaOG7iSBraeG7g20gdHJhIHhlbSBjw7MgaGVhZGVycyB04burIHNlcnZlciBraMO0bmcKICAgICAgICAgICAgcmV0dXJuIHNlbGYuaXNfZ29saWtlX2F1dGhlbnRpY2F0ZWQoKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjw7MgdGjDtG5nIHRpbiB4w6FjIHRo4buxYyBHb0xpa2UgY2jGsGEKICAgICAgICBpZiBzZWxmLmlzX2dvbGlrZV9hdXRoZW50aWNhdGVkKCkgYW5kIG5vdCBmb3JjZV9yZWZyZXNoOgogICAgICAgICAgICAjIEtp4buDbSB0cmEgdGjhu51pIGdpYW4gY+G6rXAgbmjhuq10IGN14buRaSB04burIGdvbGlrZV9jb25maWcKICAgICAgICAgICAgZ29saWtlX2NvbmZpZyA9IHNlbGYuZGIuZ2V0X2dvbGlrZV9jb25maWcoe30pCiAgICAgICAgICAgIGxhc3RfdXBkYXRlID0gZ29saWtlX2NvbmZpZy5nZXQoImhlYWRlcnNfdXBkYXRlZCIsIDApCiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgxJHDoyBj4bqtcCBuaOG6rXQgdHJvbmcgdsOybmcgMjQgZ2nhu50gcXVhLCBraMO0bmcgY+G6p24gbOG6pXkgbOG6oWkKICAgICAgICAgICAgaWYgY3VycmVudF90aW1lIC0gbGFzdF91cGRhdGUgPCA4NjQwMDogICMgMjQgZ2nhu50gPSA4NjQwMCBnacOieQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHF1w6EgMjQgZ2nhu50gdOG7qyBs4bqnbiBj4bqtcCBuaOG6rXQgY3Xhu5FpLCBz4bq9IGzDoG0gbeG7m2kgaGVhZGVycyBHb0xpa2UiKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGZvcmNlX3JlZnJlc2g6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiQuG6r3QgYnXhu5ljIGzDoG0gbeG7m2kgaGVhZGVycyBHb0xpa2UiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkNoxrBhIGPDsyB0aMO0bmcgdGluIHjDoWMgdGjhu7FjIEdvTGlrZSwgc+G6vSBs4bqleSBoZWFkZXJzIG3hu5tpIikKICAgICAgICAKICAgICAgICAjIFRo4buxYyBoaeG7h24gbOG6pXkgaGVhZGVycyB24bubaSBjxqEgY2jhur8gdGjhu60gbOG6oWkKICAgICAgICBtYXhfYXR0ZW1wdHMgPSAzICAjIEdp4bqjbSBz4buRIGzhuqduIHRo4butIHh14buRbmcgMwogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKDEsIG1heF9hdHRlbXB0cyArIDEpOgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQYW5nIGzhuqV5IEdvTGlrZSBoZWFkZXJzIChs4bqnbiB0aOG7rSB7YXR0ZW1wdH0ve21heF9hdHRlbXB0c30pLi4uIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgVGjhu60gbOG6pXkgaGVhZGVycwogICAgICAgICAgICAgICAgc3VjY2VzcyA9IHNlbGYuZmV0Y2hfZ29saWtlX2hlYWRlcnMoKQogICAgICAgICAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBs4bqleSB2w6AgbMawdSBoZWFkZXJzIEdvTGlrZSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHRo4buDIGzhuqV5IGhlYWRlcnMgR29MaWtlIGzhuqduIHthdHRlbXB0fSwgc+G6vSB0aOG7rSBs4bqhaS4uLiIpCiAgICAgICAgICAgICAgICAgICAgIyDEkMOzbmcgQ2hyb21lIG7hur91IGPDsm4gbeG7nwogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcCgiY29tLmFuZHJvaWQuY2hyb21lIikKICAgICAgICAgICAgICAgICAgICBpZiBhdHRlbXB0IDwgbWF4X2F0dGVtcHRzOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIHRoZW8gc+G7kSBs4bqnbiB0aOG7rSAoMTBzLCAyMHMpCiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRfdGltZSA9IGF0dGVtcHQgKiAxMAogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQ4bujaSB7d2FpdF90aW1lfSBnacOieSB0csaw4bubYyBraGkgdGjhu60gbOG6oWkuLi4iKQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXRfdGltZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGzhuqV5IGhlYWRlcnMgR29MaWtlOiB7ZX0iKQogICAgICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gQ2hyb21lIMSRxrDhu6NjIMSRw7NuZwogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuY2xvc2VfYXBwKCJjb20uYW5kcm9pZC5jaHJvbWUiKQogICAgICAgICAgICAgICAgaWYgYXR0ZW1wdCA8IG1heF9hdHRlbXB0czoKICAgICAgICAgICAgICAgICAgICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIHRoZW8gc+G7kSBs4bqnbiB0aOG7rSAoMTBzLCAyMHMpCiAgICAgICAgICAgICAgICAgICAgd2FpdF90aW1lID0gYXR0ZW1wdCAqIDEwCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkOG7o2kge3dhaXRfdGltZX0gZ2nDonkgdHLGsOG7m2Mga2hpIHRo4butIGzhuqFpLi4uIikKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXRfdGltZSkKICAgICAgICAKICAgICAgICBsb2dnZXIuZXJyb3IoZiLEkMOjIHRo4butIGzhuqV5IEdvTGlrZSBoZWFkZXJzIHttYXhfYXR0ZW1wdHN9IGzhuqduIG5oxrBuZyBraMO0bmcgdGjDoG5oIGPDtG5nIikKICAgICAgICAKICAgICAgICAjIFThu7EgxJHhu5luZyBjaHV54buDbiBpc19hdXRvX2dldF9oZWFkZXJzID0gZmFsc2UgxJHhu4MgdHLDoW5oIHRo4butIGzhuqFpIGxpw6puIHThu6VjCiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlThu7EgxJHhu5luZyBjaHV54buDbiBpc19hdXRvX2dldF9oZWFkZXJzID0gZmFsc2UgZG8ga2jDtG5nIHRo4buDIGzhuqV5IMSRxrDhu6NjIEdvTGlrZSBoZWFkZXJzIikKICAgICAgICBzZWxmLmRiLnVwZGF0ZV9nb2xpa2VfY29uZmlnKHsKICAgICAgICAgICAgImlzX2F1dG9fZ2V0X2hlYWRlcnMiOiBGYWxzZQogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGFwaV9yZXF1ZXN0KHNlbGYsIHVybCwgbWV0aG9kPSJHRVQiLCBwYXlsb2FkPU5vbmUpOgogICAgICAgICIiIgogICAgICAgIEfhu41pIEFQSSBj4bunYSBHb0xpa2UgduG7m2kgaGVhZGVycyDEkcOjIGzGsHUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1cmw6IFVSTCBj4bunYSBBUEkKICAgICAgICAgICAgbWV0aG9kOiBQaMawxqFuZyB0aOG7qWMgSFRUUCAoR0VUIGhv4bq3YyBQT1NUKQogICAgICAgICAgICBwYXlsb2FkOiBE4buvIGxp4buHdSBn4butaSDEkWkgKGNobyBQT1NUIHJlcXVlc3QpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3QgaG/hurdjIE5vbmU6IEvhur90IHF14bqjIEFQSSBu4bq/dSB0aMOgbmggY8O0bmcsIE5vbmUgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IGhlYWRlcnMgdOG7qyBkYXRhYmFzZQogICAgICAgICAgICBoZWFkZXJzID0gc2VsZi5nZXRfZ29saWtlX2hlYWRlcnMoKQogICAgICAgICAgICBpZiBub3QgaGVhZGVyczoKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IEdvTGlrZSBoZWFkZXJzIikKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyBoZWFkZXJzIGPDsyB1c2VyLWFnZW50CiAgICAgICAgICAgIGlmICJ1c2VyLWFnZW50IiBub3QgaW4gaGVhZGVycyBhbmQgIlVzZXItQWdlbnQiIG5vdCBpbiBoZWFkZXJzOgogICAgICAgICAgICAgICAgaGVhZGVyc1sidXNlci1hZ2VudCJdID0gc2VsZi51c2VyX2FnZW50CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSBBUEkgYmFzZSBVUkwgdOG7qyBj4bqldSBow6xuaCB0aGnhur90IGLhu4sgaG/hurdjIHPhu60gZOG7pW5nIG3hurdjIMSR4buLbmggdOG7qyBjb25maWcKICAgICAgICAgICAgYXBpX2Jhc2UgPSBzZWxmLmRiLmdldF9kZXZpY2VfY29uZmlnKCJnb2xpa2VfYXBpX2Jhc2UiLCBjb25maWcuR09MSUtFX0FQSV9CQVNFKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBVUkwga2jDtG5nIGLhuq90IMSR4bqndSBi4bqxbmcgaHR0cCwgdGjDqm0gYXBpX2Jhc2UgdsOgbyB0csaw4bubYwogICAgICAgICAgICBpZiBub3QgdXJsLnN0YXJ0c3dpdGgoImh0dHAiKToKICAgICAgICAgICAgICAgIHVybCA9IGYie2FwaV9iYXNlfS97dXJsLmxzdHJpcCgnLycpfSIKCiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgY3VybF9jZmZpIGhv4bq3YyBjbG91ZHNjcmFwZXIgdMO5eSB0aGVvIG3DtGkgdHLGsOG7nW5nCiAgICAgICAgICAgIGlmIHNlbGYudXNlX2N1cmxfY2ZmaSBhbmQgQ1VSTF9DRkZJX0FWQUlMQUJMRToKICAgICAgICAgICAgICAgIGlmIG1ldGhvZCA9PSAiR0VUIjoKICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGN1cmxfcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgaW1wZXJzb25hdGU9c2VsZi5pbXBlcnNvbmF0ZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsaWYgbWV0aG9kID09ICJQT1NUIjoKICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGN1cmxfcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgaW1wZXJzb25hdGU9c2VsZi5pbXBlcnNvbmF0ZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTWV0aG9kIGtow7RuZyBo4bujcCBs4buHOiB7bWV0aG9kfSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgU+G7rSBk4bulbmcgY2xvdWRzY3JhcGVyIGhv4bq3YyBmYWxsYmFjayB0byByZXF1ZXN0cwogICAgICAgICAgICAgICAgaWYgbWV0aG9kID09ICJHRVQiOgogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5jbGllbnQuZ2V0KAogICAgICAgICAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycwogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsaWYgbWV0aG9kID09ICJQT1NUIjoKICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuY2xpZW50LnBvc3QoCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCwKICAgICAgICAgICAgICAgICAgICAgICAganNvbj1wYXlsb2FkLAogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIk1ldGhvZCBraMO0bmcgaOG7o3AgbOG7hzoge21ldGhvZH0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCgogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFjhu60gbMO9IGhp4buDbiB0aOG7iyBs4buXaSBk4buFIMSR4buNYyBoxqFuCiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSByZXNwb25zZS50ZXh0CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBQYXJzZSByZXNwb25zZSBsw6AgSlNPTgogICAgICAgICAgICAgICAgICAgIGVycm9yX2pzb24gPSByZXNwb25zZS5qc29uKCkKICAgICAgICAgICAgICAgICAgICAjIEZvcm1hdCBsb2cgdGjDoG5oIDEgZMOybmcKICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBlcnJvcl9qc29uLmdldCgnc3RhdHVzJywgcmVzcG9uc2Uuc3RhdHVzX2NvZGUpCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IGVycm9yX2pzb24uZ2V0KCdzdWNjZXNzJywgRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVycm9yX2pzb24uZ2V0KCdtZXNzYWdlJywgJ0tow7RuZyBjw7MgdGjDtG5nIGLDoW8gbOG7l2knKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgR+G7mXAgdGjDoG5oIDEgZMOybmcKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJBUEkgdHLhuqMgduG7gSBs4buXaSBbe3N0YXR1c31dIFtzdWNjZXNzOiB7c3VjY2Vzc31dIHttZXNzYWdlfSIpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgcGjhuqNpIEpTT04sIGhp4buDbiB0aOG7iyB0ZXh0IHRow7QKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJBUEkgdHLhuqMgduG7gSBs4buXaSB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9OiB7ZXJyb3JfbXNnfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4buNaSBBUEkgW3ttZXRob2R9IHt1cmx9XToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfY3VybF9jZmZpX3JlcXVlc3Qoc2VsZiwgdXJsOiBzdHIsIG1ldGhvZDogc3RyID0gImdldCIsIGhlYWRlcnM6IERpY3Rbc3RyLCBzdHJdID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogRGljdFtzdHIsIEFueV0gPSBOb25lLCB0aW1lb3V0OiBpbnQgPSAzMCkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gcmVxdWVzdCBz4butIGThu6VuZyBjdXJsX2NmZmkgKGhp4buHdSBxdeG6oyBjaG8gQ2xvdWRmbGFyZSkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG1ldGhvZC5sb3dlcigpID09ICJnZXQiOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjdXJsX3JlcXVlc3RzLmdldCgKICAgICAgICAgICAgICAgICAgICB1cmwsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgICAgICAgICAgICAgIGRhdGE9ZGF0YSwKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PXRpbWVvdXQsCiAgICAgICAgICAgICAgICAgICAgaW1wZXJzb25hdGU9ImNocm9tZTExMCIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgZWxzZTogICMgUE9TVAogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjdXJsX3JlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICBkYXRhPWRhdGEsCiAgICAgICAgICAgICAgICAgICAgdGltZW91dD10aW1lb3V0LAogICAgICAgICAgICAgICAgICAgIGltcGVyc29uYXRlPSJjaHJvbWUxMTAiCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBzdGF0dXMgY29kZToge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGfhu41pIEFQSSBjdXJsX2NmZmkgW3ttZXRob2R9IHt1cmx9XToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgIGRlZiBmZXRjaF9nb2xpa2VfcmVwb3J0KHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRow7RuZyB0aW4gcmVwb3J0IHThu6sgR29MaWtlIHbDoCB04buVbmcgaOG7o3AgbOG6oWkKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGjDtG5nIHRpbiByZXBvcnQgxJHDoyB04buVbmcgaOG7o3AgaG/hurdjIGRpY3QgcuG7l25nIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKCiAgICAgICAgICAgICMgR+G7jWkgQVBJIC9tZSDEkeG7gyBs4bqleSB0aMO0bmcgdGluIG5nxrDhu51pIGTDuW5nCiAgICAgICAgICAgIHVzZXJfaW5mbyA9IHNlbGYuYXBpX3JlcXVlc3QoInVzZXJzL21lIikKICAgICAgICAgICAgdXNlcl9zdW1tYXJ5ID0ge30KICAgICAgICAgICAgaWYgdXNlcl9pbmZvIGFuZCB1c2VyX2luZm8uZ2V0KCJzdWNjZXNzIiwgRmFsc2UpIGFuZCAiZGF0YSIgaW4gdXNlcl9pbmZvOgogICAgICAgICAgICAgICAgZGF0YV91c2VyID0gdXNlcl9pbmZvWyJkYXRhIl0KICAgICAgICAgICAgICAgIHVzZXJfc3VtbWFyeSA9IHsKICAgICAgICAgICAgICAgICAgICAiZ29saWtlX3VzZXJfaWQiOiBkYXRhX3VzZXIuZ2V0KCJpZCIpLAogICAgICAgICAgICAgICAgICAgICJnb2xpa2VfdXNlcl9uYW1lIjogZGF0YV91c2VyLmdldCgibmFtZSIpLAogICAgICAgICAgICAgICAgICAgICJnb2xpa2VfdXNlcl9lbWFpbCI6IGRhdGFfdXNlci5nZXQoImVtYWlsIiksCiAgICAgICAgICAgICAgICAgICAgImdvbGlrZV91c2VyX3VzZXJuYW1lIjogZGF0YV91c2VyLmdldCgidXNlcm5hbWUiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiVGjDtG5nIHRpbiBuZ8aw4budaSBkw7luZyBHb0xpa2U6IHt1c2VyX3N1bW1hcnl9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJLaMO0bmcgbOG6pXkgxJHGsOG7o2MgdGjDtG5nIHRpbiAvbWUgdOG7qyBHb0xpa2UgaG/hurdjIHBo4bqjbiBo4buTaSBraMO0bmcgaOG7o3AgbOG7hyIpCgogICAgICAgICAgICAjIEfhu41pIEFQSSByZXBvcnQKICAgICAgICAgICAgcmVwb3J0X2RhdGEgPSBzZWxmLmFwaV9yZXF1ZXN0KCJzdGF0aXN0aWNzL3JlcG9ydCIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgcmVwb3J0X2RhdGEgb3IgInN1Y2Nlc3MiIG5vdCBpbiByZXBvcnRfZGF0YSBvciBub3QgcmVwb3J0X2RhdGFbInN1Y2Nlc3MiXToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGzhuqV5IHRow7RuZyB0aW4gcmVwb3J0IHThu6sgR29MaWtlIikKICAgICAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG7lW5nIGjhu6NwIHRow7RuZyB0aW4KICAgICAgICAgICAgY3VycmVudF9jb2luID0gcmVwb3J0X2RhdGEuZ2V0KCJjdXJyZW50X2NvaW4iLCAwKQogICAgICAgICAgICBtZXNzYWdlID0gcmVwb3J0X2RhdGEuZ2V0KCJtZXNzYWdlIiwgIiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrW5oIHThu5VuZyBwZW5kaW5nX2NvaW4gdsOgIGhvbGRfY29pbiB04burIGPDoWMgYXBwIHF1YW4gdMOibQogICAgICAgICAgICBhcHBzID0gWyJpbnN0YWdyYW0iLCAidGlrdG9rIiwgInNuYXBjaGF0Il0KICAgICAgICAgICAgdG90YWxfcGVuZGluZ19jb2luID0gMAogICAgICAgICAgICB0b3RhbF9ob2xkX2NvaW4gPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgYXBwIGluIGFwcHM6CiAgICAgICAgICAgICAgICBpZiBhcHAgaW4gcmVwb3J0X2RhdGE6CiAgICAgICAgICAgICAgICAgICAgYXBwX2RhdGEgPSByZXBvcnRfZGF0YVthcHBdCiAgICAgICAgICAgICAgICAgICAgdG90YWxfcGVuZGluZ19jb2luICs9IGFwcF9kYXRhLmdldCgicGVuZGluZ19jb2luIiwgMCkKICAgICAgICAgICAgICAgICAgICB0b3RhbF9ob2xkX2NvaW4gKz0gYXBwX2RhdGEuZ2V0KCJob2xkX2NvaW4iLCAwKQogICAgICAgICAgICAKICAgICAgICAgICAKCiAgICAgICAgICAgICMgVOG6oW8gZGljdCBr4bq/dCBxdeG6oyB04buVbmcgaOG7o3AKICAgICAgICAgICAgc3VtbWFyeSA9IHsKICAgICAgICAgICAgICAgICJjdXJyZW50X2NvaW4iOiBjdXJyZW50X2NvaW4sCiAgICAgICAgICAgICAgICAidG90YWxfcGVuZGluZ19jb2luIjogdG90YWxfcGVuZGluZ19jb2luLAogICAgICAgICAgICAgICAgInRvdGFsX2hvbGRfY29pbiI6IHRvdGFsX2hvbGRfY29pbiwKICAgICAgICAgICAgICAgICJnb2xpa2VfcmVwb3J0X21lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgImdvbGlrZV9yZXBvcnRfdXBkYXRlZF9hdCI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgfQogICAgICAgICAgICAjIEdow6lwIHRow7RuZyB0aW4gbmfGsOG7nWkgZMO5bmcgdsOgbyBzdW1tYXJ5CiAgICAgICAgICAgIHN1bW1hcnkudXBkYXRlKHVzZXJfc3VtbWFyeSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTMawdSB2w6BvIGRhdGFiYXNlCiAgICAgICAgICAgIHNlbGYuZGIuc2V0KCJnb2xpa2VfcmVwb3J0Iiwgc3VtbWFyeSkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIEdvTGlrZSByZXBvcnQ6IHh1IGhp4buHbiB04bqhaT17Y3VycmVudF9jb2lufSwgeHUgxJFhbmcgY2jhu509e3RvdGFsX3BlbmRpbmdfY29pbn0sIHh1IGdp4buvPXt0b3RhbF9ob2xkX2NvaW59IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBzdW1tYXJ5CiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgbOG6pXkgdGjDtG5nIHRpbiByZXBvcnQgdOG7qyBHb0xpa2U6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgICAgICAgICAKICAgIGRlZiBzdGFydF9yZXBvcnRfdGhyZWFkKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIEto4bufaSDEkeG7mW5nIHRocmVhZCDEkeG7i25oIGvhu7MgbOG6pXkgdGjDtG5nIHRpbiByZXBvcnQgdOG7qyBHb0xpa2UKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgdGhyZWFkIMSRw6MgY2jhuqF5IGNoxrBhCiAgICAgICAgaWYgc2VsZi5yZXBvcnRfdGhyZWFkIGlzIG5vdCBOb25lIGFuZCBzZWxmLnJlcG9ydF90aHJlYWQuaXNfYWxpdmUoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlRocmVhZCByZXBvcnQgR29MaWtlIMSRw6MgxJFhbmcgY2jhuqF5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgIGltcG9ydCB0aHJlYWRpbmcKICAgICAgICAKICAgICAgICBkZWYgcmVwb3J0X2xvb3AoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkLhuq90IMSR4bqndSB0aHJlYWQgbOG6pXkgdGjDtG5nIHRpbiByZXBvcnQgR29MaWtlIMSR4buLbmgga+G7syIpCiAgICAgICAgICAgIAogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyBjw7MgaGVhZGVycyBjaMawYQogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfZ29saWtlX2F1dGhlbnRpY2F0ZWQoKToKICAgICAgICAgICAgICAgICAgICAgICAgIyBM4bqleSB0aMO0bmcgdGluIHJlcG9ydAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZldGNoX2dvbGlrZV9yZXBvcnQoKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJDaMawYSBjw7MgaGVhZGVycyBHb0xpa2UsIGtow7RuZyB0aOG7gyBs4bqleSB0aMO0bmcgdGluIHJlcG9ydCIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHRyb25nIHRocmVhZCByZXBvcnQgR29MaWtlOiB7ZX0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOZ+G7pyAxMCBwaMO6dAogICAgICAgICAgICAgICAgdGltZS5zbGVlcCg2MDApCiAgICAgICAgCiAgICAgICAgIyBU4bqhbyB2w6Aga2jhu59pIMSR4buZbmcgdGhyZWFkCiAgICAgICAgc2VsZi5yZXBvcnRfdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9cmVwb3J0X2xvb3AsIGRhZW1vbj1UcnVlKQogICAgICAgIHNlbGYucmVwb3J0X3RocmVhZC5zdGFydCgpCiAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6Mga2jhu59pIMSR4buZbmcgdGhyZWFkIGzhuqV5IHRow7RuZyB0aW4gcmVwb3J0IEdvTGlrZSDEkeG7i25oIGvhu7MiKQoKICAgIGRlZiBnZXRfZ29saWtlX3JlcG9ydChzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aMO0bmcgdGluIHJlcG9ydCBHb0xpa2UgxJHDoyBsxrB1IHRyb25nIGRhdGFiYXNlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFRow7RuZyB0aW4gcmVwb3J0IGhv4bq3YyBkaWN0IHLhu5duZyBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuZGIuZ2V0KCJnb2xpa2VfcmVwb3J0Iiwge30pCg==').decode('utf-8'))
