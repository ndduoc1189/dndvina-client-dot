import base64
exec(base64.b64decode('import datetime
import time
import random
import re
from typing import Dict, Any, List, Optional
from jobs.job_base import BaseJob

class TiktokJob(BaseJob):
    def __init__(self, db_service, helper_service, golike_service=None):
        super().__init__(db_service, helper_service, golike_service)
        self.app_package = "com.ss.android.ugc.trill"
        self.app_name = "tiktok"
        
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản Tiktok từ thiết bị"""
        accounts = []
        
        try:
            # Mở ứng dụng TikTok
            self.helper.open_app(self.app_package)
            
            # Chờ màn hình chính tải - kiểm tra cho đến khi có "Trang chủ" hoặc tối đa 20s
            home_button = self.helper.wait_for_element(content_desc="Trang chủ", timeout=20)
            if not home_button:
                self.logger.error("Không thể tải màn hình chính TikTok sau 20 giây")
                return []
                
            # Tìm nút "Hồ sơ" và nhấp vào
            if not self._navigate_to_profile_tab():
                return []
                
            # Mở menu hồ sơ để lấy danh sách tài khoản
            if not self._open_profile_menu():
                return []
            
            # Lấy XML màn hình sau khi mở menu
            screen_xml = self.helper.dump_screen_xml()
            
            # Tìm nút "Thêm tài khoản"
            add_account_button = self.helper.find_element_in_xml(screen_xml, content_desc="Thêm tài khoản")
            
            if add_account_button:
                # Tìm danh sách tài khoản (RecyclerView) - là cha của nút "Thêm tài khoản"
                recycler_view = None
                
                # Tìm tất cả RecyclerView
                all_recycler_views = self.helper.find_all_elements_in_xml(
                    screen_xml, 
                    class_name="androidx.recyclerview.widget.RecyclerView"
                )
                
                # Tìm RecyclerView chứa các tài khoản
                for rv in all_recycler_views:
                    rv_bounds = self.helper.get_element_bounds(rv)
                    add_account_bounds = self.helper.get_element_bounds(add_account_button)
                    
                    # Kiểm tra xem add_account_button có nằm trong recycler_view không
                    if (rv_bounds[0] <= add_account_bounds[0] and
                        rv_bounds[1] <= add_account_bounds[1] and
                        rv_bounds[2] >= add_account_bounds[2] and
                        rv_bounds[3] >= add_account_bounds[3]):
                        recycler_view = rv
                        break
                
                if recycler_view:
                    # Tìm tất cả nút (Button) trong RecyclerView bằng class thay vì resource-id
                    account_buttons = self.helper.find_all_elements_in_xml(
                        screen_xml,
                        class_name="android.widget.Button"
                    )
                    
                    for button in account_buttons:
                        # Bỏ qua nút "Thêm tài khoản"
                        if button.get("content-desc") == "Thêm tài khoản":
                            continue
                        
                        # Lấy tên tài khoản từ content-desc
                        username = button.get("content-desc", "")
                        if not username:
                            # Tìm TextView trong button bằng class thay vì resource-id
                            textviews = self.helper.find_all_elements_in_xml(
                                screen_xml,
                                class_name="android.widget.TextView"
                            )
                            
                            # Lọc textview theo bounds để tìm đúng cái thuộc về button này
                            button_bounds = self.helper.get_element_bounds(button)
                            for tv in textviews:
                                tv_bounds = self.helper.get_element_bounds(tv)
                                if (tv_bounds[0] >= button_bounds[0] and
                                    tv_bounds[1] >= button_bounds[1] and
                                    tv_bounds[2] <= button_bounds[2] and
                                    tv_bounds[3] <= button_bounds[3]):
                                    text = self.helper.get_element_text(tv)
                                    # Kiểm tra để không lấy phải text rỗng hoặc "null"
                                    if text and text != "null":
                                        username = text
                                        break
                        
                        # Bỏ qua nút "Đóng"
                        if username == "Đóng":
                            continue
                        
                        # Kiểm tra xem tài khoản có đang đăng nhập không
                        is_current = False
                        
                        # Tìm dấu kiểm trong button bằng content-desc
                        checkmarks = self.helper.find_all_elements_in_xml(
                            screen_xml,
                            content_desc="Dấu kiểm"
                        )
                        
                        # Kiểm tra xem dấu kiểm có thuộc về button này không
                        button_bounds = self.helper.get_element_bounds(button)
                        for check in checkmarks:
                            check_bounds = self.helper.get_element_bounds(check)
                            if (check_bounds[0] >= button_bounds[0] and
                                check_bounds[1] >= button_bounds[1] and
                                check_bounds[2] <= button_bounds[2] and
                                check_bounds[3] <= button_bounds[3]):
                                is_current = True
                                break
                        
                        # Cũng có thể kiểm tra thuộc tính selected
                        if button.get("selected") == "true":
                            is_current = True
                        
                        # Kiểm tra username hợp lệ trước khi thêm vào danh sách
                        if username and username != "null" and username.strip():
                            # Lọc thêm các tên không phải tài khoản
                            if username not in ["Cài đặt", "Cài đặt tài khoản", "Tùy chọn", "Menu"]:
                                account = {
                                    "nickname": username,
                                    "unique_username": username,
                                    "unique_id": username,
                                    "status": "active",
                                    "is_login": is_current,
                                    "avatar_thumb": "",
                                    "job_enable": True,
                                    "level": 1,
                                    "last_update": int(time.time())
                                }
                                accounts.append(account)
                
                # Quay lại màn hình chính
                self.helper.press_back()
                self.safe_sleep(0.5)
                self.helper.press_back()
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản TikTok")
            
        return accounts
    
    def perform_job(self, account: Dict[str, Any]):
        """Thực hiện công việc với tài khoản TikTok"""
        # Sử dụng phương thức của lớp cha
        super().perform_job(account)
        
    def perform_care(self, account: Dict[str, Any]):
        """
        Nuôi tài khoản TikTok - Legacy method, sử dụng Smart Care mới
        Backward compatibility: chuyển hướng sang Smart Care methods
        """
        self.logger.info(f"Đang nuôi tài khoản TikTok: {account['unique_username']} (legacy method)")
        
        # Sử dụng Smart Care method thay vì mini care cũ
        import random
        care_methods = ["_care_swipe_feed", "_care_watch_videos"]
        selected_method = random.choice(care_methods)
        
        try:
            method = getattr(self, selected_method)
            success = method(account)
            self.logger.info(f"Legacy care using {selected_method}: {'success' if success else 'failed'}")
            return success
        except Exception as e:
            self.logger.error(f"Legacy care error: {e}")
            return False
        
    def perform_mini_care(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện mini care cho tài khoản TikTok:
        1. Về trang chủ, xác nhận tab đề xuất
        2. Lướt đề xuất trong 2-3 phút
        3. Ngẫu nhiên bấm vào Hộp thư, dừng 2-5s, vuốt lên, quay lại trang chủ
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            self.logger.info(f"Bắt đầu mini care cho tài khoản TikTok: {account['unique_username']}")
            
            # 1. Đảm bảo về trang chủ và xác nhận tab đề xuất
            if not self.ensure_home_screen():
                self.logger.error("Không thể về trang chủ TikTok")
                return False
                
            # Tìm và click vào tab "Dành cho bạn" (tab đề xuất)
            for_you_tab = self.helper.find_element(text="Dành cho bạn")
            if not for_you_tab:
                for_you_tab = self.helper.find_element(content_desc="Dành cho bạn")
            if not for_you_tab:
                for_you_tab = self.helper.find_element(text="For You")
                
            if for_you_tab:
                self.logger.info("Tìm thấy tab đề xuất, đang click vào...")
                self.helper.tap_element_center(for_you_tab)
                self.safe_sleep(2)
            else:
                self.logger.warning("Không tìm thấy tab đề xuất, giả định đang ở tab đúng")

            # 2. Lướt đề xuất trong 1-3 phút
            scroll_duration = random.randint(60, 180)  # 1-3 phút
            self.logger.info(f"Bắt đầu lướt đề xuất trong {scroll_duration} giây...")
            
            start_time = time.time()
            video_count = 0
            
            while (time.time() - start_time) < scroll_duration:
                # Lướt lên để chuyển video tiếp theo
                self.helper.swipe_up()
                video_count += 1
                
                # Nghỉ ngẫu nhiên 3-8 giây giữa các video (như người dùng thật)
                watch_time = random.randint(3, 8)
                self.safe_sleep(watch_time)
                
                # Random có 10% khả năng bấm like video
                if random.random() < 0.1:  # 10% chance
                    like_button = self._find_like_button()
                    if like_button and not self.helper.is_element_selected(like_button):
                        self.logger.info("Random like video trong khi mini care")
                        self.helper.tap_element_center(like_button)
                        self.safe_sleep(1)
                
                # Random có 5% khả năng bấm share
                if random.random() < 0.05:  # 5% chance
                    share_button = self.helper.find_element(content_desc="Chia sẻ")
                    if not share_button:
                        share_button = self.helper.find_element(content_desc="Share")
                    if share_button:
                        self.logger.info("Random click share trong khi mini care")
                        self.helper.tap_element_center(share_button)
                        self.safe_sleep(1)
                        # Nhấn back để đóng dialog share
                        self.helper.press_back()
                        self.safe_sleep(1)
            
            self.logger.info(f"Đã lướt {video_count} video trong {scroll_duration} giây")
            
            # 3. Ngẫu nhiên bấm vào Hộp thư (50% khả năng)
            if random.random() < 0.5:  # 50% chance
                self.logger.info("Random truy cập Hộp thư...")
                
                # Tìm và click vào Hộp thư
                inbox_button = self.helper.find_element(content_desc="Hộp thư")
                if inbox_button:
                    self.logger.info("Tìm thấy Hộp thư, đang click vào...")
                    self.helper.tap_element_center(inbox_button)
                    
                    # Dừng lại 2-5 giây
                    wait_time = random.randint(2, 5)
                    self.logger.info(f"Dừng lại {wait_time} giây trong Hộp thư...")
                    self.safe_sleep(wait_time)
                    
                    # Vuốt lên trong Hộp thư
                    self.logger.info("Vuốt lên trong Hộp thư...")
                    self.helper.swipe_up()
                    self.safe_sleep(1)
                    
                    # Quay lại trang chủ
                    self.logger.info("Quay lại trang chủ từ Hộp thư...")
                    if not self.back_to_home():
                        self.logger.warning("Không thể quay về trang chủ từ Hộp thư")
                else:
                    self.logger.warning("Không tìm thấy nút Hộp thư")
            else:
                self.logger.info("Skip truy cập Hộp thư lần này")
            
            # Đảm bảo về trang chủ cuối cùng
            if not self.ensure_home_screen():
                self.logger.warning("Không thể đảm bảo về trang chủ sau mini care")
                
            self.logger.info(f"Hoàn thành mini care cho tài khoản TikTok: {account['unique_username']}")
            return True
            
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi thực hiện mini care cho tài khoản TikTok: {account['unique_username']}")
            
            # Cố gắng về trang chủ nếu có lỗi
            try:
                self.back_to_home()
            except:
                pass
                
            return False
    
    def _ensure_for_you_tab(self) -> bool:
        """
        Đảm bảo đang ở tab đề xuất (For You)
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Tìm tab "Dành cho bạn" hoặc "For You"
            for_you_texts = ["Dành cho bạn", "For You", "Đề xuất"]
            for_you_tab = None
            
            for text in for_you_texts:
                for_you_tab = self.helper.find_element(text=text)
                if for_you_tab:
                    break
            
            if not for_you_tab:
                # Thử tìm theo content-desc
                for desc in for_you_texts:
                    for_you_tab = self.helper.find_element(content_desc=desc)
                    if for_you_tab:
                        break
            
            if for_you_tab:
                # Kiểm tra xem tab có được chọn không
                if not self.helper.is_element_selected(for_you_tab):
                    self.logger.info("Tab đề xuất chưa được chọn, đang click vào...")
                    self.helper.tap_element_center(for_you_tab)
                    self.safe_sleep(2)
                
                self.logger.info("Đã xác nhận tab đề xuất")
                return True
            else:
                self.logger.warning("Không tìm thấy tab đề xuất")
                return False
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi xác nhận tab đề xuất")
            return False
    
    def _scroll_for_you_feed(self, duration_seconds: int) -> bool:
        """
        Lướt feed đề xuất trong khoảng thời gian nhất định
        
        Args:
            duration_seconds: Thời gian lướt (giây)
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            start_time = time.time()
            scroll_count = 0
            
            while time.time() - start_time < duration_seconds:
                # Vuốt lên để chuyển video tiếp theo
                self.helper.swipe_up()
                scroll_count += 1
                
                # Nghỉ ngẫu nhiên 2-6 giây như người dùng thật xem video
                watch_time = random.randint(2, 6)
                self.safe_sleep(watch_time)
                
                # Random thỉnh thoảng dừng lâu hơn (như đang xem video thú vị)
                if random.randint(1, 10) == 1:  # 10% xác suất
                    long_watch_time = random.randint(8, 15)
                    self.logger.info(f"Dừng xem video lâu hơn: {long_watch_time}s")
                    self.safe_sleep(long_watch_time)
                
                # Log tiến trình mỗi 30 giây
                elapsed = time.time() - start_time
                if elapsed > 0 and int(elapsed) % 30 == 0 and scroll_count > 0:
                    remaining = duration_seconds - elapsed
                    self.logger.info(f"Đã lướt {scroll_count} video, còn lại {int(remaining)}s")
            
            self.logger.info(f"Hoàn thành lướt đề xuất: {scroll_count} video trong {duration_seconds}s")
            return True
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lướt feed đề xuất")
            return False
    
    def _interact_with_inbox(self) -> bool:
        """
        Tương tác với Hộp thư: bấm vào, dừng 2-5s, vuốt lên
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Tìm nút Hộp thư
            inbox_button = self.helper.find_element(content_desc="Hộp thư")
            
            if not inbox_button:
                # Thử tìm theo text
                inbox_button = self.helper.find_element(text="Hộp thư")
            
            if not inbox_button:
                self.logger.warning("Không tìm thấy nút Hộp thư")
                return False
            
            # Click vào Hộp thư
            self.logger.info("Đang click vào Hộp thư")
            self.helper.tap_element_center(inbox_button)
            
            # Dừng lại 2-5 giây
            wait_time = random.randint(2, 5)
            self.logger.info(f"Dừng trong Hộp thư {wait_time}s")
            self.safe_sleep(wait_time)
            
            # Vuốt lên trong Hộp thư
            self.logger.info("Vuốt lên trong Hộp thư")
            self.helper.swipe_up()
            self.safe_sleep(1)
            
            # Thêm thao tác vuốt lên thêm 1-2 lần nữa
            additional_swipes = random.randint(1, 2)
            for i in range(additional_swipes):
                self.helper.swipe_up()
                self.safe_sleep(random.uniform(0.5, 1.5))
            
            self.logger.info("Hoàn thành tương tác với Hộp thư")
            return True
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi tương tác với Hộp thư")
            return False

    def get_available_jobs(self, account: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Lấy danh sách các job khả dụng từ GoLike
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            List[Dict[str, Any]]: Danh sách job hoặc list rỗng nếu không có
        """
        if not self.golike_service:
            self.logger.error("Không thể lấy job: GoLikeService chưa được cung cấp")
            return []
            
        try:
            # Gọi API lấy job
            job_url = self.get_jobs_url()
            
            # Tạo tham số
            params = self.get_job_params(account)
            
            # Gọi API
            response = self.api_request(job_url, "GET", params)
            
            if response and response.get("success", False):
                job_data = response.get("data", None)
                if job_data:
                    # Chuẩn hóa dữ liệu job
                    job = self.map_job_data(job_data)
                    self.logger.info(f"Đã tìm thấy job {job['id']} loại {job['type']} cho tài khoản {account['unique_username']}")
                    return [job]
                
            return []
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách job")
            return []
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện job, bao gồm:
                - status (int): Mã trạng thái job
                    0: Chưa thực hiện
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                    4: Thất bại, yêu cầu đang chờ
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
        """
        try:
            job_type = job.get("type", "").lower()
            job_link = job.get("link", "")
            job_id = job.get("id")
            
            self.logger.info(f"Đang thực hiện job {job_id} loại {job_type} với link {job_link}")
            
            # Kiểm tra loại job được hỗ trợ
            if job_type not in ["follow", "like"]:
                message = f"Loại job {job_type} không được hỗ trợ"
                self.logger.warning(message)
                return {
                    "status": 2,
                    "message": message,
                    "success": False
                }

            # Thực hiện job theo loại
            job_status = 0  # Mặc định là chưa làm
            
            if job_type == "follow":
                job_status = self._perform_follow_job(job_link)
            elif job_type == "like":
                job_status = self._perform_like_job(job_link)
            
            # Về trang chủ và vuốt bảng tin nếu job thành công
            if self.back_to_home():
                if job_status == 1:  # Chỉ vuốt khi job thành công
                    self._scroll_feed_after_job()
            
            # Tạo kết quả trả về dựa trên job_status
            return self._create_job_result_from_status(job_status, job_type)
                
        except Exception as e:
            message = f"Lỗi khi thực hiện job: {str(e)}"
            self.logger.exception(e, message)
            return self._create_job_result(2, message, False)
    
    def _create_job_result_from_status(self, job_status: int, job_type: str) -> Dict[str, Any]:
        """
        Tạo kết quả job từ status code
        
        Args:
            job_status: Mã trạng thái job từ _perform_xxx_job
            job_type: Loại job (follow, like)
            
        Returns:
            Dict[str, Any]: Kết quả job
        """
        if job_status == 1:  # Thành công
            message = f"Đã hoàn thành job {job_type} thành công"
            self.logger.info(message)
            return self._create_job_result(1, message, True)
        elif job_status == 2:  # Không tìm thấy đối tượng
            message = f"Không thể tìm thấy đối tượng để thực hiện job {job_type}"
            self.logger.warning(message)
            return self._create_job_result(2, message, False)
        elif job_status == 3:  # Bị unfollow/unlike
            message = f"Đối tượng đã bị unfollow/unlike"
            self.logger.warning(message)
            # Đánh dấu unfollow để JobService xử lý
            return self._create_job_result(3, message, False, unfollow=True)
        elif job_status == 4:  # Yêu cầu đang chờ
            message = f"Yêu cầu đang chờ trong job {job_type}"
            self.logger.warning(message)
            return self._create_job_result(4, message, False)
        else:  # Thất bại hoặc trạng thái khác
            message = f"Thực hiện job {job_type} thất bại với trạng thái {job_status}"
            self.logger.error(message)
            return self._create_job_result(job_status if job_status > 0 else 0, message, False)
            
    def _check_account_status_dialog(self) -> bool:
        """
        Kiểm tra dialog "Trạng thái tài khoản" và xử lý nếu có
        Sau khi bấm OK, kiểm tra xem có về trang chủ không và sync accounts
        
        Returns:
            bool: True nếu có dialog và cần ngừng hoạt động tài khoản, False nếu không có dialog
        """
        try:
            # Chờ một chút để dialog có thể xuất hiện
            self.safe_sleep(2)
            
            # Tìm dialog có text "Trạng thái tài khoản"
            status_dialog = self.helper.find_element(text="Trạng thái tài khoản")
            
            if status_dialog:
                self.logger.warning("Phát hiện dialog 'Trạng thái tài khoản'")
                
                # Tìm element có resource-id="android:id/message"
                message_element = self.helper.find_element(resource_id="android:id/message")
                
                if message_element:
                    message_text = self.helper.get_element_text(message_element)
                    self.logger.error(f"Thông báo trạng thái tài khoản: {message_text}")
                    
                    # Lưu thông báo vào database hoặc log
                    self.logger.error(f"CRITICAL: Tài khoản bị hạn chế - {message_text}")
                    
                    # Tìm và click nút OK/Đóng để đóng dialog
                    ok_clicked = False
                    ok_buttons = ["OK", "Đóng", "Tôi hiểu", "Đồng ý"]
                    for btn_text in ok_buttons:
                        ok_button = self.helper.find_element(text=btn_text)
                        if ok_button:
                            self.helper.tap_element_center(ok_button)
                            self.logger.info(f"Đã bấm nút '{btn_text}' để đóng dialog")
                            ok_clicked = True
                            break
                    
                    if ok_clicked:
                        # Chờ 5 giây và kiểm tra trang chủ trong 5 lần
                        self.logger.info("Chờ 5s và kiểm tra trang chủ trong 5 lần...")
                        self.safe_sleep(5)
                        
                        home_screen_detected = False
                        for attempt in range(5):
                            self.logger.info(f"Kiểm tra trang chủ lần {attempt + 1}/5")
                            if self.is_home_screen():
                                self.logger.info("Phát hiện đã về trang chủ - có khả năng tài khoản bị logout")
                                home_screen_detected = True
                                break
                            self.safe_sleep(1)
                        
                        if home_screen_detected:
                            # Thực hiện sync accounts để kiểm tra account có còn trong danh sách không
                            self.logger.info("Thực hiện sync accounts để kiểm tra trạng thái tài khoản...")
                            try:
                                # Lấy danh sách tài khoản hiện tại từ thiết bị
                                current_device_accounts = self.get_accounts_from_device()
                                current_usernames = {acc.get("unique_username", "").lower() for acc in current_device_accounts}
                                
                                # Lấy danh sách tài khoản TikTok từ DB
                                db_accounts = self.db.get_accounts(app=self.app_name)
                                
                                # Kiểm tra các tài khoản trong DB có còn tồn tại trên thiết bị không
                                for db_account in db_accounts:
                                    db_username = db_account.get("unique_username", "").lower()
                                    if db_username and db_username not in current_usernames:
                                        # Tài khoản không còn tồn tại trên thiết bị - đánh dấu ngừng hoạt động
                                        self.logger.warning(f"Tài khoản {db_account.get('unique_username')} không còn trong danh sách thiết bị - đánh dấu ngừng hoạt động")
                                        
                                        update_data = {
                                            "status": "inactive",
                                            "job_enable": False,
                                            "reason": "Tài khoản bị log out",
                                            "last_update": int(time.time())
                                        }
                                        
                                        self.db.update_account(db_account["id"], update_data)
                                        self.logger.info(f"Đã đánh dấu tài khoản {db_account.get('unique_username')} ngừng hoạt động với lý do: Tài khoản bị log out")
                                
                                # Sync lại accounts mới
                                self.sync_accounts_to_db()
                                
                            except Exception as sync_error:
                                self.logger.exception(sync_error, "Lỗi khi sync accounts sau khi phát hiện dialog trạng thái tài khoản")
                    
                    return True
                else:
                    self.logger.warning("Tìm thấy dialog 'Trạng thái tài khoản' nhưng không tìm thấy message")
                    return True
            
            return False
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi kiểm tra dialog trạng thái tài khoản")
            return False

    def _perform_follow_job(self, profile_link: str) -> int:
        """
        Thực hiện job follow trên TikTok
        
        Args:
            profile_link: Link đến trang cá nhân cần follow (dạng: https://www.tiktok.com/@username)
            
        Returns:
            int: Trạng thái job (0: chưa làm, 1: hoàn thành, 2: lỗi, 3: bị unfollow, 4: yêu cầu chờ, 5: gửi yêu cầu)
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return 2
                
            # Trích xuất username từ URL TikTok để sử dụng cho logging
            username_match = re.search(r'tiktok\.com/@([^/?]+)', profile_link)
            if not username_match:
                self.logger.error(f"Không thể trích xuất username từ link: {profile_link}")
                return 2
                
            username = username_match.group(1)
            
            # Mở trang cá nhân
            if not self._open_profile_page(profile_link):
                return 2
            
            # Chờ thêm cho trang hồ sơ tải xong
            self.safe_sleep(2)
            
            # Tìm nút Follow theo các cách khác nhau
            follow_button = None
            
            # Cách 1: Tìm theo text tiếng Việt và tiếng Anh
            follow_texts = ["Theo dõi", "Follow", "Đang theo dõi", "Following", "Đã yêu cầu", "Requested"]
            for text in follow_texts:
                follow_button = self.helper.find_element(text=text)
                if follow_button:
                    break
            
            # Cách 2: Tìm theo content-desc
            if not follow_button:
                follow_descs = ["Theo dõi", "Follow", "Đang theo dõi", "Following"]
                for desc in follow_descs:
                    follow_button = self.helper.find_element(content_desc=desc)
                    if follow_button:
                        break
            
            # Thử lại lần nữa nếu không tìm thấy nút follow
            if not follow_button:
                self.logger.warning("Không tìm thấy nút theo dõi ở lần đầu, thử vuốt màn hình và tìm lại")
                self.helper.swipe_up()
                self.safe_sleep(1.5)
                
                # Thử lại tất cả các cách
                for text in follow_texts:
                    follow_button = self.helper.find_element(text=text)
                    if follow_button:
                        break
            
            if not follow_button:
                self.logger.error("Không tìm thấy nút theo dõi sau nhiều lần thử")
                return 2
            
            # Lấy text của nút
            button_text = self.helper.get_element_text(follow_button)
            button_resource_id = follow_button.get("resource-id", "")
            self.logger.info(f"Text của nút follow: '{button_text}', resource-id: '{button_resource_id}'")
            
            # Kiểm tra trạng thái hiện tại
            if button_text in ["Đang theo dõi", "Following"]:
                self.logger.info(f"Đã theo dõi tài khoản {username} từ trước")
                return 1
            
            if button_text in ["Đã yêu cầu", "Requested"]:
                self.logger.info(f"Đã yêu cầu theo dõi tài khoản {username} từ trước")
                return 5
            
            # Nếu là "Theo dõi" hoặc "Follow" thì click vào nút
            if button_text in ["Theo dõi", "Follow"]:
                self.logger.info("Thực hiện click vào nút theo dõi")
                
                # Lấy resource_id của button để kiểm tra lại sau
                button_resource_id = follow_button.get("resource-id", "")
                
                self.helper.tap_element_center(follow_button)
                self.safe_sleep(4)
                
                # Kiểm tra dialog "Trạng thái tài khoản"
                if self._check_account_status_dialog():
                    self.logger.error("Tài khoản bị hạn chế, ngừng hoạt động và hủy job")
                    # Đánh dấu tài khoản ngừng hoạt động
                    # Trả về status 2 để báo lỗi và hủy job
                    return 2
                
                # Vuốt xuống 1 lần để refresh trạng thái
                self.helper.swipe_down()
                
                # Kiểm tra xem có dialog hiện lên không
                # screen_xml = self.dump_screen_with_retry()
                # if screen_xml:
                #     # Kiểm tra dialog cảnh báo hoặc giới hạn
                #     dialogs = self.helper.find_all_elements_in_xml(screen_xml, class_name="android.app.Dialog")
                #     for dialog in dialogs:
                #         dialog_text = self.helper.get_element_text(dialog)
                #         if any(keyword in dialog_text.lower() for keyword in ["thử lại sau", "giới hạn", "limit", "try again"]):
                #             # Tìm và nhấn nút OK/Đóng
                #             ok_buttons = self.helper.find_all_elements_in_xml(screen_xml, class_name="android.widget.Button")
                #             for btn in ok_buttons:
                #                 btn_text = self.helper.get_element_text(btn)
                #                 if btn_text and btn_text.lower() in ["ok", "đóng", "tôi hiểu", "đồng ý"]:
                #                     self.helper.tap_element_center(btn)
                #                     break
                #             self.logger.warning("Job không hoàn thành, bị giới hạn theo dõi")
                #             return 3
                
                # Kiểm tra lại text sau khi nhấn theo dõi
                self.safe_sleep(2)
                
                # Tìm lại nút follow để kiểm tra trạng thái - ưu tiên theo resource-id nếu có
                updated_follow_button = None
                
                # Nếu có resource_id, tìm theo resource_id trước
                if button_resource_id:
                    updated_follow_button = self.helper.find_element(resource_id=button_resource_id)
                    if updated_follow_button:
                        self.logger.info(f"Đã tìm lại nút follow theo resource-id: {button_resource_id}")
                
                # Nếu không tìm thấy theo resource_id hoặc không có resource_id, tìm theo text
                if not updated_follow_button:
                    follow_texts = ["Đang theo dõi", "Following", "Đã yêu cầu", "Requested", "Theo dõi", "Follow"]
                    for text in follow_texts:
                        updated_follow_button = self.helper.find_element(text=text)
                        if updated_follow_button:
                            break
                            
                # Fallback: tìm theo content-desc
                if not updated_follow_button:
                    follow_descs = ["Theo dõi", "Follow", "Đang theo dõi", "Following"]
                    for desc in follow_descs:
                        updated_follow_button = self.helper.find_element(content_desc=desc)
                        if updated_follow_button:
                            break
                            
                if updated_follow_button:
                    updated_text = self.helper.get_element_text(updated_follow_button)
                    updated_resource_id = updated_follow_button.get("resource-id", "")
                    
                    self.logger.info(f"Sau khi click follow: text='{updated_text}', resource-id='{updated_resource_id}'")
                    # Trim whitespace từ updated_text
                    updated_text = updated_text.strip()
                    # Kiểm tra các trường hợp khác nhau
                    if updated_text in ["Đang theo dõi", "Following", "Nhắn tin", "Message"]:
                        self.logger.info("Follow thành công!")
                        return 1
                    elif updated_text in ["Đã yêu cầu", "Requested"]:
                        self.logger.info("Đã gửi yêu cầu theo dõi thành công!")
                        return 5
                    elif updated_text in ["Theo dõi", "Follow"]:
                        self.logger.error(f"Follow không thành công, text của nút vẫn là: {updated_text}")
                        return 3
                    else:
                        self.logger.error(f"Follow không thành công, text của nút là: {updated_text}")
                        return 3
                else:
                    # Không tìm thấy nút, có thể đã follow thành công
                    self.logger.info("Không tìm thấy nút follow sau khi nhấn, giả định đã thành công")
                    return 1
            else:
                self.logger.error(f"Text của nút không khớp với 'Theo dõi' hoặc 'Follow': {button_text}")
                return 2
                
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi thực hiện job follow: {str(e)}")
            return 2
    
    def _scroll_feed_after_job(self):
        """Vuốt bảng tin 1-5 lần sau khi job thành công"""
        try:
            # Random số lần vuốt từ 1-5
            scroll_count = random.randint(1, 5)
            self.logger.info(f"Vuốt bảng tin {scroll_count} lần sau khi job thành công")
            
            for i in range(scroll_count):
                self.helper.swipe_up()
                # Nghỉ random 2-4 giây giữa các lần vuốt
                wait_time = random.randint(2, 5)
                self.safe_sleep(wait_time)
            
            self.logger.info("Hoàn thành vuốt bảng tin sau job")
            
        except Exception as e:
            self.logger.error(f"Lỗi khi vuốt bảng tin sau job: {str(e)}")
    
    def _open_profile_page(self, profile_link: str) -> bool:
        """
        Mở trang profile TikTok bằng tìm kiếm hoặc link trực tiếp
        
        Args:
            profile_link: Link đến trang cá nhân
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Trích xuất username từ URL TikTok
            username_match = re.search(r'tiktok\.com/@([^/?]+)', profile_link)
            if not username_match:
                self.logger.error(f"Không thể trích xuất username từ link: {profile_link}")
                return False
                
            username = username_match.group(1)
            
            # Random chọn 1 trong 2 cách: tìm kiếm hoặc mở trực tiếp link
            if random.choice([True, False]):
                self.logger.info(f"Mở trang cá nhân bằng cách tìm kiếm: {username}")
                # Thử mở bằng tìm kiếm
                if not self._open_profile_by_search(username):
                    # Nếu tìm kiếm thất bại, fallback sang mở link
                    self.logger.info("Tìm kiếm thất bại, mở bằng link trực tiếp")
                    self.helper.open_url(profile_link,self.app_package)
                    self.safe_sleep(4)
            else:
                # Cách 2: Mở trực tiếp URL thông qua helper.open_url()
                self.logger.info(f"Mở trang cá nhân bằng link trực tiếp: {profile_link}")
                self.helper.open_url(profile_link,self.app_package)
                self.safe_sleep(2)
            
            # Chờ thêm cho trang hồ sơ tải xong
            self.safe_sleep(2)
            
            # Kiểm tra xem đã vào đúng profile không bằng cách tìm button có text = @username
            # Tìm button có text chính xác bằng @username (TikTok luôn có @ trước username)
            at_username_button = self.helper.find_element(class_name="android.widget.Button", text=f"@{username}")
            if at_username_button:
                self.logger.info(f"Đã xác nhận vào đúng profile của {username} (tìm thấy button có text: '@{username}')")
                return True
            else:
                self.logger.error(f"Không tìm thấy button có text = '@{username}' trên màn hình, có thể không vào đúng profile")
                return False
            
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi mở trang profile: {str(e)}")
            return False
    
    def _open_profile_by_search(self, username: str) -> bool:
        """
        Mở trang profile TikTok bằng cách tìm kiếm username
        
        Args:
            username: Username của tài khoản cần tìm
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Tìm tab tìm kiếm
            search_tab = self.helper.find_element(content_desc="Tìm kiếm")
            if not search_tab:
                self.logger.error("Không tìm thấy tab Tìm kiếm")
                return False
                
            self.helper.tap_element_center(search_tab)
            self.safe_sleep(2)

            # Tìm ô nhập tìm kiếm
            search_input = self.helper.find_element(class_name="android.widget.EditText")
            if not search_input:
                self.logger.error("Không tìm thấy ô nhập tìm kiếm")
                return False
            
            # Nhập username cần tìm
            self.helper.tap_element_center(search_input)
            self.safe_sleep(1.5)
            
            # Gọi hàm input_text một lần duy nhất
            self.logger.info(f"Đang nhập text: '{username}'")
            self.helper.input_text(f"{username}")
            
            self.safe_sleep(6)


            # Tìm nút Tìm kiếm và click
            search_button = self.helper.find_element(class_name="android.widget.Button", text="Tìm kiếm")
            if search_button:
                self.logger.info("Tìm thấy nút 'Tìm kiếm', đang click...")
                self.helper.tap_element_center(search_button)
                self.safe_sleep(2)
            else:
                self.logger.warning("Không tìm thấy nút 'Tìm kiếm'")
                # Thực hiện search với enter key
                self.helper.press_enter()
                self.safe_sleep(2) 

            
            
            # Tìm tab "Người dùng" và click vào nó - đợi tối đa 10s
            user_tab = self.helper.wait_for_element(text="Người dùng", timeout=10)
            if not user_tab:
                user_tab = self.helper.wait_for_element(content_desc="Người dùng", timeout=6)

            if user_tab:
                self.logger.info("Tìm thấy tab Người dùng, đang click vào...")
                self.helper.tap_element_center(user_tab)
                self.safe_sleep(2)
            else:
                self.logger.warning("Không tìm thấy tab Người dùng sau 10s")
                self.helper.press_back()
                self.safe_sleep(1)
                return False
                
            # Tìm TextView có text chính xác bằng username (không có @) - đợi tối đa 6s
            username_element = self.helper.wait_for_element(text=username, class_name="android.widget.TextView", timeout=6)

            if username_element:
                # Click vào element đầu tiên tìm được
                self.logger.info(f"Tìm thấy tài khoản {username}, đang click vào...")
                self.helper.tap_element_center(username_element)
                self.safe_sleep(1)
            else:
                self.logger.error(f"Không tìm thấy tài khoản {username} trong kết quả tìm kiếm sau 10s")
                self.helper.press_back()
                self.safe_sleep(1)
                return False
            
            return True
                
        except Exception as e:
            self.logger.error(f"Lỗi khi tìm kiếm tài khoản: {str(e)}")
            return False
    
    def _perform_like_job(self, post_link: str) -> int:
        """
        Thực hiện job like video trên TikTok
        
        Args:
            post_link: Link đến video cần like
            
        Returns:
            int: Trạng thái job (0: chưa làm, 1: hoàn thành, 2: lỗi, 3: đã like trước đó)
        """
        try:
            # Đảm bảo đang ở trang chủ

            if not self.ensure_home_screen():
                return 2
                
            self.logger.info(f"Mở video TikTok bằng link trực tiếp: {post_link}")
            
            # Mở trực tiếp URL thông qua helper.open_url()
            self.helper.open_url(post_link,self.app_package)

            # Random nghỉ 3-10 giây như người dùng thông thường
            wait_time = random.randint(3, 10)
            self.logger.info(f"Đang nghỉ {wait_time}s như người dùng thông thường...")
            self.safe_sleep(wait_time)
            
            # Tìm nút like bằng content-desc "Thích video."
            like_button = self._find_like_button()
            
            if not like_button:
                self.logger.warning("Không tìm thấy nút like trên màn hình")
                return 2
            
            # Lấy thông tin nút like ban đầu
            initial_content_desc = like_button.get("content-desc", "")
            initial_resource_id = like_button.get("resource-id", "")
            initial_selected = self.helper.is_element_selected(like_button)
            
            self.logger.info(f"Trạng thái nút like ban đầu: selected={initial_selected}, content-desc='{initial_content_desc}', resource-id='{initial_resource_id}'")
            
            # Kiểm tra nếu đã like từ trước
            if initial_selected or "Bỏ thích" in initial_content_desc or "Unlike" in initial_content_desc:
                self.logger.info("Video đã được like từ trước")
                result = 3  # Đã like trước đó
            else:
                # Thực hiện like video
                result = self._attempt_like_video(like_button)
            
            # Sau khi like xong, vuốt random 2-5 video rồi về trang chủ
            if result == 1:  # Thành công
                self._scroll_videos_and_return_home()
            
            return result
                
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi thực hiện job like: {str(e)}")
            return 2

    def _find_like_button(self):
        """Tìm nút like trên video TikTok"""
        # Thử các cách tìm khác nhau cho nút like
        like_button = self.helper.find_element(content_desc="Thích")
        if not like_button:
            like_button = self.helper.find_element(content_desc="Like")
        if not like_button:
            # Tìm theo resource-id hoặc xpath
            like_button = self.helper.find_element(resource_id="com.ss.android.ugc.trill:id/like_button")
        return like_button

    def _attempt_like_video(self, like_button):
        """Thực hiện like video, ưu tiên bấm random tọa độ, fallback sang bấm nút like"""
        # Lấy kích thước màn hình để tính tọa độ random
        width, height = self.helper.get_screen_size()
        
        # Thử bấm random tọa độ trước (double click)
        x = int(width * random.uniform(0.5, 0.6))
        y = int(height * random.uniform(0.5, 0.6))
        
        self.logger.info(f"Thử double click tại tọa độ ({x}, {y}) để like video")
        
        # Thực hiện double click
        self.helper.tap(x, y)
        self.safe_sleep(0.1)
        self.helper.tap(x, y)
        self.safe_sleep(2)  # Chờ animation
        
        # Kiểm tra kết quả sau double click
        if self.helper.find_element(content_desc="Đã thích video"):
            self.logger.info("Đã like video thành công bằng double click")
            return 1

        
        # Nếu double click không thành công, bấm trực tiếp vào nút like
        self.logger.info("Double click chưa like được, bấm trực tiếp vào nút like")
        
        # Lấy lại thông tin nút like mới nhất
        current_like_button = self._find_like_button()
        if not current_like_button:
            self.logger.warning("Không tìm thấy nút like để bấm trực tiếp")
            return 2
        
        # Bấm vào nút like
        self.helper.tap_element(current_like_button)
        self.safe_sleep(2)
        
        # Kiểm tra kết quả sau khi bấm nút
        like_button_final = self._find_like_button()
        if like_button_final:
            is_selected_final = self.helper.is_element_selected(like_button_final)
            content_desc_final = like_button_final.get("content-desc", "")
            resource_id_final = like_button_final.get("resource-id", "")
            
            self.logger.info(f"Sau khi bấm nút like: selected={is_selected_final}, content-desc='{content_desc_final}', resource-id='{resource_id_final}'")
            
            if is_selected_final or "Bỏ thích" in content_desc_final or "Unlike" in content_desc_final:
                self.logger.info("Đã like video thành công bằng click nút")
                return 1
            else:
                self.logger.warning("Không thể like video sau khi thử cả 2 cách")
                return 2
        else:
            # Không tìm thấy nút để kiểm tra, giả định thành công
            self.logger.info("Không tìm thấy nút like để kiểm tra, giả định thành công")
            return 1

    def _scroll_videos_and_return_home(self):
        """Vuốt random 2-5 video rồi về trang chủ"""
        try:
            # Random số lượng video sẽ vuốt (2-5)
            num_videos = random.randint(2, 5)
            self.logger.info(f"Sẽ vuốt qua {num_videos} video trước khi về trang chủ")
            
            width, height = self.helper.get_screen_size()
            
            for i in range(num_videos):
                
                self.logger.info(f"Vuốt video thứ {i+1}/{num_videos}")
                self.helper.swipe_up()
                
                # Nghỉ random 2-4 giây như người dùng thật
                wait_time = random.randint(2, 4)
                self.safe_sleep(wait_time)
            
            # Về trang chủ
            self.logger.info("Hoàn thành vuốt video, đang quay về trang chủ")
            self.back_to_home()
            
        except Exception as e:
            self.logger.error(f"Lỗi khi vuốt video: {str(e)}")
            # Vẫn cố gắng về trang chủ
            self.back_to_home()
            
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lấy tham số để gọi API lấy job cho TikTok
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Tham số
        """
        golike_id = account.get("golike_id")
        if not golike_id:
            return {}
            
        return {
            "account_id": golike_id,
            "data": "null"
        }
        
    def sync_accounts_to_db(self) -> List[Dict[str, Any]]:
        """
        Đồng bộ tài khoản từ thiết bị vào database
        Ghi đè phương thức của lớp cha để đảm bảo chỉ có một tài khoản được đánh dấu là đang login
        """
        try:
            # Đặt lại trạng thái login cho tất cả tài khoản TikTok trong DB
            self.db.reset_login_status_by_app(self.app_name)
            
            # Lấy danh sách tài khoản từ thiết bị
            device_accounts = self.get_accounts_from_device()
            
            # Lấy device_id từ database
            android_id = self.db.get_or_create_device_id()
            
            # Lấy danh sách tài khoản hiện có trong DB cho app này
            existing_accounts = self.db.get_accounts(app=self.app_name)
            
            # Tạo set các unique_username từ thiết bị để dễ so sánh
            device_usernames = set()
            for account in device_accounts:
                username = account.get("unique_username")
                if username:
                    device_usernames.add(username)
            
            # Kiểm tra tài khoản trong DB mà không còn trên thiết bị -> đánh dấu logout
            for existing_account in existing_accounts:
                existing_username = existing_account.get("unique_username")
                if existing_username and existing_username not in device_usernames:
                    # Tài khoản có trong DB nhưng không có trên thiết bị -> logout
                    if existing_account.get("status") != "logout":
                        self.logger.info(f"Tài khoản {existing_username} không còn trên thiết bị, đánh dấu logout")
                        self.db.update_account(existing_account["id"], {
                            "status": "logout",
                            "inactive_reason": "Tài khoản không còn trên thiết bị",
                            "is_login": False,
                            "is_sync": False
                        })
            
            # Cập nhật hoặc thêm mới vào DB
            for account in device_accounts:
                # Thêm thông tin app và device_id
                account["app"] = self.app_name
                account["device_id"] = android_id
                # Đánh dấu là chưa đồng bộ để gửi lên server
                account["is_sync"] = False
                
                # Kiểm tra tài khoản đã tồn tại chưa dựa vào unique_username + app
                existing_account = self.db.get_account_by_unique_username(self.app_name, account.get("unique_username"))
                
                if existing_account:
                    # Cập nhật tài khoản hiện có - chỉ đồng bộ trạng thái login/logout
                    account_id = existing_account["id"]
                    
                    # Chuẩn bị dữ liệu cập nhật tối thiểu
                    update_data = {
                        "is_login": account.get("is_login", False),
                        "last_update": account.get("last_update", int(time.time())),
                        "is_sync": False
                    }
                    
                    # Kiểm tra nếu tài khoản trong DB đang ở trạng thái logout nhưng xuất hiện lại trên thiết bị
                    if existing_account.get("status") == "logout":
                        # Reset từ logout về active và xóa inactive_reason
                        update_data["status"] = "active"
                        update_data["inactive_reason"] = ""
                        self.logger.info(f"Tài khoản {account.get('unique_username')} đã xuất hiện lại trên thiết bị, reset từ logout về active")
                    # Nếu đã active thì giữ nguyên status, không thay đổi gì khác
                    
                    self.db.update_account(account_id, update_data)
                    self.logger.info(f"Đã cập nhật trạng thái đăng nhập cho tài khoản {account.get('unique_username')} trong {self.app_name}")
                else:
                    # Thêm tài khoản mới với trạng thái active
                    account["status"] = "active"
                    self.db.add_account(account)
                    self.logger.info(f"Đã thêm tài khoản mới {account.get('unique_username')} cho {self.app_name}")
                
            return device_accounts
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi đồng bộ tài khoản {self.app_name}")
            return []

    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Ánh xạ tài khoản từ GoLike vào tài khoản trên thiết bị
        
        Args:
            golike_accounts: Danh sách tài khoản từ GoLike API
            device_accounts: Danh sách tài khoản trên thiết bị
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã ánh xạ
        """
        mapped_accounts = []
        
        try:
            # Chuẩn hóa dữ liệu từ GoLike
            golike_data = {}
            for acc in golike_accounts:
                # Trích xuất thông tin từ tài khoản GoLike
                golike_account = {
                    "golike_id": acc.get("id"),
                    "nickname": acc.get("nickname"),
                    "unique_id": acc.get("unique_id"),
                    "unique_username": acc.get("unique_username"),
                    "avatar_thumb": acc.get("avatar_thumb")
                }
                
                # Sử dụng unique_username làm khóa để dễ ánh xạ
                username = golike_account["unique_username"]
                if username:
                    golike_data[username.lower()] = golike_account
            
            # Ánh xạ với tài khoản trên thiết bị
            for device_account in device_accounts:
                username = device_account.get("unique_username", "").lower()
                
                if username in golike_data:
                    # Đã tìm thấy tài khoản trong danh sách GoLike
                    # Cập nhật thông tin từ GoLike vào tài khoản thiết bị
                    golike_info = golike_data[username]
                    
                    # Cập nhật thông tin
                    update_data = {
                        "golike_id": golike_info["golike_id"],
                        "is_golike_linked": True,
                        "avatar_thumb": golike_info["avatar_thumb"] or device_account.get("avatar_thumb", ""),
                        "unique_id": golike_info["unique_id"] or device_account.get("unique_id", ""),
                        "is_sync": False
                    }
                    
                    # Tìm ID tài khoản trong DB
                    account_id = device_account.get("id")
                    if account_id:
                        # Cập nhật vào DB
                        self.db.update_account(account_id, update_data)
                        
                        # Cập nhật thông tin vào device_account
                        device_account.update(update_data)
                        mapped_accounts.append(device_account)
                        
                        self.logger.info(f"Đã ánh xạ tài khoản TikTok: {username}")
            
            return mapped_accounts
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi ánh xạ tài khoản TikTok")
            return []
    
    def _navigate_to_profile_tab(self) -> bool:
        """
        Điều hướng đến tab hồ sơ TikTok
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return False
            
            # Tìm và bấm vào nút "Hồ sơ"
            screen_xml = self.helper.dump_screen_xml()
            profile_button = self.helper.find_element_in_xml(screen_xml, content_desc="Hồ sơ")
            
            if not profile_button:
                self.logger.error("Không tìm thấy nút Hồ sơ")
                return False
                
            self.helper.tap_element_center(profile_button)
            self.safe_sleep(3)
            
            # Kiểm tra và xử lý dialog "Không cho phép" nếu có
            not_allow_button = self.helper.find_element(text="Không cho phép")
            if not_allow_button:
                self.logger.info("Phát hiện dialog 'Không cho phép', đang click để đóng...")
                self.helper.tap_element_center(not_allow_button)
                self.safe_sleep(1)

            # Kiểm tra và xử lý dialog "Lưu lại đăng nhập lần sau" nếu có
            save_login_button = self.helper.find_element(text="Lưu thông tin đăng nhập")
            if save_login_button:
                self.logger.info("Phát hiện dialog 'Lưu lại đăng nhập lần sau', đang click để đóng...")
                self.helper.tap_element_center(save_login_button)
                self.safe_sleep(1)


            # Vuốt lên 1 lần để tải đầy đủ nội dung
            self.helper.swipe_up()
            self.safe_sleep(1)
            
            return True
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi điều hướng đến tab hồ sơ")
            return False
    
    def _open_profile_menu(self) -> bool:
        """
        Mở menu hồ sơ (danh sách tài khoản)
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:

            # Tìm nút menu hồ sơ
            screen_xml = self.helper.dump_screen_xml()
            menu_button = self.helper.find_element_in_xml(screen_xml, content_desc="Menu hồ sơ")
            
            if not menu_button:
                self.logger.error("Không tìm thấy nút Menu hồ sơ")
                return False
                
            # Lấy tọa độ của nút menu và click với độ lệch ngẫu nhiên
            bounds = self.helper.get_element_bounds(menu_button)
            x1, y1, x2, y2 = bounds
            y = ((y2 - y1) // 2) + y1
            x = x2 // 2
            x += random.randint(-10, 10)
            
            self.helper.tap(x, y)
            self.safe_sleep(1)

            # kiểm tra dialog text="Follow bạn bè của bạn"

            follow_friends_dialog = self.helper.find_element(text="Follow bạn bè của bạn")
            if follow_friends_dialog:
                self.logger.info("Phát hiện dialog 'Follow bạn bè của bạn', đang click để đóng...")
                close_dialog = self.helper.find_element(content_desc="Đóng")
                if close_dialog:
                    self.helper.tap_element_center(close_dialog)
                    self.safe_sleep(1)

            return True
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi mở menu hồ sơ")
            return False
            
    def is_home_screen(self) -> bool:
        """
        Kiểm tra xem có đang ở màn hình trang chủ TikTok không
        
        Returns:
            bool: True nếu đang ở trang chủ, False nếu không
        """
        try:
            # Kiểm tra package hiện tại trước tiên
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                return False
            
            # Kiểm tra có nút "Trang chủ" được chọn (selected=true) trong thanh tab không
            home_tab = self.helper.find_element(content_desc="Trang chủ")
            if home_tab:
                if self.helper.is_element_selected(home_tab):
                    return True
                else:
                    # Nếu tìm thấy tab "Trang chủ" nhưng chưa được chọn, click vào đó
                    self.helper.tap_element_center(home_tab)
                    self.safe_sleep(1.5)
                    return True
                    
            # Không tìm thấy các yếu tố của trang chủ
            return False
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi kiểm tra màn hình trang chủ TikTok")
            return False
    
    def ensure_home_screen(self) -> bool:
        """
        Đảm bảo đang ở màn hình trang chủ TikTok
        
        Returns:
            bool: True nếu thành công về trang chủ
        """
        try:
            # Kiểm tra package hiện tại trước tiên
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                self.logger.info(f"App hiện tại ({current_package}) không phải TikTok, mở app TikTok...")
                self.helper.open_app(self.app_package)
                self.safe_sleep(10)  # Tăng lên 10 giây để app khởi động hoàn toàn
                
                # Kiểm tra popup PIN trong 5s sau khi mở app
                self._check_pin_popup()
                
                # Validate app không bị banned sau khi mở
                if not self.validate_app_not_banned():
                    self.logger.error("App TikTok có vấn đề (banned/cảnh báo)")
                    return False
            
            # Kiểm tra xem đã ở trang chủ chưa
            if self.is_home_screen():
                self.logger.info("Đã ở trang chủ TikTok")
                return True
                
            # Nếu chưa, cố gắng về trang chủ
            return self.back_to_home()
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi đảm bảo về trang chủ TikTok")
            return False
    
    def validate_app_not_banned(self):
        """
        Đảm bảo không có tài khoản nào bị banned
        """
        # Kiểm tra dialog cảnh báo chung
        screen_xml = self.helper.dump_screen_xml()
        # Kiểm tra dialog "Cập nhật Chính sách quyền riêng tư"
        privacy_update_elements = self.helper.find_all_elements_in_xml(
            screen_xml,
            text="Cập nhật Chính sách quyền riêng tư"
        )

        if privacy_update_elements:
            self.logger.info("Phát hiện dialog 'Cập nhật Chính sách quyền riêng tư', đang xử lý...")
            
            # Tìm nút "Đã hiểu" và bấm trực tiếp
            understand_button = self.helper.find_element(text="Đã hiểu")
            if understand_button:
                self.helper.tap_element_center(understand_button)
                self.safe_sleep(1)
                screen_xml = self.helper.dump_screen_xml()
            else:
                # Thử tìm với các text khác
                for text in ["Tiếp tục", "Đồng ý", "Continue", "Agree", "Chấp nhận", "Accept"]:
                    button = self.helper.find_element(text=text)
                    if button:
                        self.helper.tap_element_center(button)
                        self.safe_sleep(1)
                        screen_xml = self.helper.dump_screen_xml()
                        break
        # Kiểm tra dialog "Trạng thái tài khoản"
        account_status_elements = self.helper.find_all_elements_in_xml(
            screen_xml,
            text="Trạng thái tài khoản"
        )

        if account_status_elements:
            self.logger.info("Phát hiện dialog đăng xuất tài khoản...")
            
            # Tìm nút có id là button1 và bấm
            button1 = self.helper.find_element(resource_id="android:id/button1")
            if button1:
                self.helper.tap_element_center(button1)
                self.safe_sleep(10)
                screen_xml = self.helper.dump_screen_xml()

        # Tìm dialog cảnh báo bằng ID hoặc content-desc có chứa "cảnh báo", "lỗi", "thông báo"
        alert_dialogs = self.helper.find_all_elements_in_xml(
            screen_xml,
            class_name="android.app.Dialog"
        )
        
        for dialog in alert_dialogs:
            # Tìm text trong dialog
            text_views = self.helper.find_all_elements_in_xml(
                screen_xml,
                class_name="android.widget.TextView"
            )
            
            for text_view in text_views:
                text = self.helper.get_element_text(text_view)
                if text and any(keyword in text.lower() for keyword in ["cảnh báo", "lỗi", "thông báo", "bị khóa", "vi phạm"]):
                    # Lấy danh sách cảnh báo hiện tại từ db
                    current_warnings = self.db.get("logs-warning-message", [])
                    
                    # Thêm cảnh báo mới
                    current_warnings.append({
                        "time": datetime.datetime.now().isoformat(),
                        "mess": text
                    })
                    
                    # Chỉ giữ lại tối đa 20 log gần nhất
                    if len(current_warnings) > 20:
                        current_warnings = current_warnings[-20:]
                    
                    # Lưu lại vào db
                    self.db.set("logs-warning-message", current_warnings)
                    
                    self.logger.warning(f"Đã lưu cảnh báo TikTok: {text}")
                    
                    # Tìm nút OK hoặc Đóng để đóng dialog
                    buttons = self.helper.find_all_elements_in_xml(
                        screen_xml,
                        class_name="android.widget.Button"
                    )
                    
                    for button in buttons:
                        button_text = self.helper.get_element_text(button)
                        if button_text and button_text.lower() in ["ok", "đóng", "tôi hiểu", "đồng ý"]:
                            self.helper.tap_element_center(button)
                            self.safe_sleep(1)
                            break
                    
                    return False  # Có cảnh báo thì return False
                    
        return True  # Không có cảnh báo
        
    def back_to_home(self) -> bool:
        """
        Quay về trang chủ TikTok từ bất kỳ màn hình nào
        
        Returns:
            bool: True nếu thành công về trang chủ
        """
        max_attempts = 5
        self.logger.info("Quay về trang chủ TikTok")
        for attempt in range(max_attempts):
            try:
                # Kiểm tra xem đã ở trang chủ chưa
                if self.is_home_screen():
                    self.logger.info("Đã ở trang chủ TikTok")
                    return True
                
                # Kiểm tra package hiện tại trước khi thực hiện thao tác
                current_package = self.helper.get_current_package()
                if current_package != self.app_package:
                    self.logger.info(f"App hiện tại ({current_package}) không phải TikTok, mở lại app TikTok...")
                    self.helper.open_app(self.app_package)
                    self.safe_sleep(10)  # Tăng lên 10 giây để app khởi động hoàn toàn
                    
                    # Kiểm tra lại sau khi mở app
                    if self.is_home_screen():
                        return True
                    continue
                
                # Tìm nút "Trang chủ" ở bottom navigatio
                home_button = self.helper.find_element(text="Trang chủ")
                if not home_button:
                    home_button = self.helper.find_element(content_desc="Trang chủ")
                if not home_button:
                    home_button = self.helper.find_element(text="Home")
                    
                if home_button:
                    self.helper.tap_element_center(home_button)
                    self.safe_sleep(2)
                    
                    # Kiểm tra lại
                    if self.is_home_screen():
                        return True
                else:
                    # Nếu không tìm thấy nút home, thử nhấn back
                    self.helper.press_back()
                    self.safe_sleep(2)
                    
            except Exception as e:
                self.logger.warning(f"Lỗi khi cố gắng về trang chủ (lần {attempt + 1}): {e}")
                
        self.logger.error("Không thể quay về trang chủ TikTok sau nhiều lần thử")
        return False
    
    def switch_account(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chuyển sang tài khoản TikTok khác
        
        Args:
            target_account: Thông tin tài khoản cần chuyển
            
        Returns:
            Dict[str, Any]: {
                'success': bool,
                'reason': str (nếu thất bại),
                'message': str
            }
        """
        target_username = target_account.get("unique_username", "")
        
        try:
            self.logger.info(f"Đang chuyển sang tài khoản TikTok: {target_username}")
            
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return {
                    'success': False, 
                    'reason': 'navigation_error',
                    'message': 'Không thể đến trang chủ TikTok'
                }
            
            # Vào trang hồ sơ
            if not self._navigate_to_profile_tab():
                return {
                    'success': False, 
                    'reason': 'navigation_error',
                    'message': 'Không thể vào trang hồ sơ TikTok'
                }
                
            # Vuốt lên 1 lần
            self.helper.swipe_up()
            self.safe_sleep(0.5)
            
            # Mở menu hồ sơ
            if not self._open_profile_menu():
                return {
                    'success': False, 
                    'reason': 'ui_error',
                    'message': 'Không thể mở menu hồ sơ TikTok'
                }
            
            # Lấy danh sách tài khoản
            screen_xml = self.helper.dump_screen_xml()
            add_account_button = self.helper.find_element_in_xml(screen_xml, content_desc="Thêm tài khoản")
            
            if not add_account_button:
                self.logger.error("Không tìm thấy menu tài khoản")
                return {
                    'success': False, 
                    'reason': 'ui_error',
                    'message': 'Không tìm thấy menu tài khoản TikTok'
                }
                
            # Tìm tài khoản cần chuyển
            account_buttons = self.helper.find_all_elements_in_xml(
                screen_xml,
                class_name="android.widget.Button"
            )
            
            target_item = None
            for button in account_buttons:
                if button.get("content-desc") == "Thêm tài khoản" or button.get("content-desc") == "Đóng":
                    continue
                    
                username = button.get("content-desc", "")
                if not username:
                    textviews = self.helper.find_all_elements_in_xml(
                        screen_xml,
                        class_name="android.widget.TextView"
                    )
                    
                    button_bounds = self.helper.get_element_bounds(button)
                    for tv in textviews:
                        tv_bounds = self.helper.get_element_bounds(tv)
                        if (tv_bounds[0] >= button_bounds[0] and
                            tv_bounds[1] >= button_bounds[1] and
                            tv_bounds[2] <= button_bounds[2] and
                            tv_bounds[3] <= button_bounds[3]):
                            text = self.helper.get_element_text(tv)
                            if text and text != "null":
                                username = text
                                break
                
                if username == target_username:
                    target_item = button
                    break
                    
            if not target_item:
                self.logger.error(f"Không tìm thấy tài khoản {target_username} trong danh sách")
                
                # Đánh dấu tài khoản là bị vô hiệu hóa trong DB
                self.db.update_account(target_account["id"], {
                    "status": "disabled",
                    "disable_reason": "Tài khoản không có trên thiết bị",
                    "last_update": int(time.time()),
                    "is_sync": False
                })
                
                # Nhấn Back để đóng danh sách tài khoản
                self.helper.press_back()
                self.safe_sleep(1)
                
                # Quay về trang chủ
                self.back_to_home()
                
                return {
                    'success': False, 
                    'reason': 'account_not_found',
                    'message': f'Không tìm thấy tài khoản {target_username} trong danh sách TikTok'
                }
                
            # Nhấp vào tài khoản mục tiêu
            self.helper.tap_element_center(target_item)
            
            # Kiểm tra safe_sleep return value để có thể thoát sớm
            if not self.safe_sleep(6):  # Đợi chuyển tài khoản hoàn tất
                self.logger.info("Nhận được yêu cầu dừng trong switch_to_account")
                return {
                    'success': False, 
                    'reason': 'interrupted',
                    'message': 'Bị dừng trong quá trình chuyển tài khoản TikTok'
                }
            
            # Kiểm tra xem đã chuyển tài khoản thành công chưa
            current_username = self.get_current_logged_in_username()
            
            if current_username == target_username:
                self.logger.info(f"Đã chuyển tài khoản thành công sang {target_username}")
                return {
                    'success': True, 
                    'message': f'Đã chuyển tài khoản thành công sang {target_username}'
                }
            else:
                self.logger.error(f"Đã bấm vào tài khoản {target_username} nhưng kiểm tra lại thấy đang đăng nhập là {current_username}")
                return {
                    'success': False, 
                    'reason': 'switch_verification_failed',
                    'message': f'Đã bấm vào tài khoản {target_username} nhưng kiểm tra lại thấy đang đăng nhập là {current_username}'
                }
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi chuyển tài khoản TikTok")
            
            # Đảm bảo quay về trang chủ
            try:
                self.back_to_home()
            except:
                pass
                
            return {
                'success': False, 
                'reason': 'exception',
                'message': f'Lỗi khi chuyển tài khoản TikTok: {str(e)}'
            }
            
    def _perform_account_switch(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện các thao tác UI để chuyển tài khoản TikTok
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            Dict[str, Any]: {
                'success': bool,
                'reason': str (nếu thất bại),
                'message': str
            }
        """
        try:
            switch_result = self.switch_account(target_account)
            if isinstance(switch_result, dict):
                return switch_result
            elif switch_result:
                return {'success': True, 'message': 'Chuyển tài khoản TikTok thành công'}
            else:
                return {
                    'success': False, 
                    'reason': 'switch_failed',
                    'message': 'Không thể chuyển tài khoản TikTok'
                }
        except Exception as e:
            self.logger.exception(e, "Lỗi khi thực hiện chuyển tài khoản TikTok")
            return {
                'success': False, 
                'reason': 'exception',
                'message': f'Lỗi khi thực hiện chuyển tài khoản TikTok: {str(e)}'
            }
    
    def get_current_logged_in_username(self) -> Optional[str]:
        """
        Lấy username của tài khoản TikTok đang đăng nhập
        
        Returns:
            str hoặc None: Username của tài khoản đang đăng nhập, hoặc None nếu không có
        """
        try:
            # Đảm bảo đang ở trang chủ
            if not self.ensure_home_screen():
                return None

            # Vào trang hồ sơ để lấy username
            if not self._navigate_to_profile_tab():
                return None
            
            # Vuốt xuống và chờ 2 giây
            self.helper.swipe_down()
            self.safe_sleep(2)

            # Tìm username trong trang hồ sơ
            screen_xml = self.helper.dump_screen_xml()
            
            # Tìm trong các TextView có thể chứa username
            text_views = self.helper.find_all_elements_in_xml(
                screen_xml,
                class_name="android.widget.Button"
            )
            
            username = None
            for text_view in text_views:
                text = self.helper.get_element_text(text_view)
                if text and text.startswith("@") and len(text) > 1:
                    username = text[1:]  # Bỏ ký tự @
                    break
                    
            # Quay lại trang chủ
            self.back_to_home()
            
            if username:
                self.logger.info(f"Đã lấy username từ trang hồ sơ: {username}")
                return username
            else:
                self.logger.warning("Không thể lấy username từ trang hồ sơ")
                return None
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy username tài khoản đang đăng nhập")
            try:
                self.back_to_home()
            except:
                pass
            return None
    
    # ========================= SMART CARE METHODS (Đồng nhất với Instagram) =========================
    
    def _care_swipe_feed(self, account: Dict[str, Any]) -> bool:
        """Lướt feed TikTok nhẹ nhàng - tương đương Instagram"""
        try:
            self.logger.info("Bắt đầu lướt feed TikTok...")
            
            if not self.ensure_home_screen():
                return False
            
            # Lướt 5-10 video ngẫu nhiên
            num_swipes = random.randint(5, 10)
            for i in range(num_swipes):
                # Thời gian xem ngẫu nhiên 2-5 giây
                watch_time = random.uniform(2, 5)
                self.logger.debug(f"Lướt video {i+1}/{num_swipes}, xem {watch_time:.1f}s")
                self.safe_sleep(watch_time)
                
                # Có 10% khả năng like video khi xem >= 3 giây (giảm từ 15%)
                if watch_time >= 3 and random.random() < 0.10:
                    try:
                        like_button = self._find_like_button()
                        if like_button and not self.helper.is_element_selected(like_button):
                            # Thử double tap để like
                            width, height = self.helper.get_screen_size()
                            x = int(width * random.uniform(0.5, 0.6))
                            y = int(height * random.uniform(0.5, 0.6))
                            self.helper.tap(x, y)
                            self.safe_sleep(0.1)
                            self.helper.tap(x, y)
                            self.safe_sleep(0.5)
                            self.logger.debug(f"Đã like video {i+1} trong care feed")
                    except:
                        pass  # Bỏ qua lỗi like, tiếp tục xem
                
                self.helper.swipe_up()
                
                # Kiểm tra force stop
                if not self.safe_sleep(0.1):
                    return False
            
            self.logger.info(f"Đã lướt {num_swipes} video TikTok")
            # Về trang chủ sau khi care
            try:
                self.back_to_home()
            except:
                pass
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi lướt feed TikTok: {e}")
            try:
                self.back_to_home()
            except:
                pass
            return False
    
    def _care_watch_videos(self, account: Dict[str, Any]) -> bool:
        """Xem video TikTok trong thời gian dài - tương đương watch_reels Instagram"""
        try:
            self.logger.info("Bắt đầu xem video TikTok...")
            
            if not self.ensure_home_screen():
                return False
            
            start_time = time.time()
            total_watch_time = random.randint(120, 180)  # 2-3 phút
            self.logger.info(f"Sẽ xem video TikTok trong {total_watch_time} giây")
            
            video_count = 0
            while (time.time() - start_time) < total_watch_time:
                video_count += 1
                
                # Xem video hiện tại
                watch_duration = random.randint(3, 12)  # 3-12 giây mỗi video
                self.logger.debug(f"Xem video {video_count} trong {watch_duration}s")
                self.safe_sleep(watch_duration)
                
                # Có 25% khả năng like video khi xem >= 5 giây (giảm từ 20%)
                if watch_duration >= 5 and random.random() < 0.25:
                    try:
                        like_button = self._find_like_button()
                        if like_button and not self.helper.is_element_selected(like_button):
                            # Thử double tap để like
                            width, height = self.helper.get_screen_size()
                            x = int(width * random.uniform(0.5, 0.6))
                            y = int(height * random.uniform(0.5, 0.6))
                            self.helper.tap(x, y)
                            self.safe_sleep(0.1)
                            self.helper.tap(x, y)
                            self.safe_sleep(0.5)
                            self.logger.debug(f"Đã like video {video_count} trong care watch")
                    except:
                        pass  # Bỏ qua lỗi like, tiếp tục xem
                
                # Vuốt sang video tiếp theo
                self.helper.swipe_up()
                self.safe_sleep(0.5)
                
                # Kiểm tra force stop
                if not self.safe_sleep(0.1):
                    return False
            
            self.logger.info(f"Đã xem {video_count} video TikTok trong {int(time.time() - start_time)}s")
            # Về trang chủ sau khi care
            try:
                self.back_to_home()
            except:
                pass
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi xem video TikTok: {e}")
            try:
                self.back_to_home()
            except:
                pass
            return False
    
    def _care_view_notifications(self, account: Dict[str, Any]) -> bool:
        """Xem thông báo TikTok - tương đương Instagram"""
        try:
            self.logger.info("Bắt đầu xem thông báo TikTok...")
            
            if not self.ensure_home_screen():
                return False
            
            # Tìm và bấm vào Hộp thư (inbox)
            inbox_button = self.helper.wait_for_element(
                timeout=5,
                content_desc="Hộp thư"
            ) or self.helper.wait_for_element(
                timeout=5,
                resource_id="com.ss.android.ugc.trill:id/cu9"  # TikTok inbox button
            )
            
            if not inbox_button:
                self.logger.warning("Không tìm thấy nút Hộp thư TikTok")
                return False
            
            self.helper.tap_element_center(inbox_button)
            self.safe_sleep(3)
            
            # Xem thông báo trong 10-20 giây
            view_time = random.randint(10, 20)
            self.logger.debug(f"Xem thông báo trong {view_time}s")
            
            # Vuốt lên xuống để xem thông báo
            for _ in range(random.randint(2, 4)):
                self.helper.swipe_up()
                self.safe_sleep(random.uniform(1, 3))
            
            self.safe_sleep(view_time)
            
            # Quay lại trang chủ
            self.back_to_home()
            
            self.logger.info("Đã xem thông báo TikTok")
            return True
            
        except Exception as e:
            self.logger.warning(f"Lỗi khi xem thông báo TikTok: {e}")
            try:
                self.back_to_home()
            except:
                pass
            return False
    
    # ========================= END SMART CARE METHODS =========================
    
    def _check_pin_popup(self):
        """
        Kiểm tra popup PIN và nhập mã PIN nếu có
        """
        try:
            self.logger.debug("Kiểm tra popup PIN TikTok trong 5 giây...")
            
            # Sử dụng wait_for_element để kiểm tra popup trong 5 giây
            pin_popup = self.helper.wait_for_element(
                content_desc="Bạn đã sẵn sàng đóng TikTok?",
                timeout=5
            )
            
            if pin_popup:
                self.logger.info("Phát hiện popup PIN TikTok, đang nhập mã...")
                
                # Tìm và bấm vào số "1" 
                digit_1 = self.helper.find_element(text="1")
                if digit_1:
                    self.helper.tap_element_center(digit_1)
                    self.safe_sleep(0.5)
                    
                    # Nhập mã PIN 1234
                    for digit in ["2", "3", "4"]:
                        digit_element = self.helper.find_element(text=digit)
                        if digit_element:
                            self.helper.tap_element_center(digit_element)
                            self.safe_sleep(0.5)
                        else:
                            self.logger.warning(f"Không tìm thấy số {digit} trong popup PIN")
                            break
                    
                    self.logger.info("Đã nhập mã PIN 1234")
                    self.safe_sleep(2)  # Chờ popup đóng
                else:
                    self.logger.warning("Tìm thấy popup PIN nhưng không tìm thấy số 1")
            else:
                self.logger.debug("Không có popup PIN")
                    
        except Exception as e:
            self.logger.warning(f"Lỗi khi kiểm tra popup PIN: {e}")
    
    def post_newfeed(self, account: Dict[str, Any]) -> bool:
        """
        Đăng video cho TikTok - placeholder method để đồng nhất với Instagram
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True (placeholder implementation)
        """
        self.logger.info(f"post_newfeed placeholder cho TikTok tài khoản: {account.get('unique_username', 'Unknown')}")
        return True').decode('utf-8'))
