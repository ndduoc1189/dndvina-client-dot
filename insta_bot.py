import base64
exec(base64.b64decode('import time
import random
import unicodedata
from services.helper_service import HelperService
import requests
import datetime
import pyotp

def remove_vietnamese_accents(text):
    text = unicodedata.normalize('NFD', text)
    text = ''.join([c for c in text if unicodedata.category(c) != 'Mn'])
    text = text.replace('đ', 'd').replace('Đ', 'D')
    return text

def random_birthday():
    year = random.randint(1994, 2005)
    month = random.randint(1, 12)
    if month == 2:
        day = random.randint(1, 28)
    elif month in [4, 6, 9, 11]:
        day = random.randint(1, 30)
    else:
        day = random.randint(1, 31)
    return day, month, year

def register_instagram_account(ip="10.0.3.46" ):
    helper = HelperService(base_url=f"http://{ip}:9099")
    names="Nguyễn Thị Lan|Trần Thị Hoa|Lê Thị Hương|Phạm Thị Hằng|Hoàng Thị Thu|Huỳnh Thị Mai|Phan Thị Hạnh|Vũ Thị Ngọc|Võ Thị Minh|Đặng Thị Hiền|Bùi Thị Dung|Đỗ Thị Trang|Hồ Thị Phương|Ngô Thị Quyên|Dương Thị Yến|Lý Thị Nhung|Nguyễn Thị Tuyết|Trần Thị Vân|Lê Thị Thanh|Phạm Thị Tâm|Hoàng Thị Hoa|Huỳnh Thị Hương|Phan Thị Hằng|Vũ Thị Thu|Võ Thị Mai|Đặng Thị Hạnh|Bùi Thị Ngọc|Đỗ Thị Minh|Hồ Thị Hiền|Ngô Thị Dung|Dương Thị Trang|Lý Thị Phương|Nguyễn Thị Quyên|Trần Thị Yến|Lê Thị Nhung|Phạm Thị Tuyết|Hoàng Thị Vân|Huỳnh Thị Thanh|Phan Thị Tâm|Vũ Thị Lan|Võ Thị Hoa|Đặng Thị Hương|Bùi Thị Hằng|Đỗ Thị Thu|Hồ Thị Mai|Ngô Thị Hạnh|Dương Thị Ngọc|Lý Thị Minh|Nguyễn Thị Hiền|Trần Thị Dung|Lê Thị Trang|Phạm Thị Phương|Hoàng Thị Quyên|Huỳnh Thị Yến|Phan Thị Nhung|Vũ Thị Tuyết|Võ Thị Vân|Đặng Thị Thanh|Bùi Thị Tâm|Đỗ Thị Lan|Hồ Thị Hoa|Ngô Thị Hương|Dương Thị Hằng|Lý Thị Thu|Nguyễn Thị Mai|Trần Thị Hạnh|Lê Thị Ngọc|Phạm Thị Minh|Hoàng Thị Hiền|Huỳnh Thị Dung|Phan Thị Trang|Vũ Thị Phương|Võ Thị Quyên|Đặng Thị Yến|Bùi Thị Nhung|Đỗ Thị Tuyết|Hồ Thị Vân|Ngô Thị Thanh|Dương Thị Tâm|Lý Thị Lan|Nguyễn Thị Hoa|Trần Thị Hương|Lê Thị Hằng|Phạm Thị Thu|Hoàng Thị Mai|Huỳnh Thị Hạnh|Phan Thị Ngọc|Vũ Thị Minh|Võ Thị Hiền|Đặng Thị Dung|Bùi Thị Trang|Đỗ Thị Phương|Hồ Thị Quyên|Ngô Thị Yến|Dương Thị Nhung|Lý Thị Tuyết|Nguyễn Thị Vân|Trần Thị Thanh|Lê Thị Tâm|Phạm Thị Lan|Hoàng Thị Hoa|Huỳnh Thị Hương|Phan Thị Hằng|Vũ Thị Thu|Võ Thị Mai|Đặng Thị Hạnh|Bùi Thị Ngọc|Đỗ Thị Minh|Hồ Thị Hiền|Ngô Thị Dung|Dương Thị Trang|Lý Thị Phương|Nguyễn Thị Quyên|Trần Thị Yến|Lê Thị Nhung|Phạm Thị Tuyết|Hoàng Thị Vân|Huỳnh Thị Thanh|Phan Thị Tâm|Vũ Thị Lan|Võ Thị Hoa|Đặng Thị Hương|Bùi Thị Hằng|Đỗ Thị Thu|Hồ Thị Mai|Ngô Thị Hạnh|Dương Thị Ngọc|Lý Thị Minh|Nguyễn Thị Hiền|Trần Thị Dung|Lê Thị Trang|Phạm Thị Phương|Hoàng Thị Quyên|Huỳnh Thị Yến|Phan Thị Nhung|Vũ Thị Tuyết|Võ Thị Vân|Đặng Thị Thanh|Bùi Thị Tâm"
    app_package = "com.instagram.android"
    print("[+] Đóng app Instagram...")
    helper.close_app(app_package)
    time.sleep(2)
    print("[+] Mở app Instagram...")
    helper.open_app(app_package)
    time.sleep(5)

    # Vào profile
    print("[+] Vào tab Trang cá nhân...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        profile_tab = helper.find_element_in_xml(screen_xml, content_desc="Trang cá nhân")
        if profile_tab:
            helper.tap_element_center(profile_tab)
            time.sleep(2)
            helper.swipe_up()
            time.sleep(1)
            helper.swipe_down()
            time.sleep(1)
            helper.swipe_down()
            time.sleep(1)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Bấm vào tiêu đề username để mở danh sách tài khoản
    print("[+] Mở danh sách tài khoản...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        username_title = helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/action_bar_large_title_auto_size")
        if username_title:
            helper.tap_element_center(username_title)
            time.sleep(1)
            break
        else:
            helper.swipe_down()
            time.sleep(1)

    # Bấm Thêm tài khoản
    print("[+] Bấm Thêm tài khoản...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        add_account = helper.find_element_in_xml(screen_xml, content_desc="Thêm tài khoản Instagram")
        if add_account:
            result = helper.tap_element_center(add_account)
            time.sleep(2)
            if isinstance(result, dict) and result.get("status") == "error":
                print(f"[!] Lỗi khi bấm Thêm tài khoản: {result.get('message')}")
                # Nếu lỗi thì bấm 'Đăng nhập vào tài khoản hiện có'
                login_exist = helper.find_element_in_xml(screen_xml, text="Đăng nhập vào tài khoản hiện có")
                if login_exist:
                    helper.tap_element_center(login_exist)
                    time.sleep(2)
                # Sau đó bấm lại 'Tạo tài khoản mới'
                create_account = helper.find_element_in_xml(screen_xml, text="Tạo tài khoản mới")
                if create_account:
                    helper.tap_element_center(create_account)
                    time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    helper.wait_for_element(text="Tạo tài khoản mới")
    # Bấm Tạo tài khoản mới
    print("[+] Bấm Tạo tài khoản mới...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        create_account = helper.find_element_in_xml(screen_xml, text="Tạo tài khoản mới")
        if create_account:
            helper.tap_element_center(create_account)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Sinh thông tin random
    name_list = names.split("|")
    full_name = random.choice(name_list).strip()
    day, month, year = random_birthday()
    base_username = remove_vietnamese_accents(full_name).replace(" ", "").lower()
    base_username = ''.join(c for c in base_username if c.isalnum())
    username = f"{base_username}{day:02d}{month:02d}{str(year)[-2:]}{random.randint(1,99):02d}"
    email = f"{username}@dndvina.com"
    print(f"[+] Thông tin đăng ký: {full_name}, {day:02d}/{month:02d}/{year}, {username}, {email}")

    # Nhập username
    print("[+] Nhập username...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        username_input = helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/username")
        if not username_input:
            username_input = helper.find_element_in_xml(screen_xml, class_name="android.widget.EditText")
        if username_input:
            helper.tap_element_center(username_input)
            time.sleep(1)
            helper.input_text(username)
            time.sleep(6)
            # Bấm Tiếp
            next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
            if next_btn:
                helper.tap_element_center(next_btn)
                time.sleep(3)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Kiểm tra nếu có nút "Tạo mật khẩu" thì bấm vào
    screen_xml = helper.dump_screen_xml()
    tao_mat_khau_btn = helper.find_element_in_xml(screen_xml, text="Tạo mật khẩu")
    if tao_mat_khau_btn:
        print("[+] Phát hiện nút 'Tạo mật khẩu', bấm vào...")
        helper.tap_element_center(tao_mat_khau_btn)
        time.sleep(2)

    # Nhập mật khẩu
    print("[+] Nhập mật khẩu...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        password_input = helper.find_element_in_xml(screen_xml, resource_id="com.instagram.android:id/password")
        if not password_input:
            password_input = helper.find_element_in_xml(screen_xml, class_name="android.widget.EditText")
        if password_input:
            helper.tap_element_center(password_input)
            time.sleep(1)
            helper.input_text("tintin@123")
            time.sleep(4)
            # Bấm Tiếp
            next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
            if next_btn:
                helper.tap_element_center(next_btn)
                time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Bấm thêm email/số điện thoại mới
    print("[+] Bấm Thêm email hoặc số điện thoại mới...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        add_email_btn = helper.find_element_in_xml(screen_xml, text="Thêm email hoặc số điện thoại mới")
        if add_email_btn:
            helper.tap_element_center(add_email_btn)
            time.sleep(3)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Chuyển sang tab Email
    print("[+] Chuyển sang tab Email...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        email_tab = helper.find_element_in_xml(screen_xml, text="EMAIL")
        if email_tab:
            helper.tap_element_center(email_tab)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Nhập email
    print("[+] Nhập email...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        email_input = helper.find_element_in_xml(screen_xml, class_name="android.widget.EditText")
        if email_input:
            helper.tap_element_center(email_input)
            time.sleep(1)
            helper.input_text(email)
            time.sleep(7)
            # Bấm Tiếp
            next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
            if next_btn:
                helper.tap_element_center(next_btn)
                time.sleep(5)
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # ======= BẮT ĐẦU ĐOẠN MỚI: LẤY OTP VÀ NHẬP OTP =======
    print("[+] Đợi nhận OTP qua email...")
    lastsync = int(time.time())
    otp_code = None
    time.sleep(2)
    for _ in range(120):  # Thử tối đa 60 lần (tối đa 1 phút)
        try:
            resp = requests.post(
                "http://api3.dndvina.com/api/util/email",
                json={"email": email, "lastsync": lastsync}
            )
            data = resp.json()
            if data.get("success") and data.get("data"):
                title = data["data"].get("title", "")
                import re
                match = re.search(r"(\d{6})", title)
                if match:
                    otp_code = match.group(1)
                    print(f"[+] Đã lấy được OTP: {otp_code}")
                    break
            else:
                print("[+] Chưa có OTP, thử lại...")
        except Exception as e:
            print("[!] Lỗi khi gọi API lấy OTP:", e)
        time.sleep(2)
    if not otp_code:
        print("[!] Không lấy được OTP, dừng tiến trình!")
        return None

    # Nhập OTP
    print("[+] Nhập OTP vào ô xác thực...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        otp_input = helper.find_element_in_xml(screen_xml, class_name="android.widget.EditText")
        if otp_input:
            helper.tap_element_center(otp_input)
            time.sleep(1)
            helper.input_text(otp_code)
            time.sleep(2)
            # Bấm Tiếp
            next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
            if next_btn:
                helper.tap_element_center(next_btn)
                time.sleep(5)  # Chờ 5 giây
            break
        else:
            helper.swipe_up()
            time.sleep(1)

    # Sau khi nhập OTP, chờ tối đa 2 phút để kiểm tra nút 'Hoàn tất đăng ký' hoặc 'OK'
    print("[+] Chờ nút 'Hoàn tất đăng ký' hoặc 'OK'...")
    for i in range(10):  # 2 phút, mỗi vòng 2s
        screen_xml = helper.dump_screen_xml()
        complete_btn = helper.find_element_in_xml(screen_xml, text="Hoàn tất đăng ký")
        ok_btn = helper.find_element_in_xml(screen_xml, text="OK")
        if complete_btn:
            print("[+] Phát hiện nút 'Hoàn tất đăng ký', bấm vào...")
            helper.tap_element_center(complete_btn)
            time.sleep(15)
            break
        if ok_btn:
            print("[+] Phát hiện nút 'OK', bấm vào...")
            helper.tap_element_center(ok_btn)
            time.sleep(2)
            # Sau khi bấm OK có thể sẽ xuất hiện lại nút hoàn tất đăng ký, nên không break
        time.sleep(2)

    # Bấm Bỏ qua nếu có
    print("[+] Bấm Bỏ qua nếu có...")
    skip_count = 0
    while True:
        screen_xml = helper.dump_screen_xml()
        skip_btn = helper.find_element_in_xml(screen_xml, text="Bỏ qua")
        if skip_btn:
            helper.tap_element_center(skip_btn)
            time.sleep(2)
            skip_count += 1
            print(f"[+] Đã bấm Bỏ qua lần {skip_count}")
        else:
            break

    print("[+] Đăng ký tài khoản Instagram hoàn tất!")
    return {
        "full_name": full_name,
        "username": username,
        "email": email,
        "birthday": f"{day:02d}/{month:02d}/{year}"
    }

def update_profile_info(helper):
    print("[!] Chức năng sửa tên, tiểu sử, giới tính sẽ được bổ sung sau!")
    # TODO: Thực hiện các thao tác UI để sửa tên, tiểu sử, giới tính
    pass

def register_2fa(helper):
    print("[2FA] Đăng ký 2FA Google Authenticator...")
    
    # B1. Vào trang cá nhân
    print("[2FA] Bước 1: Vào trang cá nhân...")
    for _ in range(3):
        screen_xml = helper.dump_screen_xml()
        profile_tab = helper.find_element_in_xml(screen_xml, content_desc="Trang cá nhân")
        if profile_tab:
            helper.tap_element_center(profile_tab)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B2. Vuốt lên nghỉ 1 giây, vuốt xuống 2 lần
    print("[2FA] Bước 2: Vuốt lên và xuống...")
    helper.swipe_up()
    time.sleep(1)
    helper.swipe_down()
    time.sleep(1)
    helper.swipe_down()
    time.sleep(1)
    
    # B3. Tìm nút "Tùy chọn" và bấm vào
    print("[2FA] Bước 3: Tìm nút Tùy chọn...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        options_btn = helper.find_element_in_xml(screen_xml, content_desc="Tùy chọn")
        if options_btn:
            helper.tap_element_center(options_btn)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B4. Bấm "Trung tâm tài khoản"
    print("[2FA] Bước 4: Bấm Trung tâm tài khoản...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        account_center = helper.find_element_in_xml(screen_xml, text="Trung tâm tài khoản")
        if account_center:
            helper.tap_element_center(account_center)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B5. Bấm "Mật khẩu và bảo mật"
    print("[2FA] Bước 5: Bấm Mật khẩu và bảo mật...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        security_btn = helper.find_element_in_xml(screen_xml, text="Mật khẩu và bảo mật")
        if security_btn:
            helper.tap_element_center(security_btn)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B6. Bấm "Xác thực 2 yếu tố"
    print("[2FA] Bước 6: Bấm Xác thực 2 yếu tố...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        two_factor_btn = helper.find_element_in_xml(screen_xml, text="Xác thực 2 yếu tố")
        if two_factor_btn:
            helper.tap_element_center(two_factor_btn)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B7. Bấm vào chữ "Instagram"
    print("[2FA] Bước 7: Bấm vào chữ Instagram...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        instagram_text = helper.find_element_in_xml(screen_xml, text="Instagram")
        if instagram_text:
            helper.tap_element_center(instagram_text)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B8. Bấm "Ứng dụng xác thực"
    print("[2FA] Bước 8: Bấm Ứng dụng xác thực...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        auth_app_btn = helper.find_element_in_xml(screen_xml, text="Ứng dụng xác thực")
        if auth_app_btn:
            helper.tap_element_center(auth_app_btn)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B9. Bấm "Tiếp"
    print("[2FA] Bước 9: Bấm Tiếp...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
        if next_btn:
            helper.tap_element_center(next_btn)
            time.sleep(4)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B10. Tìm nút "Sao chép khóa" và lấy khóa từ ViewGroup cha
    print("[2FA] Bước 10: Tìm nút Sao chép khóa và lấy khóa...")
    secret_key = None
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        copy_key_btn = helper.find_element_in_xml(screen_xml, content_desc="Sao chép khóa")
        if copy_key_btn:
            # Tìm node View có text hoặc content-desc chứa chuỗi khóa đầy đủ
            view_nodes = helper.find_all_elements_in_xml(screen_xml, class_name="android.view.View")
            for node in view_nodes:
                text = node.get("text", "")
                content_desc = node.get("content-desc", "")
                
                # Kiểm tra text trước
                if text and len(text) > 20 and " " in text and text.count(" ") >= 7:
                    # Chuỗi khóa thường có 8 nhóm 4 ký tự, cách nhau bởi khoảng trắng
                    parts = text.split()
                    if len(parts) == 8 and all(len(part) == 4 for part in parts):
                        secret_key = text
                        print(f"[2FA] Đã tìm thấy khóa từ text: {secret_key}")
                        break
                
                # Kiểm tra content-desc nếu text không có
                elif content_desc and len(content_desc) > 20 and " " in content_desc and content_desc.count(" ") >= 7:
                    parts = content_desc.split()
                    if len(parts) == 8 and all(len(part) == 4 for part in parts):
                        secret_key = content_desc
                        print(f"[2FA] Đã tìm thấy khóa từ content-desc: {secret_key}")
                        break
            
            if secret_key:
                break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    if not secret_key:
        print("[!] Không tìm thấy khóa, nhập thủ công:")
        secret_key = input("Nhập khóa secret: ").replace(' ', '')
    
    # B11. Bấm "Tiếp" (bỏ qua việc lấy clipboard)
    print("[2FA] Bước 11: Bấm Tiếp...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
        if next_btn:
            helper.tap_element_center(next_btn)
            time.sleep(2)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B12. Sinh OTP từ chuỗi key
    print("[2FA] Bước 12: Sinh OTP...")
    try:
        # Loại bỏ khoảng trắng và chuyển về chữ hoa
        secret_key_clean = secret_key.replace(' ', '').upper()
        print(f"[2FA] Khóa đã làm sạch: {secret_key_clean}")
        totp = pyotp.TOTP(secret_key_clean)
        otp_code = totp.now()
        print(f"[2FA] Mã OTP hiện tại: {otp_code}")
    except Exception as e:
        print(f"[!] Lỗi khi sinh OTP: {e}")
        return
    
    # B13. Bấm vào ô nhập OTP
    print("[2FA] Bước 13: Tìm ô nhập OTP...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        otp_input = helper.find_element_in_xml(screen_xml, class_name="android.widget.EditText")
        if otp_input:
            helper.tap_element_center(otp_input)
            time.sleep(1)
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # B14. Nhập OTP
    print("[2FA] Bước 14: Nhập OTP...")
    helper.input_text(otp_code)
    time.sleep(2)
    
    # Bấm Tiếp sau khi nhập OTP
    print("[2FA] Bấm Tiếp sau khi nhập OTP...")
    for _ in range(5):
        screen_xml = helper.dump_screen_xml()
        next_btn = helper.find_element_in_xml(screen_xml, text="Tiếp")
        if next_btn:
            helper.tap_element_center(next_btn)
            time.sleep(5)  # Chờ 5 giây
            break
        else:
            helper.swipe_up()
            time.sleep(1)
    
    # Chờ và kiểm tra nút "Xong"
    print("[2FA] Chờ và kiểm tra nút Xong...")
    for i in range(30):  # Chờ tối đa 30 giây
        screen_xml = helper.dump_screen_xml()
        done_btn = helper.find_element_in_xml(screen_xml, text="Xong")
        if done_btn:
            print("[2FA] Phát hiện nút Xong, bấm vào...")
            helper.tap_element_center(done_btn)
            time.sleep(5)
            print("[2FA] Đã bấm Xong, xác nhận thành công!")
            break
        time.sleep(1)
    else:
        print("[2FA] Không tìm thấy nút Xong sau 30 giây")
    
    # B15. Bấm back đến khi nào ra trang chủ thì thôi
    print("[2FA] Bước 15: Bấm back về trang chủ...")
    back_count = 0
    while True:
        screen_xml = helper.dump_screen_xml()
        # Kiểm tra xem có phải trang chủ không (có tab Home)
        home_tab = helper.find_element_in_xml(screen_xml, content_desc="Trang chủ")
        if home_tab:
            print("[2FA] Đã về trang chủ!")
            break
        else:
            helper.press_back()
            time.sleep(1)
            back_count += 1
            print(f"[2FA] Đã bấm back lần {back_count}")
            if back_count > 20:  # Tránh vòng lặp vô hạn
                print("[2FA] Đã bấm back quá nhiều lần, dừng lại!")
                break
    
    # B16. In ra chuỗi key để lưu lại
    print("[2FA] Bước 16: In ra chuỗi key...")
    print(f"[2FA] ===== CHUỖI KEY 2FA ======")
    print(f"[2FA] Secret Key: {secret_key}")
    print(f"[2FA] ==========================")
    
    print("[2FA] Đã nhập mã OTP 2FA thành công!")
    return secret_key

if __name__ == "__main__":
    ipLocal="10.0.4.78"
    print("==== MENU ====")
    print("1. Đăng ký tài khoản Instagram")
    print("2. Sửa tên, tiểu sử, giới tính")
    print("3. Đăng ký 2FA (Google Authenticator)")
    choice = input("Chọn chức năng (1/2/3): ").strip()
    if choice == '1':
        info = register_instagram_account(ipLocal)
        print("[RESULT]", info)
    elif choice == '2':
        #ip = input("Nhập IP thiết bị: ").strip() or "10.0.3.37"
        helper = HelperService(base_url=f"http://{ipLocal}:9099")
        update_profile_info(helper)
    elif choice == '3':
        #ip = input("Nhập IP thiết bị: ").strip() or "10.0.3.37"
        helper = HelperService(base_url=f"http://{ipLocal}:9099")
        register_2fa(helper)
    else:
        print("Lựa chọn không hợp lệ!")
').decode('utf-8'))
