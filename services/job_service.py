import base64
exec(base64.b64decode('import time
import threading
import datetime
import random
import json
from typing import Dict, Any, List, Optional
import config
import utils
from utils import LogLevel, Logger
from jobs import TiktokJob, InstagramJob
from services.proxy_service import ProxyService

# Tạo logger cho JobService
logger = utils.get_logger("JobService")

# Constants for better code readability
class JobServiceConstants:
    """Constants used in JobService"""
    DEFAULT_CHECK_INTERVAL = 0.5  # Sleep check interval in seconds
    MAX_WARNING_LOGS = 20
    
    # Status messages
    MSG_DEVICE_PAUSED_SERVER = "Tạm dừng (Sever yêu cầu)"
    MSG_DEVICE_NO_ACCOUNTS = "Tạm nghỉ (Không có tài khoản)"
    MSG_WAITING_PROXY = "Đang chờ proxy"
    MSG_WORKING_CONTINUOUS = "Đang làm việc liên tục"
    
    # Account status reasons
    REASON_DAILY_LIMIT = "Đã đạt giới hạn job hàng ngày"
    REASON_FOLLOW_DAILY_LIMIT = "Đã đạt giới hạn job folow trong ngày"

class JobService:
    def __init__(self, db_service, helper_service, golike_service, mqtt_service=None):
        """
        Khởi tạo JobService
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
            golike_service: GoLikeService để gọi API GoLike
            mqtt_service: MQTTService để gửi thông báo (optional)
        """
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.mqtt_service = mqtt_service
        self.running = True
        self.force_stop = False
        
        # Khởi tạo ProxyService
        self.proxy_service = ProxyService(db_service, helper_service)
        
        # Khởi tạo các job handler
        self.job_handlers = {}
        
        # Flag điều khiển
        self.is_initialized = False
        
        # Thông tin về các app được kích hoạt - lấy từ database hoặc config
        self.enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        # Lock để đồng bộ trạng thái
        self._lock = threading.Lock()
        
        # Dictionary để lưu số lần thử job thất bại theo account_id
        self.failed_job_attempts = {}
        
        # Đếm số lần liên tiếp job follow trả về status 4 (pending)
        self.follow_pending_counts = {}
        
        # Đếm số lần liên tiếp bị unfollow/unlike theo account_id
        self.unfollow_attempts = {}
        
        # Đếm số lần liên tiếp không có tài khoản làm việc để quyết định nhả proxy
        self.no_job_consecutive_count = 0
        
        # Track tài khoản hiện tại đã reset IP proxy để tránh reset lặp lại
        self.current_proxy_account_id = None
        
        # Track tài khoản hiện tại đang đăng nhập theo app để tránh switch không cần thiết
        self.current_logged_in_accounts = {}  # {app_name: account_id}
        
        # Flag để track xem đã verify current account chưa khi khởi động
        self.initial_account_verified = {}  # {app_name: bool}
        
        # Track tài khoản hiện tại đang làm việc để tránh quét lại không cần thiết
        self.current_working_account = None
        
    def _verify_current_account_on_app(self, app_name: str, handler) -> Optional[Dict[str, Any]]:
        """
        Verify tài khoản thực tế đang login trên app
        
        Args:
            app_name: Tên app
            handler: Job handler của app
            
        Returns:
            Dict: Thông tin tài khoản đang login thật trên app, None nếu không có hoặc lỗi
        """
        try:
            if not hasattr(handler, 'get_current_logged_in_username'):
                logger.warning(f"Handler {app_name} không hỗ trợ get_current_logged_in_username")
                return None
                
            # Lấy thông tin tài khoản hiện tại từ UI
            current_account_username = handler.get_current_logged_in_username()
            if not current_account_username:
                logger.info(f"Không có tài khoản nào đang login trên {app_name}")
                return None
                
            # Tìm tài khoản trong DB
            accounts = self.db.get_accounts(app=app_name)
            for account in accounts:
                if account.get('unique_username') == current_account_username:
                    logger.info(f"Verified: Tài khoản {current_account_username} đang login thật trên {app_name}")
                    return account
                    
            logger.warning(f"Tài khoản {current_account_username} đang login trên {app_name} nhưng không có trong DB")
            return None
            
        except Exception as e:
            logger.error(f"Lỗi khi verify current account trên {app_name}: {e}")
            return None
            
    def _sync_account_login_status_with_reality(self, app_name: str, handler):
        """
        Đồng bộ trạng thái logged_in trong DB với thực tế trên app
        
        Args:
            app_name: Tên app
            handler: Job handler của app
        """
        try:
            # Verify tài khoản thực tế đang login
            current_account = self._verify_current_account_on_app(app_name, handler)
            
            # Reset tất cả tài khoản của app này về logged_in = False trong DB
            accounts = self.db.get_accounts(app=app_name)
            reset_count = 0
            for account in accounts:
                if account.get("logged_in", False):
                    self.db.update_account(account["id"], {"logged_in": False})
                    reset_count += 1
                    logger.debug(f"Reset logged_in = False cho tài khoản {account.get('unique_username')}")
            
            if reset_count > 0:
                logger.info(f"Reset {reset_count} tài khoản về logged_in = False cho {app_name}")
            
            # Cập nhật tài khoản thực tế đang login
            if current_account:
                self.db.update_account(current_account["id"], {"logged_in": True})
                self.current_logged_in_accounts[app_name] = current_account["id"]
                logger.info(f"Sync trạng thái: Tài khoản {current_account.get('unique_username')} đang login thật trên {app_name}")
            else:
                # Không có tài khoản nào login
                if app_name in self.current_logged_in_accounts:
                    del self.current_logged_in_accounts[app_name]
                logger.info(f"Sync trạng thái: Không có tài khoản nào đang login trên {app_name}")
                
        except Exception as e:
            logger.error(f"Lỗi khi sync login status cho {app_name}: {e}")
            
    def _is_current_account_still_workable(self) -> bool:
        """
        Kiểm tra xem tài khoản hiện tại có còn có thể làm việc không
        
        Returns:
            bool: True nếu tài khoản hiện tại vẫn có thể làm việc, False nếu cần tìm tài khoản khác
        """
        if not self.current_working_account:
            return False
            
        try:
            # Lấy thông tin tài khoản mới nhất từ DB
            account_id = self.current_working_account.get("id")
            current_account = self.db.get_account(account_id)
            
            if not current_account:
                logger.debug(f"Tài khoản ID {account_id} không còn tồn tại trong DB")
                return False
                
            # Kiểm tra xem tài khoản có còn có thể làm việc không
            can_work = self._can_run_job(current_account)
            if can_work:
                # Cập nhật thông tin tài khoản hiện tại với data mới nhất
                self.current_working_account = current_account
                return True
            else:
                logger.info(f"Tài khoản {current_account.get('unique_username')} không thể làm việc nữa, cần tìm tài khoản khác")
                self.current_working_account = None
                return False
                
        except Exception as e:
            logger.error(f"Lỗi khi kiểm tra tài khoản hiện tại: {e}")
            self.current_working_account = None
            return False
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức khi force_stop được đặt thành True
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        start_time = time.time()
        check_interval = JobServiceConstants.DEFAULT_CHECK_INTERVAL  # Kiểm tra mỗi 0.5 giây
        
        while time.time() - start_time < seconds:
            # Kiểm tra nếu có yêu cầu dừng
            with self._lock:
                if self.force_stop or not self.running:
                    return False
            
            # Ngủ một khoảng ngắn
            sleep_time = min(check_interval, seconds - (time.time() - start_time))
            if sleep_time > 0:
                time.sleep(sleep_time)
            else:
                break
                
        return True
        
    def initialize(self) -> bool:
        """
        Khởi tạo JobService
        
        Returns:
            bool: True nếu khởi tạo thành công, False nếu không
        """
        logger.info("Đang khởi tạo JobService...")
        
        # 1. Kiểm tra HelperService
        helper_success, helper_data = utils.check_helper_service(self.helper)
        if not helper_success:
            logger.error("Không thể kết nối đến HelperService. Vui lòng kiểm tra lại.")
            return False
            
        # Lưu thông tin thiết bị nếu có
        if helper_data and "data" in helper_data:
            self.db.save_device_info(helper_data)
            logger.info(f"Đã lưu thông tin thiết bị: {helper_data['data'].get('device_model', 'Unknown')}")
            
            
        # 3. Lưu các cấu hình mặc định vào database nếu chưa có
        self._save_default_configs()
            
        
        
        # 5. Khởi tạo các job handler
        self._init_job_handlers()
        
        # 6. Khởi tạo ngày cuối cùng đã reset nếu chưa có trong database
        now = datetime.datetime.now()
        today = now.date()
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        
        if not last_reset_date_str:
            # Nếu hiện tại đã qua giờ reset của ngày hôm nay, đánh dấu đã reset
            if now >= reset_time:
                last_reset_date = today
            else:
                # Nếu chưa đến giờ reset, đánh dấu là đã reset ngày hôm qua
                last_reset_date = today - datetime.timedelta(days=1)
                
            # Lưu vào database
            self.db.set("last_reset_date", last_reset_date.isoformat())
            logger.info(f"Khởi tạo ngày reset: {last_reset_date}")
        else:
            logger.info(f"Đã tìm thấy ngày reset cuối cùng: {last_reset_date_str}")
        
        self.is_initialized = True
        logger.info("Khởi tạo JobService thành công.")
        return True
        
    def _check_account_sync_status(self, app_name: str) -> bool:
        """
        Kiểm tra trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu cần đồng bộ lại, False nếu không cần
        """
        # Lấy trạng thái đồng bộ từ database
        sync_status_key = f"{app_name}_sync_status"
        sync_status = self.db.get(sync_status_key, False)  # Mặc định là chưa đồng bộ
        
        # Nếu chưa đồng bộ thì cần đồng bộ lại
        return not sync_status
        
    def _update_account_sync_status(self, app_name: str, status: bool = True) -> None:
        """
        Cập nhật trạng thái đồng bộ tài khoản của một app
        
        Args:
            app_name: Tên ứng dụng cần cập nhật
            status: True nếu đã đồng bộ, False nếu chưa đồng bộ
        """
        sync_status_key = f"{app_name}_sync_status"
        
        # Cập nhật trạng thái đồng bộ
        self.db.set(sync_status_key, status)
        
        logger.info(f"Đã cập nhật trạng thái đồng bộ tài khoản {app_name}: {status}")
        
    def _sync_accounts_for_app(self, app_name: str) -> bool:
        """
        Đồng bộ tài khoản và map tài khoản GoLike cho một app cụ thể
        
        Args:
            app_name: Tên ứng dụng cần đồng bộ
            
        Returns:
            bool: True nếu đồng bộ thành công, False nếu thất bại
        """
        if app_name not in self.job_handlers:
            logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua đồng bộ")
            return False
            
        handler = self.job_handlers[app_name]
        
        try:

            # 1. Đồng bộ tài khoản từ thiết bị
            logger.info(f"Đang đồng bộ tài khoản {app_name}...")
            accounts = handler.sync_accounts_to_db()
            logger.info(f"Đã đồng bộ {len(accounts)} tài khoản {app_name}")
            
            # 2. Map tài khoản GoLike
            logger.info(f"Đang lấy danh sách tài khoản GoLike cho {app_name}...")
            golike_accounts = handler.get_golike_accounts()
            
            if golike_accounts:
                logger.info(f"Đã tìm thấy {len(golike_accounts)} tài khoản GoLike cho {app_name}")
                
                # Lấy tài khoản từ thiết bị
                device_accounts = self.db.get_accounts(app=app_name)
                
                # Ánh xạ tài khoản
                mapped_accounts = handler.map_golike_accounts(golike_accounts, device_accounts)
                
                logger.info(f"Đã ánh xạ {len(mapped_accounts)} tài khoản {app_name} với GoLike")
            else:
                logger.warning(f"Không tìm thấy tài khoản GoLike nào cho {app_name}")
            
            # Cập nhật trạng thái đồng bộ
            self._update_account_sync_status(app_name, True)
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi đồng bộ tài khoản và map GoLike cho {app_name}")
            # Đánh dấu là chưa đồng bộ
            self._update_account_sync_status(app_name, False)
            return False
        
    def _save_default_configs(self):
        """Lưu các cấu hình mặc định vào database nếu chưa có"""
        default_configs = {
            # Cấu hình liên quan đến thời gian làm job
            "job_hour": config.JOB_HOUR,
            "job_cooldown_minutes": config.DEFAULT_COOLDOWN_MINUTES,
            "job_check_interval": config.JOB_CHECK_INTERVAL,
            "cooldown_get_job_golike": 30,  # Thời gian chờ (phút) khi không tìm thấy job GoLike
            
            # Cấu hình liên quan đến số lượng job
            "max_jobs_per_day": config.MAX_JOBS_PER_DAY,
            
            # Trạng thái tạm dừng từ server
            "pause_job": False,
            # Trạng thái thiết bị đang làm việc
            "device_is_working": False,
            "device_message": "",
            
            # Danh sách các app được kích hoạt
            "enabled_apps": config.ENABLED_APPS,
            
            # Thiết lập cho phép chăm sóc khi làm job
            "care_in_working_job": False,
            
            # Cấu hình giá tối thiểu cho job follow
            "min_follow_price": 20,
            
            # Cấu hình xử lý unfollow/unlike
            "max_unfollow_attempts": config.MAX_UNFOLLOW_ATTEMPTS,
            "unfollow_penalty_minutes": 720,  # Mặc định 12 giờ, có thể điều chỉnh từ server
            
            # Cấu hình proxy
            "use_proxy": False,  # Có sử dụng proxy không
            "proxy_server": "http://10.0.0.5:9032",  # Server proxy mặc định
        }
        
        for key, value in default_configs.items():
            # Chỉ lưu nếu chưa có trong database
            if self.db.get(key) is None:
                self.db.set(key, value)
                logger.debug(f"Đã lưu cấu hình mặc định: {key}={value}")
            else:
                logger.debug(f"Cấu hình {key} đã tồn tại: {self.db.get(key)}")
        
    def _init_job_handlers(self):
        """Khởi tạo các job handler"""
        # init thì sẽ init handlers cho tất cả các app, làm app nào thì sẽ theo cấu hình lấy từ database
        for app_name in config.ENABLED_APPS:
            if app_name == "tiktok":
                self.job_handlers[app_name] = TiktokJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep và proxy_service vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                self.job_handlers[app_name].set_proxy_service(self.proxy_service)
            elif app_name == "instagram":
                self.job_handlers[app_name] = InstagramJob(self.db, self.helper, self.golike_service)
                # Truyền phương thức safe_sleep và proxy_service vào job handler
                self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                self.job_handlers[app_name].set_proxy_service(self.proxy_service)
                
        logger.info(f"Đã khởi tạo {len(self.job_handlers)} job handler: {', '.join(self.job_handlers.keys())}")
        
    def _reset_daily_counters(self):
        """Reset bộ đếm hàng ngày vào giờ được cấu hình"""
        now = datetime.datetime.now()
        today = now.date()
        
        # Lấy giờ reset từ cấu hình hoặc từ database nếu có
        job_hour = self.db.get("job_hour", config.JOB_HOUR)
        
        # Tính thời điểm reset của ngày hôm nay
        reset_time = datetime.datetime.combine(today, datetime.time(hour=job_hour, minute=0))
        
        # Lấy ngày reset cuối cùng từ database
        last_reset_date_str = self.db.get("last_reset_date")
        last_reset_date = None
        
        if last_reset_date_str:
            try:
                last_reset_date = datetime.date.fromisoformat(last_reset_date_str)
            except ValueError:
                logger.error(f"Định dạng ngày reset không hợp lệ: {last_reset_date_str}")
                last_reset_date = None
        
        # Kiểm tra xem đã qua giờ reset của ngày hôm nay chưa và chưa reset trong ngày hôm nay
        if now >= reset_time and (last_reset_date is None or last_reset_date < today):
            logger.info(f"Thực hiện reset bộ đếm hàng ngày (giờ reset: {job_hour}:00)")
            
            # Reset các bộ đếm cho tất cả tài khoản
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                
                for account in accounts:
                    # Reset số job hôm nay (bỏ session counters)
                    self.db.update_account(account["id"], {
                        "job_today": 0,
                        "follow_today": 0,
                        "last_view_stories": 0,
                        "is_sync": False
                    })
                    
                    # Không reset trạng thái follow - chỉ reset khi hết thời gian
                    
                    # Nếu tài khoản đang ở trạng thái inactive vì đã đạt giới hạn job hàng ngày,
                    # đặt lại trạng thái thành active
                    if account.get("status") == "inactive" and account.get("inactive_reason") == "Đã đạt giới hạn job hàng ngày":
                        self.db.update_account(account["id"], {
                            "status": "active",
                            "job_disable_until": 0,
                            "is_sync": False
                        })
                        logger.info(f"Đã đặt lại trạng thái active cho tài khoản {account.get('unique_username')} sau khi reset")
                
            
            logger.info(f"Đã reset bộ đếm hàng ngày cho tất cả tài khoản vào {now.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Cập nhật ngày đã reset vào database
            self.db.set("last_reset_date", today.isoformat())
        
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể chạy job cho tài khoản không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể chạy job, False nếu không
        """
        username = account.get('unique_username', 'Unknown')
        
        # 1. Kiểm tra trạng thái cơ bản
        if not self._check_basic_account_status(account):
            return False
            
        # 2. Kiểm tra điều kiện cần thiết
        if not self._check_account_prerequisites(account):
            return False
            
        # 3. Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # 4. Kiểm tra giới hạn job hàng ngày
        if self._is_account_at_daily_limit(account):
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            return False
            
        # 5. Bỏ qua kiểm tra giới hạn session vì đã chuyển sang continuous processing

    # ...KHÔNG kiểm tra follow ở đây, chỉ kiểm tra trạng thái tài khoản chung...
        
        return True
        
    def _check_basic_account_status(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra trạng thái cơ bản của tài khoản"""
        account_status = account.get("status", "active")
        
        # Nếu tài khoản bị disabled, không cho chạy job
        if account_status == "disabled":
            return False
            
        # Nếu tài khoản đã logout, không cho chạy job
        if account_status == "logout":
            return False
            
        # Nếu tài khoản đang inactive, kiểm tra thời gian cooldown
        if account_status == "inactive":
            return self._handle_inactive_account(account)
            
        return True
        
    def _handle_inactive_account(self, account: Dict[str, Any]) -> bool:
        """Xử lý tài khoản đang ở trạng thái inactive"""
        job_disable_until = account.get("job_disable_until", 0)
        username = account.get('unique_username', 'Unknown')
        
        # Nếu đã hết thời gian cooldown, cập nhật trạng thái về active
        if job_disable_until <= time.time():
            # Cập nhật trạng thái về active
            update_data = {
                "status": "active",
                "last_care_time": 0
            }
            self.db.update_account(account["id"], update_data)
            
            # Reset unfollow attempts khi tài khoản active lại
            if account["id"] in self.unfollow_attempts:
                self.unfollow_attempts[account["id"]] = 0
                logger.info(f"Reset unfollow attempts cho tài khoản {username}")
            
            # Không tự động enable follow - chỉ enable khi hết thời gian disable_follow
            
            logger.info(f"Tài khoản {username} đã hết thời gian chờ, đã chuyển về trạng thái active")
            return True
        else:
            # Chưa hết thời gian chờ
            cooldown_remain = int((job_disable_until - time.time()) / 60)
            logger.info(f"Tài khoản {username} đang trong thời gian chờ (còn {cooldown_remain} phút)")
            return False
            
    def _update_logged_in_status(self, app_name: str, account_id: int, is_logged_in: bool):
        """
        Cập nhật trạng thái đăng nhập của tài khoản
        
        Args:
            app_name: Tên app
            account_id: ID tài khoản 
            is_logged_in: True nếu đã đăng nhập, False nếu logout
        """
        try:
            # Cập nhật database
            self.db.update_account(account_id, {
                "logged_in": is_logged_in,
                "is_sync": False
            })
            
            # Cập nhật tracking trong memory
            if is_logged_in:
                # Đánh dấu tài khoản khác của cùng app là logout
                if app_name in self.current_logged_in_accounts:
                    old_account_id = self.current_logged_in_accounts[app_name]
                    if old_account_id != account_id:
                        self.db.update_account(old_account_id, {
                            "logged_in": False,
                            "is_sync": False
                        })
                        logger.debug(f"Đánh dấu tài khoản cũ {old_account_id} ({app_name}) logout")
                
                # Lưu tài khoản mới
                self.current_logged_in_accounts[app_name] = account_id
                logger.debug(f"Đánh dấu tài khoản {account_id} ({app_name}) đã đăng nhập")
            else:
                # Xóa khỏi tracking nếu logout
                if app_name in self.current_logged_in_accounts and self.current_logged_in_accounts[app_name] == account_id:
                    del self.current_logged_in_accounts[app_name]
                    logger.debug(f"Xóa tài khoản {account_id} ({app_name}) khỏi tracking")
                    
        except Exception as e:
            logger.error(f"Lỗi khi cập nhật trạng thái đăng nhập: {e}")
            
    def _check_account_prerequisites(self, account: Dict[str, Any]) -> bool:
        """Kiểm tra các điều kiện tiên quyết của tài khoản"""
        # Kiểm tra xem tài khoản có được bật job không
        if not account.get("job_enable", False):
            return False
            
        # Kiểm tra xem tài khoản đã được liên kết với GoLike chưa
        if not account.get("is_golike_linked", False):
            return False
            
        return True
        
    def _ensure_account_limits_set(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Đảm bảo các giới hạn của tài khoản được thiết lập với giá trị mặc định
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Thông tin tài khoản đã được cập nhật
        """
        update_data = {}
        
        # Kiểm tra và thiết lập job_max_day
        if account.get("job_max_day", 0) <= 0:
            update_data["job_max_day"] = config.MAX_JOBS_PER_DAY
            
        # Cập nhật vào database nếu có thay đổi
        if update_data:
            update_data["is_sync"] = False
            self.db.update_account(account["id"], update_data)
            account.update(update_data)
            
        return account
        
    def _close_app_for_account(self, account: Dict[str, Any]) -> None:
        """
        Đóng app tương ứng với tài khoản
        
        Args:
            account: Thông tin tài khoản
        """
        app_name = account.get("app")
        if app_name and app_name in config.APP_PACKAGES:
            self.helper.close_app(config.APP_PACKAGES[app_name])
            
    def _is_account_at_daily_limit(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có đạt giới hạn job hàng ngày không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đạt giới hạn
        """
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        return job_today >= job_max_day
        
    def _update_job_stats(self, account: Dict[str, Any], success: bool = True, job_type: str = None, job_result: dict = None):
        """
        Cập nhật thống kê job
        
        Args:
            account: Thông tin tài khoản
            success: True nếu job thành công, False nếu thất bại
            job_type: Loại job (follow, like, etc.)
            job_result: Kết quả job (dùng để xử lý unfollow)
        """
        username = account.get('unique_username', 'Unknown')
        
        # Cập nhật thông tin job cơ bản (bao gồm cả follow stats nếu là follow job)
        self._update_basic_job_stats(account, success, job_type)
        
        # Reset số lần thử job thất bại nếu job thành công
        if success:
            self.failed_job_attempts[account["id"]] = 0
            # Reset unfollow attempts khi job thành công (không phải bị unfollow)
            if not (job_result and job_result.get("unfollow", False)):
                self.unfollow_attempts[account["id"]] = 0
        
        # Đảm bảo các giới hạn được thiết lập
        account = self._ensure_account_limits_set(account)
        
        # Bỏ qua kiểm tra giới hạn session vì đã chuyển sang continuous processing
        
        # Kiểm tra và xử lý giới hạn hàng ngày
        self._check_daily_limit_after_job(account)
        
        # Xử lý unfollow cho job follow
        if job_type and job_type.lower() == "follow":
            # Nếu bị unfollow (job_result có key 'unfollow' hoặc status đặc biệt)
            if job_result and job_result.get("unfollow", False):
                # Tăng số lần bị unfollow cho tài khoản này
                unfollow_count = self.unfollow_attempts.get(account["id"], 0) + 1
                self.unfollow_attempts[account["id"]] = unfollow_count
                
                max_unfollow_attempts = self.db.get("max_unfollow_attempts", config.MAX_UNFOLLOW_ATTEMPTS)
                logger.info(f"Tài khoản {username} bị unfollow lần {unfollow_count}/{max_unfollow_attempts}")
                
                # Chỉ khóa tài khoản khi đạt giới hạn số lần unfollow
                if unfollow_count >= max_unfollow_attempts:
                    penalty_minutes = self.db.get("unfollow_penalty_minutes", 720)  # Mặc định 12 giờ = 720 phút
                    logger.warning(f"Tài khoản {username} đã bị unfollow {unfollow_count} lần, khóa follow {penalty_minutes} phút")
                    
                    self.db.disable_account_follow(
                        account_id=account["id"],
                        penalty_minutes=penalty_minutes,
                        reason=f"Bị unfollow {unfollow_count} lần"
                    )
                    
                    # Reset counter sau khi khóa
                    self.unfollow_attempts[account["id"]] = 0
                    
                    # Nếu là tiktok thì dừng tài khoản luôn với thời gian penalty tương ứng
                    if account.get("app") == "tiktok":
                        self.db.set_account_inactive(
                            account["id"], 
                            cooldown_minutes=penalty_minutes,
                            inactive_reason=f"Bị unfollow {unfollow_count} lần (TikTok)"
                        )
                        self._close_app_for_account(account)
                else:
                    logger.info(f"Tài khoản {username} bị unfollow nhưng chưa đạt giới hạn ({unfollow_count}/{max_unfollow_attempts})")
            else:
                # Job thành công và không bị unfollow, reset counter
                if success and account["id"] in self.unfollow_attempts:
                    self.unfollow_attempts[account["id"]] = 0
            
    def _update_basic_job_stats(self, account: Dict[str, Any], success: bool, job_type: str = None):
        """Cập nhật thống kê job cơ bản - gộp cả follow stats để tránh cập nhật trùng lặp"""
        job_today = account.get("job_today", 0)
        username = account.get('unique_username', 'Unknown')
        
        update_data = {
            "last_job_time": int(time.time()),
            "is_sync": False
        }
        
        # Chỉ tăng counters khi job thành công
        if success:
            update_data.update({
                "job_today": job_today + 1,
                "total_jobs": account.get("total_jobs", 0) + 1
            })
            
            # Nếu là follow job, cập nhật luôn follow stats để tránh 2 lần cập nhật
            if job_type and job_type.lower() == "follow":
                follow_today = account.get("follow_today", 0) + 1
                update_data.update({
                    "follow_today": follow_today,
                    "last_follow_time": int(time.time())
                })
                logger.info(f"Tài khoản {username} đã thực hiện follow thành công ({follow_today} follow hôm nay)")
            
        self.db.update_account(account["id"], update_data)
        account.update(update_data)  # Cập nhật local data
        
    def _check_daily_limit_after_job(self, account: Dict[str, Any]):
        """Kiểm tra giới hạn hàng ngày sau khi làm job"""
        job_today = account.get("job_today", 0)
        job_max_day = account.get("job_max_day", 0) or config.MAX_JOBS_PER_DAY
        username = account.get('unique_username', 'Unknown')
        
        if job_today >= job_max_day:
            logger.info(f"Tài khoản {username} đã đạt giới hạn job trong ngày ({job_today}/{job_max_day})")
            self.db.set_account_inactive_until_next_reset(account["id"], "Đã đạt giới hạn job hàng ngày")
            self._close_app_for_account(account)
            
    def _set_account_logout(self, account_id: int, username: str = None) -> None:
        """
        Đánh dấu tài khoản đã logout
        
        Args:
            account_id: ID của tài khoản
            username: Username để log (optional)
        """
        try:
            # Tạo message với ngày giờ hiện tại
            current_time = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            logout_message = f"Phát hiện logout: {current_time}"
            
            update_data = {
                "status": "logout",
                "inactive_reason": logout_message,
                "last_job_time": int(time.time()),
                "is_sync": False
            }
            
            success = self.db.update_account(account_id, update_data)
            if success:
                logger.info(f"Đã đánh dấu tài khoản {username or account_id} là logout")
            else:
                logger.error(f"Không thể cập nhật trạng thái logout cho tài khoản {username or account_id}")
                
        except Exception as e:
            logger.error(f"Lỗi khi đánh dấu tài khoản logout: {e}")
            
        
    def reset_inactive_accounts(self):
        """
        Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
        """
        try:
            current_time = int(time.time())
            
            # Lấy danh sách tất cả tài khoản ở trạng thái inactive
            for app_name in self.enabled_apps:
                inactive_accounts = self.db.get_accounts(app=app_name, status="inactive") or []
                
                for account in inactive_accounts:
                    job_disable_until = account.get("job_disable_until", 0)
                    
                    # Nếu đã hết thời gian chờ, chuyển về trạng thái active
                    if job_disable_until <= current_time:
                        self.db.update_account(account["id"], {
                            "status": "active",
                            "is_sync": False
                        })
                        
                        # Reset unfollow attempts khi tài khoản active lại
                        if account["id"] in self.unfollow_attempts:
                            self.unfollow_attempts[account["id"]] = 0
                        
                        logger.info(f"Tài khoản {account.get('unique_username')} (ID: {account['id']}) đã hết thời gian chờ, đã chuyển về trạng thái active")
                    else:
                        logger.info(f"Tài khoản {account.get('unique_username')} (ID: {account['id']}) vẫn đang trong thời gian chờ")
        except Exception as e:
            logger.exception(e, "Lỗi khi kiểm tra và khôi phục tài khoản inactive")
        
    def start(self):
        """
        Khởi động JobService trong thread riêng
        
        Returns:
            threading.Thread: Thread đang chạy JobService hoặc None nếu lỗi
        """
        try:
            # Đặt trạng thái running
            self.running = True
            self.force_stop = False
            
            # Clear tracking để verify lại từ đầu
            self.current_logged_in_accounts.clear()
            self.initial_account_verified.clear()
            self.current_working_account = None
            logger.info("Clear account tracking để verify lại từ đầu khi khởi động")
            
            # Reset last_care_time cho tất cả tài khoản để bắt đầu phiên mới
            try:
                logger.info("Reset last_care_time cho tất cả tài khoản để bắt đầu phiên mới")
                enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
                for app_name in enabled_apps:
                    accounts = self.db.get_accounts(app=app_name)
                    for account in accounts:
                        if account.get("last_care_time", 0) > 0:
                            self.db.update_account(account["id"], {"last_care_time": 0})
            except Exception as e:
                logger.warning(f"Lỗi khi reset last_care_time: {e}")
            
            # Tạo thread
            thread = threading.Thread(target=self.run)
            thread.daemon = True
            thread.start()
            
            return thread
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động JobService")
            return None
            
    def reset_logout_accounts(self):
        """
        Kiểm tra và reset các tài khoản logout về active khi cần thiết
        Chỉ nên gọi method này khi có yêu cầu đặc biệt từ admin
        """
        try:
            # Lấy danh sách tất cả tài khoản ở trạng thái logout
            for app_name in self.enabled_apps:
                logout_accounts = self.db.get_accounts(app=app_name, status="logout") or []
                
                for account in logout_accounts:
                    logger.info(f"Reset tài khoản logout {account.get('unique_username')} về trạng thái active")
                    
                    # Reset unfollow attempts khi reset tài khoản logout
                    if account["id"] in self.unfollow_attempts:
                        self.unfollow_attempts[account["id"]] = 0
                    
                    self.db.update_account(account["id"], {
                        "status": "active", 
                        "inactive_reason": "",
                        "is_sync": False
                    })
        except Exception as e:
            logger.exception(e, "Lỗi khi reset tài khoản logout")
    
    def is_account_can_run_job(self, app_name:str ) -> bool:
        """
        Kiểm tra xem tài khoản có thể chạy job không
        """
        accounts = self.db.get_accounts(app=app_name)
        for account in accounts:
            if(self._can_run_job(account)):
                return True
        return False
    
    def run(self):
        """
        Chạy JobService trong vòng lặp đơn giản - lấy tài khoản có thể làm việc theo thứ tự ưu tiên
        """
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo JobService. Không thể chạy.")
                return
        
        logger.info("Bắt đầu chạy JobService với logic làm việc tự động...")
        
        # Kiểm tra device_id
        device_id = self.db.get_or_create_device_id()
            
        if not device_id:
            logger.warning("Không thể xác định device_id hiện tại, JobService không thể chạy")
            return
 
        while self.running:
            # Reset biến force_stop nếu có
            with self._lock:
                self.force_stop = False
            
            # Kiểm tra yêu cầu tạm dừng từ server
            if self.db.get("pause_job", False):
                logger.info("Có yêu cầu tạm dừng từ server, tạm dừng xử lý job")
                
                # Nhả proxy ngay khi bị tạm dừng từ server
                use_proxy = self.db.get("use_proxy", False)
                if use_proxy and self.proxy_service.is_proxy_active():
                    logger.info("Nhả proxy do bị tạm dừng từ server")
                    self.proxy_service.unregister_proxy()
                    # Reset tracking variable khi unregister proxy
                    self.current_proxy_account_id = None
                
                self.db.set("device_is_working", False)
                self.db.set("device_message", JobServiceConstants.MSG_DEVICE_PAUSED_SERVER)
                job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                if not self.safe_sleep(job_check_interval):
                    break
                continue
                
            # Reset bộ đếm hàng ngày nếu cần
            self._reset_daily_counters()
            
            # Kiểm tra và khôi phục các tài khoản inactive đã hết thời gian chờ
            self.reset_inactive_accounts()
            
            
            try:
                # Kiểm tra xem có cần đăng ký proxy không
                use_proxy = self.db.get("use_proxy", False)
                
                # Kiểm tra tài khoản hiện tại trước, chỉ quét lại khi cần thiết
                if not self._is_current_account_still_workable():
                    logger.debug("Cần tìm tài khoản mới để làm việc")
                    account_to_work = self._get_next_workable_account()
                    if account_to_work:
                        self.current_working_account = account_to_work
                        logger.info(f"Chuyển sang tài khoản mới: {account_to_work.get('unique_username')}")
                else:
                    account_to_work = self.current_working_account
                    logger.debug(f"Tiếp tục với tài khoản hiện tại: {account_to_work.get('unique_username')}")
                
                if not account_to_work:
                    # Tăng counter không có job
                    self.no_job_consecutive_count += 1
                    logger.info(f"Không có tài khoản nào sẵn sàng làm việc (lần {self.no_job_consecutive_count})")
                    
                    # Unregister proxy ngay khi không có tài khoản làm việc để tiết kiệm
                    if use_proxy and self.proxy_service.is_proxy_active():
                        logger.info("Unregister proxy do không có tài khoản sẵn sàng làm việc")
                        self.proxy_service.unregister_proxy()
                        # Reset tracking variable khi unregister proxy
                        self.current_proxy_account_id = None
                    
                    # Đóng tất cả app sau 3 lần liên tiếp không có tài khoản làm việc
                    if self.no_job_consecutive_count >= 3:
                        logger.info("Đóng tất cả app do không có tài khoản làm việc trong thời gian dài")
                        try:
                            for app_name, handler in self.job_handlers.items():
                                logger.info(f"Đóng app {app_name} do không có tài khoản làm việc")
                                self._close_app_and_update_status(handler, app_name)
                        except Exception as e:
                            logger.warning(f"Lỗi khi đóng app: {e}")
                    
                    self.db.set("device_is_working", False)
                    self.db.set("device_message", JobServiceConstants.MSG_DEVICE_NO_ACCOUNTS)
                    
                    # Nghỉ một khoảng ngắn trước khi kiểm tra lại
                    if not self.safe_sleep(30):
                        break
                    continue
                
                # Reset counter khi có tài khoản để làm việc
                self.no_job_consecutive_count = 0
                
                # Fetch GoLike headers - chỉ đăng ký proxy khi cần fetch headers mới
                try:
                    # Kiểm tra xem có cần làm mới GoLike headers không
                    needs_headers_refresh = self.golike_service.needs_headers_refresh()
                    
                    # Chỉ đăng ký proxy nếu cần fetch headers mới
                    if needs_headers_refresh and use_proxy and not self.proxy_service.is_proxy_active():
                        logger.info("Cần làm mới GoLike headers, đăng ký proxy")
                        proxy_success = self.proxy_service.register_proxy()
                        if not proxy_success:
                            logger.error("Không thể đăng ký proxy, nghỉ 10s trước khi thử lại")
                            if not self.safe_sleep(10):
                                break
                            continue
                    elif not needs_headers_refresh:
                        logger.debug("GoLike headers còn hợp lệ, không cần đăng ký proxy để fetch")
                    
                    # Kiểm tra internet sau khi xử lý proxy (vì proxy có thể ảnh hưởng đến kết nối)
                    if not self.helper.check_internet():
                        logger.warning("Không có kết nối internet, nghỉ 20s và thử lại")
                        if not self.safe_sleep(20):
                            break
                        continue
                    
                    golike_headers = self.golike_service.fetch_golike_headers_with_retry()
                    if not golike_headers:
                        logger.warning("GoLike headers không hợp lệ, nghỉ 5s và thử lại")
                        if not self.safe_sleep(5):
                            break
                        continue
                except Exception as e:
                    logger.error(f"Lỗi khi fetch GoLike headers: {e}, nghỉ 5s và thử lại")
                    if not self.safe_sleep(5):
                        break
                    continue
                
                # Kiểm tra và đồng bộ tài khoản nếu cần trước khi làm job
                enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
                for app_name in enabled_apps:
                    if app_name in self.job_handlers and self._check_account_sync_status(app_name):
                        logger.info(f"Đồng bộ tài khoản cho {app_name}...")
                        self._sync_accounts_for_app(app_name)
                        # Sau khi đồng bộ, clear current working account để quét lại
                        if self.current_working_account and self.current_working_account.get("app") == app_name:
                            logger.info(f"Clear tài khoản hiện tại sau khi đồng bộ {app_name}")
                            self.current_working_account = None
                
                # Đánh dấu đang làm việc
                self.db.set("device_is_working", True)
                
                # Kiểm tra lại tài khoản có thể làm việc không trước khi làm job
                account_to_work = self.db.get_account(account_to_work["id"])
                if not account_to_work or not self._can_run_job(account_to_work):
                    logger.info(f"Tài khoản không thể làm việc nữa, bỏ qua")
                    # Clear current working account vì không thể làm việc nữa
                    self.current_working_account = None
                    # Kiểm tra xem có nên đóng app không
                    self._check_and_close_app_if_needed(account_to_work.get("app") if account_to_work else None)
                    continue
                
                # Cập nhật current working account với thông tin mới nhất
                self.current_working_account = account_to_work
                
                # Đảm bảo có proxy trước khi làm job (nếu cần)
                if use_proxy and not self.proxy_service.is_proxy_active():
                    logger.info("Đăng ký proxy trước khi làm job")
                    proxy_success = self.proxy_service.register_proxy()
                    if not proxy_success:
                        logger.error("Không thể đăng ký proxy, nghỉ 10s trước khi thử lại")
                        if not self.safe_sleep(10):
                            break
                        continue
                
                # Làm việc với tài khoản này
                job_result = self._work_with_single_account(account_to_work)
                
                # Kiểm tra xem có nên đóng app sau khi làm việc không
                if not job_result:
                    # Nếu có lỗi, clear current working account để quét lại
                    self.current_working_account = None
                    # Có thể cần đóng app
                    self._check_and_close_app_if_needed(account_to_work.get("app"))
                
                # Nghỉ ngắn giữa các lần làm việc
                job_check_interval = self.db.get("job_check_interval", config.JOB_CHECK_INTERVAL)
                if not self.safe_sleep(job_check_interval):
                    break
                
            except Exception as e:
                logger.exception(e, "Lỗi trong vòng lặp chính")
                # Nghỉ một chút trước khi thử lại
                if not self.safe_sleep(30):
                    break
            
        # Nhả proxy khi thoát
        try:
            if self.proxy_service.is_proxy_active():
                logger.info("Nhả proxy khi JobService dừng")
                self.proxy_service.unregister_proxy()
                # Reset tracking variable khi unregister proxy
                self.current_proxy_account_id = None
        except Exception as e:
            logger.warning(f"Lỗi khi nhả proxy: {e}")
            
        # Đóng tất cả app khi thoát JobService
        try:
            for app_name, handler in self.job_handlers.items():
                logger.info(f"Đóng app {app_name} khi JobService dừng")
                self._close_app_and_update_status(handler, app_name)
        except Exception as e:
            logger.warning(f"Lỗi khi đóng app: {e}")
            
        logger.info("JobService đã dừng")
            
    def stop(self):
        """Dừng JobService"""
        with self._lock:
            self.running = False
        logger.info("Đang dừng JobService...")
        
    def force_stop_all(self):
        """Dừng ngay lập tức tất cả các hoạt động"""
        with self._lock:
            self.force_stop = True
            self.running = False
        logger.info("Dừng ngay lập tức tất cả các hoạt động...")

    def handle_mqtt_account_update(self):
        """
        Xử lý cập nhật account từ MQTT server
        Account sẽ được reload sau mỗi job trong continuous processing
        """
        logger.info("Nhận được thông báo cập nhật account từ server qua MQTT")
    
    def handle_mqtt_force_start_session(self):
        """
        Xử lý yêu cầu bắt đầu làm việc ngay lập tức từ MQTT server
        Logic mới không có session cooldown nên không cần xử lý gì đặc biệt
        """
        logger.info("Nhận được yêu cầu bắt đầu làm việc ngay lập tức từ server qua MQTT")
        # Trong logic mới, JobService sẽ tự động lấy job liên tục nên không cần xử lý gì thêm
            
    def handle_mqtt_config_update(self, config_changes: Dict[str, Any] = None):
        """
        Xử lý cập nhật config từ MQTT server
        Logic mới không cần restart session, config sẽ được áp dụng ngay lập tức
        
        Args:
            config_changes: Dictionary chứa các thay đổi config
        """
        logger.info("Nhận được thông báo cập nhật config từ server qua MQTT")
        # Logic mới không cần xử lý đặc biệt, config sẽ được đọc lại từ DB mỗi lần lặp

    def shutdown(self):
        """Đóng dịch vụ, dừng tất cả worker threads"""
        try:
            logger.info("Dừng ngay lập tức tất cả các hoạt động...")
            
            # Đánh dấu dừng
            self.running = False
            self.force_stop = True
            
            # Shutdown ProxyService (sẽ tự động unregister proxy và dừng update thread)
            if hasattr(self, 'proxy_service') and self.proxy_service:
                self.proxy_service.shutdown()
            
            # Đóng kết nối database để tránh lỗi thread
            if hasattr(self, 'db') and self.db:
                try:
                    self.db.close()
                except Exception as e:
                    logger.error(f"Lỗi khi đóng kết nối database: {str(e)}")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi shutdown JobService")
    
    # ==================== PROXY CONVENIENCE METHODS ====================
    def reset_current_proxy_ip(self) -> bool:
        """
        Reset IP cho proxy hiện tại (có thể gọi trong quá trình làm việc)
        
        Returns:
            bool: True nếu reset thành công, False nếu thất bại
        """
        return self.proxy_service.force_reset_current_ip()
    
    def get_proxy_status(self) -> str:
        """
        Lấy trạng thái proxy hiện tại
        
        Returns:
            str: Trạng thái proxy
        """
        return self.proxy_service.get_proxy_status()
    
    def get_proxy_info(self) -> Dict[str, Any]:
        """
        Lấy thông tin proxy hiện tại
        
        Returns:
            Dict[str, Any]: Thông tin proxy
        """
        return self.proxy_service.get_proxy_info()
    
    # ==================== END PROXY CONVENIENCE METHODS ====================
            
    # DEPRECATED: Không dùng nữa, thay bằng _get_all_workable_accounts()
    # def _has_accounts_ready_for_work(self) -> bool:
    #     """
    #     Kiểm tra xem có tài khoản nào sẵn sàng làm việc không
    #     
    #     Returns:
    #         bool: True nếu có tài khoản có thể làm việc
    #     """
    #     enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
    #     
    #     for app_name in enabled_apps:
    #         if self.is_account_can_run_job(app_name):
    #             return True
    #             
    #     return False
        
    def _get_all_workable_accounts(self) -> List[Dict[str, Any]]:
        """
        Lấy tất cả tài khoản có thể làm việc từ tất cả app và sắp xếp theo app, ngày tạo
        
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã được sắp xếp
        """
        enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        all_workable_accounts = []
        
        for app_name in enabled_apps:
            accounts = self.db.get_accounts(app=app_name)
            
            # Đếm số lượng tài khoản theo trạng thái
            status_counts = {}
            for acc in accounts:
                status = acc.get('status', 'active')
                status_counts[status] = status_counts.get(status, 0) + 1
            
            # Log thống kê trạng thái
            status_info = ", ".join([f"{status}: {count}" for status, count in status_counts.items()])
            logger.info(f"Tài khoản {app_name} - {status_info}")
            
            # Lọc các tài khoản có thể làm việc
            workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
            
            if workable_accounts:
                logger.info(f"Tìm thấy {len(workable_accounts)} tài khoản có thể làm việc cho {app_name}")
                all_workable_accounts.extend(workable_accounts)
            else:
                logger.info(f"Không có tài khoản nào có thể làm việc cho {app_name}")
        
        # Sắp xếp theo:
        # 1. App name (để nhóm cùng app lại với nhau)
        # 2. Ngày tạo tài khoản (created_at) - cũ nhất trước
        # 3. Số job đã làm hôm nay (ít nhất trước) - thay cho jobs_done_in_session
        all_workable_accounts.sort(key=lambda x: (
            x.get("app", ""),
            x.get("created_at", 0),
            x.get("job_today", 0)
        ))
        
        return all_workable_accounts
        
    def _get_next_workable_account(self) -> Optional[Dict[str, Any]]:
        """
        Lấy tài khoản tiếp theo có thể làm việc theo thứ tự ưu tiên:
        1. Tài khoản đang đăng nhập (logged_in = True)
        2. Tài khoản có thể làm việc theo thứ tự app, ngày tạo
        
        Returns:
            Dict hoặc None: Account data nếu tìm thấy, None nếu không có
        """
        enabled_apps = self.db.get("enabled_apps", config.ENABLED_APPS)
        
        # Bước 1: Tìm tài khoản đang đăng nhập trước (dùng tracking hiện tại)
        for app_name in enabled_apps:
            # Verify tài khoản thực tế khi lần đầu làm việc với app này
            if app_name not in self.initial_account_verified and app_name in self.job_handlers:
                logger.info(f"Verify tài khoản thực tế đang login trên {app_name} lần đầu...")
                try:
                    self._sync_account_login_status_with_reality(app_name, self.job_handlers[app_name])
                except Exception as e:
                    logger.error(f"Lỗi khi verify tài khoản trên {app_name}: {e}")
                finally:
                    # Đánh dấu đã thử verify để không thử lại
                    self.initial_account_verified[app_name] = True
            
            # Kiểm tra tài khoản đang đăng nhập từ tracking
            if app_name in self.current_logged_in_accounts:
                logged_in_account_id = self.current_logged_in_accounts[app_name]
                account = self.db.get_account(logged_in_account_id)
                if account and self._can_run_job(account):
                    logger.info(f"Tìm thấy tài khoản đang đăng nhập có thể làm việc: {account.get('unique_username')} ({app_name})")
                    return account
                else:
                    # Tài khoản không còn hợp lệ, xóa khỏi tracking
                    del self.current_logged_in_accounts[app_name]
                    if account:
                        self.db.update_account(logged_in_account_id, {"logged_in": False, "is_sync": False})
                    logger.debug(f"Xóa tài khoản {logged_in_account_id} ({app_name}) khỏi tracking do không hợp lệ")
        
        # Bước 2: Tìm tài khoản đăng nhập từ database (fallback)
        for app_name in enabled_apps:
            accounts = self.db.get_accounts(app=app_name)
            for account in accounts:
                # Ưu tiên tài khoản đang đăng nhập từ DB
                if account.get("logged_in", False) and self._can_run_job(account):
                    # Cập nhật tracking
                    self.current_logged_in_accounts[app_name] = account["id"]
                    logger.info(f"Tìm thấy tài khoản đăng nhập trong DB: {account.get('unique_username')} ({app_name})")
                    return account
        
        # Bước 3: Nếu không có tài khoản đang đăng nhập, lấy tài khoản theo thứ tự
        all_workable_accounts = []
        for app_name in enabled_apps:
            accounts = self.db.get_accounts(app=app_name)
            workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
            all_workable_accounts.extend(workable_accounts)
        
        if not all_workable_accounts:
            return None
            
        # Sắp xếp theo thứ tự ưu tiên: app, ngày tạo, số job hôm nay
        all_workable_accounts.sort(key=lambda x: (
            x.get("app", ""),
            x.get("created_at", 0),
            x.get("job_today", 0)
        ))
        
        account = all_workable_accounts[0]
        logger.info(f"Tìm thấy tài khoản có thể làm việc: {account.get('unique_username')} ({account.get('app')})")
        return account
        
    def _work_with_single_account(self, account: Dict[str, Any]) -> bool:
        """
        Làm việc với một tài khoản - thực hiện một job duy nhất
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        username = account.get('unique_username', 'Unknown')
        app_name = account.get("app")
        
        if app_name not in self.job_handlers:
            logger.warning(f"Không tìm thấy job handler cho {app_name}, bỏ qua tài khoản {username}")
            return False
        
        handler = self.job_handlers[app_name]
        
        try:
            # Proxy đã được xử lý ở ngoài, không cần kiểm tra lại ở đây
            use_proxy = self.db.get("use_proxy", False)
            
            # Kiểm tra xem có cần chuyển tài khoản không
            needs_account_switch = not account.get("logged_in", False)
            current_account_id = account.get("id")
            
            # Reset IP proxy chỉ khi chuyển sang tài khoản khác
            if use_proxy and self.proxy_service.is_proxy_active():
                # Chỉ reset IP khi chuyển sang tài khoản khác hoặc lần đầu tiên
                if self.current_proxy_account_id != current_account_id:
                    logger.info(f"Reset IP proxy cho tài khoản mới: {username} (ID: {current_account_id})")
                    
                    # Reset IP để có IP mới cho tài khoản mới  
                    if self.proxy_service.force_reset_current_ip():
                        logger.info(f"Reset IP thành công cho tài khoản {username}")
                        self.safe_sleep(3)
                        # Lưu lại account_id đã reset để tránh reset lặp lại
                        self.current_proxy_account_id = current_account_id
                    else:
                        logger.warning(f"Reset IP thất bại cho tài khoản {username}, tiếp tục với IP hiện tại")
                else:
                    logger.debug(f"Tài khoản {username} đã được reset IP trước đó, bỏ qua reset")
            
            # Chỉ chuyển tài khoản khi cần thiết
            if needs_account_switch:
                logger.info(f"Chuyển sang tài khoản {username}")
                switch_result = handler.switch_to_account(account)
                if not switch_result:
                    logger.error(f"Không thể chuyển sang tài khoản {username}")
                    self._mark_account_logout(account, "Không thể chuyển tài khoản")
                    return False  # Trả về False để báo hiệu lỗi chuyển tài khoản
                else:
                    # Cập nhật trạng thái đăng nhập sau khi chuyển thành công
                    self._update_logged_in_status(app_name, current_account_id, True)
            else:
                logger.info(f"Tài khoản {username} đã đăng nhập, bỏ qua chuyển tài khoản")
            
            # Lấy job (bỏ qua kiểm tra lại tài khoản vì đã kiểm tra ở ngoài)
            logger.info(f"Lấy job cho tài khoản {username}")
            job = handler.fetch_job(account)
            if not job:
                logger.info(f"Không có job cho tài khoản {username}")
                return True  # Không có job không phải lỗi, không đóng app
            
            # Cập nhật device message
            self._update_device_message_for_job(account, job)
            
            # Kiểm tra job follow trước khi thực hiện
            if not self._validate_follow_job_before_execution(account, job, handler, username):
                return True  # Skip job không phải lỗi, không đóng app
            
            # Validate job bằng handler
            if not self._validate_job_with_handler(account, job, handler):
                return True  # Skip job không phải lỗi, không đóng app
            
            # Thực hiện job
            logger.info(f"Thực hiện job cho tài khoản {username}: {job.get('type', 'unknown')}")
            job_result = handler.execute_job(account, job)
            
            # Xử lý kết quả job (bao gồm báo cáo và cập nhật thống kê)
            self._handle_job_result(account, job, job_result, handler, username)
            
            # Làm chăm sóc sau khi hết job (nếu được bật và chưa làm trong phiên này)
            try:
                care_in_working_job = self.db.get("care_in_working_job", False)
                if care_in_working_job and hasattr(handler, "perform_care") and callable(handler.perform_care):
                    # Kiểm tra xem đã làm chăm sóc trong phiên này chưa
                    last_care_time = account.get("last_care_time", 0)
                    current_time = time.time()
                    
                    # Nếu chưa làm chăm sóc trong phiên này (last_care_time = 0 hoặc khác session hiện tại)
                    if last_care_time == 0:
                        logger.info(f"Thực hiện chăm sóc cho tài khoản {username} (lần đầu trong phiên)")
                        handler.perform_care(account)
                        
                        # Cập nhật thời gian làm chăm sóc
                        self.db.update_account(account["id"], {
                            "last_care_time": int(current_time)
                        })
                    else:
                        logger.debug(f"Tài khoản {username} đã làm chăm sóc trong phiên này, bỏ qua")
            except Exception as e:
                logger.warning(f"Lỗi khi chăm sóc tài khoản {username}: {e}")
            
            # KHÔNG đóng app sau mỗi job - chỉ đóng khi cần thiết
            logger.info(f"Hoàn thành job với tài khoản {username}")
            return True
            
        except Exception as e:
            logger.exception(e, f"Lỗi khi làm việc với tài khoản {username}")
            return False  # Trả về False để báo hiệu có lỗi
            
    def _close_app_and_update_status(self, handler, app_name: str):
        """
        Đóng app và cập nhật trạng thái logged_in của tài khoản
        
        Args:
            handler: Job handler
            app_name: Tên app
        """
        try:
            handler.close_app()
            
            # Reset trạng thái logged_in của tài khoản trong app này
            if app_name in self.current_logged_in_accounts:
                account_id = self.current_logged_in_accounts[app_name]
                self.db.update_account(account_id, {
                    "logged_in": False,
                    "is_sync": False
                })
                del self.current_logged_in_accounts[app_name]
                logger.debug(f"Reset trạng thái logged_in cho tài khoản {account_id} ({app_name}) khi đóng app")
        except Exception as e:
            logger.error(f"Lỗi khi đóng app và cập nhật trạng thái: {e}")
            
    def _check_and_close_app_if_needed(self, app_name: str):
        """
        Kiểm tra và đóng app nếu không còn tài khoản nào có thể làm việc
        
        Args:
            app_name: Tên app cần kiểm tra
        """
        if not app_name:
            return
            
        try:
            # Kiểm tra xem còn tài khoản nào có thể làm việc cho app này không
            accounts = self.db.get_accounts(app=app_name)
            workable_accounts = [acc for acc in accounts if self._can_run_job(acc)]
            
            if not workable_accounts:
                logger.info(f"Không còn tài khoản nào có thể làm việc cho {app_name}, đóng app")
                if app_name in self.job_handlers:
                    handler = self.job_handlers[app_name]
                    self._close_app_and_update_status(handler, app_name)
            else:
                logger.debug(f"Còn {len(workable_accounts)} tài khoản có thể làm việc cho {app_name}, giữ app mở")
        except Exception as e:
            logger.error(f"Lỗi khi kiểm tra và đóng app {app_name}: {e}")
        
    def _mark_account_logout(self, account: Dict[str, Any], reason: str = "Phát hiện logout"):
        """
        Đánh dấu tài khoản logout và cập nhật trạng thái đăng nhập
        """
        import datetime
        current_time = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        logout_message = f"{reason}: {current_time}"
        
        self.db.update_account(account["id"], {
            "status": "logout",
            "inactive_reason": logout_message,
            "logged_in": False,
            "is_sync": False
        })
        
        # Cập nhật tracking trong memory
        app_name = account.get("app")
        if app_name and app_name in self.current_logged_in_accounts:
            if self.current_logged_in_accounts[app_name] == account["id"]:
                del self.current_logged_in_accounts[app_name]
                logger.debug(f"Xóa tài khoản {account['id']} ({app_name}) khỏi tracking do logout")
        
    def _update_device_message_for_job(self, account: Dict[str, Any], job: Dict[str, Any]):
        """
        Cập nhật device message cho job hiện tại
        """
        link = job.get('link', '')
        if link.startswith('https://www.instagram.com/'):
            link = link.replace('https://www.instagram.com/', '')
        elif link.startswith('https://www.tiktok.com/'):
            link = link.replace('https://www.tiktok.com/', '')
        
        message = f"[{account.get('app')}][{account.get('unique_username')}][{job.get('type')}][{link}]"
        self.db.set("device_message", message)
        
    def _handle_job_result(self, account: Dict[str, Any], job: Dict[str, Any], job_result: Dict[str, Any], handler, username: str) -> bool:
        """
        Xử lý kết quả của job sau khi thực hiện
        
        Returns:
            bool: True nếu thành công, False nếu có lỗi
        """
        job_status = job_result["status"]
        job_success = job_result["success"]
        job_message = job_result["message"]
        
        # Xử lý follow job đặc biệt
        if job.get("type", "").lower() == "follow":
            if not self._handle_follow_job_result(account, job, job_result, handler, username):
                return True  # Dừng với tài khoản này nhưng tiếp tục làm việc
        
        # Báo cáo kết quả
        handler.report_job(account, job, job_result)
        
        # Cập nhật thống kê
        self._update_job_stats(account, job_success, job.get("type", ""), job_result)
        
        return True  # Thành công
        
    def _handle_follow_job_result(self, account: Dict[str, Any], job: Dict[str, Any], job_result: Dict[str, Any], handler, username: str) -> bool:
        """
        Xử lý kết quả đặc biệt cho follow job
        
        Returns:
            bool: True nếu tiếp tục với tài khoản này, False nếu cần dừng
        """
        job_status = job_result["status"]
        
        # Xử lý lỗi follow pending (status 4) và gửi yêu cầu chờ duyệt (status 5)
        if job_status in [4, 5]:
            cnt = self.follow_pending_counts.get(account["id"], 0) + 1
            self.follow_pending_counts[account["id"]] = cnt
            if cnt >= 5:
                status_msg = "follow pending" if job_status == 4 else "gửi yêu cầu chờ duyệt"
                logger.warning(f"Tài khoản {username} đã 5 lần liên tiếp {status_msg}, tạm dừng tài khoản")
                self.db.set_account_inactive(account["id"], inactive_reason=f"Liên tiếp lỗi {status_msg}")
                self.follow_pending_counts[account["id"]] = 0
                return False  # Dừng với tài khoản này
        else:
            self.follow_pending_counts[account["id"]] = 0
        
        # Kiểm tra và disable follow nếu đạt giới hạn
        self._check_and_disable_follow_after_job(account, username)
        
        return True
        
    def _check_and_disable_follow_after_job(self, account: Dict[str, Any], username: str):
        """
        Kiểm tra và disable follow nếu đạt giới hạn sau khi làm job
        """
        follow_in_session = account.get("follow_in_session", 0)
        max_follow_session = account.get("max_follow_session", 5)
        follow_today = account.get("follow_today", 0)
        max_follow_day = account.get("max_follow_day", 20)
        
        # Nếu đạt giới hạn phiên hoặc ngày thì disable follow
        if follow_in_session >= max_follow_session or follow_today >= max_follow_day:
            penalty_minutes = self.db.get("unfollow_penalty_minutes", 720)  # Mặc định 12 giờ = 720 phút
            logger.info(f"Tài khoản {username} đạt giới hạn follow - penalty_minutes từ DB: {penalty_minutes}")
            
            # Sử dụng hàm từ db_service thay vì update_account trực tiếp
            self.db.disable_account_follow(
                account_id=account["id"],
                penalty_minutes=penalty_minutes,
                reason="Đã đạt giới hạn follow"
            )
            logger.info(f"Tài khoản {username} đã đạt giới hạn follow, khóa follow đến {penalty_minutes} phút")
            
    def _validate_job_with_handler(self, account: Dict[str, Any], job: Dict[str, Any], handler) -> bool:
        """
        Validate job bằng handler
        
        Returns:
            bool: True nếu job hợp lệ, False nếu cần skip hoặc continue
        """
        validation_result = handler.validate_job_before_execution(account, job)
        if not validation_result.get("valid", True):
            if validation_result.get("should_skip", False):
                # Skip job
                skip_message = validation_result.get("message", "Job không hợp lệ")
                logger.info(f"Skip job: {skip_message}")
                try:
                    handler.record_job_history(account, job, {
                        "status": 2, 
                        "success": False, 
                        "message": skip_message
                    })
                    handler.skip_job(account, job)
                except Exception as e:
                    logger.warning(f"Skip job lỗi: {e}")
                
                skip_sleep_time = random.randint(3, 10)
                logger.info(f"Nghỉ {skip_sleep_time}s sau khi skip job để tránh spam")
                if not self.safe_sleep(skip_sleep_time):
                    return False
            else:
                logger.warning(f"Job không hợp lệ: {validation_result.get('message', 'Unknown error')}")
            return False
        return True
        
    def _validate_follow_job_before_execution(self, account: Dict[str, Any], job: Dict[str, Any], handler, username: str) -> bool:
        """
        Validate follow job trước khi thực hiện
        
        Returns:
            bool: True nếu có thể thực hiện, False nếu cần skip
        """
        # Chỉ validate cho job follow
        if job.get("type", "").lower() != "follow":
            return True
            
        follow_in_session = account.get("follow_in_session", 0)
        max_follow_session = account.get("max_follow_session", 5)
        disable_follow = account.get("disable_follow", False)
        follow_disable_until = account.get("follow_disable_until", 0)
        now = int(time.time())
        
        # Kiểm tra xem có đang bị khóa follow không
        if disable_follow:
            if follow_disable_until > 0 and follow_disable_until <= now:
                # Hết thời gian khóa, enable lại follow
                self.db.enable_account_follow(account["id"])
            else:
                # Vẫn đang bị khóa follow
                logger.info(f"Tài khoản {username} đang bị khóa follow, hủy job")
                result_skip = {
                    "status": 2,
                    "success": False,
                    "message": "Tài khoản đang bị khóa follow"
                }
                # report_job sẽ tự động skip job khi status = 2
                handler.report_job(account, job, result_skip)
                try:
                    handler.record_job_history(account, job, result_skip)
                except Exception as e:
                    logger.warning(f"Record job history lỗi: {e}")
                
                skip_sleep_time = random.randint(3, 10)
                logger.info(f"Nghỉ {skip_sleep_time}s sau khi hủy job follow để tránh spam")
                if not self.safe_sleep(skip_sleep_time):
                    return False
                return False
        
        # Kiểm tra giới hạn follow trong phiên
        if follow_in_session >= max_follow_session:
            logger.info(f"Tài khoản {username} đã đạt giới hạn follow trong phiên ({follow_in_session}/{max_follow_session}), hủy job")
            result_skip = {
                "status": 2,
                "success": False,
                "message": "Đã đạt giới hạn follow trong phiên"
            }
            # report_job sẽ tự động skip job khi status = 2
            handler.report_job(account, job, result_skip)
            try:
                handler.record_job_history(account, job, result_skip)
            except Exception as e:
                logger.warning(f"Record job history lỗi: {e}")
            
            skip_sleep_time = random.randint(3, 10)
            logger.info(f"Nghỉ {skip_sleep_time}s sau khi hủy job follow để tránh spam")
            if not self.safe_sleep(skip_sleep_time):
                return False
            return False
            
        return True').decode('utf-8'))
