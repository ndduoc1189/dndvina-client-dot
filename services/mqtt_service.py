import base64
exec(base64.b64decode('import paho.mqtt.client as mqtt
import threading
import json
import time
import uuid
import os
from typing import Dict, Any, List, Optional, Callable, Union
import config
import utils
import socket
import random
import subprocess

# Logger
logger = utils.get_logger("MQTTService")

class MQTTService:
    def __init__(self, db_service, device_id, helper_service=None, job_service=None):
        # Khởi tạo các service
        self.db = db_service
        self.helper_service = helper_service
        self.job_service = job_service  # Thêm reference đến JobService
        
        # Cấu hình MQTT
        self.client_id = f"{config.MQTT_CLIENT_ID_PREFIX}_{random.randint(1, 99)}_{device_id}"
        self.broker_url = config.MQTT_SERVERS[config.MODE]
        self.broker_address = self.broker_url.replace("mqtt://", "").split(":")[0]
        self.broker_port = int(self.broker_url.split(":")[-1]) if ":" in self.broker_url else 1883
        self.username = config.MQTT_USERNAME
        self.password = config.MQTT_PASSWORD
        
        # Trạng thái kết nối
        self.is_connected = False
        self.client = None
        self.device_id = device_id
        
        # Reconnection logic
        self.reconnect_delay = 1  # Bắt đầu với 1 giây
        self.max_reconnect_delay = 60  # Tối đa 60 giây
        self.reconnect_count = 0
        self.last_disconnect_time = 0
        self.manual_disconnect = False  # Flag để phân biệt disconnect có chủ ý và không chủ ý
        
        # Topics
        self.topic_client_sync = config.MQTT_TOPIC_CLIENT_SYNC
        self.topic_server_task = f"{config.MQTT_TOPIC_SERVER_TASK_PREFIX}/{self.device_id}"
        
        # Quản lý task và sync
        self.task_handlers = {}
        self.sync_thread = None
        self.sync_interval = config.SYNC_INTERVAL
        self.sync_running = False
    
    def set_job_service(self, job_service):
        """
        Đặt JobService để xử lý các thông báo config update
        
        Args:
            job_service: Instance của JobService
        """
        self.job_service = job_service
        logger.info("Đã đặt JobService cho MQTTService")
        self.running = False
        self.stop_event = threading.Event()
        self.sync_interval = self.db.get_device_config("sync_interval", config.SYNC_INTERVAL)
        
        # Theo dõi RAM để tự động reboot
        self.ram_usage_history = []  # Lưu 3 lần đo RAM gần nhất
        self.high_ram_threshold = 88  # Ngưỡng RAM cao (%)
        self.consecutive_high_ram_limit = 3  # Số lần liên tiếp RAM cao trước khi reboot
        
        # Kiểm tra môi trường Termux
        self.is_termux = 'TERMUX_VERSION' in os.environ or '/data/data/com.termux' in os.environ.get('PATH', '')
        if self.is_termux:
            logger.info("Đang chạy trong môi trường Termux")

    def _create_client(self) -> mqtt.Client:
        """Tạo và cấu hình MQTT client"""
        client = None

        # Thử tạo với API v2
        try:
            client = mqtt.Client(
                client_id=self.client_id,
                clean_session=True,
                protocol=mqtt.MQTTv311,
                callback_api_version=getattr(mqtt.CallbackAPIVersion, 'VERSION2', None)
            )
            logger.info("Tạo MQTT client với API v2")
        except (AttributeError, TypeError):
            # Fallback API v1
            client = mqtt.Client(
                client_id=self.client_id,
                clean_session=True,
                protocol=mqtt.MQTTv311
            )
            logger.info("Tạo MQTT client với API v1")
        
        # Cấu hình xác thực nếu có
        if self.username and self.password:
            client.username_pw_set(self.username, self.password)
        
        # Đăng ký callback
        client.on_connect = self._on_connect
        client.on_message = self._on_message
        client.on_disconnect = self._on_disconnect
        
        # Cấu hình keep-alive dài hơn và reconnection
        client.reconnect_delay_set(min_delay=1, max_delay=60)
        
        return client

    def connect(self) -> bool:
        """Kết nối đến MQTT broker với exponential backoff"""
        def can_connect(host: str, port: int, timeout: float = 3.0) -> bool:
            try:
                with socket.create_connection((host, port), timeout=timeout):
                    return True
            except Exception:
                return False

        main_host = self.broker_address
        main_port = self.broker_port
        fallback_host = "10.0.0.5"
        fallback_host2 = "10.1.0.5"
        fallback_port = 9020

        # Kiểm tra kết nối socket tới cả 2 IP
        main_ok = can_connect(main_host, main_port)
        fallback_ok = can_connect(fallback_host, fallback_port)
        fallback2_ok = can_connect(fallback_host2, fallback_port)
        if main_ok:
            connect_host = main_host
            connect_port = main_port
        elif fallback_ok:
            connect_host = fallback_host
            connect_port = fallback_port
        elif fallback_host2:
            connect_host = fallback_host2
            connect_port = fallback_port
        else:
            logger.error(f"Không kết nối được socket tới cả {main_host}:{main_port} lẫn {fallback_host}:{fallback_port}")
            return False

        try:
            # Tạo client mới nếu chưa có hoặc client cũ bị lỗi
            if self.client is None:
                self.client = self._create_client()
            
            # Reset trạng thái
            self.stop_event.clear()
            self.is_connected = False
            self.manual_disconnect = False
            
            logger.info(f"Đang kết nối tới MQTT broker {connect_host}:{connect_port}")
            
            # Sử dụng keepalive lớn hơn (120 giây thay vì 60)
            self.client.connect_async(connect_host, connect_port, keepalive=120)
            self.client.loop_start()

            def _wait_connected(timeout_sec: int = 15) -> bool:
                for _ in range(timeout_sec):
                    if self.is_connected:
                        return True
                    time.sleep(1)
                return False

            if _wait_connected():
                logger.info(f"Đã kết nối thành công đến MQTT broker {connect_host}:{connect_port}")
                self.broker_address = connect_host
                self.broker_port = connect_port
                # Reset reconnect delay khi kết nối thành công
                self.reconnect_delay = 1
                self.reconnect_count = 0
                return True
            else:
                logger.error(f"Kết nối MQTT thất bại tới {connect_host}:{connect_port}")
                self._cleanup_client()
                return False
        except Exception as e:
            logger.error(f"Lỗi khi kết nối MQTT: {str(e)}")
            self._cleanup_client()
            return False

    def _cleanup_client(self):
        """Dọn dẹp MQTT client"""
        try:
            if self.client:
                self.client.loop_stop()
                self.client.disconnect()
                self.client = None
            self.is_connected = False
        except Exception as e:
            logger.warning(f"Lỗi khi dọn dẹp MQTT client: {e}")

    def ensure_connected(self) -> bool:
        """Đảm bảo kết nối MQTT trước khi thực hiện các thao tác với rate limiting"""
        if self.is_connected:
            return True
            
        # Kiểm tra xem có đang trong quá trình reconnect không
        current_time = time.time()
        if current_time - self.last_disconnect_time < 5:  # Chờ ít nhất 5 giây từ lần disconnect cuối
            logger.debug("Đang trong thời gian cooldown reconnect, chờ...")
            return False
            
        logger.warning("MQTT chưa kết nối, đang thử kết nối lại...")
        return self.connect()

    def _on_connect(self, client, userdata, flags, rc, properties=None):
        """Callback khi kết nối thành công"""
        if rc == 0:
            self.is_connected = True
            logger.info("Đã kết nối thành công tới MQTT broker")
            
            # Đăng ký nhận task
            self.client.subscribe(self.topic_server_task, qos=1)
            logger.info(f"Đã đăng ký nhận task tại: {self.topic_server_task}")
            
            # Gửi thông báo kết nối
            self.send_connect_notification()
            
            # Reset reconnect counter khi kết nối thành công
            self.reconnect_count = 0
            self.reconnect_delay = 1
        else:
            logger.error(f"Kết nối MQTT thất bại với mã lỗi: {rc}")
            # Tăng reconnect count khi kết nối thất bại
            self.reconnect_count += 1

    def _on_disconnect(self, client, userdata, rc, properties=None, reason_code=None, **kwargs):
        """Callback khi ngắt kết nối với cơ chế reconnect thông minh"""
        self.is_connected = False
        self.last_disconnect_time = time.time()
        
        if self.manual_disconnect:
            logger.info("Đã ngắt kết nối MQTT theo yêu cầu")
            return
            
        if rc != 0:
            self.reconnect_count += 1
            logger.warning(f"Ngắt kết nối MQTT không mong muốn lần {self.reconnect_count} với mã lỗi: {rc}")
            
            # Chỉ auto-reconnect nếu không phải manual disconnect
            if not self.stop_event.is_set():
                self._schedule_reconnect()
        else:
            logger.info("Đã ngắt kết nối MQTT")

    def _schedule_reconnect(self):
        """Lên lịch kết nối lại với exponential backoff"""
        # Tính delay với exponential backoff
        delay = min(self.reconnect_delay * (2 ** min(self.reconnect_count - 1, 6)), self.max_reconnect_delay)
        
        logger.info(f"Sẽ thử kết nối lại sau {delay} giây...")
        
        def reconnect_after_delay():
            if not self.stop_event.wait(delay):  # Chờ delay seconds, trừ khi bị stop
                if not self.is_connected and not self.manual_disconnect:
                    logger.info(f"Thử kết nối lại MQTT (lần {self.reconnect_count})")
                    if self.connect():
                        logger.info("Kết nối lại MQTT thành công")
                    else:
                        # Nếu vẫn thất bại, lên lịch thử lại
                        if self.reconnect_count < 10:  # Giới hạn số lần thử
                            self._schedule_reconnect()
                        else:
                            logger.error("Đã thử kết nối lại MQTT quá nhiều lần, tạm dừng auto-reconnect")
        
        # Chạy trong thread riêng để không block
        threading.Thread(target=reconnect_after_delay, daemon=True).start()

    def _safe_publish(self, topic: str, payload: str, qos: int = 1) -> bool:
        """
        Gửi message an toàn với kiểm tra kết nối trước khi publish
        
        Args:
            topic: MQTT topic
            payload: Nội dung message (string)
            qos: Quality of Service (0, 1, hoặc 2)
            
        Returns:
            bool: True nếu gửi thành công, False nếu thất bại
        """
        try:
            if not self.ensure_connected():
                logger.error(f"Không thể gửi message đến {topic}: MQTT chưa kết nối")
                return False
            
            result = self.client.publish(topic, payload, qos=qos)
            
            if result.rc == mqtt.MQTT_ERR_SUCCESS:
                #logger.info(f"Đã gửi message thành công đến {topic}")
                return True
            else:
                logger.error(f"Lỗi khi gửi message đến {topic}: {mqtt.error_string(result.rc)}")
                return False
            
        except Exception as e:
            logger.error(f"Lỗi khi gửi message đến {topic}: {str(e)}")
            return False

    def send_task_report(self, task_id: str, device_id: str, status: str, client_message: str = ""):
        """Gửi báo cáo kết quả thực hiện task"""
        try:
            report_data = {
                "task_id": task_id,
                "device_id": device_id,
                "status": status,
                "client_message": client_message,
                "timestamp": int(time.time())
            }

            if self._safe_publish("dndvina/client/task_report", json.dumps(report_data)):
                logger.info(f"Đã gửi báo cáo task {task_id} với trạng thái {status}")
                return True
            return False

        except Exception as e:
            logger.error(f"Lỗi khi gửi báo cáo task: {str(e)}")
            return False

    def send_connect_notification(self):
        """Gửi thông báo kết nối đến server"""
        try:
            connect_data = {
                "device_id": self.device_id,
                "timestamp": int(time.time())
            }

            if self._safe_publish("dndvina/client/connect", json.dumps(connect_data)):
                logger.info(f"Đã gửi thông báo kết nối cho thiết bị {self.device_id}")
                return True
            return False

        except Exception as e:
            logger.error(f"Lỗi khi gửi thông báo kết nối: {str(e)}")
            return False

    def register_task_handler(self, task_type: str, handler: Callable):
        """
        Đăng ký handler cho loại task
        
        Args:
            task_type: Loại task
            handler: Hàm xử lý task
        """
        self.task_handlers[task_type] = handler
    
    def _read_recent_logs(self, num_lines=100):
        """
        Đọc các dòng log gần nhất từ file app.log
        
        Args:
            num_lines: Số dòng log cần đọc (mặc định 100)
            
        Returns:
            List[str]: Danh sách các dòng log gần nhất hoặc thông báo lỗi
        """
        try:
            log_file_path = os.path.join(config.BASE_DIR, "app.log")
            logger.debug(f"Đọc log từ đường dẫn: {log_file_path}")
            
            if not os.path.exists(log_file_path):
                # File chưa được tạo bởi logging system, trả về thông báo
                error_msg = f"File log không tồn tại tại {log_file_path}"
                logger.warning(error_msg)
                return [f"[ERROR] {error_msg}"]
                
            # Kiểm tra thêm thông tin file
            try:
                file_size = os.path.getsize(log_file_path)
                logger.debug(f"File log có kích thước: {file_size} bytes")
            except Exception as size_error:
                logger.debug(f"Không thể lấy kích thước file: {size_error}")
            
            # Thử đọc file với timeout và retry
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    # Đọc file với mode 'r' để tránh xung đột với logging system
                    with open(log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        
                    # Lấy num_lines dòng cuối cùng
                    recent_lines = lines[-num_lines:] if len(lines) > num_lines else lines
                    
                    # Loại bỏ ký tự xuống dòng và các khoảng trắng thừa
                    recent_logs = [line.strip() for line in recent_lines if line.strip()]
                    
                    logger.debug(f"Đã đọc {len(recent_logs)} dòng log gần nhất từ {len(lines)} dòng total")
                    return recent_logs
                    
                except (PermissionError, IOError, OSError) as file_error:
                    if attempt < max_retries - 1:
                        # Thử lại sau 100ms
                        time.sleep(0.1)
                        logger.debug(f"Lỗi đọc file log (lần {attempt + 1}): {file_error}, thử lại...")
                        continue
                    else:
                        # Lần thử cuối cùng thất bại
                        error_msg = f"Không thể đọc file log sau {max_retries} lần thử: {str(file_error)}"
                        logger.warning(error_msg)
                        return [f"[ERROR] {error_msg}"]
            
        except Exception as e:
            error_msg = f"Lỗi không xác định khi đọc file log: {str(e)}"
            logger.error(error_msg)
            return [f"[ERROR] {error_msg}"]

    def sync_data(self):
        """Đồng bộ dữ liệu với server"""
        try:
            # Nếu chưa kết nối MQTT, không thể đồng bộ
            if not self.is_connected:
                logger.warning("Chưa kết nối MQTT, không thể đồng bộ dữ liệu")
                return
                
            # Lấy helper service
            helper = self.helper_service
            if not helper:
                logger.error("Không có helper service, không thể đồng bộ dữ liệu")
                return
                
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            if not device_id:
                logger.error("Không thể xác định device_id, không thể đồng bộ dữ liệu")
                return
                
            # Lấy thông tin thiết bị
            device_info = None
            try:
                device_info_response = helper.get_device_info()
                
                # Nếu lấy thành công, lưu vào database
                if device_info_response["status"] == "success" and "data" in device_info_response:
                    # Lưu thông tin thiết bị vào database
                    self.db.save_device_info(device_info_response["data"])
                    device_info = device_info_response["data"]
                    
                    # Theo dõi RAM để tự động reboot
                    self._monitor_ram_usage(device_info)
                    
            except Exception as e:
                logger.error(f"Lỗi khi lấy thông tin thiết bị: {e}")
                
            # Nếu không lấy được thông tin thiết bị, sử dụng thông tin đã lưu trong database
            if not device_info:
                device_info = self.db.get_device_info()
                
            if not device_info:
                logger.warning("Không có thông tin thiết bị, đồng bộ dữ liệu có thể không đầy đủ")
                device_info = {}
                
            # Lấy cấu hình thiết bị
            device_config = self.db.get_all_device_config()
            
            # Gộp các trạng thái runtime (pause_job, device_is_working, device_message) vào device_info
            for runtime_key in ["pause_job", "device_is_working", "device_message"]:
                if runtime_key in device_config:
                    device_info[runtime_key] = device_config.pop(runtime_key)
                else:
                    # Giá trị mặc định nếu chưa cấu hình
                    device_info[runtime_key] = False if runtime_key != "device_message" else ""
            
            # Loại bỏ golike_report khỏi device_config để gửi riêng
            golike_report = None
            if "golike_report" in device_config:
                golike_report = device_config.pop("golike_report")
            
            # Loại bỏ golike_api_base khỏi device_config
            if "golike_api_base" in device_config:
                device_config.pop("golike_api_base")
                logger.debug("Đã loại bỏ golike_api_base khỏi dữ liệu đồng bộ")
                
            # Lấy các tài khoản chưa đồng bộ
            pending_accounts = self.db.get_pending_sync_items("accounts", limit=50)
            
            # Lấy các job chưa đồng bộ
            pending_jobs = self.db.get_pending_sync_items("jobs_history", limit=50)
            
            # Đọc 100 dòng log gần nhất
            recent_logs = self._read_recent_logs(100)
                
            # Tạo payload
            payload = {
                "device_id": device_id,
                "device_info": device_info,
                "device_config": device_config,
                "meta_data": {
                    "device_logs": recent_logs
                },
                "timestamp": int(time.time())
            }
            
            # Thêm golike_report nếu có
            if golike_report:
                payload["golike_report"] = golike_report
                
            # Thêm tài khoản chưa đồng bộ nếu có
            if pending_accounts:
                payload["accounts"] = pending_accounts
                logger.debug(f"Đồng bộ {len(pending_accounts)} tài khoản chưa đồng bộ")
                
            # Thêm job chưa đồng bộ nếu có
            if pending_jobs:
                payload["jobs"] = pending_jobs
                logger.debug(f"Đồng bộ {len(pending_jobs)} job chưa đồng bộ")
                
            # Gửi dữ liệu
            self._safe_publish(config.MQTT_TOPIC_CLIENT_SYNC, json.dumps(payload))
            
            # Log thông tin về số dòng log đã gửi
            if recent_logs:
                logger.debug(f"Đã gửi {len(recent_logs)} dòng log gần nhất lên server")
            
        except Exception as e:
            logger.exception(e, "Lỗi khi đồng bộ dữ liệu với server")
    
    def start_sync_thread(self):
        """Bắt đầu thread đồng bộ tự động"""
        if self.sync_thread is not None and self.sync_thread.is_alive():
            logger.warning("Thread đồng bộ đã đang chạy")
            return
            
        self.running = True
        self.stop_event.clear()
        self.sync_thread = threading.Thread(target=self._sync_loop, daemon=True)
        self.sync_thread.start()
        logger.info("Đã khởi động thread đồng bộ tự động")
    
    def _sync_loop(self):
        """Loop đồng bộ tự động"""
        logger.info(f"Bắt đầu đồng bộ tự động mỗi {self.sync_interval} giây")

        while not self.stop_event.is_set() and self.running:
            try:
                if self.is_connected:
                    self.sync_data()
            except Exception as e:
                logger.error(f"Lỗi trong quá trình đồng bộ tự động: {str(e)}")
                
            # Nghỉ đến lần đồng bộ tiếp theo
            for _ in range(self.sync_interval):
                if self.stop_event.is_set() or not self.running:
                    break
                time.sleep(1)
    
    def stop_sync_thread(self):
        """Dừng thread đồng bộ tự động"""
        self.running = False
        self.stop_event.set()
        if self.sync_thread is not None:
            self.sync_thread.join(timeout=2.0)
            self.sync_thread = None
        logger.info("Đã dừng thread đồng bộ tự động")
    
    def disconnect(self):
        """Ngắt kết nối MQTT"""
        self.manual_disconnect = True  # Đánh dấu đây là disconnect có chủ ý
        self.stop_sync_thread()
        
        if self.client is not None:
            self.client.loop_stop()
            self.client.disconnect()
            self.is_connected = False
            logger.info("Đã ngắt kết nối MQTT")
        
        # Dừng tất cả auto-reconnect
        self.stop_event.set()
    
    def setup_mqtt_handlers(self):
        """Thiết lập các handler cho MQTT tasks"""
        # Đăng ký các task handler mặc định
        self.register_task_handler("update_config", self._handle_update_device_config)
        self.register_task_handler("update_synced", self._handle_update_synced)
        self.register_task_handler("account_update", self._handle_account_update)
        self.register_task_handler("verify_golike", self._handle_verify_golike)
        self.register_task_handler("update_proxy", self._handle_update_proxy)
        
        logger.info("Đã thiết lập các MQTT task handler")
        
    def _handle_update_device_config(self, task_data):
        """
        Xử lý task cập nhật cấu hình thiết bị
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            
            logger.info(f"Nhận yêu cầu cập nhật cấu hình thiết bị từ server (task_id: {task_id})")
            config_data = task_data.get("config_data", {})
            if not config_data:
                logger.warning("Dữ liệu cấu hình thiết bị rỗng")
                self.send_task_report(task_id, device_id, "failed", "Dữ liệu cấu hình thiết bị rỗng")
                return
            
            # Lưu từng cấu hình thiết bị
            success = self.db.save_device_config(config_data)
            
            if success:
                logger.info(f"Đã cập nhật cấu hình thiết bị: {', '.join(config_data.keys())}")
                
                # Đánh dấu tất cả tài khoản là chưa sync để đảm bảo thông tin mới nhất được gửi lên server
                try:
                    updated_accounts = self.db.mark_all_accounts_not_synced()
                    if updated_accounts > 0:
                        logger.info(f"Đã đánh dấu {updated_accounts} tài khoản là chưa sync sau khi cập nhật cấu hình thiết bị")
                    else:
                        logger.debug("Không có tài khoản nào cần đánh dấu chưa sync")
                except Exception as e:
                    logger.warning(f"Lỗi khi đánh dấu tài khoản chưa sync: {e}")
                    # Không fail task vì việc cập nhật config đã thành công
                
                # Cập nhật sync_interval nếu nó thay đổi
                if "sync_interval" in config_data:
                    new_sync_interval = config_data["sync_interval"]
                    if new_sync_interval != self.sync_interval:
                        logger.info(f"Cập nhật sync_interval từ {self.sync_interval} thành {new_sync_interval}")
                        self.sync_interval = new_sync_interval
                        
                        # Khởi động lại thread đồng bộ nếu đang chạy
                        if self.sync_thread is not None and self.sync_thread.is_alive():
                            logger.info("Khởi động lại thread đồng bộ với khoảng thời gian mới")
                            self.stop_sync_thread()
                            self.start_sync_thread()
                
                # Thông báo cho JobService về tất cả config update
                if self.job_service and hasattr(self.job_service, 'handle_mqtt_config_update'):
                    logger.info("Thông báo JobService về config update")
                    self.job_service.handle_mqtt_config_update(config_data)
                
                # Log thêm thông tin về job-related configs
                job_related_keys = ["max_jobs_per_day", "max_jobs_per_session", "job_interval_seconds", "care_in_working_job"]
                if any(key in config_data for key in job_related_keys):
                    logger.info("Cấu hình liên quan đến JobService đã được cập nhật")
                    # JobService sẽ xử lý logic restart session nếu cần thiết
                
                # Gửi báo cáo thành công
                self.send_task_report(task_id, device_id, "success", f"Đã cập nhật cấu hình thiết bị: {', '.join(config_data.keys())}")
                
            else:
                error_msg = "Không thể cập nhật cấu hình thiết bị"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
            
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật cấu hình thiết bị: {str(e)}"
            logger.error(error_msg)
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def _handle_update_synced(self, task_data):
        """
        Xử lý task cập nhật trạng thái đồng bộ
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            logger.debug("Nhận yêu cầu cập nhật trạng thái đồng bộ từ server")
            data = task_data.get("data", {})
            
            account_count = 0
            job_count = 0
            
            # Đánh dấu tài khoản đã đồng bộ
            if "accounts" in data and isinstance(data["accounts"], list):
                for account_uuid in data["accounts"]:
                    self.db.mark_as_synced("accounts", account_uuid)
                    logger.debug(f"Đánh dấu tài khoản đã đồng bộ: {account_uuid}")
                account_count = len(data["accounts"])
            
            # Đánh dấu job đã đồng bộ
            if "jobs" in data and isinstance(data["jobs"], list):
                for job_uuid in data["jobs"]:
                    self.db.mark_as_synced("jobs_history", job_uuid)
                    logger.debug(f"Đánh dấu job đã đồng bộ: {job_uuid}")
                job_count = len(data["jobs"])
            
            # Hiển thị thông báo tổng hợp hoặc thông báo từ server
            if "message" in task_data:
                logger.info(f"Thông báo từ server: {task_data['message']}")
            else:
                # Hiển thị thông báo tổng hợp nếu không có message từ server
                if account_count > 0 or job_count > 0:
                    logger.info(f"Đã đồng bộ thành công: {account_count} tài khoản, {job_count} job")
                
        except Exception as e:
            logger.error(f"Lỗi xử lý cập nhật trạng thái đồng bộ: {str(e)}")
            
    
    def _handle_account_update(self, task_data):
        """
        Xử lý task cập nhật thông tin tài khoản
        
        Args:
            task_data: Dữ liệu task từ server có cấu trúc:
            {
                "task_id": "task_1749399536272_641",
                "device_id": "a125f624f41a4f7c",
                "task_type": "account_update",
                "data": {
                    "app": "instagram",
                    "status": "inactive",
                    "job_max_day": 108,
                    "job_today": 30,
                    "job_enable": true,
                    "account_uuid": "7ed9557d-76a4-47f7-8850-7ceef0c690af"
                },
                "message": "",
                "status": "pending"
            }
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            data = task_data.get("data", {})
            
            logger.info(f"Nhận yêu cầu cập nhật tài khoản từ server (task_id: {task_id})")
            
            if not data or "account_uuid" not in data:
                logger.warning("Dữ liệu tài khoản không hợp lệ")
                self.send_task_report(task_id, device_id, "failed", "Dữ liệu tài khoản không hợp lệ")
                return
                
            # Lấy tài khoản từ DB
            account = self.db.get_account_by_uuid(data["account_uuid"])
            if not account:
                error_msg = f"Không tìm thấy tài khoản với UUID: {data['account_uuid']}"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
                
            # Cập nhật thông tin tài khoản
            update_data = {}
            valid_fields = ["status", "job_max_day", "max_jobs_per_session", "job_enable", "job_disable_until", 
                          "disable_follow", "follow_disable_until", "follow_today", "follow_in_session", 
                          "max_follow_day", "max_follow_session", "inactive_follow_reason"]
            
            # Kiểm tra nếu status = "delete" thì xóa tài khoản
            if data.get("status") == "delete":
                account_uuid = data["account_uuid"]
                account_username = account.get("unique_username", "Unknown")
                
                logger.info(f"Nhận yêu cầu xóa tài khoản {account_username} (UUID: {account_uuid})")
                
                # 1. Xóa tất cả job history của tài khoản
                job_history_deleted = self.db.delete_job_history_by_account(account_uuid)
                if job_history_deleted:
                    logger.info(f"Đã xóa job history của tài khoản {account_username}")
                else:
                    logger.warning(f"Không thể xóa job history của tài khoản {account_username}")
                
                # 2. Xóa tài khoản
                account_deleted = self.db.delete_account(account["id"])
                if account_deleted:
                    logger.info(f"Đã xóa tài khoản {account_username} (ID: {account['id']}) khỏi database")
                    self.send_task_report(task_id, device_id, "success", f"Đã xóa tài khoản {account_username}")
                else:
                    error_msg = f"Không thể xóa tài khoản {account_username}"
                    logger.error(error_msg)
                    self.send_task_report(task_id, device_id, "failed", error_msg)
                return
            
            for key, value in data.items():
                if key in valid_fields:
                    update_data[key] = value
                    
            if not update_data:
                logger.warning("Không có thông tin cần cập nhật")
                self.send_task_report(task_id, device_id, "failed", "Không có thông tin cần cập nhật")
                return
                    
            # Lưu lại vào DB
            update_data["is_sync"] = False
            success = self.db.update_account(account["id"], update_data)
            
            if success:
                logger.info(f"Đã cập nhật tài khoản {account.get('unique_username', '')} (UUID: {data['account_uuid']}) với dữ liệu: {update_data}")
                self.send_task_report(task_id, device_id, "success", f"Đã cập nhật tài khoản {account.get('unique_username', '')}")
            else:
                error_msg = f"Không thể cập nhật tài khoản {account.get('unique_username', '')}"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật tài khoản: {str(e)}"
            logger.error(error_msg)
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def _handle_verify_golike(self, task_data):
        """
        Xử lý task verify tài khoản golike
        
        Args:
            task_data: Dữ liệu task từ server có cấu trúc:
            {
                "task_id": "task_1749399536272_641",
                "device_id": "a125f624f41a4f7c",
                "task_type": "verify_golike",
                "data": {
                    "app": "instagram"
                },
                "message": "",
                "status": "pending"
            }
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            data = task_data.get("data", {})
            
            logger.info(f"Nhận yêu cầu verify golike từ server (task_id: {task_id})")
            
            app_name = data.get("app")
            if not app_name:
                error_msg = "Thiếu thông tin app trong dữ liệu task"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
            
            # Import golike_service khi cần thiết
            try:
                from services.golike_service import GolikeService
                golike_service = GolikeService(self.db)
            except ImportError as e:
                error_msg = f"Không thể import GolikeService: {str(e)}"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
            
            # Lấy danh sách tài khoản chưa liên kết golike
            unlinked_accounts = self.db.get_accounts_by_app_and_golike_status(app_name, is_linked=False)
            
            if not unlinked_accounts:
                error_msg = f"Không có tài khoản {app_name} nào chưa liên kết golike"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
            
            logger.info(f"Tìm thấy {len(unlinked_accounts)} tài khoản {app_name} chưa liên kết golike")
            
            # Verify từng tài khoản
            verification_results = []
            success_count = 0
            
            for account in unlinked_accounts:
                unique_username = account.get("unique_username")
                if not unique_username:
                    logger.warning(f"Tài khoản ID {account.get('id')} không có unique_username")
                    continue
                
                try:
                    # Gọi API verify account qua golike_service
                    endpoint = f"/{app_name}-account/verify-account"
                    verify_data = {"object_id": unique_username}
                    
                    # Tạo URL đầy đủ
                    url = f"{config.GOLIKE_API_BASE}{endpoint}"
                    result = golike_service.api_request(url, method="POST", payload=verify_data)
                    
                    if result.get("success") and result.get("status") == 200:
                        # Verify thành công
                        message = result.get("message", "Thành công!")
                        verification_results.append(f"[TRUE][{unique_username}]: {message}")
                        success_count += 1
                        
                        # Cập nhật trạng thái liên kết trong database
                        self.db.update_account(account["id"], {
                            "is_golike_linked": True,
                            "golike_user_id": result.get("data", {}).get("user_id"),
                            "is_sync": False
                        })
                        
                        logger.info(f"Verify thành công tài khoản {unique_username}")
                        
                    else:
                        # Verify thất bại
                        error_message = result.get("message", "Lỗi không xác định")
                        verification_results.append(f"[FALSE][{unique_username}]: {error_message}")
                        logger.warning(f"Verify thất bại tài khoản {unique_username}: {error_message}")
                        
                except Exception as e:
                    error_message = f"Lỗi khi verify: {str(e)}"
                    verification_results.append(f"[FALSE][{unique_username}]: {error_message}")
                    logger.error(f"Lỗi khi verify tài khoản {unique_username}: {str(e)}")
            
            # Tạo báo cáo kết quả
            report_message = "\n".join(verification_results)
            
            # Gửi báo cáo task
            if success_count == len(unlinked_accounts):
                # Tất cả thành công
                self.send_task_report(task_id, device_id, "success", 
                                    f"Verify thành công {success_count}/{len(unlinked_accounts)} tài khoản:\n{report_message}")
                logger.info(f"Verify golike hoàn thành: {success_count}/{len(unlinked_accounts)} tài khoản thành công")
            else:
                # Có một số thất bại
                self.send_task_report(task_id, device_id, "failed", 
                                    f"Verify thành công {success_count}/{len(unlinked_accounts)} tài khoản:\n{report_message}")
                logger.warning(f"Verify golike hoàn thành với lỗi: {success_count}/{len(unlinked_accounts)} tài khoản thành công")
                
        except Exception as e:
            error_msg = f"Lỗi xử lý verify golike: {str(e)}"
            logger.error(error_msg)
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def _handle_update_proxy(self, task_data):
        """
        Xử lý task cập nhật cấu hình proxy
        
        Args:
            task_data: Dữ liệu task từ server có cấu trúc:
            {
                "task_id": "task_1749399536272_641",
                "device_id": "a125f624f41a4f7c",
                "task_type": "update_proxy",
                "data": {
                    "proxy_config": {
                        "id": "proxy_456",
                        "host": "proxy.example.com",
                        "port": 8080,
                        "username": "user",
                        "password": "pass",
                        "type": "http"
                    }
                },
                "message": "",
                "status": "pending"
            }
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            data = task_data.get("data", {})
            
            logger.info(f"Nhận yêu cầu cập nhật proxy từ server (task_id: {task_id})")
            
            proxy_config = data
            if not proxy_config:
                error_msg = "Thiếu thông tin proxy_config trong dữ liệu task"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
            
            # Lưu cấu hình proxy vào database
            try:
                self.db.set("proxy_config", proxy_config)
                # Reset trạng thái yêu cầu proxy vì đã nhận được proxy
                self.db.set("proxy_requested", 0)
                logger.info(f"Đã cập nhật cấu hình proxy: {proxy_config['name']}")
                
                # Gửi báo cáo thành công
                success_msg = f"Đã cập nhật proxy: {proxy_config['name']}"
                self.send_task_report(task_id, device_id, "success", success_msg)
                
            except Exception as e:
                error_msg = f"Lỗi khi lưu cấu hình proxy: {str(e)}"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật proxy: {str(e)}"
            logger.error(error_msg)
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def start(self):
        """
        Khởi động MQTT service
        
        Returns:
            bool: True nếu khởi động thành công, False nếu thất bại
        """
        try:
            # Thiết lập các handler trước khi kết nối
            self.setup_mqtt_handlers()
            self.connect()
            # Khởi động sync thread sau khi kết nối thành công
            self.start_sync_thread()
            logger.info("Đã khởi động MQTT service và đồng bộ dữ liệu")
            
            return True
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động MQTT service")
            return False

    def _on_message(self, client, userdata, msg, properties=None):
        """
        Callback khi nhận được message từ MQTT broker
        
        Args:
            client: MQTT client instance
            userdata: User data được truyền vào client
            msg: Message object chứa topic và payload
            properties: Properties của message (MQTT v5)
        """
        try:
            logger.debug(f"Nhận message từ topic: {msg.topic}")
            
            # Parse payload JSON
            try:
                payload = json.loads(msg.payload.decode('utf-8'))
            except json.JSONDecodeError:
                logger.error(f"Không thể parse JSON từ payload: {msg.payload}")
                return
            
            # Xử lý message dựa trên topic
            if msg.topic == self.topic_server_task:
                self._handle_server_task(payload)
            else:
                logger.warning(f"Nhận message từ topic không xác định: {msg.topic}")
            
        except Exception as e:
            logger.error(f"Lỗi khi xử lý message: {str(e)}")

    def _handle_server_task(self, payload: Dict[str, Any]):
        """
        Xử lý task từ server
        
        Args:
            payload: Dữ liệu task từ server
        """
        try:
            task_type = payload.get("task_type")
            if not task_type:
                logger.warning("Nhận task không có task_type")
                return
            
            logger.debug(f"Nhận task từ server: {task_type}")
            
            # Gọi handler tương ứng nếu đã đăng ký
            if task_type in self.task_handlers:
                self.task_handlers[task_type](payload)
            else:
                logger.warning(f"Không tìm thấy handler cho task_type: {task_type}")
            
        except Exception as e:
            logger.error(f"Lỗi xử lý task từ server: {str(e)}")
    
    def _monitor_ram_usage(self, device_info: Dict[str, Any]):
        """
        Theo dõi RAM và tự động reboot nếu RAM cao liên tục
        
        Args:
            device_info: Thông tin thiết bị chứa RAM usage
        """
        try:
            # Lấy phần trăm RAM trực tiếp từ device_info (mặc định là 0 nếu không có)
            ram_usage_percent = device_info.get("ram_percentage", 0)
            
            if ram_usage_percent == 0:
                logger.debug("Không có thông tin ram_percentage trong device_info, sử dụng giá trị mặc định 0")
                return
                
            # Thêm vào lịch sử (chỉ giữ lại 3 lần gần nhất)
            self.ram_usage_history.append(ram_usage_percent)
            if len(self.ram_usage_history) > self.consecutive_high_ram_limit:
                self.ram_usage_history.pop(0)
            
            logger.debug(f"RAM hiện tại: {ram_usage_percent:.1f}% (lịch sử: {[f'{x:.1f}%' for x in self.ram_usage_history]})")
            
            # Kiểm tra nếu có đủ 3 lần đo và tất cả đều > ngưỡng
            if len(self.ram_usage_history) >= self.consecutive_high_ram_limit:
                if all(usage > self.high_ram_threshold for usage in self.ram_usage_history):
                    logger.warning(f"RAM cao liên tục {self.consecutive_high_ram_limit} lần (>{self.high_ram_threshold}%): {[f'{x:.1f}%' for x in self.ram_usage_history]}")
                    logger.warning("Bắt đầu reboot thiết bị để giải phóng RAM...")
                    
                    # Thực hiện reboot
                    if self._reboot_device():
                        logger.info("Đã gửi lệnh reboot thành công")
                        # Reset lịch sử sau khi reboot
                        self.ram_usage_history.clear()
                    else:
                        logger.error("Không thể thực hiện reboot thiết bị")
                        
        except Exception as e:
            logger.error(f"Lỗi khi theo dõi RAM: {e}")
    
    def _reboot_device(self) -> bool:
        """
        Thực hiện reboot thiết bị qua ADB
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        try:
            # Sử dụng DEVICE_IP từ config thay vì ADB_HOST
            device_address = f"{config.DEVICE_IP}:{config.ADB_PORT}"
            
            # Lệnh reboot qua ADB
            cmd = ["adb", "-s", device_address, "reboot"]
            
            logger.info(f"Thực hiện reboot thiết bị: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=10  # Timeout 10 giây
            )
            
            logger.info(f"Lệnh reboot đã được gửi thành công")
            return True
            
        except subprocess.TimeoutExpired:
            logger.warning("Timeout khi gửi lệnh reboot (thiết bị có thể đang reboot)")
            return True  # Coi như thành công vì có thể thiết bị đang reboot
        except subprocess.CalledProcessError as e:
            logger.error(f"Lỗi khi thực hiện reboot: {e.stderr}")
            return False
        except FileNotFoundError:
            logger.error("Không tìm thấy lệnh adb, không thể reboot thiết bị")
            return False
        except Exception as e:
            logger.error(f"Lỗi không xác định khi reboot thiết bị: {e}")
            return False').decode('utf-8'))
