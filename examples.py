import base64
exec(base64.b64decode('from services.helper_service import HelperService
import time
import random
from typing import Dict, Any

def basic_interaction_example():
    """
    Ví dụ cơ bản về cách tương tác với điện thoại
    """
    # Khởi tạo controller
    controller = HelperService()
    
    # Lấy thông tin thiết bị
    device_info = controller.get_device_info()
    if device_info["status"] == "success":
        print(f"Đang chạy trên thiết bị: {device_info['data'].get('model', 'Unknown')}")
    
    # Chạm vào màn hình
    controller.tap(500, 500)
    time.sleep(1)
    
    # Vuốt lên
    controller.swipe_up()
    time.sleep(1)
    
    # Nhập văn bản
    controller.input_text("Hello world")
    time.sleep(1)
    
    # Nhấn nút Home
    controller.press_home()
    print("Đã hoàn thành các thao tác cơ bản")

def find_element_example():
    """
    Ví dụ về cách tìm và tương tác với phần tử trên màn hình
    """
    controller = HelperService()
    
    # Mở ứng dụng Cài đặt
    print("Đang mở ứng dụng Cài đặt...")
    controller.open_app("com.android.settings")
    time.sleep(2)
    
    # Tìm và nhấp vào phần tử "Wi-Fi"
    wifi_element = controller.find_element(text="Wi-Fi")
    
    if wifi_element:
        print("Đã tìm thấy phần tử Wi-Fi!")
        controller.tap_element(wifi_element.get("bounds"))
        time.sleep(2)
        
        # Tìm công tắc Wi-Fi
        wifi_switch = controller.find_element(resource_id="android:id/switch_widget")
        
        if wifi_switch:
            print("Đã tìm thấy công tắc Wi-Fi!")
            
            # Kiểm tra trạng thái Wi-Fi
            is_on = controller.get_element_checked(wifi_switch)
            print(f"Wi-Fi hiện tại {'bật' if is_on else 'tắt'}")
            
            # Bật Wi-Fi nếu đang tắt
            if not is_on:
                controller.tap_element(wifi_switch.get("bounds"))
                print("Đã bật Wi-Fi")
                
        # Quay lại màn hình trước
        controller.press_back()
    else:
        print("Không tìm thấy phần tử Wi-Fi!")
    
    # Quay lại màn hình chính
    controller.press_home()
    print("Đã hoàn thành tìm kiếm phần tử")

def element_properties_example():
    """
    Ví dụ về cách lấy và sử dụng các thuộc tính của phần tử
    """
    controller = HelperService()
    
    # Mở ứng dụng Cài đặt
    print("Đang mở ứng dụng Cài đặt...")
    controller.open_app("com.android.settings")
    time.sleep(2)
    
    # Tìm tất cả các mục cài đặt
    print("Đang tìm tất cả các mục cài đặt...")
    settings_items = controller.find_all_elements(class_name="android.widget.TextView")
    
    if settings_items:
        print(f"Đã tìm thấy {len(settings_items)} mục cài đặt")
        
        for i, item in enumerate(settings_items[:5]):  # Chỉ xem 5 phần tử đầu tiên
            text = controller.get_element_text(item)
            content_desc = controller.get_element_content_desc(item)
            resource_id = controller.get_element_resource_id(item)
            is_clickable = controller.get_element_clickable(item)
            bounds = controller.get_element_bounds(item)
            
            print(f"Phần tử {i+1}:")
            print(f"  Text: {text}")
            if content_desc:
                print(f"  Content-desc: {content_desc}")
            if resource_id:
                print(f"  Resource ID: {resource_id}")
            print(f"  Clickable: {'Có' if is_clickable else 'Không'}")
            print(f"  Bounds: {bounds}")
            print("")
    else:
        print("Không tìm thấy phần tử nào!")
    
    # Quay lại màn hình chính
    controller.press_home()
    print("Đã hoàn thành kiểm tra thuộc tính phần tử")

def wait_for_element_example():
    """
    Ví dụ về cách chờ đợi phần tử xuất hiện
    """
    controller = HelperService()
    
    # Mở ứng dụng Camera
    print("Đang mở ứng dụng Camera...")
    controller.open_app("com.android.camera")
    
    # Chờ đợi nút chụp ảnh xuất hiện
    print("Đang chờ nút chụp ảnh xuất hiện...")
    capture_button = controller.wait_for_element(resource_id="com.android.camera:id/shutter_button", timeout=10)
    
    if capture_button:
        print("Đã tìm thấy nút chụp ảnh!")
        
        # Chụp ảnh
        controller.tap_element(capture_button.get("bounds"))
        print("Đã chụp ảnh!")
        
        # Chờ đợi cho đến khi nút xem trước ảnh xuất hiện
        preview_button = controller.wait_for_element(resource_id="com.android.camera:id/photo_preview", timeout=5)
        
        if preview_button:
            print("Đã tìm thấy nút xem trước ảnh!")
    else:
        print("Không tìm thấy nút chụp ảnh sau thời gian chờ!")
    
    # Quay lại màn hình chính
    controller.press_home()
    print("Đã hoàn thành chờ đợi phần tử")

def advanced_gestures_example():
    """
    Ví dụ về các cử chỉ nâng cao như vuốt, nhấn giữ
    """
    controller = HelperService()
    
    # Lấy kích thước màn hình
    width, height = controller.get_screen_size()
    print(f"Kích thước màn hình: {width}x{height}")
    
    # Mở ứng dụng Bản đồ
    print("Đang mở ứng dụng Bản đồ...")
    controller.open_app("com.google.android.apps.maps")
    time.sleep(5)  # Đợi bản đồ tải
    
    # Vuốt từ trái sang phải
    print("Đang vuốt từ trái sang phải...")
    controller.swipe(width // 4, height // 2, width * 3 // 4, height // 2)
    time.sleep(1)
    
    # Vuốt từ phải sang trái
    print("Đang vuốt từ phải sang trái...")
    controller.swipe(width * 3 // 4, height // 2, width // 4, height // 2)
    time.sleep(1)
    
    # Nhấn giữ tại trung tâm màn hình
    print("Đang nhấn giữ tại trung tâm màn hình...")
    controller.long_press(width // 2, height // 2, 2000)  # Nhấn giữ 2 giây
    time.sleep(3)
    
    # Quay lại màn hình chính
    controller.press_home()
    print("Đã hoàn thành các cử chỉ nâng cao")

def main():
    """
    Chạy tất cả các ví dụ
    """
    print("=== EXAMPLES ===")
    
    examples = {
        "1": ("Basic Interaction", basic_interaction_example),
        "2": ("Find Element", find_element_example),
        "3": ("Element Properties", element_properties_example),
        "4": ("Wait For Element", wait_for_element_example),
        "5": ("Advanced Gestures", advanced_gestures_example)
    }
    
    while True:
        print("\nChọn ví dụ để chạy:")
        for key, (name, _) in examples.items():
            print(f"{key}. {name}")
        print("0. Thoát")
        
        choice = input("Lựa chọn của bạn: ")
        
        if choice == "0":
            break
        
        if choice in examples:
            print(f"\n--- Running: {examples[choice][0]} ---")
            try:
                examples[choice][1]()
            except Exception as e:
                print(f"Lỗi: {e}")
        else:
            print("Lựa chọn không hợp lệ!")

if __name__ == "__main__":
    main() ').decode('utf-8'))
