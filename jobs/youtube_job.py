import base64
exec(base64.b64decode('import datetime
import time
import random
import re
from typing import Dict, Any, List, Optional
from jobs.job_base import BaseJob

class YoutubeJob(BaseJob):
    def __init__(self, db_service, helper_service, golike_service=None):
        super().__init__(db_service, helper_service, golike_service)
        self.app_package = "com.google.android.youtube"
        self.app_name = "youtube"
        
        # Override default config cho YouTube
        self._default_config.update({
            "action_weights": {
                "random_view_video_chanel": 100,  # 100% xem video/channel random
            },
            "min_actions_per_session": 3,
            "max_actions_per_session": 50,  # YouTube có thể có nhiều actions hơn (50 thay vì 30)
            "max_session_duration_minutes": 15,
            "action_delay_min": 5,
            "action_delay_max": 15,
            "key_search_id": "dsjEEMpZk-Q,jugI6UrU-fI,kpRiEpq7awg,333clkdzKBM,wORsazhIG34,lgX5Q9SPE8E,cxdU6bIkV-g,35tG6IFiBOc,X70EM7N5dJY,_1Bl8P7TEY4,NFJlyELqd1w,PA9fWWbHXts,G5o-hFXpO1Y,5wen9hDcI4Y",
            "name_channel": "Dũng Béo Official",
            "ad_watch_time_min": 10,      # Thời gian xem quảng cáo tối thiểu (giây)
            "ad_watch_time_max": 30,     # Thời gian xem quảng cáo tối đa (giây)
            "video_watch_time_min": 100,  # Thời gian xem video tối thiểu (giây)
            "video_watch_time_max": 180,  # Thời gian xem video tối đa (giây)
            "video_rewatch_cooldown_minutes": 300  # Thời gian giãn cách trước khi xem lại video (phút)
        })
    
    def dump_screen(self):
        """
        Fallback method để tương thích với các method có thể gọi dump_screen()
        thay vì dump_screen_xml()
        """
        return self.helper.dump_screen_xml()
    
    def get_supported_actions(self) -> List[str]:
        """
        Override danh sách actions được YouTube hỗ trợ
        
        Returns:
            List[str]: Danh sách actions YouTube hỗ trợ
        """
        return list(self.get_action_weights().keys())
        
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """
        Lấy danh sách tài khoản YouTube từ thiết bị
        YouTube luôn return 1 account với unique_username = "no.account"
        """
        try:
            self.logger.info("Lấy danh sách tài khoản YouTube từ thiết bị")
            
            # YouTube chỉ có 1 account mặc định
            accounts = [{
                "unique_username": "no.account",
                "unique_id": "no.account", 
                "nickname": "YouTube Account",
                "avatar_thumb": "",
                "is_login": True,
                "last_update": int(time.time())
            }]
            
            self.logger.info(f"Tìm thấy {len(accounts)} tài khoản YouTube")
            return accounts
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản YouTube")
            return []
    
    def get_current_logged_in_username(self) -> Optional[str]:
        """
        Lấy username của tài khoản đang đăng nhập
        YouTube luôn return "no.account"
        
        Returns:
            str: "no.account"
        """
        return "no.account"
    
    def _perform_account_switch(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện chuyển tài khoản
        YouTube không cần chuyển tài khoản
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            Dict[str, Any]: Kết quả chuyển tài khoản
        """
        return {
            'success': True,
            'message': 'YouTube không cần chuyển tài khoản'
        }
    
    def open_app(self) -> bool:
        """
        Mở ứng dụng YouTube
        
        Returns:
            bool: True nếu thành công
        """
        try:
            self.logger.info("Mở ứng dụng YouTube")
            self.helper.open_app(self.app_package)
            self.safe_sleep(3)
            return True
        except Exception as e:
            self.logger.error(f"Lỗi mở YouTube: {e}")
            return False
    
    def is_home_screen(self) -> bool:
        """
        Kiểm tra xem có đang ở màn hình home YouTube không
        
        Returns:
            bool: True nếu đang ở home screen
        """
        try:
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                return False
            
            # Kiểm tra có các element đặc trưng của YouTube home
            self.logger.debug("Đang gọi helper.dump_screen_xml() trong is_home_screen...")
            screen_xml = self.helper.dump_screen_xml()
            if not screen_xml:
                return False
            
            # Tìm các indicator của YouTube home
            home_indicators = [
                'com.google.android.youtube:id/youtube_logo',
                'Trang chủ',
                'Shorts'
            ]
            
            for indicator in home_indicators:
                if indicator in screen_xml:
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Lỗi kiểm tra home screen: {e}")
            return False
    
    def get_current_screen(self) -> str:
        """
        Phát hiện màn hình hiện tại của YouTube
        Đảm bảo YouTube đang mở trước khi phát hiện screen
        
        Returns:
            str: Loại màn hình hiện tại ('home', 'home_search', 'view_video', 'unknown')
        """
        try:
            # Đảm bảo YouTube đang mở
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                self.logger.info(f"YouTube chưa mở (package hiện tại: {current_package}), đang mở YouTube...")
                if not self.open_app():
                    self.logger.error("Không thể mở YouTube")
                    return "unknown"
                
                # Đợi app load
                self.safe_sleep(3)
                
                # Kiểm tra lại package
                current_package = self.helper.get_current_package()
                if current_package != self.app_package:
                    self.logger.error(f"Vẫn không phải YouTube app: {current_package}")
                    return "unknown"
            
            # Lấy XML của màn hình hiện tại
            self.logger.debug("Đang gọi helper.dump_screen_xml()...")
            screen_xml = self.helper.dump_screen_xml()
            if not screen_xml:
                self.logger.warning("Không lấy được screen XML")
                return "unknown"
            
            # Kiểm tra view_video screen trước (ưu tiên cao nhất)
            if "com.google.android.youtube:id/watch_player" in screen_xml:
                return "view_video"
            
            # Kiểm tra home_search screen
            search_indicators = [
                "Thử tìm kiếm để bắt đầu",
                "Tìm trên YouTube"
            ]
            for indicator in search_indicators:
                if indicator in screen_xml:
                    return "home_search"
            
            # Kiểm tra home screen (kế thừa logic từ is_home_screen)
            if self.is_home_screen():
                return "home"
            
            # Không xác định được
            return "unknown"
            
        except Exception as e:
            self.logger.error(f"Lỗi phát hiện current screen: {e}")
            return "unknown"
    
    def ensure_home_screen(self) -> bool:
        """
        Đảm bảo đang ở màn hình home YouTube
        Kết hợp giữa nút back và bấm vào Trang chủ/Home
        
        Returns:
            bool: True nếu thành công về home screen
        """
        try:
            # Nếu đã ở home thì OK
            self._handle_close_popups()
            if self.is_home_screen():
                return True
            
            
            self.logger.info("Đang cố gắng quay về trang chủ YouTube")
            
            # Thử 1: Tìm và bấm nút "Trang chủ" hoặc "Home" trước
            home_tab = self.helper.find_element(text="Trang chủ")
            if not home_tab:
                home_tab = self.helper.find_element(text="Home")
            if not home_tab:
                home_tab = self.helper.find_element(content_desc="Trang chủ")
            if not home_tab:
                home_tab = self.helper.find_element(content_desc="Home")
                
            if home_tab:
                self.logger.info("Tìm thấy nút Trang chủ/Home, đang bấm...")
                self.helper.tap_element_center(home_tab)
                self.safe_sleep(2)
                if self.is_home_screen():
                    return True
            
            # Thử 2: Bấm back 1-2 lần rồi tìm Home button
            for attempt in range(2):
                self._handle_close_popups()
                self.logger.info(f"Thử bấm back lần {attempt + 1}")
                self.helper.press_back()
                self.safe_sleep(1)
                
                # Kiểm tra đã về home chưa
                if self.is_home_screen():
                    return True
                
                # Tìm Home button sau khi back
                home_tab = self.helper.find_element(text="Trang chủ")
                if not home_tab:
                    home_tab = self.helper.find_element(text="Home")
                if not home_tab:
                    home_tab = self.helper.find_element(content_desc="Trang chủ")
                if not home_tab:
                    home_tab = self.helper.find_element(content_desc="Home")
                    
                if home_tab:
                    self.logger.info("Tìm thấy nút Trang chủ/Home sau back, đang bấm...")
                    self.helper.tap_element_center(home_tab)
                    self.safe_sleep(2)
                    if self.is_home_screen():
                        return True
            
            # Thử 3: Back nhiều lần hơn nếu vẫn chưa về được
            self.logger.info("Thử back nhiều lần để về home")
            for _ in range(3):
                self.helper.press_back()
                self.safe_sleep(1)
                if self.is_home_screen():
                    return True
            
            # Thử 4: Cuối cùng mở lại app
            self.logger.info("Mở lại ứng dụng YouTube")
            self.open_app()
            self.safe_sleep(3)
            return self.is_home_screen()
            
        except Exception as e:
            self.logger.error(f"Lỗi ensure home screen: {e}")
            return False
    
    def validate_app_not_banned(self) -> bool:
        """
        Kiểm tra app có bị banned không
        YouTube ít khi bị ban nên luôn return True
        
        Returns:
            bool: True nếu không bị banned
        """
        try:
            current_package = self.helper.get_current_package()
            if current_package != self.app_package:
                return True  # App chưa mở
            
            screen_xml = self.helper.dump_screen_xml()
            if not screen_xml:
                return True
            
            # Kiểm tra các dấu hiệu bị ban (nếu có)
            ban_indicators = [
                "Account suspended",
                "This account has been terminated",
                "Community Guidelines violation"
            ]
            
            for indicator in ban_indicators:
                if indicator.lower() in screen_xml.lower():
                    self.logger.warning(f"Phát hiện app bị ban: {indicator}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Lỗi kiểm tra app banned: {e}")
            return True  # Default không bị ban
    
    def perform_random_view_video_chanel_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động xem video/channel ngẫu nhiên
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        try:
            self.logger.info(f"Thực hiện random view video/channel cho {account.get('unique_username')}")
            self._handle_close_popups()
            # Kiểm tra màn hình hiện tại
            current_screen = self.get_current_screen()
            self.logger.info(f"Current screen: {current_screen}")
            
            # Xử lý theo màn hình hiện tại
            if current_screen == "view_video":
                # Đã đang xem video, có thể tiếp tục xem hoặc thoát
                # Đang xem video, có thể tìm và bấm vào playlist entry point
                self.logger.info("Đang xem video, tìm playlist entry point")
                playlist_entry = self.helper.find_element(resource_id="com.google.android.youtube:id/playlist_entry_point_container")
                if playlist_entry:
                    self.logger.info("Tìm thấy playlist entry point, đang bấm...")
                    self.helper.tap_element_center(playlist_entry)
                    self.safe_sleep(1)
                else:
                    self.logger.info("Không tìm thấy playlist entry point, Thử vuốt đề xuất")

                if not self._get_first_video_to_view():
                    self.logger.warning("Không tìm thấy video nào để xem")
                    self.ensure_home_screen()

            elif current_screen == "home_search":
                # Đang ở màn hình search, có thể tìm kiếm hoặc về home
                self.logger.info("Đang ở màn hình search")
                self._perform_search_from_search_screen()
            elif current_screen == "home":
                self.logger.info("Đang ở màn hình home")
                if not self._get_first_video_to_view():
                    self.logger.warning("Không tìm thấy video nào để xem")
                    self.helper.swipe_down()
                    self.safe_sleep(1)
                    self._perform_search_from_search_screen()
            
            return True
            
        except Exception as e:
            self.logger.error(f"Lỗi thực hiện random view: {e}")
            return False
    
    def _perform_search_from_search_screen(self) -> bool:
        """
        Thực hiện tìm kiếm khi đang ở màn hình search
        
        Returns:
            bool: True nếu thành công
        """
        try:
            self.logger.info("Thực hiện search từ màn hình search")
            
            # Lấy search terms từ config
            config = self.get_app_config()
            key_search_id = config.get("key_search_id", "")
            
            if key_search_id:
                # Split bằng dấu phẩy và lấy random
                search_ids = [s.strip() for s in key_search_id.split(",") if s.strip()]
                if search_ids:
                    term = random.choice(search_ids)
                else:
                    # Fallback nếu config rỗng
                    term = random.choice(["music", "tutorial", "gaming"])
            else:
                # Fallback nếu không có config
                term = random.choice(["music", "tutorial", "gaming"])
            
            self.logger.info(f"Search term: {term}")
            
            # Tìm search box với nhiều variants
            search_box = self.helper.find_element(resource_id="search_edit_text")
            if not search_box:
                search_box = self.helper.find_element(content_desc="Tìm kiếm")
            if not search_box:
                search_box = self.helper.find_element(text="Tìm trên YouTube")
            if not search_box:
                search_box = self.helper.find_element(resource_id="com.google.android.youtube:id/search_clear")
            
            if search_box:
                self.helper.tap_element_center(search_box)
                self.safe_sleep(1)
                
                # Nhập search term
                self.helper.input_text(term)
                self.safe_sleep(1)
                
                # Nhấn search
                self.helper.press_enter()
                self.safe_sleep(3)
                
                # Tìm và xem video đầu tiên của kênh đã config
                video_found = self._get_first_video_to_view()
                if video_found:
                    return True
                
                # Nếu không tìm thấy video của kênh, scroll kết quả search
                for _ in range(2):
                    self.helper.swipe_up()
                    self.safe_sleep(2)
                
                # Quay lại home
                self.helper.press_back()
                self.safe_sleep(2)
                
                return True
            else:
                self.logger.warning("Không tìm thấy search box")
                return False
                
        except Exception as e:
            self.logger.error(f"Lỗi search từ search screen: {e}")
            return False
    
    def _get_first_video_to_view(self) -> bool:
        """
        Tìm và xem video đầu tiên của kênh đã config trong kết quả search
        
        Returns:
            bool: True nếu tìm thấy và xem video thành công
        """
        try:
            # Lấy tên kênh từ config
            config = self.get_app_config()
            target_channel = config.get("name_channel", "Dũng Béo Official")
            
            self.logger.info(f"Tìm video của kênh: {target_channel}")
            max_scrolls = 15  # Giới hạn số lần scroll
            for scroll_count in range(max_scrolls):
                # Lấy XML màn hình hiện tại
                screen_xml = self.helper.dump_screen_xml()
                if not screen_xml:
                    continue

                # Kiểm tra nếu có equalizer thì vuốt lên
                equalizer_element = self.helper.find_element(resource_id="com.google.android.youtube:id/equalizer")
                if equalizer_element:
                    self.logger.info("Tìm thấy equalizer, đang vuốt lên...")
                    self.helper.swipe_up()
                    self.safe_sleep(1)
                    continue

                video_buttons = self.helper.find_elements(resource_id="com.google.android.youtube:id/channel")
                
                if not video_buttons:
                    # Tìm tất cả video buttons có thông tin kênh  
                    video_buttons = self.helper.find_elements(
                        class_name="android.widget.Button"
                    )

                for button in video_buttons:
                    button_desc = button.get("content-desc", "")
                    if not button_desc or button_desc == "null":  # Fallback nếu content-desc rỗng
                        button_desc = button.get("text", "")
                    # Kiểm tra nếu content-desc chứa tên kênh target
                    if (target_channel in button_desc and "phát video" in button_desc) or target_channel == button_desc:
                        # Lấy video title để kiểm tra lịch sử
                        # Thử tìm title từ resource-id trước
                        title_element = self.helper.get_next_element_in_xml(screen_xml, button, resource_id="com.google.android.youtube:id/title")
                        if title_element:
                            title_text = title_element.get("text", "")
                            if title_text and title_text.strip() and title_text != "null":
                                video_title = title_text.strip()
                                self.logger.info(f"Tìm thấy video title từ resource-id: {video_title}")
                            else:
                                video_title = self._extract_video_title_from_element(button)
                        else:
                            video_title = self._extract_video_title_from_element(button)
                        
                        # Kiểm tra xem video đã xem gần đây chưa
                        if video_title and not self._can_watch_video(video_title):
                            self.logger.info(f"Bỏ qua video đã xem gần đây: {video_title}")
                            continue
                        
                        self.logger.info(f"Tìm thấy video của {target_channel}: {button_desc}")
                        
                        # Click vào video
                        self.helper.tap_element_center(button)
                        self.safe_sleep(3)
                        
                        # Kiểm tra đã vào video chưa
                        current_screen = self.get_current_screen()
                        if current_screen == "view_video":
                            # Sử dụng hàm watch_video() để xem với xử lý quảng cáo và khảo sát
                            # Kiểm tra và đóng popup/dialog nếu có
                            self._handle_close_popups()

                            return self.watch_video()
                        
                        else:
                            self.logger.warning("Không vào được video, thử tiếp")
                            continue
                
                # Không tìm thấy video của kênh target, scroll xuống để tìm thêm
                if scroll_count < max_scrolls - 1:  # Không scroll ở lần cuối
                    self.logger.info(f"Scroll {scroll_count + 1}/{max_scrolls} để tìm video của {target_channel}")
                    self.helper.swipe_up()
                    self.safe_sleep(random.uniform(0.5, 1.0))
            
            self.logger.warning(f"Không tìm thấy video của kênh {target_channel} sau {max_scrolls} lần scroll")
            return False
            
        except Exception as e:
            self.logger.error(f"Lỗi tìm video đầu tiên: {e}")
            return False
    
    def watch_video(self) -> bool:
        """
        Xem video với xử lý quảng cáo và khảo sát
        
        Returns:
            bool: True nếu xem thành công
        """
        try:
            self.logger.info("Bắt đầu xem video")
            
            # Lấy thông tin video trước khi xem
            video_title = ""
            
            
            # Lấy config thời gian xem
            config = self.get_app_config()
            ad_watch_min = config.get("ad_watch_time_min", 5)
            ad_watch_max = config.get("ad_watch_time_max", 30)
            video_watch_min = config.get("video_watch_time_min", 15)
            video_watch_max = config.get("video_watch_time_max", 100)
            
            # Đợi video load
            self.safe_sleep(3)
            self._handle_close_popups()
            
            # 1. Kiểm tra và xử lý "Bỏ qua khảo sát"
            self._handle_skip_survey()
            
            # 2. Kiểm tra và xử lý quảng cáo - lặp lại đến khi hết quảng cáo, ít nhất 2 lần
            ad_handled_count = 0
            max_safety_limit = 10  # Giới hạn an toàn để tránh vô hạn
            
            while True:
                ad_found = self._handle_advertisement(ad_watch_min, ad_watch_max)
                ad_handled_count += 1
                if ad_found:
                    self.logger.info(f"Đã xử lý quảng cáo lần {ad_handled_count}")
                    # Đợi một chút trước khi kiểm tra quảng cáo tiếp theo
                    self.safe_sleep(2)
                else:
                    # Không tìm thấy quảng cáo
                    if ad_handled_count >= 2:
                        # Đã xử lý ít nhất 2 lần và không còn quảng cáo → dừng
                        self.logger.info(f"Hoàn thành xử lý {ad_handled_count} quảng cáo")
                        break
                    elif ad_handled_count == 1:
                        # Chỉ xử lý 1 lần, thử thêm 1 lần nữa
                        self.logger.info("Đã xử lý 1 quảng cáo, kiểm tra thêm lần nữa...")
                        self.safe_sleep(1)
                        continue
                    else:
                        # Không tìm thấy quảng cáo nào → dừng
                        break
                
                # Giới hạn an toàn
                if ad_handled_count >= max_safety_limit:
                    self.logger.warning(f"Đạt giới hạn an toàn {max_safety_limit} quảng cáo, dừng xử lý")
                    break
            
            if ad_handled_count > 0:
                self.logger.info(f"Tổng số quảng cáo đã xử lý: {ad_handled_count}")
            
            self._handle_close_popups()

            try:
                # Lấy video title từ XML hiện tại
                xml_string = self.helper.dump_screen_xml()
                if xml_string:
                    # Phương pháp 1: Tìm ViewGroup có text và content-desc giống nhau (đây là title chính)
                    all_elements = self.helper.find_all_elements_in_xml(xml_string, class_name="android.view.ViewGroup")
                    for element in all_elements:
                        text = element.get("text", "")
                        content_desc = element.get("content-desc", "")
                        # Title thường có text và content-desc giống nhau và dài > 15 ký tự
                        if (text and content_desc and text == content_desc and 
                            len(text) > 15 and 
                            "lượt xem" not in text and "phút" not in text and "giây" not in text and
                            "năm trước" not in text and "tháng trước" not in text):
                            video_title = text.strip()
                            self.logger.info(f"Tìm thấy video title từ ViewGroup: {video_title}")
                            break
                    
                    # Phương pháp 2: Tìm từ button chứa toàn bộ thông tin video
                    if not video_title:
                        button_elements = self.helper.find_all_elements_in_xml(xml_string, class_name="android.widget.Button")
                        for button in button_elements:
                            content_desc = button.get("content-desc", "")
                            if content_desc and "phát video" in content_desc and " - " in content_desc:
                                # Parse content-desc để lấy title (phần đầu trước dấu phẩy đầu tiên)
                                parts = content_desc.split(" - ")
                                if len(parts) >= 2:
                                    # Lấy phần đầu, bỏ phần cuối chứa metadata
                                    title_part = parts[0].strip()
                                    # Loại bỏ phần thời gian nếu có
                                    if "phút" not in title_part and "giây" not in title_part:
                                        video_title = title_part
                                        self.logger.info(f"Tìm thấy video title từ button: {video_title}")
                                        break
                    
                    # Phương pháp 3: Fallback - tìm text dài nhất có ý nghĩa
                    if not video_title:
                        all_elements = self.helper.find_all_elements_in_xml(xml_string)
                        longest_text = ""
                        for element in all_elements:
                            text = element.get("text", "")
                            if (text and len(text) > len(longest_text) and len(text) > 15 and 
                                "lượt xem" not in text and "phút" not in text and "giây" not in text and
                                "năm trước" not in text and "tháng trước" not in text and "ngày trước" not in text):
                                longest_text = text
                        if longest_text:
                            video_title = longest_text.strip()
                            self.logger.info(f"Tìm thấy video title từ text dài nhất: {video_title}")
            except Exception as e:
                self.logger.error(f"Không lấy được video title: {e}")

            # Hiển thị thông báo đang xem video
            if video_title:
                self.db.set("device_message", f"Đang xem video YouTube: {video_title}")
                self.logger.info(f"Đang xem video: {video_title}")
            else:
                self.db.set("device_message", "Đang xem video YouTube")
                self.logger.info("Đang xem video YouTube: (không lấy được title)")

            # 3. Xem video chính
            watch_time = random.randint(video_watch_min, video_watch_max)
            self.logger.info(f"Xem video trong {watch_time} giây")
            self.safe_sleep(watch_time)
            
            # 4. Lưu video vào lịch sử nếu lấy được title
            if video_title:
                self._save_video_to_history(video_title)
            else:
                self.logger.debug("Không lấy được video title để lưu vào lịch sử")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Lỗi khi xem video: {e}")
            return False
    
    def _handle_skip_survey(self) -> bool:
        """
        Xử lý bỏ qua khảo sát nếu có
        
        Returns:
            bool: True nếu tìm thấy và bỏ qua khảo sát
        """
        try:
            # Tìm button "Bỏ qua khảo sát" hoặc "Skip survey"
            skip_survey_button = self.helper.find_element(text="Bỏ qua khảo sát", contains=True)
            if not skip_survey_button:
                skip_survey_button = self.helper.find_element(text="Skip survey", contains=True)
            if not skip_survey_button:
                skip_survey_button = self.helper.find_element(content_desc="Bỏ qua khảo sát", contains=True)
            if not skip_survey_button:
                skip_survey_button = self.helper.find_element(content_desc="Skip survey", contains=True)
            
            if skip_survey_button:
                self.logger.info("Tìm thấy khảo sát, đang bỏ qua...")
                self.helper.tap_element_center(skip_survey_button)
                self.safe_sleep(2)
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Lỗi khi xử lý khảo sát: {e}")
            return False
    
    def _handle_advertisement(self, ad_watch_min: int, ad_watch_max: int) -> bool:
        """
        Xử lý quảng cáo nếu có
        
        Args:
            ad_watch_min: Thời gian xem quảng cáo tối thiểu
            ad_watch_max: Thời gian xem quảng cáo tối đa
            
        Returns:
            bool: True nếu tìm thấy và xem quảng cáo
        """
        try:
            # Kiểm tra các indicator của quảng cáo
            ad_indicators = [
                # Text indicators
                ("text", "Quảng cáo", True),
                ("text", "Advertisement", True),
                # Content-desc indicators
                ("content_desc", "Quảng cáo", True),
                ("content_desc", "Skip ad", True),
                ("content_desc", "Bỏ qua quảng cáo", True),
                # Resource-id indicators
                ("resource_id", "com.google.android.youtube:id/ad_progress_text", False),
                ("resource_id", "skip_ad_button", False),
                ("resource_id", "video_ads", False),
            ]
            
            # Tìm quảng cáo - đọc XML một lần
            ad_found = False
            xml_content = self.helper.dump_screen_xml()  # Đọc XML một lần duy nhất
            
            if xml_content:
                for indicator_type, indicator_value, use_contains in ad_indicators:
                    if indicator_type == "text":
                        element = self.helper.find_element_in_xml(xml_content, text=indicator_value, contains=use_contains)
                    elif indicator_type == "content_desc":
                        element = self.helper.find_element_in_xml(xml_content, content_desc=indicator_value, contains=use_contains)
                    elif indicator_type == "resource_id":
                        element = self.helper.find_element_in_xml(xml_content, resource_id=indicator_value, contains=use_contains)
                    else:
                        continue
                    
                    if element:
                        ad_found = True
                        break
            
            if ad_found:
                # Xem quảng cáo trong thời gian random
                ad_watch_time = random.randint(ad_watch_min, ad_watch_max)
                self.logger.info(f"Tìm thấy quảng cáo, xem trong {ad_watch_time} giây")
                self.safe_sleep(ad_watch_time)
                
                # Thử tìm và bấm "Skip ad" nếu có
                self._try_skip_ad()
                
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Lỗi khi xử lý quảng cáo: {e}")
            return False
    
    def _try_skip_ad(self) -> bool:
        """
        Thử bỏ qua quảng cáo nếu có button skip
        
        Returns:
            bool: True nếu tìm thấy và bấm skip
        """
        try:
            # Tìm button skip ad
            skip_buttons = [
                ("text", "Skip", True),
                ("text", "Skip ad", True),
                ("text", "Skip ads", True),
                ("text", "Bỏ qua", True),
                ("text", "Bỏ qua quảng cáo", True),
                ("content_desc", "Skip", True),
                ("content_desc", "Skip ad", True),
                ("content_desc", "Bỏ qua", True),
                ("resource_id", "skip_ad_button", False),
                ("resource_id", "skip_button", False),
            ]
            
            for button_type, button_value, use_contains in skip_buttons:
                if button_type == "text":
                    skip_button = self.helper.find_element(text=button_value, contains=use_contains)
                elif button_type == "content_desc":
                    skip_button = self.helper.find_element(content_desc=button_value, contains=use_contains)
                elif button_type == "resource_id":
                    skip_button = self.helper.find_element(resource_id=button_value, contains=use_contains)
                else:
                    continue
                
                if skip_button:
                    self.logger.info("Bỏ qua quảng cáo")
                    self.helper.tap_element_center(skip_button)
                    self.safe_sleep(2)
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"Lỗi khi bỏ qua quảng cáo: {e}")
            return False
    
    def _handle_close_popups(self) -> bool:
        """
        Xử lý đóng các popup/dialog nếu có
        
        Returns:
            bool: True nếu tìm thấy và đóng popup
        """
        try:
            # Đọc XML một lần duy nhất
            screen_xml = self.helper.dump_screen_xml()
            if not screen_xml:
                return False
            
            # Tìm button "Đóng" từ XML đã đọc
            close_buttons = [
                ("content_desc", "Đóng", False),
                ("content_desc", "Close", False),
                ("text", "Đóng", False),
                ("text", "Close", False),
                ("text", "×", False),
                ("content_desc", "Dismiss", False),
                ("resource_id", "com.google.android.youtube:id/modern_miniplayer_close", False),
                ("resource_id", "com.google.android.youtube:id/close_button", False),
            ]
            
            popup_closed = False
            for button_type, button_value, use_contains in close_buttons:
                if button_type == "text":
                    close_button = self.helper.find_element_in_xml(screen_xml, text=button_value, contains=use_contains)
                elif button_type == "content_desc":
                    close_button = self.helper.find_element_in_xml(screen_xml, content_desc=button_value, contains=use_contains)
                elif button_type == "resource_id":
                    close_button = self.helper.find_element_in_xml(screen_xml, resource_id=button_value, contains=use_contains)
                else:
                    continue
                
                if close_button:
                    self.logger.info(f"Tìm thấy popup với {button_type}='{button_value}', đang đóng...")
                    self.helper.tap_element_center(close_button)
                    self.safe_sleep(1)
                    popup_closed = True
                    break
            
            return popup_closed
            
        except Exception as e:
            self.logger.error(f"Lỗi khi đóng popup: {e}")
            return False
    
    # ===== VIDEO HISTORY MANAGEMENT =====
    
    def _save_video_to_history(self, video_title: str) -> None:
        """
        Lưu video vào lịch sử đã xem trong jobs_history table
        
        Args:
            video_title: Tên video
        """
        try:
            if not video_title or video_title.strip() == "":
                return
                
            # Lấy account "no.account" cho YouTube
            account = self.db.get_account_by_unique_username(self.app_name, "no.account")
            if not account:
                self.logger.warning("Không tìm thấy account no.account cho YouTube")
                return
            
            # Tạo job data cho video history
            job_data = {
                "account_uuid": account["account_uuid"],
                "app": self.app_name,
                "job_type": "view",
                "object_id": video_title,  # Lưu video title vào object_id
                "link": "",
                "status": 1,  # Success
                "success": True,
                "price": 0,
                "error_message": ""
            }
            
            # Lưu vào jobs_history
            job_uuid = self.db.add_job_history(job_data)
            if job_uuid:
                self.logger.info(f"Đã lưu video vào lịch sử: {video_title}")
            else:
                self.logger.warning(f"Không thể lưu video vào lịch sử: {video_title}")
            
        except Exception as e:
            self.logger.error(f"Lỗi lưu video history: {e}")
    
    def _can_watch_video(self, video_title: str) -> bool:
        """
        Kiểm tra xem có thể xem video không (query trực tiếp database)
        
        Args:
            video_title: Tên video
            
        Returns:
            bool: True nếu có thể xem
        """
        try:
            if not video_title or video_title.strip() == "":
                return True
            
            # Lấy account "no.account" cho YouTube
            account = self.db.get_account_by_unique_username(self.app_name, "no.account")
            if not account:
                return True  # Không có account thì cho phép xem
                
            config = self.get_app_config()
            cooldown_minutes = config.get("video_rewatch_cooldown_minutes", 240)
            current_time = int(time.time())
            cooldown_seconds = cooldown_minutes * 60
            cutoff_time = current_time - cooldown_seconds
            
            # Query trực tiếp database để kiểm tra video đã xem gần đây chưa
            conn = self.db._get_connection()
            cursor = conn.cursor()
            
            query = """
                SELECT created_at FROM jobs_history 
                WHERE account_uuid = ? 
                AND job_type = 'view' 
                AND object_id = ? 
                AND created_at > ?
                ORDER BY created_at DESC 
                LIMIT 1
            """
            
            cursor.execute(query, (account["account_uuid"], video_title, cutoff_time))
            result = cursor.fetchone()
            
            if result:
                # Video đã xem trong thời gian cooldown
                last_watched = result[0]
                time_diff = current_time - last_watched
                remaining_hours = (cooldown_seconds - time_diff) / 3600
                self.logger.info(f"Video '{video_title}' đã xem gần đây, còn {remaining_hours:.1f}h để xem lại")
                return False
            else:
                # Video chưa xem hoặc đã đủ thời gian cooldown
                self.logger.info(f"Video '{video_title}' có thể xem")
                return True
            
        except Exception as e:
            self.logger.error(f"Lỗi kiểm tra can watch video: {e}")
            return True  # Default cho phép xem
    
    def _extract_video_title_from_element(self, element: Dict[str, Any]) -> str:
        """
        Trích xuất tên video từ element và làm sạch tiêu đề
        
        Args:
            element: Element chứa thông tin video
            
        Returns:
            str: Tên video đã làm sạch hoặc chuỗi rỗng
        """
        def clean_title(title: str) -> str:
            """Làm sạch video title, loại bỏ các thông tin thừa"""
            if not title:
                return ""
            
            # Loại bỏ phần thời gian ở cuối như "- 2 phút", "- 1 giờ", "- 30 giây"
            title = re.sub(r'\s*[-–]\s*\d+\s*(phút|giây|giờ|tiếng)\s*$', '', title, flags=re.IGNORECASE)
            
            # Loại bỏ phần thời gian format khác như "(2:30)", "[3:45]"
            title = re.sub(r'\s*[\[\(]\s*\d+:\d+\s*[\]\)]\s*$', '', title)
            
            # Loại bỏ thông tin lượt xem ở cuối như "- 1M views", "- 100K lượt xem"
            title = re.sub(r'\s*[-–]\s*\d+[KMB]?\s*(views?|lượt xem)\s*$', '', title, flags=re.IGNORECASE)
            
            # Loại bỏ khoảng trắng thừa và trả về
            return title.strip()
        
        try:
            # Thử lấy từ text trước
            text = element.get("text", "")
            if text and text != "null" and len(text) > 5:
                # Bỏ qua những text không phải tên video
                if any(keyword in text.lower() for keyword in ["lượt xem", "phút", "giây", "năm trước", "tháng trước", "ngày trước", "giờ trước"]):
                    pass  # Không phải title
                else:
                    return clean_title(text.strip())
            
            # Thử lấy từ content-desc
            content_desc = element.get("content-desc", "")
            if content_desc and content_desc != "null":
                # Xử lý content-desc có format: "Tên video, Tên kênh, X lượt xem, Y thời gian, phát video"
                if "phát video" in content_desc:
                    parts = content_desc.split(", ")
                    if len(parts) > 0:
                        video_title = parts[0].strip()
                        if video_title and len(video_title) > 5:
                            return clean_title(video_title)
                
                # Hoặc content-desc chỉ chứa thông tin video
                if "lượt xem" in content_desc:
                    # Tìm phần trước "lượt xem" có thể là title
                    parts = content_desc.split("lượt xem")[0].strip()
                    # Loại bỏ phần cuối có thể là số
                    title_parts = parts.split()
                    if len(title_parts) > 3:  # Đảm bảo có đủ từ để là title
                        # Bỏ 1-2 từ cuối có thể là số lượt xem
                        potential_title = " ".join(title_parts[:-2]).strip()
                        if len(potential_title) > 10:
                            return clean_title(potential_title)
                
                # Fallback: nếu content-desc dài và có ý nghĩa
                if len(content_desc) > 10 and not any(keyword in content_desc.lower() for keyword in ["button", "image", "view"]):
                    return clean_title(content_desc.strip())
            
            return ""
            
        except Exception as e:
            self.logger.error(f"Lỗi extract video title: {e}")
            return ""
    
    # ===== GOLIKE INTEGRATION (YOUTUBE KHÔNG SUPPORT) =====
    
    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        YouTube không hỗ trợ GoLike
        """
        self.logger.info("YouTube không hỗ trợ GoLike integration")
        return []
    
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """YouTube không hỗ trợ job params"""
        return {}
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        YouTube không thực hiện jobs từ GoLike
        """
        return self._create_job_result(0, "YouTube không hỗ trợ jobs", False)
').decode('utf-8'))
