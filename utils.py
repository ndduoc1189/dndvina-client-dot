import base64
exec(base64.b64decode('import time
import requests
from typing import Dict, Any, Optional, Tuple, Dict, List
import config
import os
import datetime
import sys
import traceback
import json
import logging
import logging.handlers
import subprocess
from enum import Enum

# Theo dõi tất cả các logger đã tạo
all_loggers: Dict[str, 'Logger'] = {}

# Biến toàn cục để lưu trạng thái
helper_available = False
network_available = False

# Định nghĩa các level log
class LogLevel(Enum):
    DEBUG = logging.DEBUG
    INFO = logging.INFO
    WARNING = logging.WARNING
    ERROR = logging.ERROR
    CRITICAL = logging.CRITICAL

# Cấu hình logger với RotatingFileHandler để giới hạn kích thước file
# Tạo RotatingFileHandler - giới hạn khoảng 2000 dòng (ước tính ~200KB)
# Sử dụng đường dẫn tuyệt đối để tránh vấn đề working directory
import config
log_file_path = os.path.join(config.BASE_DIR, 'app.log')
rotating_handler = logging.handlers.RotatingFileHandler(
    log_file_path, 
    maxBytes=200*1024,  # 200KB per file (khoảng 2000 dòng)
    backupCount=0,      # Không giữ file backup, chỉ xóa phần thừa
    encoding='utf-8'
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%d/%m %H:%M:%S',
    handlers=[
        logging.StreamHandler(),
        rotating_handler
    ]
)

class Logger:
    def __init__(self, name):
        self.logger = logging.getLogger(name)
        # Đảm bảo logger không propagate để tránh duplicate logs
        # và sử dụng handlers từ basicConfig
        if not self.logger.handlers:
            # Logger sẽ sử dụng handlers từ root logger thông qua propagation
            self.logger.propagate = True
        
    def debug(self, message):
        self.logger.debug(message)
        
    def info(self, message):
        self.logger.info(message)
        
    def warning(self, message):
        self.logger.warning(message)
        
    def error(self, message):
        self.logger.error(message)
        
    def critical(self, message):
        self.logger.critical(message)
        
    def exception(self, e, message="Exception occurred"):
        self.logger.exception(f"{message}: {str(e)}")

# Tạo logger mặc định cho module utils
logger = Logger("Utils")

def set_all_loggers_level(level: int):
    """
    Cài đặt cấp độ log cho tất cả các logger đã tạo
    
    Args:
        level: Cấp độ log tối thiểu (LogLevel.DEBUG, LogLevel.INFO, LogLevel.ERROR)
    """
    for logger_name, logger_instance in all_loggers.items():
        logger_instance.set_level(level)
        
def setup_default_logging(production: bool = False, log_to_file: bool = False):
    """
    Thiết lập cấu hình log mặc định cho ứng dụng
    
    Args:
        production: True nếu đang chạy trong môi trường production (chỉ log từ INFO trở lên)
        log_to_file: True để ghi log ra file
    """
    level = LogLevel.INFO if production else LogLevel.DEBUG
    
    # Đặt level cho tất cả các logger hiện có
    set_all_loggers_level(level)
    
    # Đặt log_to_file cho logger hiện có
    if log_to_file:
        for logger_name, logger_instance in all_loggers.items():
            # Tạo file log mới nếu chưa có
            if not logger_instance.log_to_file:
                logger_instance.log_to_file = True
                
                # Tạo thư mục log nếu cần
                if not os.path.exists(logger_instance.log_dir):
                    os.makedirs(logger_instance.log_dir)
                
                # Tạo tên file log với ngày tháng
                today = datetime.datetime.now().strftime("%Y-%m-%d")
                log_filename = f"{logger_name}_{today}.log"
                logger_instance.log_file = os.path.join(logger_instance.log_dir, log_filename)

def get_logger(name: str, level: int = LogLevel.DEBUG, log_to_file: bool = False) -> Logger:
    """
    Tạo và trả về một logger với cấu hình chỉ định
    
    Args:
        name: Tên của logger/module
        level: Cấp độ log tối thiểu
        log_to_file: True để ghi log ra file
    
    Returns:
        Logger: Đối tượng logger đã cấu hình
    """
    # Kiểm tra xem logger đã tồn tại chưa
    if name in all_loggers:
        return all_loggers[name]
        
    # Tạo logger mới
    return Logger(name)

def check_helper_service(helper_service):
    """
    Kiểm tra HelperService có hoạt động không
    
    Returns:
        Tuple[bool, Any]: (True/False, response data nếu có)
    """
    global helper_available
    
    try:
        # Kiểm tra bằng cách gọi get_device_info
        response = helper_service.get_device_info()
        
        if response["status"] == "success":
            logger.info("HelperService đang hoạt động")
            helper_available = True
            
            # Trả về thông tin thiết bị để có thể lưu vào DB
            if "data" in response:
                return True, response
            return True, None
        else:
            logger.error(f"HelperService trả về lỗi: {response.get('message', 'Không rõ lỗi')}")
            helper_available = False
            return False, None
            
    except Exception as e:
        logger.error(f"Lỗi khi kiểm tra HelperService: {e}")
        helper_available = False
        return False, None

def check_network_connection():
    """
    Kiểm tra kết nối mạng và cloud server
    
    Returns:
        Tuple[bool, Any]: (True/False, response data nếu có)
    """
    global network_available
    
    try:
        # Kiểm tra kết nối đến cloud URL (không thêm /ping nữa)
        response = requests.get(config.CLOUD_URL, timeout=5)
        
        if response.status_code == 200:
            logger.info("Kết nối mạng ổn định")
            network_available = True
            return True, response.json() if response.headers.get('content-type') == 'application/json' else None
        else:
            logger.error(f"Không thể kết nối đến cloud server: {response.status_code}")
            network_available = False
            return False, None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"Lỗi kết nối mạng: {e}")
        network_available = False
        return False, None

def is_helper_available() -> bool:
    """Trả về trạng thái hiện tại của helper service"""
    return helper_available

def is_network_available() -> bool:
    """Trả về trạng thái hiện tại của kết nối mạng"""
    return network_available

def retry_until_success(func, max_retries: int, delay: int, *args, **kwargs) -> Tuple[bool, Optional[Any]]:
    """
    Thử thực hiện một hàm nhiều lần cho đến khi thành công
    
    Args:
        func: Hàm cần thực hiện
        max_retries: Số lần thử tối đa
        delay: Thời gian chờ giữa các lần thử (giây)
        *args, **kwargs: Tham số cho hàm cần thực hiện
        
    Returns:
        Tuple[bool, Any]: (Thành công hay không, Kết quả trả về nếu có)
    """
    retry_count = 0
    success = False
    result = None
    
    while retry_count < max_retries and not success:
        success, result = func(*args, **kwargs)
        if success:
            return True, result
            
        retry_count += 1
        if retry_count < max_retries:
            logger.debug(f"Thử lại sau {delay} giây... (còn {max_retries - retry_count} lần)")
            time.sleep(delay)
    
    return False, None 

def get_device_id_from_system() -> str:
    """
    Lấy device_id từ hệ thống bằng lệnh getprop ro.serialno (dành cho Android/Termux)
    Trên Windows sẽ trả về empty string một cách im lặng.
    
    Returns:
        str: Device ID hoặc chuỗi rỗng nếu không lấy được
    """
    try:
        import subprocess
        import platform
        
        # Nếu đang chạy trên Windows, chấp nhận lỗi im lặng
        if platform.system() == "Windows":
            logger.debug("Đang chạy trên Windows, bỏ qua lệnh getprop (dành cho Android/Termux)")
            return ""
        
        # Trên Android/Termux, thực hiện lệnh getprop ro.serialno
        result = subprocess.run(
            ["getprop", "ro.serialno"],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Lấy kết quả và loại bỏ khoảng trắng thừa
        device_id = result.stdout.strip()
        
        if device_id:
            logger.info(f"Đã lấy được device_id từ hệ thống: {device_id}")
            return device_id
        else:
            logger.warning("Không lấy được device_id từ hệ thống")
            return ""
    except Exception as e:
        # Im lặng trên Windows, chỉ log debug
        try:
            import platform
            if platform.system() == "Windows":
                logger.debug(f"Lỗi getprop trên Windows (bình thường): {str(e)}")
            else:
                logger.error(f"Lỗi khi lấy device_id từ hệ thống: {str(e)}")
        except:
            logger.debug(f"Lỗi khi lấy device_id: {str(e)}")
        return "" 

# Hàm kiểm tra kết nối mạng
def check_network_connection() -> Tuple[bool, str]:
    """
    Kiểm tra kết nối mạng bằng cách ping google.com
    
    Returns:
        Tuple[bool, str]: (True, "Success") nếu thành công, (False, error_message) nếu thất bại
    """
    try:
        response = requests.get("https://www.google.com", timeout=5)
        if response.status_code == 200:
            return True, "Success"
        else:
            return False, f"HTTP error: {response.status_code}"
    except requests.RequestException as e:
        return False, f"Network error: {str(e)}"

# Hàm kiểm tra HelperService
def check_helper_service(helper) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    Kiểm tra kết nối đến HelperService
    
    Args:
        helper: HelperService instance
        
    Returns:
        Tuple[bool, Optional[Dict]]: (True, response_data) nếu thành công, (False, None) nếu thất bại
    """
    try:
        # Gọi API kiểm tra
        response = helper.get_device_info()
        
        # Kiểm tra kết quả
        if response and "status" in response and response["status"] == "success":
            return True, response
        else:
            return False, None
    except Exception:
        return False, None

# Hàm kết nối ADB
def connect_adb(host: str, port: int) -> bool:
    """
    Kết nối đến thiết bị Android qua ADB
    
    Args:
        host: Địa chỉ IP của thiết bị
        port: Port ADB (thường là 5555)
        
    Returns:
        bool: True nếu kết nối thành công, False nếu thất bại
    """
    logger = get_logger("ADB")
    
    try:
        # Kiểm tra ADB đã được cài đặt chưa
        try:
            subprocess.run(["adb", "version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except (subprocess.SubprocessError, FileNotFoundError):
            logger.error("ADB không được cài đặt hoặc không có trong PATH")
            return False
            
        # Khởi động ADB server nếu chưa chạy
        subprocess.run(["adb", "start-server"], check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Kết nối đến thiết bị
        connect_cmd = ["adb", "connect", f"{host}:{port}"]
        result = subprocess.run(connect_cmd, check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Kiểm tra kết quả
        output = result.stdout
        if "connected" in output.lower() and "unable" not in output.lower():
            logger.info(f"Đã kết nối thành công đến {host}:{port}")
            return True
        else:
            logger.error(f"Không thể kết nối đến {host}:{port}: {output}")
            return False
            
    except Exception as e:
        logger.exception(e, f"Lỗi khi kết nối ADB đến {host}:{port}")
        return False 

def read_user_id_from_key_file() -> Optional[str]:
    """
    Đọc user_id từ file .dndvinakey trong thư mục cha của project
    
    Returns:
        Optional[str]: user_id đã trim hoặc None nếu không đọc được
    """
    try:
        # Tạo đường dẫn tới file .dndvinakey (thư mục cha của project)
        parent_dir = os.path.dirname(config.BASE_DIR)
        key_file_path = os.path.join(parent_dir, '.dndvinakey')
        
        # Kiểm tra file có tồn tại không
        if not os.path.exists(key_file_path):
            logger = get_logger("UserIdReader")
            logger.error(f"File .dndvinakey không tồn tại tại: {key_file_path}")
            logger.error("Chương trình sẽ dừng vì không có file key!")
            return None
        
        # Đọc nội dung file
        with open(key_file_path, 'r', encoding='utf-8') as f:
            user_id = f.read().strip()
        
        # Kiểm tra user_id không rỗng
        if not user_id:
            logger = get_logger("UserIdReader")
            logger.error("File .dndvinakey rỗng hoặc chỉ chứa khoảng trắng")
            logger.error("Chương trình sẽ dừng vì file key không hợp lệ!")
            return None
        
        logger = get_logger("UserIdReader")
        logger.info(f"Đã đọc user_id thành công: {user_id}")
        return user_id
        
    except Exception as e:
        logger = get_logger("UserIdReader")
        logger.error(f"Lỗi khi đọc file .dndvinakey: {e}")
        logger.error("Chương trình sẽ dừng vì không thể đọc file key!")
        return None').decode('utf-8'))
