import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCB0aHJlYWRpbmcKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgT3B0aW9uYWwKaW1wb3J0IHV0aWxzCgojIFThuqFvIGxvZ2dlciByacOqbmcgY2hvIFByb3h5U2VydmljZQpsb2dnZXIgPSB1dGlscy5nZXRfbG9nZ2VyKCJQcm94eVNlcnZpY2UiKQoKY2xhc3MgUHJveHlTZXJ2aWNlOgogICAgIiIiCiAgICBTZXJ2aWNlIHF14bqjbiBsw70gcHJveHkgdsOgIHTGsMahbmcgdMOhYyB24bubaSBwcm94eSBzZXJ2ZXIKICAgICIiIgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UpOgogICAgICAgICIiIgogICAgICAgIEto4bufaSB04bqhbyBQcm94eVNlcnZpY2UKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBkYl9zZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UgxJHhu4MgbMawdSB0cuG7ryBk4buvIGxp4buHdQogICAgICAgICAgICBoZWxwZXJfc2VydmljZTogSGVscGVyU2VydmljZSDEkeG7gyB0xrDGoW5nIHTDoWMgduG7m2kgdGhp4bq/dCBi4buLCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5kYiA9IGRiX3NlcnZpY2UKICAgICAgICBzZWxmLmhlbHBlciA9IGhlbHBlcl9zZXJ2aWNlCiAgICAgICAgCiAgICAgICAgIyBUcuG6oW5nIHRow6FpIHByb3h5IGhp4buHbiB04bqhaQogICAgICAgIHNlbGYuY3VycmVudF9wcm94eV9pZCA9IE5vbmUKICAgICAgICBzZWxmLmN1cnJlbnRfcHJveHlfbmFtZSA9IE5vbmUKICAgICAgICBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGUgPSBOb25lICAjIFRhYmxlIG5hbWUgxJHGsOG7o2MgY+G6pXAgdOG7qyBwcm94eSBzZXJ2ZXIKICAgICAgICBzZWxmLnByb3h5X2xhc3RfdXBkYXRlID0gMCAgIyBUaOG7nWkgZ2lhbiB1cGRhdGUgY3Xhu5FpIGPDuW5nCiAgICAgICAgCiAgICAgICAgIyDEkOG6v20gc+G7kSBs4bqnbiB0aOG6pXQgYuG6oWkga2hpIHNldHVwIHByb3h5CiAgICAgICAgc2VsZi5wcm94eV9zZXR1cF9mYWlsX2NvdW50ID0gMAogICAgICAgIAogICAgICAgICMgVGhyZWFkIHVwZGF0ZSDEkeG7i25oIGvhu7MKICAgICAgICBzZWxmLnVwZGF0ZV90aHJlYWQgPSBOb25lCiAgICAgICAgc2VsZi51cGRhdGVfdGhyZWFkX3J1bm5pbmcgPSBGYWxzZQogICAgICAgIHNlbGYudXBkYXRlX2ludGVydmFsID0gMjAgICMgQ+G6rXAgbmjhuq10IG3hu5dpIDIwIGdpw6J5CiAgICAgICAgCiAgICAgICAgIyBYw7NhIHByb3h5IHRhYmxlIG5hbWUgY8WpIGto4buPaSBkZXZpY2UgY29uZmlnIGtoaSBraOG7n2kgdOG6oW8KICAgICAgICBzZWxmLmRiLnNldF9kZXZpY2VfY29uZmlnKCJwcm94eV90YWJsZV9uYW1lIiwgTm9uZSkKICAgIAogICAgZGVmIF9zdGFydF91cGRhdGVfdGhyZWFkKHNlbGYpOgogICAgICAgICIiIkLhuq90IMSR4bqndSB0aHJlYWQgdXBkYXRlIMSR4buLbmgga+G7syIiIgogICAgICAgIGlmIHNlbGYudXBkYXRlX3RocmVhZCBhbmQgc2VsZi51cGRhdGVfdGhyZWFkLmlzX2FsaXZlKCk6CiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiVGhyZWFkIHVwZGF0ZSBwcm94eSDEkcOjIMSRYW5nIGNo4bqheSIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICBzZWxmLnVwZGF0ZV90aHJlYWRfcnVubmluZyA9IFRydWUKICAgICAgICBzZWxmLnVwZGF0ZV90aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLl91cGRhdGVfd29ya2VyLCBkYWVtb249VHJ1ZSkKICAgICAgICBzZWxmLnVwZGF0ZV90aHJlYWQuc3RhcnQoKQogICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyBi4bqvdCDEkeG6p3UgdGhyZWFkIHVwZGF0ZSBwcm94eSAoaW50ZXJ2YWw6IHtzZWxmLnVwZGF0ZV9pbnRlcnZhbH1zKSIpCiAgICAgICAgCiAgICBkZWYgX3N0b3BfdXBkYXRlX3RocmVhZChzZWxmKToKICAgICAgICAiIiJE4burbmcgdGhyZWFkIHVwZGF0ZSDEkeG7i25oIGvhu7MiIiIKICAgICAgICBzZWxmLnVwZGF0ZV90aHJlYWRfcnVubmluZyA9IEZhbHNlCiAgICAgICAgaWYgc2VsZi51cGRhdGVfdGhyZWFkIGFuZCBzZWxmLnVwZGF0ZV90aHJlYWQuaXNfYWxpdmUoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQYW5nIGThu6tuZyB0aHJlYWQgdXBkYXRlIHByb3h5Li4uIikKICAgICAgICAgICAgc2VsZi51cGRhdGVfdGhyZWFkLmpvaW4odGltZW91dD01KQogICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBk4burbmcgdGhyZWFkIHVwZGF0ZSBwcm94eSIpCiAgICAgICAgICAgIAogICAgZGVmIF91cGRhdGVfd29ya2VyKHNlbGYpOgogICAgICAgICIiIldvcmtlciBmdW5jdGlvbiBjaG8gdGhyZWFkIHVwZGF0ZSDEkeG7i25oIGvhu7MiIiIKICAgICAgICBsb2dnZXIuaW5mbygiVGhyZWFkIHVwZGF0ZSBwcm94eSDEkcOjIGLhuq90IMSR4bqndSIpCiAgICAgICAgCiAgICAgICAgd2hpbGUgc2VsZi51cGRhdGVfdGhyZWFkX3J1bm5pbmc6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgQ2jhu4kgdXBkYXRlIGtoaSBwcm94eSDEkWFuZyBhY3RpdmUKICAgICAgICAgICAgICAgIGlmIHNlbGYuaXNfcHJveHlfYWN0aXZlKCk6CiAgICAgICAgICAgICAgICAgICAgY3VycmVudF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgICAgICAgICBpZiBjdXJyZW50X3RpbWUgLSBzZWxmLnByb3h5X2xhc3RfdXBkYXRlID49IHNlbGYudXBkYXRlX2ludGVydmFsOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnVwZGF0ZV9wcm94eSgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCJUaHJlYWQgYXV0by11cGRhdGUgcHJveHkgdGltZXN0YW1wIHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiVGhyZWFkIGF1dG8tdXBkYXRlIHByb3h5IHRpbWVzdGFtcCB0aOG6pXQgYuG6oWkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFNsZWVwIHbhu5tpIGtp4buDbSB0cmEgxJFp4buBdSBraeG7h24gZOG7q25nCiAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZShzZWxmLnVwZGF0ZV9pbnRlcnZhbCk6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlbGYudXBkYXRlX3RocmVhZF9ydW5uaW5nOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHRyb25nIHRocmVhZCB1cGRhdGUgcHJveHk6IHtlfSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDUpICAjIFNsZWVwIG5n4bqvbiBraGkgY8OzIGzhu5dpCiAgICAgICAgICAgICAgICAKICAgICAgICBsb2dnZXIuaW5mbygiVGhyZWFkIHVwZGF0ZSBwcm94eSDEkcOjIGThu6tuZyIpCiAgICAKICAgIGRlZiBfcHJveHlfYXBpX2NhbGwoc2VsZiwgZW5kcG9pbnQ6IHN0ciwgZGF0YTogRGljdFtzdHIsIEFueV0pIC0+IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICBH4buNaSBBUEkgcHJveHkgc2VydmVyCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgZW5kcG9pbnQ6IEVuZHBvaW50IEFQSSAocmVnaXN0ZXIsIHVwZGF0ZSwgdW5yZWdpc3RlciwgcmVzZXQtaXApCiAgICAgICAgICAgIGRhdGE6IEThu68gbGnhu4d1IGfhu61pCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3QgcmVzcG9uc2UgaG/hurdjIE5vbmUgbuG6v3UgbOG7l2kKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHByb3h5X3NlcnZlciA9IHNlbGYuZGIuZ2V0KCJwcm94eV9zZXJ2ZXIiLCAiaHR0cDovLzEwLjAuMC41OjkwMzIiKQogICAgICAgICAgICB1cmwgPSBmIntwcm94eV9zZXJ2ZXJ9L3tlbmRwb2ludH0iCiAgICAgICAgICAgIAogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCBqc29uPWRhdGEsIHRpbWVvdXQ9MTApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJQcm94eSBBUEkge2VuZHBvaW50fSBmYWlsZWQgd2l0aCBzdGF0dXMge3Jlc3BvbnNlLnN0YXR1c19jb2RlfToge3Jlc3BvbnNlLnRleHR9IikKICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4buNaSBQcm94eSBBUEkge2VuZHBvaW50fToge2V9IikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgZGVmIHJlZ2lzdGVyX3Byb3h5KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgxJDEg25nIGvDvSB24bubaSBwcm94eSBzZXJ2ZXIgxJHhu4MgxJHGsOG7o2MgY+G6pXAgcGjDoXQgdGFibGUKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IMSRxrDhu6NjIGPhuqVwIHRhYmxlIGhv4bq3YyDEkcOjIGPDsyB0YWJsZSwgRmFsc2UgbuG6v3UgdsOgbyBxdWV1ZSBob+G6t2MgbOG7l2kKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgbG9jYWwgSVAgdOG7qyBoZWxwZXIgc2VydmljZQogICAgICAgICAgICBsb2NhbF9pcCA9IHNlbGYuaGVscGVyLmdldF9sb2NhbF9pcCgpCiAgICAgICAgICAgIGlmIG5vdCBsb2NhbF9pcDoKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGzhuqV5IGxvY2FsIElQLCBi4buPIHF1YSDEkcSDbmcga8O9IHByb3h5IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgZGF0YSA9IHsibG9jYWxfaXAiOiBsb2NhbF9pcH0KICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9wcm94eV9hcGlfY2FsbCgicmVnaXN0ZXIiLCBkYXRhKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHJlc3BvbnNlOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UuZ2V0KCJzdGF0dXMiKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgc3RhdHVzID09ICJzdWNjZXNzIjoKICAgICAgICAgICAgICAgICMgxJDGsOG7o2MgY+G6pXAgdGFibGUgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICB0YWJsZV9uYW1lID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwge30pLmdldCgidGFibGVfbmFtZSIpCiAgICAgICAgICAgICAgICBhY3Rpb24gPSByZXNwb25zZS5nZXQoImRhdGEiLCB7fSkuZ2V0KCJhY3Rpb24iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGUgPSB0YWJsZV9uYW1lCiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRfcHJveHlfbmFtZSA9IGYie3RhYmxlX25hbWV9IgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEzGsHUgcHJveHkgdGFibGUgbmFtZSB2w6BvIGRldmljZSBjb25maWcgxJHhu4MgZ+G7rWkgbMOqbiBzZXJ2ZXIKICAgICAgICAgICAgICAgIHNlbGYuZGIuc2V0X2RldmljZV9jb25maWcoInByb3h5X3RhYmxlX25hbWUiLCB0YWJsZV9uYW1lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlByb3h5IMSRw6MgxJHGsOG7o2MgY+G6pXAgdGFibGU6IHt0YWJsZV9uYW1lfSAoYWN0aW9uOiB7YWN0aW9ufSkiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIELhuq90IMSR4bqndSB0aHJlYWQgdXBkYXRlIMSR4buLbmgga+G7swogICAgICAgICAgICAgICAgc2VsZi5fc3RhcnRfdXBkYXRlX3RocmVhZCgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxpZiBzdGF0dXMgPT0gInF1ZXVlZCI6CiAgICAgICAgICAgICAgICAjIFbDoG8gcXVldWUgY2jhu50KICAgICAgICAgICAgICAgIHF1ZXVlX3Bvc2l0aW9uID0gcmVzcG9uc2UuZ2V0KCJkYXRhIiwge30pLmdldCgicXVldWVfcG9zaXRpb24iLCAwKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJQcm94eSBzZXJ2ZXIgZnVsbCwgdsOgbyBow6BuZyDEkeG7o2kgduG7iyB0csOtIHtxdWV1ZV9wb3NpdGlvbn0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIlByb3h5IHJlZ2lzdGVyIHRo4bqldCBi4bqhaToge3Jlc3BvbnNlLmdldCgnbWVzc2FnZScsICdVbmtub3duIGVycm9yJyl9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgxJHEg25nIGvDvSBwcm94eSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgdXBkYXRlX3Byb3h5KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IHRpbWVzdGFtcCBz4butIGThu6VuZyBwcm94eQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdXBkYXRlIHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBsb2NhbCBJUCB04burIGhlbHBlciBzZXJ2aWNlCiAgICAgICAgICAgIGxvY2FsX2lwID0gc2VsZi5oZWxwZXIuZ2V0X2xvY2FsX2lwKCkKICAgICAgICAgICAgaWYgbm90IGxvY2FsX2lwOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyBs4bqleSBsb2NhbCBJUCwgYuG7jyBxdWEgdXBkYXRlIHByb3h5IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgZGF0YSA9IHsibG9jYWxfaXAiOiBsb2NhbF9pcH0KICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9wcm94eV9hcGlfY2FsbCgidXBkYXRlIiwgZGF0YSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCByZXNwb25zZS5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIjoKICAgICAgICAgICAgICAgIHNlbGYucHJveHlfbGFzdF91cGRhdGUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICAgICAgIyBMb2cgdGjDtG5nIHRpbiB04burIHJlc3BvbnNlIG7hur91IGPDswogICAgICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmdldCgiZGF0YSIsIHt9KQogICAgICAgICAgICAgICAgdGFibGVfbmFtZSA9IGRhdGEuZ2V0KCJ0YWJsZV9uYW1lIiwgInVua25vd24iKQogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiUHJveHkgdXBkYXRlIHRow6BuaCBjw7RuZyBjaG8gdGFibGU6IHt0YWJsZV9uYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJQcm94eSB1cGRhdGUgdGjhuqV0IGLhuqFpOiB7cmVzcG9uc2UuZ2V0KCdtZXNzYWdlJykgaWYgcmVzcG9uc2UgZWxzZSAnTm8gcmVzcG9uc2UnfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgdXBkYXRlIHByb3h5OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIHVucmVnaXN0ZXJfcHJveHkoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBI4buneSDEkcSDbmcga8O9IHbDoCBnaeG6o2kgcGjDs25nIHRhYmxlCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB1bnJlZ2lzdGVyIHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBsb2NhbCBJUCB04burIGhlbHBlciBzZXJ2aWNlCiAgICAgICAgICAgIGxvY2FsX2lwID0gc2VsZi5oZWxwZXIuZ2V0X2xvY2FsX2lwKCkKICAgICAgICAgICAgaWYgbm90IGxvY2FsX2lwOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIktow7RuZyB0aOG7gyBs4bqleSBsb2NhbCBJUCwgYuG7jyBxdWEgdW5yZWdpc3RlciBwcm94eSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIGRhdGEgPSB7ImxvY2FsX2lwIjogbG9jYWxfaXB9CiAgICAgICAgICAgIHJlc3BvbnNlID0gc2VsZi5fcHJveHlfYXBpX2NhbGwoInVucmVnaXN0ZXIiLCBkYXRhKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kIHJlc3BvbnNlLmdldCgic3RhdHVzIikgPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICAgICAgcmVsZWFzZWRfdGFibGUgPSByZXNwb25zZS5nZXQoImRhdGEiLCB7fSkuZ2V0KCJyZWxlYXNlZF90YWJsZSIpCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgdW5yZWdpc3RlciBwcm94eSB2w6AgZ2nhuqNpIHBow7NuZyB0YWJsZToge3JlbGVhc2VkX3RhYmxlfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgROG7q25nIHRocmVhZCB1cGRhdGUgxJHhu4tuaCBr4buzCiAgICAgICAgICAgICAgICBzZWxmLl9zdG9wX3VwZGF0ZV90aHJlYWQoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJlc2V0IHRy4bqhbmcgdGjDoWkgcHJveHkKICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9wcm94eV90YWJsZSA9IE5vbmUKICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudF9wcm94eV9uYW1lID0gTm9uZQogICAgICAgICAgICAgICAgc2VsZi5wcm94eV9sYXN0X3VwZGF0ZSA9IDAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBYw7NhIHByb3h5IHRhYmxlIG5hbWUga2jhu49pIGRldmljZSBjb25maWcKICAgICAgICAgICAgICAgIHNlbGYuZGIuc2V0X2RldmljZV9jb25maWcoInByb3h5X3RhYmxlX25hbWUiLCBOb25lKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJQcm94eSB1bnJlZ2lzdGVyIHRo4bqldCBi4bqhaToge3Jlc3BvbnNlLmdldCgnbWVzc2FnZScpIGlmIHJlc3BvbnNlIGVsc2UgJ05vIHJlc3BvbnNlJ30iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHVucmVnaXN0ZXIgcHJveHk6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcmVzZXRfaXAoc2VsZiwgdGFibGVfbmFtZTogc3RyID0gTm9uZSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBSZXNldCBJUCBjaG8gcHJveHkgaGnhu4duIHThuqFpIGhv4bq3YyB0YWJsZSDEkcaw4bujYyBjaOG7iSDEkeG7i25oCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFibGVfbmFtZTogVMOqbiB0YWJsZSBj4bqnbiByZXNldCBJUCAob3B0aW9uYWwsIG7hur91IGtow7RuZyBjw7Mgc+G6vSBkw7luZyB0YWJsZSBoaeG7h24gdOG6oWkpCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgcmVzZXQgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgdGFibGUgxJHGsOG7o2MgY2jhu4kgxJHhu4tuaCBob+G6t2MgdGFibGUgaGnhu4duIHThuqFpCiAgICAgICAgICAgIHRhcmdldF90YWJsZSA9IHRhYmxlX25hbWUgb3Igc2VsZi5jdXJyZW50X3Byb3h5X3RhYmxlCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdGFyZ2V0X3RhYmxlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIHRhYmxlIHByb3h5IMSR4buDIHJlc2V0IElQIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHV54buDbiB0YWJsZSBuYW1lIHRow6BuaCBwcG9lIG5hbWUKICAgICAgICAgICAgcHBvZV9uYW1lID0gdGFyZ2V0X3RhYmxlLnJlcGxhY2UoInRvXyIsICIiKSAgIyBDaHV54buDbiAidG9fcHBwb2UyIiB0aMOgbmggInBwcG9lMiIKICAgICAgICAgICAgcmVzZXRfZGF0YSA9IHsicHBvZV9uYW1lIjogZiJ7cHBvZV9uYW1lfSJ9CiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQYW5nIHJlc2V0IElQIGNobyB0YWJsZToge3RhcmdldF90YWJsZX0gKHBwb2U6IHtwcG9lX25hbWV9KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXNldF9yZXNwb25zZSA9IHNlbGYuX3Byb3h5X2FwaV9jYWxsKCJyZXNldC1pcCIsIHJlc2V0X2RhdGEpCiAgICAgICAgICAgIGlmIHJlc2V0X3Jlc3BvbnNlIGFuZCByZXNldF9yZXNwb25zZS5nZXQoInN0YXR1cyIpID09ICJzdWNjZXNzIjoKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyByZXNldCBJUCBjaG8ge3Bwb2VfbmFtZX0gdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBlcnJvcl9tc2cgPSByZXNldF9yZXNwb25zZS5nZXQoJ21lc3NhZ2UnKSBpZiByZXNldF9yZXNwb25zZSBlbHNlICdObyByZXNwb25zZScKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyByZXNldCBJUCBjaG8ge3Bwb2VfbmFtZX06IHtlcnJvcl9tc2d9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHJlc2V0IElQIGNobyB0YWJsZToge3RhYmxlX25hbWUgb3Igc2VsZi5jdXJyZW50X3Byb3h5X3RhYmxlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgY2hlY2tfcHJveHlfcmVxdWlyZW1lbnQoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHbDoCDEkcSDbmcga8O9IHByb3h5IG7hur91IGPhuqduCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBjw7MgcHJveHkgaG/hurdjIGtow7RuZyBj4bqnbiBwcm94eSwgRmFsc2UgbuG6v3UgY+G6p24gcHJveHkgbmjGsG5nIGNoxrBhIMSRxrDhu6NjIGPhuqVwCiAgICAgICAgIiIiCiAgICAgICAgdXNlX3Byb3h5ID0gc2VsZi5kYi5nZXQoInVzZV9wcm94eSIsIEZhbHNlKQogICAgICAgIAogICAgICAgIGlmIG5vdCB1c2VfcHJveHk6CiAgICAgICAgICAgIHJldHVybiBUcnVlICAjIEtow7RuZyBj4bqnbiBwcm94eQogICAgICAgICAgICAKICAgICAgICAjIE7hur91IMSRw6MgY8OzIHRhYmxlIHRow6wgcmV0dXJuIFRydWUKICAgICAgICBpZiBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGU6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICMgQ2jGsGEgY8OzIHRhYmxlLCB0aOG7rSDEkcSDbmcga8O9CiAgICAgICAgcmV0dXJuIHNlbGYucmVnaXN0ZXJfcHJveHkoKQogICAgCiAgICBkZWYgZ2V0X3Byb3h5X2Rpc3BsYXlfbmFtZShzZWxmKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdMOqbiBoaeG7g24gdGjhu4sgY2hvIHByb3h5IGhp4buHbiB04bqhaQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVMOqbiBoaeG7g24gdGjhu4sgY+G7p2EgcHJveHkKICAgICAgICAiIiIKICAgICAgICBpZiBzZWxmLmN1cnJlbnRfcHJveHlfbmFtZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuY3VycmVudF9wcm94eV9uYW1lCiAgICAgICAgZWxpZiBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGU6CiAgICAgICAgICAgIHJldHVybiBmIntzZWxmLmN1cnJlbnRfcHJveHlfdGFibGV9IgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiAiVW5rbm93biIKICAgIAogICAgZGVmIHNldHVwX3Byb3h5X2Zvcl9zZXNzaW9uKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgVGhp4bq/dCBs4bqtcCBwcm94eSBjaG8gcGhpw6puIGzDoG0gdmnhu4djCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aGnhur90IGzhuq1wIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgIyBO4bq/dSDEkcOjIGPDsyB0YWJsZSBwcm94eSB0aMOsIHNldHVwIHhvbmcgcuG7k2kKICAgICAgICBpZiBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGU6CiAgICAgICAgICAgIHByb3h5X25hbWUgPSBzZWxmLmdldF9wcm94eV9kaXNwbGF5X25hbWUoKQogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlByb3h5IHtwcm94eV9uYW1lfSDEkcOjIHPhurVuIHPDoG5nIGNobyBwaGnDqm4gbMOgbSB2aeG7h2MiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAjIE7hur91IGNoxrBhIGPDsyB0aMOsIMSRxINuZyBrw70KICAgICAgICByZXR1cm4gc2VsZi5yZWdpc3Rlcl9wcm94eSgpCiAgICAKICAgIGRlZiByZWxlYXNlX3Byb3h5X2FmdGVyX3Nlc3Npb24oc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBHaeG6o2kgcGjDs25nIHByb3h5IHNhdSBraGkga+G6v3QgdGjDumMgcGhpw6puIGzDoG0gdmnhu4djCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBnaeG6o2kgcGjDs25nIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGU6CiAgICAgICAgICAgICAgICBwcm94eV9uYW1lID0gc2VsZi5nZXRfcHJveHlfZGlzcGxheV9uYW1lKCkKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJBhbmcgZ2nhuqNpIHBow7NuZyBwcm94eSB7cHJveHlfbmFtZX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEfhu41pIEFQSSB1bnJlZ2lzdGVyCiAgICAgICAgICAgICAgICBpZiBzZWxmLnVucmVnaXN0ZXJfcHJveHkoKToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgZ2nhuqNpIHBow7NuZyBwcm94eSB7cHJveHlfbmFtZX0gdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkdp4bqjaSBwaMOzbmcgcHJveHkge3Byb3h5X25hbWV9IHRo4bqldCBi4bqhaSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoIktow7RuZyBjw7MgcHJveHkgxJHhu4MgZ2nhuqNpIHBow7NuZyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmV4Y2VwdGlvbihlLCBmIkzhu5dpIGtoaSBnaeG6o2kgcGjDs25nIHByb3h5IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAKICAgIGRlZiBpc19wcm94eV9hY3RpdmUoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBLaeG7g20gdHJhIHhlbSBjw7MgcHJveHkgxJFhbmcgaG/huqF0IMSR4buZbmcga2jDtG5nCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBjw7MgcHJveHkgxJFhbmcgaG/huqF0IMSR4buZbmcsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIHJldHVybiBib29sKHNlbGYuY3VycmVudF9wcm94eV90YWJsZSkKICAgIAogICAgZGVmIGdldF9wcm94eV9pbmZvKHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRow7RuZyB0aW4gcHJveHkgaGnhu4duIHThuqFpCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFRow7RuZyB0aW4gcHJveHkKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAicHJveHlfaWQiOiBzZWxmLmN1cnJlbnRfcHJveHlfaWQsCiAgICAgICAgICAgICJwcm94eV9uYW1lIjogc2VsZi5jdXJyZW50X3Byb3h5X25hbWUsCiAgICAgICAgICAgICJwcm94eV90YWJsZSI6IHNlbGYuY3VycmVudF9wcm94eV90YWJsZSwKICAgICAgICAgICAgImxhc3RfdXBkYXRlIjogc2VsZi5wcm94eV9sYXN0X3VwZGF0ZSwKICAgICAgICAgICAgImRpc3BsYXlfbmFtZSI6IHNlbGYuZ2V0X3Byb3h5X2Rpc3BsYXlfbmFtZSgpLAogICAgICAgICAgICAiaXNfYWN0aXZlIjogc2VsZi5pc19wcm94eV9hY3RpdmUoKQogICAgICAgIH0KICAgIAogICAgZGVmIGZvcmNlX3Jlc2V0X2N1cnJlbnRfaXAoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBC4bqvdCBideG7mWMgcmVzZXQgSVAgY2hvIHByb3h5IGhp4buHbiB04bqhaSAoY8OzIHRo4buDIGfhu41pIHRyb25nIHF1w6EgdHLDrG5oIGzDoG0gdmnhu4djKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgcmVzZXQgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICBpZiBub3Qgc2VsZi5jdXJyZW50X3Byb3h5X3RhYmxlOgogICAgICAgICAgICBsb2dnZXIud2FybmluZygiS2jDtG5nIGPDsyBwcm94eSDEkWFuZyBob+G6oXQgxJHhu5luZyDEkeG7gyByZXNldCBJUCIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBsb2dnZXIuaW5mbygiQuG6r3QgYnXhu5ljIHJlc2V0IElQIGNobyBwcm94eSBoaeG7h24gdOG6oWkgdHJvbmcgcXXDoSB0csOsbmggbMOgbSB2aeG7h2MiKQogICAgICAgIHJldHVybiBzZWxmLnJlc2V0X2lwKCkKICAgIAogICAgZGVmIGdldF9wcm94eV9zdGF0dXMoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRy4bqhbmcgdGjDoWkgcHJveHkgaGnhu4duIHThuqFpIGTGsOG7m2kgZOG6oW5nIHN0cmluZwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogVHLhuqFuZyB0aMOhaSBwcm94eQogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBzZWxmLmRiLmdldCgidXNlX3Byb3h5IiwgRmFsc2UpOgogICAgICAgICAgICByZXR1cm4gIktow7RuZyBz4butIGThu6VuZyBwcm94eSIKICAgICAgICBlbGlmIG5vdCBzZWxmLmN1cnJlbnRfcHJveHlfdGFibGU6CiAgICAgICAgICAgIHJldHVybiAiQ2jGsGEgY8OzIHByb3h5IgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBmIsSQYW5nIHPhu60gZOG7pW5nIHByb3h5OiB7c2VsZi5nZXRfcHJveHlfZGlzcGxheV9uYW1lKCl9IgogICAgCiAgICBkZWYgZW5zdXJlX3Byb3h5X2lmX25lZWRlZChzZWxmLCByZWFzb246IHN0ciA9ICJD4bqnbiBwcm94eSBjaG8gaG/huqF0IMSR4buZbmciKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIMSQ4bqjbSBi4bqjbyBjw7MgcHJveHkgbuG6v3UgY+G6p24gdGhp4bq/dAogICAgICAgIFThu7EgxJHhu5luZyBraeG7g20gdHJhIHVzZV9wcm94eSBjb25maWcgdsOgIMSRxINuZyBrw70gcHJveHkgbuG6v3UgY2jGsGEgY8OzCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgcmVhc29uOiBMw70gZG8gY+G6p24gcHJveHkgKMSR4buDIGxvZykKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBjw7MgcHJveHkgaG/hurdjIGtow7RuZyBj4bqnbiBwcm94eSwgRmFsc2UgbuG6v3UgY+G6p24gcHJveHkgbmjGsG5nIGtow7RuZyDEkcSDbmcga8O9IMSRxrDhu6NjCiAgICAgICAgIiIiCiAgICAgICAgdXNlX3Byb3h5ID0gc2VsZi5kYi5nZXQoInVzZV9wcm94eSIsIEZhbHNlKQogICAgICAgIAogICAgICAgICMgTuG6v3Uga2jDtG5nIHPhu60gZOG7pW5nIHByb3h5LCBsdcO0biB0cuG6oyB24buBIFRydWUKICAgICAgICBpZiBub3QgdXNlX3Byb3h5OgogICAgICAgICAgICBsb2dnZXIuZGVidWcoIktow7RuZyBj4bqnbiBwcm94eSB0aGVvIGNvbmZpZyIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICMgTuG6v3UgxJHDoyBjw7MgcHJveHkgYWN0aXZlLCB0cuG6oyB24buBIFRydWUKICAgICAgICBpZiBzZWxmLmlzX3Byb3h5X2FjdGl2ZSgpOgogICAgICAgICAgICBsb2dnZXIuZGVidWcoIlByb3h5IMSRw6Mgc+G6tW4gc8OgbmciKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAjIEPhuqduIHByb3h5IG5oxrBuZyBjaMawYSBjw7MsIHRo4butIMSRxINuZyBrw70KICAgICAgICBsb2dnZXIuaW5mbyhmIntyZWFzb259LCDEkcSDbmcga8O9IHByb3h5Li4uIikKICAgICAgICBwcm94eV9zdWNjZXNzID0gc2VsZi5yZWdpc3Rlcl9wcm94eSgpCiAgICAgICAgCiAgICAgICAgaWYgcHJveHlfc3VjY2VzczoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgxJHEg25nIGvDvSBwcm94eSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdGjhu4MgxJHEg25nIGvDvSBwcm94eSBraGkgY+G6p24gdGhp4bq/dCIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgc2h1dGRvd24oc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgQ2xlYW51cCBraGkgdOG6r3Qgc2VydmljZSAtIGThu6tuZyB0aHJlYWQgdXBkYXRlIHbDoCB1bnJlZ2lzdGVyIHByb3h5CiAgICAgICAgIiIiCiAgICAgICAgbG9nZ2VyLmluZm8oIlNodXR0aW5nIGRvd24gUHJveHlTZXJ2aWNlLi4uIikKICAgICAgICAKICAgICAgICAjIEThu6tuZyB0aHJlYWQgdXBkYXRlIHRyxrDhu5tjCiAgICAgICAgc2VsZi5fc3RvcF91cGRhdGVfdGhyZWFkKCkKICAgICAgICAKICAgICAgICAjIFVucmVnaXN0ZXIgcHJveHkgbuG6v3UgxJFhbmcgYWN0aXZlCiAgICAgICAgaWYgc2VsZi5pc19wcm94eV9hY3RpdmUoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlVucmVnaXN0ZXIgcHJveHkgdHJvbmcgcXXDoSB0csOsbmggc2h1dGRvd24iKQogICAgICAgICAgICBzZWxmLnVucmVnaXN0ZXJfcHJveHkoKQogICAgICAgICAgICAKICAgICAgICBsb2dnZXIuaW5mbygiUHJveHlTZXJ2aWNlIMSRw6Mgc2h1dGRvd24gaG/DoG4gdOG6pXQiKQo=').decode('utf-8'))
