import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBUdXBsZSwgRGljdCwgTGlzdAppbXBvcnQgY29uZmlnCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgdHJhY2ViYWNrCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmltcG9ydCBzdWJwcm9jZXNzCmZyb20gZW51bSBpbXBvcnQgRW51bQoKIyBUaGVvIGTDtWkgdOG6pXQgY+G6oyBjw6FjIGxvZ2dlciDEkcOjIHThuqFvCmFsbF9sb2dnZXJzOiBEaWN0W3N0ciwgJ0xvZ2dlciddID0ge30KCiMgQmnhur9uIHRvw6BuIGPhu6VjIMSR4buDIGzGsHUgdHLhuqFuZyB0aMOhaQpoZWxwZXJfYXZhaWxhYmxlID0gRmFsc2UKbmV0d29ya19hdmFpbGFibGUgPSBGYWxzZQoKIyDEkOG7i25oIG5naMSpYSBjw6FjIGxldmVsIGxvZwpjbGFzcyBMb2dMZXZlbChFbnVtKToKICAgIERFQlVHID0gbG9nZ2luZy5ERUJVRwogICAgSU5GTyA9IGxvZ2dpbmcuSU5GTwogICAgV0FSTklORyA9IGxvZ2dpbmcuV0FSTklORwogICAgRVJST1IgPSBsb2dnaW5nLkVSUk9SCiAgICBDUklUSUNBTCA9IGxvZ2dpbmcuQ1JJVElDQUwKCiMgQ+G6pXUgaMOsbmggbG9nZ2VyCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLAogICAgaGFuZGxlcnM9WwogICAgICAgIGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpLAogICAgICAgIGxvZ2dpbmcuRmlsZUhhbmRsZXIoJ2FwcC5sb2cnLCBlbmNvZGluZz0ndXRmLTgnKQogICAgXQopCgpjbGFzcyBMb2dnZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbmFtZSk6CiAgICAgICAgc2VsZi5sb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihuYW1lKQogICAgICAgIAogICAgZGVmIGRlYnVnKHNlbGYsIG1lc3NhZ2UpOgogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKG1lc3NhZ2UpCiAgICAgICAgCiAgICBkZWYgaW5mbyhzZWxmLCBtZXNzYWdlKToKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKG1lc3NhZ2UpCiAgICAgICAgCiAgICBkZWYgd2FybmluZyhzZWxmLCBtZXNzYWdlKToKICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgCiAgICBkZWYgZXJyb3Ioc2VsZiwgbWVzc2FnZSk6CiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSkKICAgICAgICAKICAgIGRlZiBjcml0aWNhbChzZWxmLCBtZXNzYWdlKToKICAgICAgICBzZWxmLmxvZ2dlci5jcml0aWNhbChtZXNzYWdlKQogICAgICAgIAogICAgZGVmIGV4Y2VwdGlvbihzZWxmLCBlLCBtZXNzYWdlPSJFeGNlcHRpb24gb2NjdXJyZWQiKToKICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZiJ7bWVzc2FnZX06IHtzdHIoZSl9IikKCiMgVOG6oW8gbG9nZ2VyIG3hurdjIMSR4buLbmggY2hvIG1vZHVsZSB1dGlscwpsb2dnZXIgPSBMb2dnZXIoIlV0aWxzIikKCmRlZiBzZXRfYWxsX2xvZ2dlcnNfbGV2ZWwobGV2ZWw6IGludCk6CiAgICAiIiIKICAgIEPDoGkgxJHhurd0IGPhuqVwIMSR4buZIGxvZyBjaG8gdOG6pXQgY+G6oyBjw6FjIGxvZ2dlciDEkcOjIHThuqFvCiAgICAKICAgIEFyZ3M6CiAgICAgICAgbGV2ZWw6IEPhuqVwIMSR4buZIGxvZyB04buRaSB0aGnhu4N1IChMb2dMZXZlbC5ERUJVRywgTG9nTGV2ZWwuSU5GTywgTG9nTGV2ZWwuRVJST1IpCiAgICAiIiIKICAgIGZvciBsb2dnZXJfbmFtZSwgbG9nZ2VyX2luc3RhbmNlIGluIGFsbF9sb2dnZXJzLml0ZW1zKCk6CiAgICAgICAgbG9nZ2VyX2luc3RhbmNlLnNldF9sZXZlbChsZXZlbCkKICAgICAgICAKZGVmIHNldHVwX2RlZmF1bHRfbG9nZ2luZyhwcm9kdWN0aW9uOiBib29sID0gRmFsc2UsIGxvZ190b19maWxlOiBib29sID0gRmFsc2UpOgogICAgIiIiCiAgICBUaGnhur90IGzhuq1wIGPhuqV1IGjDrG5oIGxvZyBt4bq3YyDEkeG7i25oIGNobyDhu6luZyBk4bulbmcKICAgIAogICAgQXJnczoKICAgICAgICBwcm9kdWN0aW9uOiBUcnVlIG7hur91IMSRYW5nIGNo4bqheSB0cm9uZyBtw7RpIHRyxrDhu51uZyBwcm9kdWN0aW9uIChjaOG7iSBsb2cgdOG7qyBJTkZPIHRy4bufIGzDqm4pCiAgICAgICAgbG9nX3RvX2ZpbGU6IFRydWUgxJHhu4MgZ2hpIGxvZyByYSBmaWxlCiAgICAiIiIKICAgIGxldmVsID0gTG9nTGV2ZWwuSU5GTyBpZiBwcm9kdWN0aW9uIGVsc2UgTG9nTGV2ZWwuREVCVUcKICAgIAogICAgIyDEkOG6t3QgbGV2ZWwgY2hvIHThuqV0IGPhuqMgY8OhYyBsb2dnZXIgaGnhu4duIGPDswogICAgc2V0X2FsbF9sb2dnZXJzX2xldmVsKGxldmVsKQogICAgCiAgICAjIMSQ4bq3dCBsb2dfdG9fZmlsZSBjaG8gbG9nZ2VyIGhp4buHbiBjw7MKICAgIGlmIGxvZ190b19maWxlOgogICAgICAgIGZvciBsb2dnZXJfbmFtZSwgbG9nZ2VyX2luc3RhbmNlIGluIGFsbF9sb2dnZXJzLml0ZW1zKCk6CiAgICAgICAgICAgICMgVOG6oW8gZmlsZSBsb2cgbeG7m2kgbuG6v3UgY2jGsGEgY8OzCiAgICAgICAgICAgIGlmIG5vdCBsb2dnZXJfaW5zdGFuY2UubG9nX3RvX2ZpbGU6CiAgICAgICAgICAgICAgICBsb2dnZXJfaW5zdGFuY2UubG9nX3RvX2ZpbGUgPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVOG6oW8gdGjGsCBt4bulYyBsb2cgbuG6v3UgY+G6p24KICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhsb2dnZXJfaW5zdGFuY2UubG9nX2Rpcik6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMobG9nZ2VyX2luc3RhbmNlLmxvZ19kaXIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVOG6oW8gdMOqbiBmaWxlIGxvZyB24bubaSBuZ8OgeSB0aMOhbmcKICAgICAgICAgICAgICAgIHRvZGF5ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZLSVtLSVkIikKICAgICAgICAgICAgICAgIGxvZ19maWxlbmFtZSA9IGYie2xvZ2dlcl9uYW1lfV97dG9kYXl9LmxvZyIKICAgICAgICAgICAgICAgIGxvZ2dlcl9pbnN0YW5jZS5sb2dfZmlsZSA9IG9zLnBhdGguam9pbihsb2dnZXJfaW5zdGFuY2UubG9nX2RpciwgbG9nX2ZpbGVuYW1lKQoKZGVmIGdldF9sb2dnZXIobmFtZTogc3RyLCBsZXZlbDogaW50ID0gTG9nTGV2ZWwuREVCVUcsIGxvZ190b19maWxlOiBib29sID0gRmFsc2UpIC0+IExvZ2dlcjoKICAgICIiIgogICAgVOG6oW8gdsOgIHRy4bqjIHbhu4EgbeG7mXQgbG9nZ2VyIHbhu5tpIGPhuqV1IGjDrG5oIGNo4buJIMSR4buLbmgKICAgIAogICAgQXJnczoKICAgICAgICBuYW1lOiBUw6puIGPhu6dhIGxvZ2dlci9tb2R1bGUKICAgICAgICBsZXZlbDogQ+G6pXAgxJHhu5kgbG9nIHThu5FpIHRoaeG7g3UKICAgICAgICBsb2dfdG9fZmlsZTogVHJ1ZSDEkeG7gyBnaGkgbG9nIHJhIGZpbGUKICAgIAogICAgUmV0dXJuczoKICAgICAgICBMb2dnZXI6IMSQ4buRaSB0xrDhu6NuZyBsb2dnZXIgxJHDoyBj4bqldSBow6xuaAogICAgIiIiCiAgICAjIEtp4buDbSB0cmEgeGVtIGxvZ2dlciDEkcOjIHThu5NuIHThuqFpIGNoxrBhCiAgICBpZiBuYW1lIGluIGFsbF9sb2dnZXJzOgogICAgICAgIHJldHVybiBhbGxfbG9nZ2Vyc1tuYW1lXQogICAgICAgIAogICAgIyBU4bqhbyBsb2dnZXIgbeG7m2kKICAgIHJldHVybiBMb2dnZXIobmFtZSkKCmRlZiBjaGVja19oZWxwZXJfc2VydmljZShoZWxwZXJfc2VydmljZSk6CiAgICAiIiIKICAgIEtp4buDbSB0cmEgSGVscGVyU2VydmljZSBjw7MgaG/huqF0IMSR4buZbmcga2jDtG5nCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgVHVwbGVbYm9vbCwgQW55XTogKFRydWUvRmFsc2UsIHJlc3BvbnNlIGRhdGEgbuG6v3UgY8OzKQogICAgIiIiCiAgICBnbG9iYWwgaGVscGVyX2F2YWlsYWJsZQogICAgCiAgICB0cnk6CiAgICAgICAgIyBLaeG7g20gdHJhIGLhurFuZyBjw6FjaCBn4buNaSBnZXRfZGV2aWNlX2luZm8KICAgICAgICByZXNwb25zZSA9IGhlbHBlcl9zZXJ2aWNlLmdldF9kZXZpY2VfaW5mbygpCiAgICAgICAgCiAgICAgICAgaWYgcmVzcG9uc2VbInN0YXR1cyJdID09ICJzdWNjZXNzIjoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkhlbHBlclNlcnZpY2UgxJFhbmcgaG/huqF0IMSR4buZbmciKQogICAgICAgICAgICBoZWxwZXJfYXZhaWxhYmxlID0gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUcuG6oyB24buBIHRow7RuZyB0aW4gdGhp4bq/dCBi4buLIMSR4buDIGPDsyB0aOG7gyBsxrB1IHbDoG8gREIKICAgICAgICAgICAgaWYgImRhdGEiIGluIHJlc3BvbnNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUsIHJlc3BvbnNlCiAgICAgICAgICAgIHJldHVybiBUcnVlLCBOb25lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiSGVscGVyU2VydmljZSB0cuG6oyB24buBIGzhu5dpOiB7cmVzcG9uc2UuZ2V0KCdtZXNzYWdlJywgJ0tow7RuZyByw7UgbOG7l2knKX0iKQogICAgICAgICAgICBoZWxwZXJfYXZhaWxhYmxlID0gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCBOb25lCiAgICAgICAgICAgIAogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBraeG7g20gdHJhIEhlbHBlclNlcnZpY2U6IHtlfSIpCiAgICAgICAgaGVscGVyX2F2YWlsYWJsZSA9IEZhbHNlCiAgICAgICAgcmV0dXJuIEZhbHNlLCBOb25lCgpkZWYgY2hlY2tfbmV0d29ya19jb25uZWN0aW9uKCk6CiAgICAiIiIKICAgIEtp4buDbSB0cmEga+G6v3QgbuG7kWkgbeG6oW5nIHbDoCBjbG91ZCBzZXJ2ZXIKICAgIAogICAgUmV0dXJuczoKICAgICAgICBUdXBsZVtib29sLCBBbnldOiAoVHJ1ZS9GYWxzZSwgcmVzcG9uc2UgZGF0YSBu4bq/dSBjw7MpCiAgICAiIiIKICAgIGdsb2JhbCBuZXR3b3JrX2F2YWlsYWJsZQogICAgCiAgICB0cnk6CiAgICAgICAgIyBLaeG7g20gdHJhIGvhur90IG7hu5FpIMSR4bq/biBjbG91ZCBVUkwgKGtow7RuZyB0aMOqbSAvcGluZyBu4buvYSkKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChjb25maWcuQ0xPVURfVVJMLCB0aW1lb3V0PTUpCiAgICAgICAgCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICBsb2dnZXIuaW5mbygiS+G6v3QgbuG7kWkgbeG6oW5nIOG7lW4gxJHhu4tuaCIpCiAgICAgICAgICAgIG5ldHdvcmtfYXZhaWxhYmxlID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4gVHJ1ZSwgcmVzcG9uc2UuanNvbigpIGlmIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSA9PSAnYXBwbGljYXRpb24vanNvbicgZWxzZSBOb25lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGvhur90IG7hu5FpIMSR4bq/biBjbG91ZCBzZXJ2ZXI6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0iKQogICAgICAgICAgICBuZXR3b3JrX2F2YWlsYWJsZSA9IEZhbHNlCiAgICAgICAgICAgIHJldHVybiBGYWxzZSwgTm9uZQogICAgICAgICAgICAKICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBr4bq/dCBu4buRaSBt4bqhbmc6IHtlfSIpCiAgICAgICAgbmV0d29ya19hdmFpbGFibGUgPSBGYWxzZQogICAgICAgIHJldHVybiBGYWxzZSwgTm9uZQoKZGVmIGlzX2hlbHBlcl9hdmFpbGFibGUoKSAtPiBib29sOgogICAgIiIiVHLhuqMgduG7gSB0cuG6oW5nIHRow6FpIGhp4buHbiB04bqhaSBj4bunYSBoZWxwZXIgc2VydmljZSIiIgogICAgcmV0dXJuIGhlbHBlcl9hdmFpbGFibGUKCmRlZiBpc19uZXR3b3JrX2F2YWlsYWJsZSgpIC0+IGJvb2w6CiAgICAiIiJUcuG6oyB24buBIHRy4bqhbmcgdGjDoWkgaGnhu4duIHThuqFpIGPhu6dhIGvhur90IG7hu5FpIG3huqFuZyIiIgogICAgcmV0dXJuIG5ldHdvcmtfYXZhaWxhYmxlCgpkZWYgcmV0cnlfdW50aWxfc3VjY2VzcyhmdW5jLCBtYXhfcmV0cmllczogaW50LCBkZWxheTogaW50LCAqYXJncywgKiprd2FyZ3MpIC0+IFR1cGxlW2Jvb2wsIE9wdGlvbmFsW0FueV1dOgogICAgIiIiCiAgICBUaOG7rSB0aOG7sWMgaGnhu4duIG3hu5l0IGjDoG0gbmhp4buBdSBs4bqnbiBjaG8gxJHhur9uIGtoaSB0aMOgbmggY8O0bmcKICAgIAogICAgQXJnczoKICAgICAgICBmdW5jOiBIw6BtIGPhuqduIHRo4buxYyBoaeG7h24KICAgICAgICBtYXhfcmV0cmllczogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICBkZWxheTogVGjhu51pIGdpYW4gY2jhu50gZ2nhu69hIGPDoWMgbOG6p24gdGjhu60gKGdpw6J5KQogICAgICAgICphcmdzLCAqKmt3YXJnczogVGhhbSBz4buRIGNobyBow6BtIGPhuqduIHRo4buxYyBoaeG7h24KICAgICAgICAKICAgIFJldHVybnM6CiAgICAgICAgVHVwbGVbYm9vbCwgQW55XTogKFRow6BuaCBjw7RuZyBoYXkga2jDtG5nLCBL4bq/dCBxdeG6oyB0cuG6oyB24buBIG7hur91IGPDsykKICAgICIiIgogICAgcmV0cnlfY291bnQgPSAwCiAgICBzdWNjZXNzID0gRmFsc2UKICAgIHJlc3VsdCA9IE5vbmUKICAgIAogICAgd2hpbGUgcmV0cnlfY291bnQgPCBtYXhfcmV0cmllcyBhbmQgbm90IHN1Y2Nlc3M6CiAgICAgICAgc3VjY2VzcywgcmVzdWx0ID0gZnVuYygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgaWYgc3VjY2VzczoKICAgICAgICAgICAgcmV0dXJuIFRydWUsIHJlc3VsdAogICAgICAgICAgICAKICAgICAgICByZXRyeV9jb3VudCArPSAxCiAgICAgICAgaWYgcmV0cnlfY291bnQgPCBtYXhfcmV0cmllczoKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiVGjhu60gbOG6oWkgc2F1IHtkZWxheX0gZ2nDonkuLi4gKGPDsm4ge21heF9yZXRyaWVzIC0gcmV0cnlfY291bnR9IGzhuqduKSIpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoZGVsYXkpCiAgICAKICAgIHJldHVybiBGYWxzZSwgTm9uZSAKCmRlZiBnZXRfZGV2aWNlX2lkX2Zyb21fc3lzdGVtKCkgLT4gc3RyOgogICAgIiIiCiAgICBM4bqleSBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmcgYuG6sW5nIGzhu4duaCBnZXRwcm9wIHJvLnNlcmlhbG5vCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgc3RyOiBEZXZpY2UgSUQgaG/hurdjIGNodeG7l2kgcuG7l25nIG7hur91IGtow7RuZyBs4bqleSDEkcaw4bujYwogICAgIiIiCiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHN1YnByb2Nlc3MKICAgICAgICAjIFRo4buxYyBoaeG7h24gbOG7h25oIGdldHByb3Agcm8uc2VyaWFsbm8gxJHhu4MgbOG6pXkgc2VyaWFsIG51bWJlciBj4bunYSB0aGnhur90IGLhu4sKICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bigKICAgICAgICAgICAgWyJnZXRwcm9wIiwgInJvLnNlcmlhbG5vIl0sCiAgICAgICAgICAgIGNoZWNrPVRydWUsCiAgICAgICAgICAgIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUsCiAgICAgICAgICAgIHRleHQ9VHJ1ZQogICAgICAgICkKICAgICAgICAKICAgICAgICAjIEzhuqV5IGvhur90IHF14bqjIHbDoCBsb+G6oWkgYuG7jyBraG/huqNuZyB0cuG6r25nIHRo4burYQogICAgICAgIGRldmljZV9pZCA9IHJlc3VsdC5zdGRvdXQuc3RyaXAoKQogICAgICAgIAogICAgICAgIGlmIGRldmljZV9pZDoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGzhuqV5IMSRxrDhu6NjIGRldmljZV9pZCB04burIGjhu4cgdGjhu5FuZzoge2RldmljZV9pZH0iKQogICAgICAgICAgICByZXR1cm4gZGV2aWNlX2lkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoIktow7RuZyBs4bqleSDEkcaw4bujYyBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmciKQogICAgICAgICAgICByZXR1cm4gIiIKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgbOG6pXkgZGV2aWNlX2lkIHThu6sgaOG7hyB0aOG7kW5nOiB7c3RyKGUpfSIpCiAgICAgICAgcmV0dXJuICIiIAoKIyBIw6BtIGtp4buDbSB0cmEga+G6v3QgbuG7kWkgbeG6oW5nCmRlZiBjaGVja19uZXR3b3JrX2Nvbm5lY3Rpb24oKSAtPiBUdXBsZVtib29sLCBzdHJdOgogICAgIiIiCiAgICBLaeG7g20gdHJhIGvhur90IG7hu5FpIG3huqFuZyBi4bqxbmcgY8OhY2ggcGluZyBnb29nbGUuY29tCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgVHVwbGVbYm9vbCwgc3RyXTogKFRydWUsICJTdWNjZXNzIikgbuG6v3UgdGjDoG5oIGPDtG5nLCAoRmFsc2UsIGVycm9yX21lc3NhZ2UpIG7hur91IHRo4bqldCBi4bqhaQogICAgIiIiCiAgICB0cnk6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20iLCB0aW1lb3V0PTUpCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICByZXR1cm4gVHJ1ZSwgIlN1Y2Nlc3MiCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCBmIkhUVFAgZXJyb3I6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0iCiAgICBleGNlcHQgcmVxdWVzdHMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJldHVybiBGYWxzZSwgZiJOZXR3b3JrIGVycm9yOiB7c3RyKGUpfSIKCiMgSMOgbSBraeG7g20gdHJhIEhlbHBlclNlcnZpY2UKZGVmIGNoZWNrX2hlbHBlcl9zZXJ2aWNlKGhlbHBlcikgLT4gVHVwbGVbYm9vbCwgT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dXToKICAgICIiIgogICAgS2nhu4NtIHRyYSBr4bq/dCBu4buRaSDEkeG6v24gSGVscGVyU2VydmljZQogICAgCiAgICBBcmdzOgogICAgICAgIGhlbHBlcjogSGVscGVyU2VydmljZSBpbnN0YW5jZQogICAgICAgIAogICAgUmV0dXJuczoKICAgICAgICBUdXBsZVtib29sLCBPcHRpb25hbFtEaWN0XV06IChUcnVlLCByZXNwb25zZV9kYXRhKSBu4bq/dSB0aMOgbmggY8O0bmcsIChGYWxzZSwgTm9uZSkgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAiIiIKICAgIHRyeToKICAgICAgICAjIEfhu41pIEFQSSBraeG7g20gdHJhCiAgICAgICAgcmVzcG9uc2UgPSBoZWxwZXIuZ2V0X2RldmljZV9pbmZvKCkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMKICAgICAgICBpZiByZXNwb25zZSBhbmQgInN0YXR1cyIgaW4gcmVzcG9uc2UgYW5kIHJlc3BvbnNlWyJzdGF0dXMiXSA9PSAic3VjY2VzcyI6CiAgICAgICAgICAgIHJldHVybiBUcnVlLCByZXNwb25zZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZSwgTm9uZQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXR1cm4gRmFsc2UsIE5vbmUKCiMgSMOgbSBr4bq/dCBu4buRaSBBREIKZGVmIGNvbm5lY3RfYWRiKGhvc3Q6IHN0ciwgcG9ydDogaW50KSAtPiBib29sOgogICAgIiIiCiAgICBL4bq/dCBu4buRaSDEkeG6v24gdGhp4bq/dCBi4buLIEFuZHJvaWQgcXVhIEFEQgogICAgCiAgICBBcmdzOgogICAgICAgIGhvc3Q6IMSQ4buLYSBjaOG7iSBJUCBj4bunYSB0aGnhur90IGLhu4sKICAgICAgICBwb3J0OiBQb3J0IEFEQiAodGjGsOG7nW5nIGzDoCA1NTU1KQogICAgICAgIAogICAgUmV0dXJuczoKICAgICAgICBib29sOiBUcnVlIG7hur91IGvhur90IG7hu5FpIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAiIiIKICAgIGxvZ2dlciA9IGdldF9sb2dnZXIoIkFEQiIpCiAgICAKICAgIHRyeToKICAgICAgICAjIEtp4buDbSB0cmEgQURCIMSRw6MgxJHGsOG7o2MgY8OgaSDEkeG6t3QgY2jGsGEKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsiYWRiIiwgInZlcnNpb24iXSwgY2hlY2s9VHJ1ZSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSkKICAgICAgICBleGNlcHQgKHN1YnByb2Nlc3MuU3VicHJvY2Vzc0Vycm9yLCBGaWxlTm90Rm91bmRFcnJvcik6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiQURCIGtow7RuZyDEkcaw4bujYyBjw6BpIMSR4bq3dCBob+G6t2Mga2jDtG5nIGPDsyB0cm9uZyBQQVRIIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgS2jhu59pIMSR4buZbmcgQURCIHNlcnZlciBu4bq/dSBjaMawYSBjaOG6oXkKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbImFkYiIsICJzdGFydC1zZXJ2ZXIiXSwgY2hlY2s9RmFsc2UsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgCiAgICAgICAgIyBL4bq/dCBu4buRaSDEkeG6v24gdGhp4bq/dCBi4buLCiAgICAgICAgY29ubmVjdF9jbWQgPSBbImFkYiIsICJjb25uZWN0IiwgZiJ7aG9zdH06e3BvcnR9Il0KICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihjb25uZWN0X2NtZCwgY2hlY2s9RmFsc2UsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUsIHRleHQ9VHJ1ZSkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMKICAgICAgICBvdXRwdXQgPSByZXN1bHQuc3Rkb3V0CiAgICAgICAgaWYgImNvbm5lY3RlZCIgaW4gb3V0cHV0Lmxvd2VyKCkgYW5kICJ1bmFibGUiIG5vdCBpbiBvdXRwdXQubG93ZXIoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGvhur90IG7hu5FpIHRow6BuaCBjw7RuZyDEkeG6v24ge2hvc3R9Ontwb3J0fSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGvhur90IG7hu5FpIMSR4bq/biB7aG9zdH06e3BvcnR9OiB7b3V0cHV0fSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIGvhur90IG7hu5FpIEFEQiDEkeG6v24ge2hvc3R9Ontwb3J0fSIpCiAgICAgICAgcmV0dXJuIEZhbHNlIA==').decode('utf-8'))
