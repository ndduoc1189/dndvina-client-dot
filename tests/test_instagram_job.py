import base64
exec(base64.b64decode('"""
Test script để debug các hàm Instagram Job một cách nhanh chóng
Chạy file này để test từng hàm riêng lẻ
"""

import sys
import os

# Thêm đường dẫn root vào sys.path để import các module
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from jobs.instagram_job import InstagramJob
from services.db_service import DatabaseService
from services.helper_service import HelperService
from services.golike_service import GoLikeService


def create_instagram_job():
    """Tạo Instagram Job instance với các service thực"""
    try:
        # Khởi tạo các service thực
        db_service = DatabaseService()
        helper_service = HelperService()
        golike_service = GoLikeService(db_service, helper_service)
        
        # Tạo Instagram job
        instagram_job = InstagramJob(
            db_service=db_service,
            helper_service=helper_service,
            golike_service=golike_service
        )
        
        print("✅ Đã khởi tạo Instagram Job thành công!")
        return instagram_job
        
    except Exception as e:
        print(f"❌ Lỗi khi khởi tạo Instagram Job: {e}")
        return None


def get_sample_account():
    """Trả về sample account để test"""
    return {
        "id": 1,
        "unique_username": "test_user",
        "nickname": "Test User",
        "status": "active",
        "is_login": True,
        "avatar_thumb": "",
        "job_enable": True,
        "level": 3,
        "last_update": 1640995200,
        "golike_id": "12345"
    }


def get_sample_job():
    """Trả về sample job để test"""
    return {
        "id": "job_123",
        "type": "follow",
        "link": "https://instagram.com/test_account",
        "description": "Follow test account"
    }


def test_post_newfeed():
    """Test hàm post_newfeed"""
    print("\n=== TEST POST NEWFEED ===")
    
    job = create_instagram_job()
    if not job:
        return
        
    account = get_sample_account()
    
    try:
        print(f"Đang test post_newfeed cho account: {account['unique_username']}")
        
        # Gọi hàm post_newfeed - có thể đặt breakpoint ở đây để debug
        result = job.post_newfeed(account)
        
        print(f"Kết quả: {'✅ Thành công' if result else '❌ Thất bại'}")
        return result
        
    except Exception as e:
        print(f"❌ Lỗi khi test post_newfeed: {e}")
        return False


def test_execute_job():
    """Test hàm execute_job"""
    print("\n=== TEST EXECUTE JOB ===")
    
    job = create_instagram_job()
    if not job:
        return
        
    account = get_sample_account()
    sample_job = get_sample_job()
    
    try:
        print(f"Đang test execute_job:")
        print(f"  - Account: {account['unique_username']}")
        print(f"  - Job type: {sample_job['type']}")
        print(f"  - Job link: {sample_job['link']}")
        
        # Gọi hàm execute_job - có thể đặt breakpoint ở đây để debug
        result = job.execute_job(account, sample_job)
        
        print(f"Kết quả: {result}")
        return result
        
    except Exception as e:
        print(f"❌ Lỗi khi test execute_job: {e}")
        return None


def test_get_accounts_from_device():
    """Test hàm get_accounts_from_device"""
    print("\n=== TEST GET ACCOUNTS FROM DEVICE ===")
    
    job = create_instagram_job()
    if not job:
        return
        
    try:
        print("Đang lấy danh sách tài khoản từ thiết bị...")
        
        # Gọi hàm get_accounts_from_device - có thể đặt breakpoint ở đây để debug
        accounts = job.get_accounts_from_device()
        
        print(f"Tìm thấy {len(accounts)} tài khoản:")
        for i, account in enumerate(accounts, 1):
            print(f"  {i}. {account.get('unique_username', 'Unknown')}")
        
        return accounts
        
    except Exception as e:
        print(f"❌ Lỗi khi test get_accounts_from_device: {e}")
        return []


def test_care_functions():
    """Test các hàm care"""
    print("\n=== TEST CARE FUNCTIONS ===")
    
    job = create_instagram_job()
    if not job:
        return
        
    account = get_sample_account()
    
    try:
        # Test _care_swipe_feed
        print("1. Test _care_swipe_feed...")
        result1 = job._care_swipe_feed(account)
        print(f"   Kết quả: {'✅ Thành công' if result1 else '❌ Thất bại'}")
        
        # Test _care_watch_reels
        print("2. Test _care_watch_reels...")
        result2 = job._care_watch_reels(account)
        print(f"   Kết quả: {'✅ Thành công' if result2 else '❌ Thất bại'}")
        
        # Test _care_view_stories
        print("3. Test _care_view_stories...")
        result3 = job._care_view_stories(account)
        print(f"   Kết quả: {'✅ Thành công' if result3 else '❌ Thất bại'}")
        
        # Test _care_view_notifications
        print("4. Test _care_view_notifications...")
        result4 = job._care_view_notifications(account)
        print(f"   Kết quả: {'✅ Thành công' if result4 else '❌ Thất bại'}")
        
        return [result1, result2, result3, result4]
        
    except Exception as e:
        print(f"❌ Lỗi khi test care functions: {e}")
        return [False, False, False, False]


def test_navigation_functions():
    """Test các hàm navigation"""
    print("\n=== TEST NAVIGATION FUNCTIONS ===")
    
    job = create_instagram_job()
    if not job:
        return
        
    try:
        # Test is_home_screen
        print("1. Test is_home_screen...")
        result1 = job.is_home_screen()
        print(f"   Đang ở home screen: {'✅ Có' if result1 else '❌ Không'}")
        
        # Test ensure_home_screen
        print("2. Test ensure_home_screen...")
        result2 = job.ensure_home_screen()
        print(f"   Về home screen: {'✅ Thành công' if result2 else '❌ Thất bại'}")
        
        # Test back_to_home
        print("3. Test back_to_home...")
        result3 = job.back_to_home()
        print(f"   Quay về home: {'✅ Thành công' if result3 else '❌ Thất bại'}")
        
        return [result1, result2, result3]
        
    except Exception as e:
        print(f"❌ Lỗi khi test navigation functions: {e}")
        return [False, False, False]


def main():
    """Menu chính để chọn test nào muốn chạy"""
    print("🔧 INSTAGRAM JOB DEBUGGER")
    print("=" * 50)
    
    while True:
        print("\nChọn function muốn test:")
        print("1. Test post_newfeed")
        print("2. Test execute_job")
        print("3. Test get_accounts_from_device")
        print("4. Test care functions")
        print("5. Test navigation functions")
        print("6. Test tất cả")
        print("0. Thoát")
        
        choice = input("\nNhập lựa chọn (0-6): ").strip()
        
        if choice == "0":
            print("👋 Tạm biệt!")
            break
        elif choice == "1":
            test_post_newfeed()
        elif choice == "2":
            test_execute_job()
        elif choice == "3":
            test_get_accounts_from_device()
        elif choice == "4":
            test_care_functions()
        elif choice == "5":
            test_navigation_functions()
        elif choice == "6":
            print("\n🚀 CHẠY TẤT CẢ TESTS")
            test_navigation_functions()
            test_get_accounts_from_device()
            test_care_functions()
            test_execute_job()
            test_post_newfeed()
        else:
            print("❌ Lựa chọn không hợp lệ!")


if __name__ == '__main__':
    main()
').decode('utf-8'))
