import base64
exec(base64.b64decode('IiIiClF1aWNrIFRpa1RvayB0ZXN0IHNjcmlwdCAtIEfhu41pIHRy4buxYyB0aeG6v3AgY8OhYyBow6BtIMSR4buDIGRlYnVnIG5oYW5oCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKCiMgVGjDqm0gxJHGsOG7nW5nIGThuqtuIHJvb3QgdsOgbyBzeXMucGF0aApzeXMucGF0aC5pbnNlcnQoMCwgb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksICcuLicpKQoKZnJvbSBqb2JzLnRpa3Rva19qb2IgaW1wb3J0IFRpa3Rva0pvYgpmcm9tIHNlcnZpY2VzLmRiX3NlcnZpY2UgaW1wb3J0IERhdGFiYXNlU2VydmljZQpmcm9tIHNlcnZpY2VzLmhlbHBlcl9zZXJ2aWNlIGltcG9ydCBIZWxwZXJTZXJ2aWNlCmZyb20gc2VydmljZXMuZ29saWtlX3NlcnZpY2UgaW1wb3J0IEdvTGlrZVNlcnZpY2UKCiMgS2jhu59pIHThuqFvIGdsb2JhbCBqb2IgaW5zdGFuY2UKX2pvYiA9IE5vbmUKCmRlZiBpbml0X2pvYigpOgogICAgIiIiS2jhu59pIHThuqFvIFRpa1RvayBqb2IgbeG7mXQgbOG6p24gZHV5IG5o4bqldCIiIgogICAgZ2xvYmFsIF9qb2IKICAgIGlmIF9qb2IgaXMgTm9uZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRiX3NlcnZpY2UgPSBEYXRhYmFzZVNlcnZpY2UoKQogICAgICAgICAgICBoZWxwZXJfc2VydmljZSA9IEhlbHBlclNlcnZpY2UoKQogICAgICAgICAgICBnb2xpa2Vfc2VydmljZSA9IEdvTGlrZVNlcnZpY2UoZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UpCiAgICAgICAgICAgIAogICAgICAgICAgICBfam9iID0gVGlrdG9rSm9iKAogICAgICAgICAgICAgICAgZGJfc2VydmljZT1kYl9zZXJ2aWNlLAogICAgICAgICAgICAgICAgaGVscGVyX3NlcnZpY2U9aGVscGVyX3NlcnZpY2UsCiAgICAgICAgICAgICAgICBnb2xpa2Vfc2VydmljZT1nb2xpa2Vfc2VydmljZQogICAgICAgICAgICApCiAgICAgICAgICAgIHByaW50KCLinIUgVGlrVG9rIEpvYiBpbml0aWFsaXplZCEiKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiLinYwgRXJyb3IgaW5pdGlhbGl6aW5nIGpvYjoge2V9IikKICAgICAgICAgICAgX2pvYiA9IE5vbmUKICAgIHJldHVybiBfam9iCgpkZWYgcG9zdF9uZXdmZWVkKHVzZXJuYW1lPSJ0ZXN0X3VzZXIiKToKICAgICIiIgogICAgR+G7jWkgaMOgbSBwb3N0X25ld2ZlZWQgY2hvIFRpa1RvawogICAgCiAgICBBcmdzOgogICAgICAgIHVzZXJuYW1lOiBVc2VybmFtZSDEkeG7gyB0ZXN0ICht4bq3YyDEkeG7i25oICJ0ZXN0X3VzZXIiKQogICAgIiIiCiAgICBqb2IgPSBpbml0X2pvYigpCiAgICBpZiBub3Qgam9iOgogICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIAogICAgYWNjb3VudCA9IHsKICAgICAgICAiaWQiOiAxLAogICAgICAgICJ1bmlxdWVfdXNlcm5hbWUiOiB1c2VybmFtZSwKICAgICAgICAibmlja25hbWUiOiBmIlRlc3Qge3VzZXJuYW1lfSIsCiAgICAgICAgInN0YXR1cyI6ICJhY3RpdmUiLAogICAgICAgICJpc19sb2dpbiI6IFRydWUKICAgIH0KICAgIAogICAgcHJpbnQoZiLwn5SlIENhbGxpbmcgcG9zdF9uZXdmZWVkIGZvciBUaWtUb2s6IHt1c2VybmFtZX0iKQogICAgcmVzdWx0ID0gam9iLnBvc3RfbmV3ZmVlZChhY2NvdW50KQogICAgcHJpbnQoZiJSZXN1bHQ6IHsn4pyFIFN1Y2Nlc3MnIGlmIHJlc3VsdCBlbHNlICfinYwgRmFpbGVkJ30iKQogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGV4ZWN1dGVfam9iKGpvYl90eXBlPSJmb2xsb3ciLCBsaW5rPSJodHRwczovL3Rpa3Rvay5jb20vQHRlc3RfYWNjb3VudCIsIHVzZXJuYW1lPSJ0ZXN0X3VzZXIiKToKICAgICIiIgogICAgR+G7jWkgaMOgbSBleGVjdXRlX2pvYgogICAgCiAgICBBcmdzOgogICAgICAgIGpvYl90eXBlOiAiZm9sbG93IiBob+G6t2MgImxpa2UiCiAgICAgICAgbGluazogTGluayBUaWtUb2sKICAgICAgICB1c2VybmFtZTogVXNlcm5hbWUgxJHhu4MgdGVzdAogICAgIiIiCiAgICBqb2IgPSBpbml0X2pvYigpCiAgICBpZiBub3Qgam9iOgogICAgICAgIHJldHVybiBOb25lCiAgICAgICAgCiAgICBhY2NvdW50ID0gewogICAgICAgICJpZCI6IDEsCiAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IHVzZXJuYW1lLAogICAgICAgICJnb2xpa2VfaWQiOiAiMTIzNDUiCiAgICB9CiAgICAKICAgIGpvYl9kYXRhID0gewogICAgICAgICJpZCI6ICJ0ZXN0X2pvYl8xMjMiLAogICAgICAgICJ0eXBlIjogam9iX3R5cGUsCiAgICAgICAgImxpbmsiOiBsaW5rCiAgICB9CiAgICAKICAgIHByaW50KGYi8J+UpSBDYWxsaW5nIGV4ZWN1dGVfam9iOiB7am9iX3R5cGV9IC0+IHtsaW5rfSIpCiAgICByZXN1bHQgPSBqb2IuZXhlY3V0ZV9qb2IoYWNjb3VudCwgam9iX2RhdGEpCiAgICBwcmludChmIlJlc3VsdDoge3Jlc3VsdH0iKQogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGZvbGxvd191c2VyKHByb2ZpbGVfbGluaywgdXNlcm5hbWU9InRlc3RfdXNlciIpOgogICAgIiIiCiAgICBH4buNaSBow6BtIGZvbGxvdyB1c2VyCiAgICAKICAgIEFyZ3M6CiAgICAgICAgcHJvZmlsZV9saW5rOiBMaW5rIHByb2ZpbGUgVGlrVG9rCiAgICAgICAgdXNlcm5hbWU6IFVzZXJuYW1lIMSR4buDIHRlc3QKICAgICIiIgogICAgam9iID0gaW5pdF9qb2IoKQogICAgaWYgbm90IGpvYjoKICAgICAgICByZXR1cm4gMgogICAgICAgIAogICAgcHJpbnQoZiLwn5SlIENhbGxpbmcgX3BlcmZvcm1fZm9sbG93X2pvYjoge3Byb2ZpbGVfbGlua30iKQogICAgcmVzdWx0ID0gam9iLl9wZXJmb3JtX2ZvbGxvd19qb2IocHJvZmlsZV9saW5rKQogICAgCiAgICBzdGF0dXNfbWFwID0gewogICAgICAgIDA6ICJDaMawYSB0aOG7sWMgaGnhu4duIiwKICAgICAgICAxOiAi4pyFIFRow6BuaCBjw7RuZyIsCiAgICAgICAgMjogIuKdjCBUaOG6pXQgYuG6oWkiLAogICAgICAgIDM6ICLimqDvuI8gQuG7iyB1bmZvbGxvdyIsCiAgICAgICAgNDogIuKPsyDEkGFuZyBjaOG7nSIsCiAgICAgICAgNTogIvCfk50gWcOqdSBj4bqndSBjaOG7nSBkdXnhu4d0IiwKICAgICAgICA2OiAi8J+aqyBC4buLIGtow7NhIgogICAgfQogICAgCiAgICBwcmludChmIlJlc3VsdDoge3Jlc3VsdH0gLSB7c3RhdHVzX21hcC5nZXQocmVzdWx0LCAnVW5rbm93bicpfSIpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgbGlrZV92aWRlbyh2aWRlb19saW5rLCB1c2VybmFtZT0idGVzdF91c2VyIik6CiAgICAiIiIKICAgIEfhu41pIGjDoG0gbGlrZSB2aWRlbwogICAgCiAgICBBcmdzOgogICAgICAgIHZpZGVvX2xpbms6IExpbmsgdmlkZW8gVGlrVG9rCiAgICAgICAgdXNlcm5hbWU6IFVzZXJuYW1lIMSR4buDIHRlc3QKICAgICIiIgogICAgam9iID0gaW5pdF9qb2IoKQogICAgaWYgbm90IGpvYjoKICAgICAgICByZXR1cm4gMgogICAgICAgIAogICAgcHJpbnQoZiLwn5SlIENhbGxpbmcgX3BlcmZvcm1fbGlrZV9qb2I6IHt2aWRlb19saW5rfSIpCiAgICByZXN1bHQgPSBqb2IuX3BlcmZvcm1fbGlrZV9qb2IodmlkZW9fbGluaykKICAgIAogICAgc3RhdHVzX21hcCA9IHsKICAgICAgICAwOiAiQ2jGsGEgdGjhu7FjIGhp4buHbiIsCiAgICAgICAgMTogIuKchSBUaMOgbmggY8O0bmciLCAKICAgICAgICAyOiAi4p2MIFRo4bqldCBi4bqhaSIsCiAgICAgICAgMzogIuKaoO+4jyBC4buLIHVubGlrZSIsCiAgICAgICAgNDogIuKPsyDEkGFuZyBjaOG7nSIsCiAgICAgICAgNTogIvCfk50gWcOqdSBj4bqndSBjaOG7nSBkdXnhu4d0IiwKICAgICAgICA2OiAi8J+aqyBC4buLIGtow7NhIgogICAgfQogICAgCiAgICBwcmludChmIlJlc3VsdDoge3Jlc3VsdH0gLSB7c3RhdHVzX21hcC5nZXQocmVzdWx0LCAnVW5rbm93bicpfSIpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgZ2V0X2FjY291bnRzKCk6CiAgICAiIiJM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbiB04burIHRoaeG6v3QgYuG7iyIiIgogICAgam9iID0gaW5pdF9qb2IoKQogICAgaWYgbm90IGpvYjoKICAgICAgICByZXR1cm4gW10KICAgICAgICAKICAgIHByaW50KCLwn5SlIENhbGxpbmcgZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlLi4uIikKICAgIGFjY291bnRzID0gam9iLmdldF9hY2NvdW50c19mcm9tX2RldmljZSgpCiAgICBwcmludChmIkZvdW5kIHtsZW4oYWNjb3VudHMpfSBhY2NvdW50czoiKQogICAgZm9yIGksIGFjYyBpbiBlbnVtZXJhdGUoYWNjb3VudHMsIDEpOgogICAgICAgIHByaW50KGYiICB7aX0uIHthY2MuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnVW5rbm93bicpfSIpCiAgICByZXR1cm4gYWNjb3VudHMKCmRlZiBnb19ob21lKCk6CiAgICAiIiJW4buBIHRyYW5nIGNo4bunIFRpa1RvayIiIgogICAgam9iID0gaW5pdF9qb2IoKQogICAgaWYgbm90IGpvYjoKICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIHByaW50KCLwn5SlIENhbGxpbmcgX25hdmlnYXRlX3RvX2hvbWUuLi4iKQogICAgcmVzdWx0ID0gam9iLl9uYXZpZ2F0ZV90b19ob21lKCkKICAgIHByaW50KGYiTmF2aWdhdGUgdG8gaG9tZTogeyfinIUgU3VjY2VzcycgaWYgcmVzdWx0IGVsc2UgJ+KdjCBGYWlsZWQnfSIpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgZ29fcHJvZmlsZSgpOgogICAgIiIiVsOgbyB0YWIgcHJvZmlsZSIiIgogICAgam9iID0gaW5pdF9qb2IoKQogICAgaWYgbm90IGpvYjoKICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgIHByaW50KCLwn5SlIENhbGxpbmcgX25hdmlnYXRlX3RvX3Byb2ZpbGVfdGFiLi4uIikKICAgIHJlc3VsdCA9IGpvYi5fbmF2aWdhdGVfdG9fcHJvZmlsZV90YWIoKQogICAgcHJpbnQoZiJOYXZpZ2F0ZSB0byBwcm9maWxlOiB7J+KchSBTdWNjZXNzJyBpZiByZXN1bHQgZWxzZSAn4p2MIEZhaWxlZCd9IikKICAgIHJldHVybiByZXN1bHQKCmRlZiBvcGVuX3Byb2ZpbGVfbWVudSgpOgogICAgIiIiTeG7nyBwcm9maWxlIG1lbnUiIiIKICAgIGpvYiA9IGluaXRfam9iKCkKICAgIGlmIG5vdCBqb2I6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgCiAgICBwcmludCgi8J+UpSBDYWxsaW5nIF9vcGVuX3Byb2ZpbGVfbWVudS4uLiIpCiAgICByZXN1bHQgPSBqb2IuX29wZW5fcHJvZmlsZV9tZW51KCkKICAgIHByaW50KGYiT3BlbiBwcm9maWxlIG1lbnU6IHsn4pyFIFN1Y2Nlc3MnIGlmIHJlc3VsdCBlbHNlICfinYwgRmFpbGVkJ30iKQogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGdldF9jdXJyZW50X3VzZXJuYW1lKCk6CiAgICAiIiJM4bqleSB1c2VybmFtZSBoaeG7h24gdOG6oWkiIiIKICAgIGpvYiA9IGluaXRfam9iKCkKICAgIGlmIG5vdCBqb2I6CiAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAKICAgIHByaW50KCLwn5SlIENhbGxpbmcgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lLi4uIikKICAgIHVzZXJuYW1lID0gam9iLmdldF9jdXJyZW50X2xvZ2dlZF9pbl91c2VybmFtZSgpCiAgICBwcmludChmIkN1cnJlbnQgdXNlcm5hbWU6IHt1c2VybmFtZSBpZiB1c2VybmFtZSBlbHNlICdOb3QgZm91bmQnfSIpCiAgICByZXR1cm4gdXNlcm5hbWUKCiMgSGVscGVyIGZ1bmN0aW9ucyBmb3IgVUkgdGVzdGluZwpkZWYgZmluZF9jaGlsZF9lbGVtZW50cyhwYXJlbnRfZWxlbWVudCwgdGV4dD1Ob25lLCBjb250ZW50X2Rlc2M9Tm9uZSwgcmVzb3VyY2VfaWQ9Tm9uZSwgY2xhc3NfbmFtZT1Ob25lKToKICAgICIiIgogICAgVMOsbSB04bqldCBj4bqjIGVsZW1lbnQgY29uIGPhu6dhIG3hu5l0IGVsZW1lbnQgY2hhCiAgICAKICAgIEFyZ3M6CiAgICAgICAgcGFyZW50X2VsZW1lbnQ6IEVsZW1lbnQgY2hhCiAgICAgICAgdGV4dDogVGV4dCBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgY29udGVudF9kZXNjOiBDb250ZW50IGRlc2NyaXB0aW9uIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0gIAogICAgICAgIHJlc291cmNlX2lkOiBSZXNvdXJjZSBJRCBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgY2xhc3NfbmFtZTogQ2xhc3MgbmFtZSBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtICh2w60gZOG7pTogImFuZHJvaWQud2lkZ2V0LkdyaWRWaWV3IikKICAgIAogICAgUmV0dXJuczoKICAgICAgICBMaXN0W0RpY3RdOiBEYW5oIHPDoWNoIGVsZW1lbnQgY29uIHTDrG0gdGjhuqV5CiAgICAiIiIKICAgIGhlbHBlciA9IGluaXRfaGVscGVyKCkKICAgIGlmIG5vdCBoZWxwZXI6CiAgICAgICAgcmV0dXJuIFtdCiAgICAKICAgIHRyeToKICAgICAgICByZXR1cm4gaGVscGVyLmZpbmRfY2hpbGRfZWxlbWVudHMoCiAgICAgICAgICAgIHBhcmVudF9lbGVtZW50LCAKICAgICAgICAgICAgdGV4dD10ZXh0LCAKICAgICAgICAgICAgY29udGVudF9kZXNjPWNvbnRlbnRfZGVzYywgCiAgICAgICAgICAgIHJlc291cmNlX2lkPXJlc291cmNlX2lkLCAKICAgICAgICAgICAgY2xhc3NfbmFtZT1jbGFzc19uYW1lCiAgICAgICAgKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYi4p2MIEVycm9yIGZpbmRpbmcgY2hpbGQgZWxlbWVudHM6IHtlfSIpCiAgICAgICAgcmV0dXJuIFtdCgpkZWYgZmluZF9jaGlsZF9lbGVtZW50KHBhcmVudF9lbGVtZW50LCB0ZXh0PU5vbmUsIGNvbnRlbnRfZGVzYz1Ob25lLCByZXNvdXJjZV9pZD1Ob25lLCBjbGFzc19uYW1lPU5vbmUpOgogICAgIiIiCiAgICBUw6xtIGVsZW1lbnQgY29uIMSR4bqndSB0acOqbiBj4bunYSBt4buZdCBlbGVtZW50IGNoYQogICAgCiAgICBBcmdzOgogICAgICAgIHBhcmVudF9lbGVtZW50OiBFbGVtZW50IGNoYQogICAgICAgIHRleHQ6IFRleHQgY+G7p2EgZWxlbWVudCBjb24gY+G6p24gdMOsbQogICAgICAgIGNvbnRlbnRfZGVzYzogQ29udGVudCBkZXNjcmlwdGlvbiBj4bunYSBlbGVtZW50IGNvbiBj4bqnbiB0w6xtCiAgICAgICAgcmVzb3VyY2VfaWQ6IFJlc291cmNlIElEIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgICAgICBjbGFzc19uYW1lOiBDbGFzcyBuYW1lIGPhu6dhIGVsZW1lbnQgY29uIGPhuqduIHTDrG0KICAgIAogICAgUmV0dXJuczoKICAgICAgICBEaWN0IG9yIE5vbmU6IEVsZW1lbnQgY29uIMSR4bqndSB0acOqbiB0w6xtIHRo4bqleQogICAgIiIiCiAgICBoZWxwZXIgPSBpbml0X2hlbHBlcigpCiAgICBpZiBub3QgaGVscGVyOgogICAgICAgIHJldHVybiBOb25lCiAgICAKICAgIHRyeToKICAgICAgICByZXR1cm4gaGVscGVyLmZpbmRfY2hpbGRfZWxlbWVudCgKICAgICAgICAgICAgcGFyZW50X2VsZW1lbnQsIAogICAgICAgICAgICB0ZXh0PXRleHQsIAogICAgICAgICAgICBjb250ZW50X2Rlc2M9Y29udGVudF9kZXNjLCAKICAgICAgICAgICAgcmVzb3VyY2VfaWQ9cmVzb3VyY2VfaWQsIAogICAgICAgICAgICBjbGFzc19uYW1lPWNsYXNzX25hbWUKICAgICAgICApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiLinYwgRXJyb3IgZmluZGluZyBjaGlsZCBlbGVtZW50OiB7ZX0iKQogICAgICAgIHJldHVybiBOb25lCgpkZWYgaW5pdF9oZWxwZXIoKToKICAgICIiIkluaXRpYWxpemUgaGVscGVyIHNlcnZpY2UiIiIKICAgIHRyeToKICAgICAgICBmcm9tIHNlcnZpY2VzLmhlbHBlcl9zZXJ2aWNlIGltcG9ydCBIZWxwZXJTZXJ2aWNlCiAgICAgICAgcmV0dXJuIEhlbHBlclNlcnZpY2UoKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KGYi4p2MIEVycm9yIGluaXRpYWxpemluZyBoZWxwZXI6IHtlfSIpCiAgICAgICAgcmV0dXJuIE5vbmUKCiMgU2hvcnRjdXQgYWxpYXNlcwpwbmYgPSBwb3N0X25ld2ZlZWQgICAgICAgICAgIyBwbmYoInVzZXJuYW1lIikKZWogPSBleGVjdXRlX2pvYiAgICAgICAgICAgICAjIGVqKCJmb2xsb3ciLCAibGluayIsICJ1c2VybmFtZSIpCmZ1ID0gZm9sbG93X3VzZXIgICAgICAgICAgICAgIyBmdSgicHJvZmlsZV9saW5rIikKbHYgPSBsaWtlX3ZpZGVvICAgICAgICAgICAgICMgbHYoInZpZGVvX2xpbmsiKQpnYSA9IGdldF9hY2NvdW50cyAgICAgICAgICAgIyBnYSgpCmdoID0gZ29faG9tZSAgICAgICAgICAgICAgICAjIGdoKCkKZ3AgPSBnb19wcm9maWxlICAgICAgICAgICAgICMgZ3AoKQpvcG0gPSBvcGVuX3Byb2ZpbGVfbWVudSAgICAgIyBvcG0oKQpnY3UgPSBnZXRfY3VycmVudF91c2VybmFtZSAgIyBnY3UoKQojIEhlbHBlciBzaG9ydGN1dHMKZmNlID0gZmluZF9jaGlsZF9lbGVtZW50cyAgICAjIGZjZShwYXJlbnQsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkdyaWRWaWV3IikKZmNlbCA9IGZpbmRfY2hpbGRfZWxlbWVudCAgICAjIGZjZWwocGFyZW50LCBjbGFzc19uYW1lPSJhbmRyb2lkLndpZGdldC5UZXh0VmlldyIpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcHJpbnQoIvCfmoAgUVVJQ0sgVElLVE9LIFRFU1QiKQogICAgcHJpbnQoIj0iICogNDApCiAgICBwcmludCgiQXZhaWxhYmxlIGZ1bmN0aW9uczoiKQogICAgcHJpbnQoIiAgcG9zdF9uZXdmZWVkKCd1c2VybmFtZScpICAgICAgICBvciBwbmYoJ3VzZXJuYW1lJykiKQogICAgcHJpbnQoIiAgZXhlY3V0ZV9qb2IoJ2ZvbGxvdycsICdsaW5rJykgICBvciBlaignZm9sbG93JywgJ2xpbmsnKSIpCiAgICBwcmludCgiICBmb2xsb3dfdXNlcigncHJvZmlsZV9saW5rJykgICAgIG9yIGZ1KCdwcm9maWxlX2xpbmsnKSIpCiAgICBwcmludCgiICBsaWtlX3ZpZGVvKCd2aWRlb19saW5rJykgICAgICAgIG9yIGx2KCd2aWRlb19saW5rJykiKQogICAgcHJpbnQoIiAgZ2V0X2FjY291bnRzKCkgICAgICAgICAgICAgICAgICBvciBnYSgpIikKICAgIHByaW50KCIgIGdvX2hvbWUoKSAgICAgICAgICAgICAgICAgICAgICAgb3IgZ2goKSIpCiAgICBwcmludCgiICBnb19wcm9maWxlKCkgICAgICAgICAgICAgICAgICAgIG9yIGdwKCkiKQogICAgcHJpbnQoIiAgb3Blbl9wcm9maWxlX21lbnUoKSAgICAgICAgICAgICBvciBvcG0oKSIpCiAgICBwcmludCgiICBnZXRfY3VycmVudF91c2VybmFtZSgpICAgICAgICAgIG9yIGdjdSgpIikKICAgIHByaW50KCIgIGZpbmRfY2hpbGRfZWxlbWVudHMocGFyZW50LCBjbGFzc19uYW1lPScuLi4nKSAgb3IgZmNlKHBhcmVudCwgY2xhc3NfbmFtZT0nLi4uJykiKQogICAgcHJpbnQoIiAgZmluZF9jaGlsZF9lbGVtZW50KHBhcmVudCwgY2xhc3NfbmFtZT0nLi4uJykgICBvciBmY2VsKHBhcmVudCwgY2xhc3NfbmFtZT0nLi4uJykiKQogICAgcHJpbnQoIlxuRXhhbXBsZToiKQogICAgcHJpbnQoIiAgcHl0aG9uIC1jIFwiZnJvbSBxdWlja190aWt0b2sgaW1wb3J0ICo7IHBvc3RfbmV3ZmVlZCgnbXlfYWNjb3VudCcpXCIiKQogICAgcHJpbnQoIiAgcHl0aG9uIC1jIFwiZnJvbSBxdWlja190aWt0b2sgaW1wb3J0ICo7IHBuZigndGVzdDEyMycpXCIiKQogICAgcHJpbnQoIiAgcHl0aG9uIC1jIFwiZnJvbSBxdWlja190aWt0b2sgaW1wb3J0ICo7IGhlbHBlcj1pbml0X2hlbHBlcigpOyBwYXJlbnQ9aGVscGVyLmZpbmRfZWxlbWVudChjbGFzc19uYW1lPSdhbmRyb2lkLndpZGdldC5WaWV3R3JvdXAnKTsgZ3JpZHM9ZmNlKHBhcmVudCwgY2xhc3NfbmFtZT0nYW5kcm9pZC53aWRnZXQuR3JpZFZpZXcnKVwiIikKICAgIHBvc3RfbmV3ZmVlZCgnbXlfYWNjb3VudCcp').decode('utf-8'))
