import base64
exec(base64.b64decode('import time
import threading
from datetime import datetime, date, timedelta
import random
import json
from typing import Dict, Any, List, Optional
import config
import utils
from utils import LogLevel, Logger
from jobs import TiktokJob, Tiktok2Job, InstagramJob, YoutubeJob
from services.proxy_service import ProxyService

# Tạo logger cho MainService
logger = utils.get_logger("MainService")

# Constants cho MainService
class MainServiceConstants:
    """Constants cho MainService - chỉ chứa string/enum constants, số liệu lấy từ config"""
    
    # Các loại hành động (enum)
    ACTION_NEWSFEED = "newsfeed"           
    ACTION_REELS = "reels"                 
    ACTION_NOTIFICATION = "notification"    
    ACTION_PROFILE = "profile"             
    ACTION_JOB = "job"                     
    ACTION_EXPLORE = "explore"             
    ACTION_SEARCH = "search"               
    
    # Status messages
    MSG_DEVICE_PAUSED_SERVER = "Tạm dừng (Sever yêu cầu)"
    MSG_DEVICE_NO_ACCOUNTS = "Tạm nghỉ (Không có tài khoản)"
    MSG_WAITING_PROXY = "Đang chờ proxy"
    MSG_WORKING_HARMONIOUS = "Đang làm việc hài hòa"
    MSG_CARING_ACCOUNT = "Đang chăm sóc tài khoản"
    MSG_DOING_JOB = "Đang làm job"

class MainService:
    def __init__(self, db_service, helper_service, golike_service, mqtt_service=None):
        """
        Khởi tạo MainService - Service tích hợp chăm sóc và làm việc
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
            golike_service: GoLikeService để gọi API GoLike
            mqtt_service: MQTTService để gửi thông báo (optional)
        """
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.mqtt_service = mqtt_service
        self.running = True
        self.force_stop = False
        
        # Khởi tạo ProxyService
        self.proxy_service = ProxyService(db_service, helper_service)
        
        # Khởi tạo các job handler
        self.job_handlers = {}
        
        # Flag điều khiển
        self.is_initialized = False
        
        # Thông tin về các app được kích hoạt (từ global config)
        global_config = self.db.get_global_config({})
        self.enabled_apps = global_config.get("enabled_apps", config.ENABLED_APPS)
        
        # Lock để đồng bộ trạng thái
        self._lock = threading.Lock()
        
        # Dictionary để đếm số hành động care trong session
        self.care_action_counts = {}  # {account_id: count}
        
        # Dictionary để lưu lịch sử hành động của tài khoản
        self.account_action_history = {}  # {account_id: [actions]}
        
        # Session management per account
        self.account_sessions = {}  # {account_id: session_data}
        
        # Track consecutive failures per account
        self.account_consecutive_failures = {}  # {account_id: count}
        
        # Track consecutive no-job attempts per account
        self.account_no_job_attempts = {}  # {account_id: count}
        
        # Account rest periods - DEPRECATED: now using DB status = inactive + job_disable_until
        # self.account_last_work_time = {}  # {account_id: timestamp}
        # self.account_rest_until = {}  # {account_id: timestamp}
        
        # Đếm số lần liên tiếp không tìm thấy job
        self.no_job_consecutive_count = 0
        
        # Track tài khoản hiện tại để tránh reset IP proxy liên tục
        self.current_proxy_account_id = None
        
        # Track tài khoản hiện tại đang đăng nhập theo app
        self.current_logged_in_accounts = {}  # {app_name: account_id}
        
        # Flag để track xem đã verify current account chưa khi khởi động (giống JobService)
        self.initial_account_verified = {}  # {app_name: bool}
        
        # Track tài khoản hiện tại đang làm việc
        self.current_working_account = None
        
        # Track consecutive no-job attempts per account (từ JobService)
        self.account_no_job_attempts = {}  # {account_id: count}
        
    def _get_account_session_limits(self, account: Dict[str, Any]) -> Dict[str, int]:
        """
        Lấy giới hạn session cho account từ database config và job-specific config
        
        Args:
            account: Thông tin tài khoản (phải có 'app' field)
            
        Returns:
            Dict: Session limits cho account
        """
        try:
            # Lấy max_jobs_per_session từ account config hoặc default hardcode
            max_jobs_per_session = account.get("max_jobs_per_session", 0) or 10  # Default: 10 jobs
            
            # Tính max_actions_per_session động dựa trên max_jobs_per_session và app config
            max_actions_per_session = self._calculate_dynamic_actions_limit(max_jobs_per_session, account)
            
            # Lấy session duration từ job-specific config thay vì global config
            app_name = account.get("app")
            if app_name and app_name in self.job_handlers:
                job_handler = self.job_handlers[app_name]
                # Sử dụng random session duration từ job handler
                random_session_duration_minutes = job_handler.get_random_session_duration_minutes()
                max_session_duration = random_session_duration_minutes * 60
                
                logger.debug(f"Account {account.get('id')} ({app_name}): Random session duration: {random_session_duration_minutes} phút")
            else:
                # Fallback: sử dụng giá trị mặc định từ JobBase
                logger.warning(f"Không tìm thấy job handler cho app {app_name}, sử dụng default JobBase config")
                import random
                # Sử dụng default từ JobBase: 30-60 phút
                random_session_duration_minutes = random.randint(30, 60)
                max_session_duration = random_session_duration_minutes * 60
            
            logger.debug(f"Account {account.get('id')}: max_jobs={max_jobs_per_session}, calculated_max_actions={max_actions_per_session}")
            
            return {
                "max_jobs_per_session": max_jobs_per_session,
                "max_actions_per_session": max_actions_per_session,
                "max_session_duration": max_session_duration
            }
            
        except Exception as e:
            logger.error(f"Lỗi get session limits: {e}")
            # Fallback sử dụng hardcode values thay vì global config
            import random
            fallback_duration = random.randint(30, 60) * 60  # JobBase default: 30-60 phút
            
            return {
                "max_jobs_per_session": 10,  # Hardcode default
                "max_actions_per_session": 30,  # Hardcode default  
                "max_session_duration": fallback_duration
            }
    
    def _calculate_dynamic_actions_limit(self, max_jobs_per_session: int, account: Dict[str, Any] = None) -> int:
        """
        Tính toán dynamic max_actions_per_session dựa trên app config hoặc max_jobs_per_session
        
        Logic:
        - Ưu tiên lấy max_actions_per_session từ app config
        - Nếu không có thì tính toán dựa trên max_jobs_per_session với ratio
        - Áp dụng giới hạn tối thiểu
        
        Args:
            max_jobs_per_session: Số jobs tối đa trong session
            account: Thông tin tài khoản để lấy config app cụ thể (optional)
            
        Returns:
            int: Số actions tối đa tính toán được
        """
        try:
            # Lấy giới hạn từ app config nếu có account
            if account:
                app_name = account.get("app")
                if app_name and app_name in self.job_handlers:
                    handler = self.job_handlers[app_name]
                    app_config = handler.get_app_config()
                    
                    # Lấy min_actions từ app config hoặc hardcode default
                    min_actions = app_config.get("min_actions_per_session", 8)  # Default: 8
                    
                    # ƯU TIÊN: Lấy max_actions trực tiếp từ app config
                    app_max_actions = app_config.get("max_actions_per_session")
                    if app_max_actions:
                        final_actions = max(min_actions, app_max_actions)
                        logger.debug(f"Sử dụng max_actions_per_session từ {app_name} config: {final_actions}")
                        return final_actions
                    
                    logger.debug(f"App {app_name} không có max_actions_per_session, tính toán động")
                else:
                    # Fallback về hardcode default
                    min_actions = 8  # Default: tối thiểu 8 actions
                    logger.debug(f"Fallback về hardcode default: min={min_actions}")
            else:
                # Không có account, dùng hardcode default
                min_actions = 8  # Default: tối thiểu 8 actions
            
            # Tính toán actions cần thiết dựa trên số jobs (fallback)
            default_ratio = 2.5
            calculated_actions = int(max_jobs_per_session * default_ratio)
            max_actions = 30  # Hardcode default max actions
            
            # Áp dụng giới hạn tối thiểu và tối đa
            final_actions = max(min_actions, min(calculated_actions, max_actions))
            
            logger.debug(f"Dynamic actions calculation: {max_jobs_per_session} jobs * {default_ratio} ratio = {calculated_actions} → final: {final_actions} (min: {min_actions}, max: {max_actions})")
            
            return final_actions
            
        except Exception as e:
            logger.error(f"Lỗi calculate dynamic actions limit: {e}")
            return 30  # Hardcode default fallback
    
    def _get_account_rest_duration(self) -> int:
        """
        Lấy thời gian nghỉ ngơi từ config database
        
        Returns:
            int: Thời gian nghỉ ngơi (giây)
        """
        try:
            # Lấy session_cooldown_minutes từ database config và convert sang giây
            cooldown_minutes = self.get_global_config("session_cooldown_minutes", 30)  # Mặc định 30 phút
            base_duration = cooldown_minutes * 60
            
            # Thêm random nhỏ ±10% để tránh các account nghỉ cùng lúc
            variation = int(base_duration * 0.1)  
            rest_duration = random.randint(base_duration - variation, base_duration + variation)
            
            return rest_duration
            
        except Exception as e:
            logger.error(f"Lỗi get rest duration: {e}")
            return 30 * 60  # Fallback: 30 phút
    
    def _get_care_action_count(self, account_id: int) -> int:
        """
        Lấy số lượng hành động care đã thực hiện trong session
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            int: Số hành động care
        """
        return self.care_action_counts.get(account_id, 0)
    
    def _increment_care_action_count(self, account_id: int):
        """
        Tăng số lượng hành động care cho tài khoản
        
        Args:
            account_id: ID của tài khoản
        """
        self.care_action_counts[account_id] = self.care_action_counts.get(account_id, 0) + 1
        logger.debug(f"Care action count cho account {account_id}: {self.care_action_counts[account_id]}")
    
    def _reset_care_action_count(self, account_id: int):
        """
        Reset số lượng hành động care về 0
        
        Args:
            account_id: ID của tài khoản
        """
        self.care_action_counts[account_id] = 0
        logger.debug(f"Reset care action count cho account {account_id}")
    
    def _choose_random_action(self, account: Dict[str, Any]) -> str:
        """
        Chọn hành động thông qua JobBase handler
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            str: Loại hành động được chọn
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}, dùng default action")
                return MainServiceConstants.ACTION_NEWSFEED
            
            # Sử dụng JobBase để chọn action theo config
            chosen_action = handler.choose_weighted_action()
            
            logger.debug(f"JobBase chọn action '{chosen_action}' cho {account.get('unique_username')} ({app_name})")
            return chosen_action
            
        except Exception as e:
            logger.error(f"Lỗi chọn action qua JobBase: {e}")
            return MainServiceConstants.ACTION_NEWSFEED  # Fallback
    
    def _get_account_session(self, account_id: int) -> Dict[str, Any]:
        """
        Lấy thông tin session của account từ DB (persistent session)
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            Dict: Session data từ DB
        """
        try:
            # Lấy account data mới nhất từ DB
            account = self.db.get_account(account_id)
            if not account:
                logger.warning(f"Không tìm thấy account {account_id} trong DB")
                return {
                    'start_time': time.time(),
                    'action_count': 0,
                    'job_count': 0,
                    'care_count': 0,
                    'last_action_time': time.time()
                }
            
            # Tính action_count và care_count từ các field DB hiện có
            job_count = account.get("jobs_done_in_session", 0)
            care_count = account.get("care_actions_in_session", 0)  # Sẽ thêm field này
            action_count = job_count + care_count
            
            # Tính start_time: Nếu session chưa có start_time trong memory thì tạo mới
            # KHÔNG dùng last_job_time vì đó là thời điểm job cuối (có thể cũ)
            if account_id in self.account_sessions and 'start_time' in self.account_sessions[account_id]:
                # Dùng start_time từ memory session hiện tại
                start_time = self.account_sessions[account_id]['start_time']
            else:
                # Tạo start_time mới cho session hiện tại
                start_time = time.time()
            
            session_data = {
                'start_time': start_time,
                'action_count': action_count,
                'job_count': job_count,
                'care_count': care_count,
                'last_action_time': time.time()
            }
            
            # Cache vào memory để tránh query liên tục
            self.account_sessions[account_id] = session_data
            
            return session_data
            
        except Exception as e:
            logger.error(f"Lỗi get account session từ DB: {e}")
            # Fallback về memory session
            if account_id not in self.account_sessions:
                self.account_sessions[account_id] = {
                    'start_time': time.time(),
                    'action_count': 0,
                    'job_count': 0,
                    'care_count': 0,
                    'last_action_time': time.time()
                }
            return self.account_sessions[account_id]
    
    def _update_account_session(self, account_id: int, action_type: str, success: bool):
        """
        Cập nhật session data của account vào DB (persistent session)
        
        Args:
            account_id: ID của tài khoản
            action_type: Loại hành động
            success: Thành công hay không
        """
        try:
            # Lấy data hiện tại từ DB
            account = self.db.get_account(account_id)
            if not account:
                logger.warning(f"Không tìm thấy account {account_id} để update session")
                return
            
            # Tính toán các counters mới
            current_job_count = account.get("jobs_done_in_session", 0)
            current_care_count = account.get("care_actions_in_session", 0)
            
            update_data = {
                "last_action_time": int(time.time())
            }
            
            if success:
                if action_type == MainServiceConstants.ACTION_JOB:
                    update_data["jobs_done_in_session"] = current_job_count + 1
                else:
                    # Care action
                    update_data["care_actions_in_session"] = current_care_count + 1
            
            # Cập nhật vào DB
            self.db.update_account(account_id, update_data)
            
            # Cập nhật memory cache
            session = self._get_account_session_from_memory(account_id)
            if action_type == MainServiceConstants.ACTION_JOB and success:
                session['job_count'] += 1
            elif action_type != MainServiceConstants.ACTION_JOB:
                session['care_count'] += 1
            
            session['action_count'] = session['job_count'] + session['care_count']
            session['last_action_time'] = time.time()
            
            # Update consecutive failures (vẫn dùng memory vì không cần persist)
            if not success:
                self.account_consecutive_failures[account_id] = self.account_consecutive_failures.get(account_id, 0) + 1
                if action_type == MainServiceConstants.ACTION_JOB:
                    self.account_no_job_attempts[account_id] = self.account_no_job_attempts.get(account_id, 0) + 1
            else:
                self.account_consecutive_failures[account_id] = 0
                if action_type == MainServiceConstants.ACTION_JOB:
                    self.account_no_job_attempts[account_id] = 0
                    
        except Exception as e:
            logger.error(f"Lỗi update account session: {e}")
    
    def _get_account_session_from_memory(self, account_id: int) -> Dict[str, Any]:
        """
        Lấy session từ memory cache (helper function)
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            Dict: Session data từ memory
        """
        if account_id not in self.account_sessions:
            self.account_sessions[account_id] = {
                'start_time': time.time(),
                'action_count': 0,
                'job_count': 0,
                'care_count': 0,
                'last_action_time': time.time()
            }
        return self.account_sessions[account_id]
    
    def _reset_account_session(self, account_id: int, reason: str = ""):
        """
        Reset session data của account trong DB
        
        Args:
            account_id: ID của tài khoản
            reason: Lý do reset
        """
        try:
            # Reset session data trong DB
            reset_data = {
                "jobs_done_in_session": 0,
                "care_actions_in_session": 0,
                "last_action_time": int(time.time())
            }
            
            self.db.update_account(account_id, reset_data)
            
            # Reset memory cache
            if account_id in self.account_sessions:
                del self.account_sessions[account_id]
            
            logger.info(f"Reset session cho account {account_id}. Lý do: {reason}")
            
        except Exception as e:
            logger.error(f"Lỗi reset account session: {e}")

    def _reset_account_session_start_time(self, account_id: int, reason: str = ""):
        """
        Reset chỉ session start_time để bắt đầu session mới mà không mất progress
        
        Args:
            account_id: ID của tài khoản
            reason: Lý do reset start_time
        """
        try:
            # Reset memory cache session start_time
            if account_id in self.account_sessions:
                self.account_sessions[account_id]['start_time'] = time.time()
                logger.info(f"🔄 Reset session start_time cho account {account_id}. Lý do: {reason}")
            else:
                # Tạo mới session với start_time hiện tại
                self.account_sessions[account_id] = {
                    'start_time': time.time(),
                    'action_count': 0,
                    'job_count': 0,
                    'care_count': 0,
                    'last_action_time': time.time()
                }
                logger.info(f"🆕 Tạo mới session cho account {account_id}. Lý do: {reason}")
                
        except Exception as e:
            logger.error(f"Lỗi reset account session start_time: {e}")

    def _set_account_rest(self, account_id: int, reason: str = ""):
        """
        Đặt account vào trạng thái nghỉ ngơi sử dụng status = inactive và job_disable_until
        
        Args:
            account_id: ID của tài khoản
            reason: Lý do nghỉ ngơi
        """
        try:
            # Lấy thời gian nghỉ từ config
            rest_minutes = self._get_account_rest_duration() // 60  # Convert seconds to minutes
            
            # Sử dụng method chuẩn của DatabaseService
            success = self.db.set_account_inactive(
                account_id=account_id,
                cooldown_minutes=rest_minutes,
                inactive_reason=f"Account rest: {reason}"
            )
            
            if success:
                # Reset session data trong DB
                self._reset_account_session(account_id, f"Account rest: {reason}")
                
                # Reset consecutive counters (memory)
                self.account_consecutive_failures[account_id] = 0
                self.account_no_job_attempts[account_id] = 0
                
                logger.info(f"Account {account_id} được đặt nghỉ ngơi {rest_minutes} phút. Lý do: {reason}")
            else:
                logger.error(f"Không thể đặt account {account_id} nghỉ ngơi")
            
        except Exception as e:
            logger.error(f"Lỗi set account rest: {e}")
        
    def _set_account_follow_penalty(self, account_id: int, reason: str = ""):
        """
        Đặt account vào trạng thái ngừng follow vì bị unfollow/unlike
        
        Args:
            account_id: ID của tài khoản
            reason: Lý do ngừng follow
        """
        try:
            # Lấy thời gian penalty từ config (như JobService)
            penalty_minutes = self.get_global_config("unfollow_penalty_minutes", 720)  # Mặc định 12 giờ
            
            # Sử dụng method chuẩn của DatabaseService
            success = self.db.disable_account_follow(
                account_id=account_id,
                penalty_minutes=penalty_minutes,
                reason=f"Follow penalty: {reason}"
            )
            
            if success:
                logger.info(f"Account {account_id} bị ngừng follow {penalty_minutes} phút. Lý do: {reason}")
            else:
                logger.error(f"Không thể ngừng follow account {account_id}")
            
        except Exception as e:
            logger.error(f"Lỗi set follow penalty: {e}")
        
    def _set_account_daily_limit_reached(self, account_id: int, reason: str = ""):
        """
        Đặt account vào trạng thái inactive until next reset khi đạt giới hạn daily
        
        Args:
            account_id: ID của tài khoản
            reason: Lý do đạt giới hạn
        """
        try:
            # Sử dụng method chuẩn của DatabaseService
            success = self.db.set_account_inactive_until_next_reset(
                account_id=account_id,
                inactive_reason=f"Daily limit: {reason}"
            )
            
            if success:
                logger.info(f"Account {account_id} đạt giới hạn daily, nghỉ đến ngày mai. Lý do: {reason}")
            else:
                logger.error(f"Không thể set daily limit cho account {account_id}")
            
        except Exception as e:
            logger.error(f"Lỗi set daily limit: {e}")
        
    def _apply_appropriate_rest_type(self, account_id: int, switch_reason: str, session: Dict[str, Any]):
        """
        Áp dụng loại nghỉ ngơi phù hợp dựa trên lý do switch account
        
        Args:
            account_id: ID account
            switch_reason: Lý do switch
            session: Session data
        """
        try:
            account = self.db.get_account(account_id)
            if not account:
                return
                
            # Phân loại lý do và áp dụng rest type phù hợp
            if "daily" in switch_reason.lower() or "ngày" in switch_reason.lower():
                # Daily limit reached - inactive until next reset
                self._set_account_daily_limit_reached(account_id, switch_reason)
                
            elif "thất bại liên tiếp" in switch_reason.lower() or "consecutive" in switch_reason.lower():
                # Consecutive failures - có thể là follow penalty
                if "follow" in switch_reason.lower() or "unfollow" in switch_reason.lower():
                    self._set_account_follow_penalty(account_id, switch_reason)
                else:
                    # Generic session rest
                    self._set_account_rest(account_id, switch_reason)
                    
            elif "không có job" in switch_reason.lower() or "no job" in switch_reason.lower():
                # No jobs available - shorter rest
                cooldown_no_job = self.get_global_config("cooldown_get_job_golike", 30)  # 30 phút mặc định
                success = self.db.set_account_inactive(
                    account_id=account_id,
                    cooldown_minutes=cooldown_no_job,
                    inactive_reason=f"No job cooldown: {switch_reason}"
                )
                if success:
                    logger.info(f"Account {account_id} nghỉ {cooldown_no_job} phút (không có job)")
                    
            else:
                # Session completed normally - standard session cooldown
                self._set_account_rest(account_id, switch_reason)
                
        except Exception as e:
            logger.error(f"Lỗi apply appropriate rest type: {e}")
            # Fallback to standard rest
            self._set_account_rest(account_id, switch_reason)
            
    def _ensure_account_switched(self, account: Dict[str, Any]) -> bool:
        """
        Đảm bảo account được switch thực tế trên máy (như JobService)
        
        Args:
            account: Account cần switch
            
        Returns:
            bool: True nếu đã switch thành công hoặc đã đúng account
        """
        try:
            app_name = account.get("app")
            account_id = account.get("id")
            username = account.get("unique_username")
            
            if app_name not in self.job_handlers:
                logger.error(f"Không có handler cho app {app_name}")
                return False
            
            handler = self.job_handlers[app_name]
            
            # Kiểm tra xem có cần switch không (như JobService)
            current_logged_in_id = self.current_logged_in_accounts.get(app_name)
            needs_account_switch = current_logged_in_id != account_id
            
            if needs_account_switch:
                logger.info(f"Cần chuyển tài khoản {app_name}: hiện tại ID={current_logged_in_id}, cần chuyển sang ID={account_id}")
                
                # Thông báo cho user
                self.db.set("device_message", f"Đang chuyển account: {username} ({app_name})")
                
                # Thực hiện switch account
                switch_result = handler.switch_to_account(account)
                
                # Kiểm tra kết quả
                if isinstance(switch_result, dict):
                    if not switch_result.get('success', False):
                        reason = switch_result.get('reason', 'unknown')
                        message = switch_result.get('message', 'Lỗi không xác định')
                        
                        if reason == 'account_not_found':
                            logger.error(f"Không tìm thấy tài khoản {username} trong danh sách, đánh dấu logout")
                            # Đánh dấu logout và sync lại
                            self._mark_account_logout(account, "Không tìm thấy tài khoản trong danh sách")
                            return False
                        else:
                            logger.warning(f"Không thể chuyển sang tài khoản {username}: {message}")
                            return False
                    else:
                        # Cập nhật tracking sau khi switch thành công
                        self.current_logged_in_accounts[app_name] = account_id
                        
                        # QUAN TRỌNG: Reset session start_time cho account mới
                        self._reset_account_session_start_time(account_id, "Account switch")
                        
                        # QUAN TRỌNG: Cập nhật is_login status trong DB
                        self._update_account_login_status(app_name, account_id)
                        
                        # QUAN TRỌNG: Reload account data từ DB để đảm bảo thông tin mới nhất
                        logger.debug(f"Reloading account data sau khi switch cho account {account_id}")
                        
                        logger.info(f"✅ Đã chuyển thành công sang tài khoản {username}")
                        self.db.set("device_message", f"Đang làm việc: {username} ({app_name})")
                        return True
                else:
                    # Tương thích với implementation cũ
                    if not switch_result:
                        logger.warning(f"Không thể chuyển sang tài khoản {username}")
                        return False
                    else:
                        self.current_logged_in_accounts[app_name] = account_id
                        
                        # QUAN TRỌNG: Reset session start_time cho account mới
                        self._reset_account_session_start_time(account_id, "Account switch")
                        
                        # QUAN TRỌNG: Cập nhật is_login status trong DB
                        self._update_account_login_status(app_name, account_id)
                        
                        # QUAN TRỌNG: Reload account data từ DB để đảm bảo thông tin mới nhất
                        logger.debug(f"Reloading account data sau khi switch cho account {account_id}")
                        
                        logger.info(f"✅ Đã chuyển thành công sang tài khoản {username}")
                        self.db.set("device_message", f"Đang làm việc: {username} ({app_name})")
                        return True
            else:
                logger.debug(f"Tài khoản {username} đã đăng nhập, bỏ qua chuyển tài khoản")
                return True
                
        except Exception as e:
            logger.error(f"Lỗi ensure account switched: {e}")
            return False
    
    def _update_account_login_status(self, app_name: str, logged_in_account_id: int):
        """
        Cập nhật login status trong DB sau khi switch account thành công
        
        Args:
            app_name: Tên app
            logged_in_account_id: ID của account đã login
        """
        try:
            # Reset tất cả accounts của app về is_login = False
            app_accounts = self.db.get_accounts(app=app_name)
            for account in app_accounts:
                if account.get("is_login", False) and account["id"] != logged_in_account_id:
                    self.db.update_account(account["id"], {
                        "is_login": False,
                        "is_sync": False
                    })
                    logger.debug(f"Reset is_login=False cho account ID {account['id']}")
            
            # Cập nhật account hiện tại về is_login = True
            self.db.update_account(logged_in_account_id, {
                "is_login": True,
                "is_sync": False
            })
            logger.debug(f"Set is_login=True cho account ID {logged_in_account_id}")
            
        except Exception as e:
            logger.error(f"Lỗi update account login status: {e}")

    def _mark_account_logout(self, account: Dict[str, Any], reason: str):
        """
        Đánh dấu account logout và sync lại trạng thái
        
        Args:
            account: Account bị logout
            reason: Lý do logout
        """
        try:
            account_id = account.get("id")
            app_name = account.get("app")
            username = account.get("unique_username")
            
            # Update DB
            self.db.update_account(account_id, {
                "is_login": False,
                "is_sync": False
            })
            
            # Clear tracking
            if app_name in self.current_logged_in_accounts:
                del self.current_logged_in_accounts[app_name]
                
            # Clear verified state
            self.account_verified_states[account_id] = False
            
            # Cleanup session
            self._cleanup_account_session_on_logout(account_id)
            
            logger.info(f"Đã đánh dấu logout cho account {username}: {reason}")
            
        except Exception as e:
            logger.error(f"Lỗi mark account logout: {e}")
            
    def _get_account_rest_duration(self) -> int:
        """
        Lấy thời gian nghỉ ngơi của account từ config database
        
        Returns:
            int: Thời gian nghỉ ngơi tính bằng giây (mặc định từ session_cooldown_minutes)
        """
        try:
            # Sử dụng session_cooldown_minutes thay vì job_cooldown_minutes
            rest_minutes = self.get_global_config("session_cooldown_minutes", 30)
            return int(rest_minutes) * 60  # Convert minutes to seconds
        except Exception as e:
            logger.error(f"Lỗi lấy account rest duration: {e}")
            return 30 * 60  # Default 30 minutes

    def _cleanup_account_session_on_logout(self, account_id: int):
        """
        Cleanup session data khi logout account
        
        Args:
            account_id: ID của tài khoản
        """
        try:
            # Reset session trong DB
            self._reset_account_session(account_id, "Account logout")
            
            # Clear working status
            if self.current_working_account and self.current_working_account.get("id") == account_id:
                self.current_working_account = None
            
            # Clear tracking
            app_name = None
            for app, acc_id in self.current_logged_in_accounts.items():
                if acc_id == account_id:
                    app_name = app
                    break
            
            if app_name:
                del self.current_logged_in_accounts[app_name]
            
            # Clear verified state
            self.account_verified_states[account_id] = False
            
            logger.info(f"Cleaned up session data for logout account {account_id}")
            
        except Exception as e:
            logger.error(f"Lỗi cleanup account session: {e}")

    def _should_reset_session_on_new_day(self, account_id: int) -> bool:
        """
        Kiểm tra có nên reset session khi qua ngày mới
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            bool: True nếu cần reset session
        """
        try:
            session = self._get_account_session(account_id)
            if not session:
                return False
                
            last_action_time = session.get("last_action_time", 0)
            if last_action_time == 0:
                return False
                
            # Kiểm tra nếu qua ngày mới
            last_date = datetime.fromtimestamp(last_action_time).date()
            current_date = datetime.now().date()
            
            return current_date > last_date
            
        except Exception as e:
            logger.error(f"Lỗi kiểm tra reset session: {e}")
            return False

    def _should_switch_account(self, account_id: int) -> bool:
        """
        Kiểm tra xem có nên chuyển account không
        
        Args:
            account_id: ID của tài khoản hiện tại
            
        Returns:
            bool: True nếu nên chuyển account
        """
        try:
            # Lấy thông tin account
            account = self.db.get_account(account_id)
            if not account:
                return True
            
            # Lấy session limits từ config database
            session_limits = self._get_account_session_limits(account)
            max_actions_per_session = session_limits["max_actions_per_session"]
            max_jobs_per_session = session_limits["max_jobs_per_session"] 
            max_session_duration = session_limits["max_session_duration"]
            
            session = self._get_account_session(account_id)
            current_time = time.time()
            
            # 1. Kiểm tra giới hạn thời gian session
            session_duration = current_time - session['start_time']
            if session_duration >= max_session_duration:
                logger.info(f"Account {account_id}: Đã làm việc {session_duration/60:.1f} phút, cần nghỉ (limit: {max_session_duration/60:.1f} phút)")
                return True
            
            # 2. Kiểm tra số lượng hành động
            if session['action_count'] >= max_actions_per_session:
                logger.info(f"Account {account_id}: Đã thực hiện {session['action_count']} hành động, cần nghỉ (limit: {max_actions_per_session})")
                return True
            
            # 3. Kiểm tra số lượng job
            if session['job_count'] >= max_jobs_per_session:
                logger.info(f"Account {account_id}: Đã làm {session['job_count']} jobs, cần nghỉ (limit: {max_jobs_per_session})")
                return True
            
            # 4. Kiểm tra thất bại liên tiếp
            consecutive_failures = self.account_consecutive_failures.get(account_id, 0)
            max_consecutive_fails = self.get_global_config("switch_account_after_consecutive_fails", 3)
            if consecutive_failures >= max_consecutive_fails:
                logger.info(f"Account {account_id}: {consecutive_failures} lần thất bại liên tiếp, chuyển account")
                return True
            
            # 5. Kiểm tra không có job liên tiếp
            no_job_attempts = self.account_no_job_attempts.get(account_id, 0)
            max_no_job_attempts = self.get_global_config("switch_account_after_no_jobs", 5)
            if no_job_attempts >= max_no_job_attempts:
                logger.info(f"Account {account_id}: {no_job_attempts} lần không có job, chuyển account")
                return True
            
            # 6. Kiểm tra daily limit
            daily_limit = account.get("job_max_day", 100)  # Sử dụng job_max_day thay vì daily_job_limit
            daily_count = account.get("job_today", 0)  # Sử dụng job_today thay vì daily_job_count
            if daily_count >= daily_limit:
                logger.info(f"Account {account_id}: Đã đạt daily limit ({daily_count}/{daily_limit}), chuyển account")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Lỗi check should switch account: {e}")
            return False
    
    def _is_account_resting(self, account_id: int) -> bool:
        """
        Kiểm tra xem account có đang nghỉ ngơi không (sử dụng DB status)
        
        Args:
            account_id: ID của tài khoản
            
        Returns:
            bool: True nếu đang nghỉ ngơi
        """
        try:
            account = self.db.get_account(account_id)
            if not account:
                return False
                
            # Kiểm tra status = inactive và job_disable_until
            if account.get("status") == "inactive":
                job_disable_until = account.get("job_disable_until", 0)
                current_time = time.time()
                
                if job_disable_until > current_time:
                    remaining_minutes = (job_disable_until - current_time) / 60
                    logger.debug(f"Account {account_id} còn nghỉ {remaining_minutes:.1f} phút")
                    return True
                else:
                    # Hết thời gian nghỉ, tự động chuyển về active (như JobService)
                    logger.info(f"Account {account_id} đã hết thời gian nghỉ, chuyển về active")
                    self.db.update_account(account_id, {
                        "status": "active",
                        "job_disable_until": 0,
                        "inactive_reason": "",
                        "is_sync": False
                    })
                    return False
            
            return False
            
        except Exception as e:
            logger.error(f"Lỗi kiểm tra account rest: {e}")
            return False
    
    def _get_next_available_account(self) -> Optional[Dict[str, Any]]:
        """
        Lấy account tiếp theo có thể làm việc (không nghỉ ngơi)
        
        Returns:
            Optional[Dict]: Account có thể làm việc hoặc None
        """
        workable_accounts = self._get_all_workable_accounts()
        
        # Lọc bỏ các account đang nghỉ ngơi
        available_accounts = []
        for account in workable_accounts:
            account_id = account.get("id")
            if not self._is_account_resting(account_id):
                available_accounts.append(account)
        
        if not available_accounts:
            return None
        
        # Ưu tiên account chưa làm việc gần đây
        def sort_key(acc):
            acc_id = acc.get("id")
            last_work_time = self.account_last_work_time.get(acc_id, 0)
            return (
                acc.get("is_login", False),  # Ưu tiên đã login
                -last_work_time,  # Ưu tiên lâu không làm việc
                -acc.get("job_today", 0)  # Ưu tiên ít job hơn (dùng job_today thay vì daily_job_count)
            )
        
        available_accounts.sort(key=sort_key, reverse=True)
        return available_accounts[0]
    
    def _record_action_history(self, account_id: int, action: str, success: bool):
        """
        Ghi lại lịch sử hành động của tài khoản
        
        Args:
            account_id: ID của tài khoản
            action: Loại hành động
            success: Có thành công không
        """
        if account_id not in self.account_action_history:
            self.account_action_history[account_id] = []
        
        history_entry = {
            'action': action,
            'success': success,
            'timestamp': datetime.now().isoformat()
        }
        
        self.account_action_history[account_id].append(history_entry)
        
        # Giữ tối đa 50 entries cho mỗi account
        if len(self.account_action_history[account_id]) > 50:
            self.account_action_history[account_id] = self.account_action_history[account_id][-50:]
    
    def safe_sleep(self, seconds: float) -> bool:
        """
        Sleep an toàn với khả năng bị gián đoạn
        
        Args:
            seconds: Số giây cần sleep
            
        Returns:
            bool: True nếu sleep hoàn thành, False nếu bị force stop
        """
        start_time = time.time()
        
        while time.time() - start_time < seconds:
            if not self.running or self.force_stop:
                return False
            check_interval = self.get_global_config("check_interval", 0.5)
            time.sleep(check_interval)
        
        return True
    
    def _validate_and_update_enabled_apps(self):
        """
        Kiểm tra và cập nhật danh sách enabled_apps bằng cách loại bỏ các app chưa cài đặt
        Sử dụng mapping tĩnh thay vì tạo job handlers tạm thời để tránh conflict
        """
        try:
            logger.info("Kiểm tra và cập nhật danh sách enabled_apps...")
            
            # Mapping tĩnh app_name -> app_package (lấy từ các job handlers)
            app_packages = {
                "tiktok": "com.ss.android.ugc.trill",
                "tiktok2": "com.zhiliaoapp.musically", 
                "instagram": "com.instagram.android",
                "youtube": "com.google.android.youtube"
            }
            
            current_enabled_apps = self.db.get_global_config({}).get("enabled_apps", config.ENABLED_APPS)
            validated_apps = []
            removed_apps = []
            
            for app_name in current_enabled_apps:
                try:
                    app_package = app_packages.get(app_name)
                    if app_package:
                        # Kiểm tra app có được cài đặt không
                        if self.helper.is_app_installed(app_package):
                            validated_apps.append(app_name)
                            logger.debug(f"✓ {app_name} ({app_package}) đã cài đặt")
                        else:
                            removed_apps.append(app_name)
                            logger.warning(f"✗ {app_name} ({app_package}) chưa cài đặt, sẽ bị loại bỏ")
                    else:
                        logger.warning(f"Không tìm thấy package mapping cho app: {app_name}")
                        removed_apps.append(app_name)
                        
                except Exception as e:
                    logger.error(f"Lỗi kiểm tra app {app_name}: {e}")
                    removed_apps.append(app_name)
            
            # Cập nhật enabled_apps nếu có thay đổi
            if removed_apps:
                logger.info(f"Loại bỏ {len(removed_apps)} app chưa cài đặt: {', '.join(removed_apps)}")
                logger.info(f"Giữ lại {len(validated_apps)} app đã cài đặt: {', '.join(validated_apps)}")
                
                # Cập nhật vào database (global config)
                self.db.update_global_config({"enabled_apps": validated_apps})
                
                # Cập nhật local cache
                self.enabled_apps = validated_apps
            else:
                logger.info(f"Tất cả {len(validated_apps)} app trong enabled_apps đều đã được cài đặt")
                
        except Exception as e:
            logger.error(f"Lỗi validate enabled_apps: {e}")

    def initialize(self) -> bool:
        """
        Khởi tạo MainService
        
        Returns:
            bool: True nếu khởi tạo thành công
        """
        try:
            logger.info("Khởi tạo MainService...")
            
            # Kiểm tra và cập nhật enabled_apps TRƯỚC khi khởi tạo job handlers
            self._validate_and_update_enabled_apps()
            
            # Khởi tạo job handlers
            self._init_job_handlers()
            
            # Khởi tạo config mặc định cho các app
            self._init_app_configs()
            
            # Lưu các config mặc định
            self._save_default_configs()
            
            # Reset daily counters nếu cần
            self._reset_daily_counters()
            
            # Fetch GoLike headers trước khi sync accounts (như JobService)
            if not self._ensure_golike_headers():
                logger.warning("Không thể lấy GoLike headers, sync accounts sẽ bị giới hạn")
            
            # Đồng bộ accounts từ thiết bị và mapping GoLike (như JobService)
            self._sync_all_accounts_and_mapping()
            
            # Không sync trạng thái login ngay lập tức như JobService
            # Sẽ lazy sync khi cần thiết trong _get_next_workable_account()
            
            self.is_initialized = True
            logger.info("MainService khởi tạo thành công")
            return True
            
        except Exception as e:
            logger.error(f"Lỗi khởi tạo MainService: {e}")
            return False
    
    def _ensure_golike_headers(self) -> bool:
        """
        Lấy GoLike headers khi khởi động tool (fetch với retry)
        
        Returns:
            bool: True nếu có headers hợp lệ hoặc lấy được headers mới
        """
        try:
            logger.info("Đang kiểm tra và lấy GoLike headers...")
            
            # Kiểm tra headers hiện có trước
            if self.golike_service.is_golike_authenticated():
                logger.info("GoLike headers đã có sẵn và hợp lệ")
                return True
            
            logger.info("Chưa có GoLike headers, đang cố gắng lấy mới...")
            
            # Kiểm tra và đăng ký proxy nếu cần trước khi fetch GoLike headers
            if not self.proxy_service.check_proxy_requirement():
                logger.warning("Không thể lấy proxy cho việc fetch GoLike headers")
                return False
            
            # Thực sự fetch headers với retry
            success = self.golike_service.fetch_golike_headers_with_retry(force_refresh=False)
            
            if success:
                logger.info("✅ Đã lấy GoLike headers thành công khi khởi động")
                return True
            else:
                logger.warning("⚠️ Không thể lấy GoLike headers khi khởi động")
                return False
            
        except Exception as e:
            logger.error(f"Lỗi lấy GoLike headers khi khởi động: {e}")
            return False
    
    def _check_golike_headers(self) -> bool:
        """
        Chỉ kiểm tra GoLike headers hiện có (không fetch mới)
        
        Returns:
            bool: True nếu có headers hợp lệ
        """
        try:
            return self.golike_service.is_golike_authenticated()
        except Exception as e:
            logger.error(f"Lỗi kiểm tra GoLike headers: {e}")
            return False
    
    def _sync_all_accounts_and_mapping(self):
        """
        Đồng bộ accounts từ thiết bị và mapping GoLike cho tất cả apps (như JobService)
        """
        try:
            logger.info("Bắt đầu đồng bộ accounts và mapping GoLike...")
            
            for app_name in self.enabled_apps:
                if app_name not in self.job_handlers:
                    logger.warning(f"Không có handler cho {app_name}, bỏ qua đồng bộ")
                    continue
                
                handler = self.job_handlers[app_name]
                
                try:
                    # Kiểm tra và đăng ký proxy nếu cần trước khi sync accounts
                    if not self.proxy_service.check_proxy_requirement():
                        logger.warning(f"Không thể lấy proxy cho việc đồng bộ {app_name}, bỏ qua")
                        continue
                    
                    # 1. Đồng bộ tài khoản từ thiết bị
                    logger.info(f"Đang đồng bộ tài khoản {app_name}...")
                    accounts = handler.sync_accounts_to_db()
                    logger.info(f"Đã đồng bộ {len(accounts)} tài khoản {app_name}")
                    
                    # Kiểm tra nếu không có tài khoản thì bỏ qua mapping
                    if not accounts:
                        logger.info(f"Không có tài khoản nào được đồng bộ cho {app_name}, bỏ qua mapping GoLike")
                        continue
                    
                    # 2. Map tài khoản GoLike (chỉ khi có GoLike headers hợp lệ)
                    if self._check_golike_headers():
                        logger.info(f"Đang lấy danh sách tài khoản GoLike cho {app_name}...")
                        golike_accounts = handler.get_golike_accounts()
                        
                        if golike_accounts:
                            logger.info(f"Đã tìm thấy {len(golike_accounts)} tài khoản GoLike cho {app_name}")
                            
                            # Lấy tài khoản từ DB
                            device_accounts = self.db.get_accounts(app=app_name)
                            
                            # Ánh xạ tài khoản
                            mapped_accounts = handler.map_golike_accounts(golike_accounts, device_accounts)
                            
                            logger.info(f"Đã ánh xạ {len(mapped_accounts)} tài khoản {app_name} với GoLike")
                        else:
                            logger.info(f"Không tìm thấy tài khoản GoLike cho {app_name}")
                    else:
                        logger.warning(f"Không có GoLike headers hợp lệ, bỏ qua mapping cho {app_name}")
                        
                except Exception as e:
                    logger.error(f"Lỗi đồng bộ {app_name}: {e}")
                    continue
            
            logger.info("Hoàn thành đồng bộ accounts và mapping GoLike")
            
        except Exception as e:
            logger.error(f"Lỗi đồng bộ accounts và mapping: {e}")

    def _init_job_handlers(self):
        """Khởi tạo các job handler cho từng app"""
        try:
            # Sử dụng self.enabled_apps đã được validate thay vì lấy từ database
            enabled_apps = self.enabled_apps
            logger.info(f"Khởi tạo job handlers cho các apps đã validate: {', '.join(enabled_apps)}")
            
            for app_name in enabled_apps:
                if app_name == "tiktok":
                    self.job_handlers[app_name] = TiktokJob(self.db, self.helper, self.golike_service)
                    self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                    self.job_handlers[app_name].set_proxy_service(self.proxy_service)
                elif app_name == "tiktok2":
                    self.job_handlers[app_name] = Tiktok2Job(self.db, self.helper, self.golike_service)
                    self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                    self.job_handlers[app_name].set_proxy_service(self.proxy_service)
                elif app_name == "instagram":
                    self.job_handlers[app_name] = InstagramJob(self.db, self.helper, self.golike_service)
                    self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                    self.job_handlers[app_name].set_proxy_service(self.proxy_service)
                elif app_name == "youtube":
                    self.job_handlers[app_name] = YoutubeJob(self.db, self.helper, self.golike_service)
                    self.job_handlers[app_name].set_sleep_function(self.safe_sleep)
                    self.job_handlers[app_name].set_proxy_service(self.proxy_service)
                else:
                    logger.warning(f"App {app_name} chưa được hỗ trợ")
                    continue
                    
                
                
        except Exception as e:
            logger.error(f"Lỗi khởi tạo job handlers: {e}")
    
    def _init_app_configs(self) -> bool:
        """
        Khởi tạo config mặc định cho tất cả apps
        
        Returns:
            bool: True nếu thành công
        """
        try:
            logger.info("Khởi tạo config mặc định cho apps...")
            
            # Khởi tạo config cho từng job handler
            for app_name, handler in self.job_handlers.items():
                try:
                    success = handler.init_default_app_config()
                    if not success:
                        # logger.info(f"Đã khởi tạo config cho {app_name}")
                        logger.warning(f"Không thể khởi tạo config cho {app_name}")
                except Exception as e:
                    logger.error(f"Lỗi khởi tạo config cho {app_name}: {e}")
            
            return True
        except Exception as e:
            logger.error(f"Lỗi khởi tạo app configs: {e}")
            return False
    
    def _save_default_configs(self):
        """Lưu các config mặc định vào database theo structure mới"""
        try:
            # Import config để lấy default values
            import config
            
            # Lưu default global config nếu chưa có
            current_global_config = self.db.get_global_config({})
            if not current_global_config:
                logger.info("Khởi tạo global config mặc định...")
                self.db.set_global_config(config.DEFAULT_GLOBAL_CONFIG)
                logger.info("Đã lưu global config mặc định")
            
            # Lưu default golike config nếu chưa có
            current_golike_config = self.db.get_golike_config({})
            if not current_golike_config:
                logger.info("Khởi tạo golike config mặc định...")
                self.db.set_golike_config(config.DEFAULT_GOLIKE_CONFIG)
                logger.info("Đã lưu golike config mặc định")
            
            # Lưu default proxy config nếu chưa có
            current_proxy_config = self.db.get_proxy_config({})
            if not current_proxy_config:
                logger.info("Khởi tạo proxy config mặc định...")
                self.db.set_proxy_config(config.DEFAULT_PROXY_CONFIG)
                logger.info("Đã lưu proxy config mặc định")
            
            logger.debug("Đã kiểm tra và lưu các default configs")
            
        except Exception as e:
            logger.error(f"Lỗi lưu default configs: {e}")
    
    def get_global_config(self, key: str, default_value=None):
        """
        Lấy config từ global_config với fallback về default value
        
        Args:
            key: Tên config cần lấy  
            default_value: Giá trị mặc định nếu không tìm thấy
            
        Returns:
            Giá trị config hoặc default_value
        """
        global_config = self.db.get_global_config({})
        return global_config.get(key, default_value)
    
    def _reset_daily_counters(self):
        """Reset các counter hàng ngày theo giờ được cấu hình (mặc định 7h sáng)"""
        try:
            now = datetime.now()
            reset_hour = self.get_global_config("daily_reset_hour", 7)  # Mặc định 7h sáng
            
            # Tạo timestamp cho giờ reset hôm nay
            today_reset_time = now.replace(hour=reset_hour, minute=0, second=0, microsecond=0)
            
            # Nếu giờ hiện tại chưa đến giờ reset hôm nay, thì giờ reset cuối cùng là hôm qua
            if now < today_reset_time:
                last_reset_time = today_reset_time - timedelta(days=1)
            else:
                last_reset_time = today_reset_time
            
            # Lấy thời gian reset cuối cùng từ DB
            last_reset_timestamp = self.get_global_config("last_daily_reset_timestamp", 0)
            
            # So sánh timestamp để quyết định có cần reset không
            if last_reset_timestamp < last_reset_time.timestamp():
                logger.info(f"Reset daily counters lúc {now.strftime('%Y-%m-%d %H:%M:%S')} (giờ reset: {reset_hour}h)")
                
                # Reset job counters - lấy tất cả accounts (không filter)
                accounts = self.db.get_accounts(device_id=False)  # device_id=False để không filter theo device
                reset_count = 0
                for account in accounts:
                    if account.get("id"):
                        self.db.update_account(account["id"], {
                            "job_today": 0,  # Sử dụng job_today thay vì daily_job_count
                            "follow_today": 0  # Sử dụng follow_today thay vì daily_follow_count
                        })
                        reset_count += 1
                
                # Lưu timestamp reset mới
                self.db.update_global_config({
                    "last_daily_reset_date": now.strftime("%Y-%m-%d"),  # Giữ để backward compatibility
                    "last_daily_reset_timestamp": int(last_reset_time.timestamp())
                })
                
                logger.info(f"Đã reset daily counters cho {reset_count} tài khoản")
            else:
                logger.debug(f"Daily counters đã được reset rồi (lần cuối: {datetime.fromtimestamp(last_reset_timestamp).strftime('%Y-%m-%d %H:%M:%S')})")
                
        except Exception as e:
            logger.error(f"Lỗi reset daily counters: {e}")
                
        except Exception as e:
            logger.error(f"Lỗi reset daily counters: {e}")
    
    def _get_all_workable_accounts(self) -> List[Dict[str, Any]]:
        """
        Lấy tất cả tài khoản có thể làm việc hoặc chăm sóc
        
        Returns:
            List[Dict]: Danh sách tài khoản có thể làm việc
        """
        workable_accounts = []
        enabled_apps = self.get_global_config("enabled_apps", config.ENABLED_APPS)
        
        for app_name in enabled_apps:
            if app_name not in self.job_handlers:
                logger.warning(f"Không có handler cho app {app_name}")
                continue
                
            accounts = self.db.get_accounts(app=app_name)
            app_workable_count = 0
            
            for account in accounts:
                if self._can_work_with_account(account):
                    workable_accounts.append(account)
                    app_workable_count += 1
        
        logger.info(f"Tìm được {len(workable_accounts)} tài khoản có thể làm việc từ {len(enabled_apps)} apps")
        
        # Sắp xếp theo thứ tự ưu tiên sử dụng đúng tên trường database
        workable_accounts.sort(key=lambda x: (
            x.get("is_login", False),  # Ưu tiên account đã login
            -x.get("job_today", 0),  # Ưu tiên account ít job hơn (dùng job_today thay vì daily_job_count)
            -x.get("last_job_time", 0)  # Ưu tiên account lâu không làm job (timestamp ngược)
        ), reverse=True)
        
        return workable_accounts
    
    def _can_work_with_account(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể làm việc hoặc chăm sóc với tài khoản không
        (Áp dụng cho cả JOB và CARE)
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể làm việc
        """
        try:
            # Kiểm tra trạng thái cơ bản
            if not account:
                return False
            
            account_id = account.get("id")
            
            # Kiểm tra và reset session nếu qua ngày mới
            if self._should_reset_session_on_new_day(account_id):
                self._reset_account_session(account_id, "Ngày mới")
            
            # Kiểm tra status (sử dụng logic như JobService)
            account_status = account.get("status", "active")
            if account_status in ["disabled", "logout"]:
                return False
            
            # Nếu inactive, kiểm tra job_disable_until (giống JobService)
            if account_status == "inactive":
                job_disable_until = account.get("job_disable_until", 0)
                if job_disable_until > time.time():
                    return False  # Vẫn đang trong thời gian chờ
            
            # Kiểm tra job_enable = 1 (boolean check)
            if not account.get("job_enable", False):
                return False
            
            # Kiểm tra app có được enable không
            app_name = account.get("app")
            enabled_apps = self.get_global_config("enabled_apps", config.ENABLED_APPS)
            if app_name not in enabled_apps:
                return False
            
            # Kiểm tra có job handler không
            if app_name not in self.job_handlers:
                return False
            
            # Kiểm tra account có đang nghỉ ngơi không
            if self._is_account_resting(account_id):
                return False
                
            # KHÔNG kiểm tra is_golike_linked ở đây - để cho _can_run_job() check
            # Account có thể được chăm sóc mà không cần link GoLike
            
            return True
            
        except Exception as e:
            logger.error(f"Lỗi kiểm tra account workable: {e}")
            return False

    def _can_do_job_with_account(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem có thể làm JOB với tài khoản không (riêng biệt với care)
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể làm job
        """
        try:
            # Kiểm tra cơ bản trước
            if not self._can_work_with_account(account):
                return False
            
            account_id = account.get("id")
            username = account.get("unique_username")
            
            # Kiểm tra daily job limit - sử dụng field names đúng như DB schema
            daily_job_count = account.get("job_today", 0)  # Field thật trong DB
            daily_job_limit = account.get("job_max_day", 0)  # Field thật trong DB
            
            logger.debug(f"Account {username} job limit check: job_today={daily_job_count}, job_max_day={daily_job_limit}")
            
            if daily_job_limit > 0 and daily_job_count >= daily_job_limit:
                logger.debug(f"Account {username} đã đạt daily job limit ({daily_job_count}/{daily_job_limit})")
                return False
            
            # Kiểm tra account có đang resting không
            if self._is_account_resting(account_id):
                logger.debug(f"Account {username} đang resting")
                return False
                
            # Kiểm tra GoLike link (cần cho job)
            if not account.get("is_golike_linked", False):
                logger.debug(f"Account {username} chưa link GoLike")
                return False
            
            logger.debug(f"Account {username} có thể làm job: jobs={daily_job_count}/{daily_job_limit}, golike={account.get('is_golike_linked', False)}")
            return True
            
        except Exception as e:
            logger.error(f"Lỗi kiểm tra can do job: {e}")
            return False

    def _get_next_workable_account(self) -> Optional[Dict[str, Any]]:
        """
        Lấy tài khoản tiếp theo có thể làm việc theo logic tối ưu từ JobService:
        1. Tài khoản đang đăng nhập (từ tracking)
        2. Tài khoản có thể làm việc theo thứ tự app, ngày tạo
        
        Chỉ verify login thực tế khi lần đầu hoặc khi cần thiết
        
        Returns:
            Optional[Dict]: Tài khoản được chọn hoặc None
        """
        try:
            # Bước 1: Kiểm tra current working account trước
            if self.current_working_account:
                current_id = self.current_working_account.get("id")
                current_username = self.current_working_account.get("unique_username")
                
                logger.debug(f"Kiểm tra current account: {current_username}")
                
                # Lấy data mới nhất từ database
                updated_current_account = self.db.get_account(current_id)
                if updated_current_account:
                    # Kiểm tra xem current account có còn đủ điều kiện làm việc không
                    can_continue = (
                        self._can_work_with_account(updated_current_account) and
                        not self._is_account_resting(current_id) and
                        not self._should_switch_account(current_id)
                    )
                    
                    if can_continue:
                        logger.debug(f"Tiếp tục với current account: {current_username}")
                        # Update working account với data mới nhất
                        self.current_working_account = updated_current_account
                        return updated_current_account
                    else:
                        logger.info(f"Current account {current_username} không còn làm việc được, tìm account mới")
                        
                        # Đặt account hiện tại nghỉ ngơi nếu cần
                        if self._should_switch_account(current_id):
                            session = self._get_account_session(current_id)
                            reason = f"Session limit: {session['action_count']} actions, {session['job_count']} jobs"
                            self._set_account_rest(current_id, reason)
                            logger.info(f"Đặt account {current_username} nghỉ ngơi - {reason}")
                        
                        # Clear current working account
                        self.current_working_account = None
                else:
                    logger.warning(f"Current account {current_id} không tồn tại trong DB")
                    self.current_working_account = None
            
            # Bước 2: Tìm account đang đăng nhập từ tracking (như JobService)
            for app_name in self.enabled_apps:
                # Verify tài khoản thực tế khi lần đầu làm việc với app này (chỉ khi cần)
                if app_name not in self.initial_account_verified and app_name in self.job_handlers:
                    # Chỉ verify khi không có tài khoản nào trong tracking hoặc khi tracking không hợp lệ
                    if app_name not in self.current_logged_in_accounts:
                        logger.info(f"Verify tài khoản thực tế đang login trên {app_name} lần đầu...")
                        try:
                            self._sync_account_login_status_with_reality(app_name, self.job_handlers[app_name])
                        except Exception as e:
                            logger.error(f"Lỗi khi verify tài khoản trên {app_name}: {e}")
                        finally:
                            # Đánh dấu đã thử verify để không thử lại
                            self.initial_account_verified[app_name] = True
                    else:
                        # Có tracking rồi, không cần verify ngay
                        self.initial_account_verified[app_name] = True
                
                # Kiểm tra tài khoản đang đăng nhập từ tracking
                if app_name in self.current_logged_in_accounts:
                    logged_in_account_id = self.current_logged_in_accounts[app_name]
                    account = self.db.get_account(logged_in_account_id)
                    if account and self._can_work_with_account(account):
                        # Verify account thực tế trên app (quan trọng sau khi restart)
                        if self._verify_account_in_app(account):
                            logger.info(f"Tìm thấy và verified tài khoản từ tracking: {account.get('unique_username')} ({app_name})")
                            return account
                        else:
                            logger.info(f"Account tracking {account.get('unique_username')} không verify được, xóa tracking")
                            # Verify function đã tự động xóa tracking và sync, tiếp tục tìm account khác
                    else:
                        # Tài khoản không còn hợp lệ, xóa khỏi tracking
                        del self.current_logged_in_accounts[app_name]
                        if account:
                            self.db.update_account(logged_in_account_id, {"is_login": False, "is_sync": False})
                        logger.debug(f"Xóa tài khoản {logged_in_account_id} ({app_name}) khỏi tracking do không hợp lệ")
            
            # Bước 3: Tìm tài khoản đăng nhập từ database với verification thực tế
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                for account in accounts:
                    # Ưu tiên tài khoản đang đăng nhập từ DB - sử dụng field "is_login" như JobService
                    if account.get("is_login", False) and self._can_work_with_account(account):
                        # QUAN TRỌNG: Verify thực tế trên app trước khi tin tưởng DB
                        if self._verify_account_in_app(account):
                            logger.info(f"Tìm thấy và verified tài khoản đăng nhập: {account.get('unique_username')} ({app_name})")
                            return account
                        else:
                            logger.info(f"Account {account.get('unique_username')} không verify được, tiếp tục tìm...")
                            # Verify sẽ tự động sync và cập nhật tracking, tiếp tục với account khác
            
            # Bước 4: Nếu không có tài khoản đang đăng nhập, lấy tài khoản theo thứ tự
            all_workable_accounts = []
            
            # Debug: Thống kê chi tiết accounts theo app
            total_accounts = 0
            for app_name in self.enabled_apps:
                accounts = self.db.get_accounts(app=app_name)
                total_accounts += len(accounts)
                
                logger.debug(f"📱 App {app_name}: {len(accounts)} tài khoản")
                
                # Phân tích từng tài khoản
                workable_count = 0
                for acc in accounts:
                    username = acc.get('unique_username', 'unknown')
                    status = acc.get('status', 'unknown')
                    job_enable = acc.get('job_enable', False)
                    is_login = acc.get('is_login', False)
                    is_golike_linked = acc.get('is_golike_linked', False)
                    job_today = acc.get('job_today', 0)
                    job_max_day = acc.get('job_max_day', 0)
                    
                    # Kiểm tra có workable không
                    can_work = self._can_work_with_account(acc)
                    
                    logger.debug(f"   {username}: status={status}, job_enable={job_enable}, "
                               f"is_login={is_login}, golike={is_golike_linked}, "
                               f"jobs={job_today}/{job_max_day}, can_work={can_work}")
                    
                    if can_work:
                        workable_count += 1
                        all_workable_accounts.append(acc)
                
                logger.debug(f"   → {workable_count}/{len(accounts)} có thể làm việc")
            
            logger.info(f"🔍 Tổng kết: {len(all_workable_accounts)}/{total_accounts} tài khoản có thể làm việc từ {len(self.enabled_apps)} apps")
            
            if not all_workable_accounts:
                logger.info("❌ Không có account nào có thể làm việc - kiểm tra log chi tiết ở trên")
                return None
                
            # Sắp xếp theo thứ tự ưu tiên: app name, created_date
            all_workable_accounts.sort(
                key=lambda x: (x.get("app", ""), x.get("created_date", ""))
            )
            
            # Trả về account đầu tiên
            selected_account = all_workable_accounts[0]
            logger.info(f"Chọn account theo thứ tự ưu tiên: {selected_account.get('unique_username')} ({selected_account.get('app')})")
            return selected_account
                        
        except Exception as e:
            logger.error(f"Lỗi trong _get_next_workable_account: {e}")
            return None

    def _verify_account_in_app(self, account: Dict[str, Any]) -> bool:
        """
        Verify account thực tế trên app có đúng account đang login trong DB không
        Nếu không đúng thì sync lại account từ app về DB
        
        Args:
            account: Account từ DB có is_login = True
            
        Returns:
            bool: True nếu account đúng hoặc sync thành công, False nếu có lỗi
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            expected_username = account.get("unique_username")
            account_id = account.get("id")
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}")
                return False
            
            logger.info(f"Verify account {expected_username} trên {app_name}...")
            
            # Bước 1: Mở app và kiểm tra account hiện tại
            try:
                # Đảm bảo app được mở
                if hasattr(handler, 'ensure_app_open'):
                    handler.ensure_app_open()
                
                # Lấy username thực tế đang login trên app
                current_username = handler.get_current_logged_in_username()
                
                if not current_username:
                    logger.warning(f"Không lấy được username hiện tại trên {app_name}")
                    # Set account về is_login = False
                    self.db.update_account(account_id, {"is_login": False, "is_sync": False})
                    # Xóa khỏi tracking
                    if app_name in self.current_logged_in_accounts:
                        del self.current_logged_in_accounts[app_name]
                    return False
                
                # So sánh với account trong DB
                if current_username.lower() == expected_username.lower():
                    logger.info(f"✅ Verified: Account {expected_username} đúng đang login trên {app_name}")
                    # Cập nhật tracking
                    self.current_logged_in_accounts[app_name] = account_id
                    return True
                else:
                    logger.warning(f"❌ Account mismatch: DB={expected_username}, App={current_username}")
                    # Cần sync lại từ app về DB
                    return self._sync_account_from_app_to_db(app_name, current_username)
                    
            except Exception as e:
                logger.error(f"Lỗi khi verify account trên {app_name}: {e}")
                return False
                
        except Exception as e:
            logger.error(f"Lỗi trong _verify_account_in_app: {e}")
            return False

    def _sync_account_from_app_to_db(self, app_name: str, current_username: str) -> bool:
        """
        Sync account từ app về DB khi phát hiện mismatch
        Sử dụng logic từ JobService
        
        Args:
            app_name: Tên app
            current_username: Username đang login thực tế trên app
            
        Returns:
            bool: True nếu sync thành công
        """
        try:
            handler = self.job_handlers.get(app_name)
            if not handler:
                logger.warning(f"Không có handler cho {app_name}")
                return False
            
            logger.info(f"Sync account từ {app_name} về DB...")
            
            # Kiểm tra và đăng ký proxy nếu cần trước khi sync accounts
            if not self.proxy_service.check_proxy_requirement():
                logger.warning(f"Không thể lấy proxy cho việc đồng bộ {app_name}")
                return False
            
            # Bước 1: Sync tất cả accounts từ app (như JobService)
            try:
                accounts = handler.sync_accounts_to_db()
                logger.info(f"Đã sync {len(accounts)} accounts từ {app_name}")
            except Exception as e:
                logger.error(f"Lỗi sync accounts từ {app_name}: {e}")
                return False
            
            # Bước 2: Reset tất cả accounts của app về is_login = False
            app_accounts = self.db.get_accounts(app=app_name)
            for account in app_accounts:
                if account.get("is_login", False):
                    self.db.update_account(account["id"], {
                        "is_login": False,
                        "is_sync": False
                    })
            
            # Bước 3: Tìm và cập nhật account đang login thực tế
            current_account = None
            for account in app_accounts:
                if account.get("unique_username", "").lower() == current_username.lower():
                    current_account = account
                    break
            
            if current_account:
                # Cập nhật account hiện tại về is_login = True
                self.db.update_account(current_account["id"], {
                    "is_login": True,
                    "is_sync": False
                })
                
                # Cập nhật tracking
                self.current_logged_in_accounts[app_name] = current_account["id"]
                
                logger.info(f"✅ Sync thành công: Account {current_username} đã được cập nhật login status")
                return True
            else:
                logger.warning(f"❌ Không tìm thấy account {current_username} trong DB sau sync")
                # Xóa tracking
                if app_name in self.current_logged_in_accounts:
                    del self.current_logged_in_accounts[app_name]
                return False
                
        except Exception as e:
            logger.error(f"Lỗi sync account từ app về DB: {e}")
            return False
        """
        Validate trạng thái login thực tế trên điện thoại sử dụng hàm có sẵn của handler
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã login thực tế trên điện thoại
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}")
                return False
            
            # Sử dụng hàm get_current_logged_in_username có sẵn để check login status
            try:
                current_username = handler.get_current_logged_in_username()
                if current_username:
                    logger.debug(f"App {app_name} đã login với username: {current_username}")
                    return True
                else:
                    logger.debug(f"App {app_name} chưa login hoặc không lấy được username")
                    return False
                    
            except Exception as e:
                logger.warning(f"Lỗi khi kiểm tra login status cho {app_name}: {e}")
                # Fallback: sử dụng trạng thái từ DB
                return account.get("is_login", False)
                
        except Exception as e:
            logger.error(f"Lỗi validate actual login status: {e}")
            return False
    
    def _is_correct_account_logged_in(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem đúng account này đang đăng nhập trên điện thoại không
        Sử dụng hàm get_current_logged_in_username có sẵn của handler
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đúng account này đang đăng nhập
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            target_username = account.get("unique_username")
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}")
                return False
            
            # Sử dụng hàm get_current_logged_in_username có sẵn
            try:
                current_username = handler.get_current_logged_in_username()
                if current_username and target_username:
                    is_correct = current_username.lower() == target_username.lower()
                    logger.debug(f"Current logged: {current_username}, Target: {target_username}, Match: {is_correct}")
                    return is_correct
                else:
                    logger.debug(f"Không lấy được current username hoặc target username")
                    return False
                    
            except Exception as e:
                logger.warning(f"Lỗi khi lấy current username cho {app_name}: {e}")
                # Fallback: assume correct nếu không check được
                return True
                
        except Exception as e:
            logger.error(f"Lỗi check correct account logged in: {e}")
            return False
    
    def _perform_account_switch(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện chuyển đổi tài khoản sử dụng logic có sẵn trong handler
        
        Args:
            account: Thông tin tài khoản cần chuyển tới
            
        Returns:
            bool: True nếu chuyển đổi thành công
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            account_id = account.get("id")
            username = account.get("unique_username")
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}")
                return False
            
            logger.info(f"Thực hiện switch sang account {username} trên {app_name}")
            
            # Reset care action counter khi chuyển tài khoản
            self._reset_care_action_count(account_id)
            
            # Cập nhật current logged account trước khi switch
            self.current_logged_in_accounts[app_name] = account_id
            
            # Thực hiện switch account bằng handler - sử dụng hàm có sẵn
            try:
                # Sử dụng hàm switch_to_account có sẵn trong handler
                if hasattr(handler, 'switch_to_account'):
                    switch_result = handler.switch_to_account(account)
                    
                    # Xử lý kết quả switch
                    if isinstance(switch_result, dict):
                        # Handler trả về result dict
                        success = switch_result.get("success", False)
                        message = switch_result.get("message", "")
                        
                        if success:
                            logger.info(f"Switch account thành công: {username}")
                            # Cập nhật trạng thái login trong DB và tracking
                            self._update_logged_in_status(app_name, account_id, True)
                            return True
                        else:
                            logger.warning(f"Switch account thất bại: {username} - {message}")
                            return False
                    else:
                        # Handler trả về boolean (legacy)
                        if switch_result:
                            logger.info(f"Switch account thành công: {username}")
                            # Cập nhật trạng thái login trong DB và tracking
                            self._update_logged_in_status(app_name, account_id, True)
                            return True
                        else:
                            logger.warning(f"Switch account thất bại: {username}")
                            return False
                else:
                    # Fallback: sử dụng ensure_account_logged_in
                    logger.debug(f"Handler {app_name} không có switch_to_account, dùng ensure_account_logged_in")
                    return self._ensure_account_logged_in(account)
                    
            except Exception as e:
                logger.error(f"Lỗi khi switch account {username}: {e}")
                return False
                
        except Exception as e:
            logger.error(f"Lỗi perform account switch: {e}")
            return False

    def _ensure_account_logged_in(self, account: Dict[str, Any]) -> bool:
        """
        Đảm bảo tài khoản đã đăng nhập trên app với logic tối ưu
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu đã đăng nhập
        """
        try:
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            account_id = account.get("id")
            target_username = account.get("unique_username")
            
            if not handler:
                logger.warning(f"Không có handler cho app {app_name}")
                return False
            
            # Bước 1: Kiểm tra xem có cần switch account không
            current_logged_account_id = self.current_logged_in_accounts.get(app_name)
            needs_account_switch = (current_logged_account_id != account_id)
            
            if needs_account_switch:
                logger.info(f"Cần chuyển account: current={current_logged_account_id} -> target={account_id}")
                
                # Bước 2: Validate lại với app thực tế trước khi switch
                should_switch = True
                
                try:
                    # TỐI ƯU: Chỉ verify khi thực sự nghi ngờ cần switch
                    # Nếu memory tracking cho biết đã đúng account, skip verification
                    if app_name in self.current_logged_in_accounts and \
                       self.current_logged_in_accounts[app_name] == account_id:
                        logger.debug(f"Memory tracking cho biết đã đúng account {target_username}, skip verification")
                        should_switch = False
                    else:
                        # Kiểm tra current username trên app thực tế sử dụng hàm có sẵn
                        logger.debug(f"Verify current username trên {app_name}...")
                        current_app_username = handler.get_current_logged_in_username()
                        if current_app_username and current_app_username.lower() == target_username.lower():
                            logger.info(f"App đã đúng tài khoản {target_username}, không cần switch")
                            should_switch = False
                            # Cập nhật memory tracking cho đúng
                            self.current_logged_in_accounts[app_name] = account_id
                        else:
                            logger.info(f"App hiện tại: '{current_app_username}', cần chuyển sang: '{target_username}'")
                except Exception as e:
                    logger.warning(f"Lỗi check current username: {e}")
                    # Vẫn tiếp tục switch nếu không check được
                
                # Bước 3: Thực hiện switch account chỉ khi cần thiết
                if should_switch:
                    logger.info(f"Chuyển sang tài khoản {target_username} trên {app_name}")
                    
                    # Reset care action counter khi chuyển tài khoản
                    self._reset_care_action_count(account_id)
                    
                    # Cập nhật current logged account trước khi switch
                    self.current_logged_in_accounts[app_name] = account_id
                    
                    # Thực hiện switch account - handler sẽ tự đảm bảo app mở
                    try:
                        # Sử dụng hàm switch_to_account có sẵn trong handler
                        switch_result = handler.switch_to_account(account)
                        
                        # Xử lý kết quả switch
                        if isinstance(switch_result, dict):
                            if not switch_result.get("success", False):
                                logger.warning(f"Switch account thất bại: {switch_result.get('message', 'Unknown error')}")
                                return False
                        elif not switch_result:
                            logger.warning(f"Switch account thất bại cho {target_username}")
                            return False
                            
                    except Exception as e:
                        logger.warning(f"Lỗi khi switch account: {e}")
                        return False
                else:
                    logger.debug(f"Không cần switch account cho {target_username}")
            else:
                logger.debug(f"Account {target_username} đã là current logged account")
            
            # Bước 4: Đảm bảo ở home screen (handler sẽ tự mở app nếu cần)
            try:
                # Sử dụng abstract method ensure_home_screen - nó sẽ tự check và mở app
                if not handler.ensure_home_screen():
                    logger.warning(f"Không thể đảm bảo home screen cho app {app_name}")
                    return False
                
                # Return trạng thái login
                return account.get("is_login", False)
                
            except AttributeError as e:
                logger.error(f"Handler {app_name} chưa implement app management methods: {e}")
                return False
            except NotImplementedError as e:
                logger.error(f"Handler {app_name} chưa implement app management methods: {e}")
                return False
            
        except Exception as e:
            logger.error(f"Lỗi ensure account logged in: {e}")
            return False
    
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có thể làm job không (sử dụng logic như JobService)
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể làm job
        """
        try:
            # 1. Kiểm tra trạng thái cơ bản (giống JobService)
            account_status = account.get("status", "active")
            if account_status in ["disabled", "logout"]:
                return False
            
            # Nếu inactive, kiểm tra job_disable_until
            if account_status == "inactive":
                job_disable_until = account.get("job_disable_until", 0)
                if job_disable_until > time.time():
                    return False
            
            # 2. Kiểm tra job_enable
            if not account.get("job_enable", False):
                return False
            
            # 3. Kiểm tra đã liên kết GoLike (cần cho jobs)
            if not account.get("is_golike_linked", False):
                return False
            
            # 4. Kiểm tra đã login
            if not account.get("is_login", False):
                return False
            
            # 5. Kiểm tra giới hạn daily
            daily_limit = account.get("job_max_day", 100)  # Sử dụng job_max_day như JobService
            daily_count = account.get("job_today", 0)  # Sử dụng job_today như JobService
            if daily_count >= daily_limit:
                return False
            
            # 6. Kiểm tra app có được enable không
            app_name = account.get("app")
            enabled_apps = self.get_global_config("enabled_apps", config.ENABLED_APPS)
            if app_name not in enabled_apps:
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Lỗi kiểm tra can run job: {e}")
            return False
    
    def _work_with_single_account(self, account: Dict[str, Any]) -> bool:
        """
        Làm việc với một tài khoản - thực hiện hành động được chọn với logic tối ưu
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu không có lỗi nghiêm trọng (action có thể thất bại nhưng account vẫn ổn)
                  False chỉ khi có lỗi nghiêm trọng cần clear current account
        """
        try:
            account_id = account.get("id")
            username = account.get("unique_username")
            
            # QUAN TRỌNG: Reload account data từ DB để đảm bảo thông tin mới nhất (sau switch)
            fresh_account = self.db.get_account(account_id)
            if fresh_account:
                account = fresh_account
                logger.debug(f"Reloaded fresh account data for {username}")
            else:
                logger.warning(f"Không thể reload account data cho {username}, sử dụng data cũ")
            
            # Đảm bảo current working account được set đúng
            if not self.current_working_account or self.current_working_account.get("id") != account_id:
                self.current_working_account = account
                logger.debug(f"Cập nhật current working account: {username}")
            
            # QUAN TRỌNG: Đảm bảo account được switch thực tế trên máy
            if not self._ensure_account_switched(account):
                logger.warning(f"Không thể switch sang account {username}, đánh dấu problematic")
                
                # Đánh dấu account có vấn đề và set nghỉ ngơi
                self._set_account_rest(account_id, f"Switch failed: Không thể chuyển sang account")
                
                return False  # Lỗi nghiêm trọng, clear current account
            
            # Kiểm tra xem account có đang nghỉ ngơi không
            if self._is_account_resting(account_id):
                logger.info(f"Account {username} đang nghỉ ngơi, bỏ qua")
                return True  # Không phải lỗi nghiêm trọng
            
            # Chọn hành động ngẫu nhiên thông qua JobBase
            chosen_action = self._choose_random_action(account)
            
            # Lấy session info và limits để hiển thị
            session = self._get_account_session(account_id)
            session_limits = self._get_account_session_limits(account)
            session_info = f"({session['action_count']}/{session_limits['max_actions_per_session']} actions, " \
                          f"{session['job_count']}/{session_limits['max_jobs_per_session']} jobs)"
            
            logger.info(f"Thực hiện hành động '{chosen_action}' cho {username} {session_info}")
            self.db.set("device_message", f"{chosen_action}: {username} {session_info}")
            
            action_success = False
            
            # Thực hiện hành động được chọn thông qua JobBase
            app_name = account.get("app")
            handler = self.job_handlers.get(app_name)
            
            if handler:
                # Sử dụng method perform_action tổng quát từ JobBase
                action_success = handler.perform_action(chosen_action, account)
                
                # Cập nhật care action count và job ratio cho các action care
                # Chỉ đếm care actions, không điều chỉnh job ratio nữa
                if action_success and chosen_action != MainServiceConstants.ACTION_JOB:
                    self._increment_care_action_count(account_id)
                    
                elif action_success and chosen_action == MainServiceConstants.ACTION_JOB:
                    # Reset care action count sau khi làm job thành công
                    self._reset_care_action_count(account_id)
                    
            else:
                logger.warning(f"Không có handler cho app {app_name}")
                action_success = False
            
            # Cập nhật session data
            self._update_account_session(account_id, chosen_action, action_success)
            
            # Ghi lại lịch sử hành động
            self._record_action_history(account_id, chosen_action, action_success)
            
            # Kiểm tra xem có nên chuyển account không sau action này
            should_switch = self._should_switch_account(account_id)
            if should_switch:
                session = self._get_account_session(account_id)
                switch_reason = self._get_switch_reason(account_id, session)
                
                logger.info(f"Sẽ chuyển account sau action này. Lý do: {switch_reason}")
                
                # QUAN TRỌNG: Sử dụng đúng loại rest dựa trên lý do
                self._apply_appropriate_rest_type(account_id, switch_reason, session)
                
                # Set message cho device
                self.db.set("device_message", f"Nghỉ ngơi: {username} ({switch_reason})")
                
                # Clear current working account để force tìm account mới lần sau
                self.current_working_account = None
                
                # Return False để báo hiệu cần tìm account mới
                return False
            
            # Return True vì không có lỗi nghiêm trọng
            # (action có thể thất bại nhưng account vẫn ổn)
            return True
            
        except Exception as e:
            logger.error(f"Lỗi work with single account: {e}")
            # Chỉ return False khi có exception nghiêm trọng
            return False
    
    def _get_switch_reason(self, account_id: int, session: Dict[str, Any]) -> str:
        """
        Lấy lý do chuyển account
        
        Args:
            account_id: ID account
            session: Session data
            
        Returns:
            str: Lý do chuyển account
        """
        try:
            # Lấy config limits
            max_consecutive_fails = self.get_global_config("switch_account_after_consecutive_fails", 3)
            max_no_job_attempts = self.get_global_config("switch_account_after_no_jobs", 5)
            
            # Lấy thông tin account và session limits
            account = self.db.get_account(account_id)
            if not account:
                return "Account không tồn tại"
            
            session_limits = self._get_account_session_limits(account)
            max_actions_per_session = session_limits["max_actions_per_session"]
            max_jobs_per_session = session_limits["max_jobs_per_session"]
            max_session_duration = session_limits["max_session_duration"]
            
            current_time = time.time()
            session_duration = current_time - session['start_time']
            
            if session_duration >= max_session_duration:
                return f"Hết thời gian session ({session_duration/60:.1f}/{max_session_duration/60:.1f} phút)"
            elif session['action_count'] >= max_actions_per_session:
                return f"Đạt giới hạn actions ({session['action_count']}/{max_actions_per_session})"
            elif session['job_count'] >= max_jobs_per_session:
                return f"Đạt giới hạn jobs ({session['job_count']}/{max_jobs_per_session})"
            elif self.account_consecutive_failures.get(account_id, 0) >= max_consecutive_fails:
                return f"Thất bại liên tiếp ({self.account_consecutive_failures[account_id]})"
            elif self.account_no_job_attempts.get(account_id, 0) >= max_no_job_attempts:
                return f"Không có job liên tiếp ({self.account_no_job_attempts[account_id]})"
            else:
                return "Khác"
                
        except Exception as e:
            logger.error(f"Lỗi get switch reason: {e}")
            return "Lỗi xác định lý do"
    
    def start(self):
        """Khởi động MainService"""
        logger.info("Khởi động MainService...")
        self.running = True
        
        # Khởi tạo nếu chưa được khởi tạo
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo MainService")
                return
        
        # Chạy main loop trong thread
        self.run()
    
    def run(self):
        """
        Chạy MainService - loop chính kết hợp chăm sóc và làm việc
        """
        if not self.is_initialized:
            if not self.initialize():
                logger.error("Không thể khởi tạo MainService. Không thể chạy.")
                return
        
        logger.info("Bắt đầu chạy MainService với logic hài hòa chăm sóc và làm việc...")
        
        # Kiểm tra device_id
        device_id = self.db.get_or_create_device_id()
        if not device_id:
            logger.warning("Không thể xác định device_id hiện tại, MainService không thể chạy")
            return
        
        while self.running:
            # Reset biến force_stop nếu có
            with self._lock:
                self.force_stop = False
            
            # Kiểm tra yêu cầu tạm dừng từ server (config độc lập, không nằm trong global_config)
            if self.db.get("pause_job", False):
                logger.info("Có yêu cầu tạm dừng từ server, tạm dừng xử lý")
                
                # Nhả proxy ngay khi bị tạm dừng từ server
                proxy_config = self.db.get_proxy_config({})
                use_proxy = proxy_config.get("use_proxy", False)
                if use_proxy and self.proxy_service.is_proxy_active():
                    logger.info("Nhả proxy do bị tạm dừng từ server")
                    self.proxy_service.unregister_proxy()
                    self.current_proxy_account_id = None
                
                self.db.set("device_is_working", False)
                self.db.set("device_message", MainServiceConstants.MSG_DEVICE_PAUSED_SERVER)
                
                job_check_interval = self.get_global_config("job_check_interval", config.JOB_CHECK_INTERVAL)
                if not self.safe_sleep(job_check_interval):
                    break
                continue
            
            # Reset bộ đếm hàng ngày nếu cần
            self._reset_daily_counters()
            
            try:
                # Kiểm tra internet
                if not self.helper.check_internet():
                    logger.warning("Không có kết nối internet, nghỉ 20s và thử lại")
                    if not self.safe_sleep(20):
                        break
                    continue
                
                # Tìm tài khoản để làm việc
                account_to_work = self._get_next_workable_account()
                
                if not account_to_work:
                    # Tăng counter không có tài khoản
                    self.helper.press_home()
                    self.no_job_consecutive_count += 1
                    logger.info(f"Không có tài khoản nào sẵn sàng làm việc (lần {self.no_job_consecutive_count})")
                    
                    # Nhả proxy nếu không có tài khoản làm việc
                    proxy_config = self.db.get_proxy_config({})
                    use_proxy = proxy_config.get("use_proxy", False)
                    if use_proxy and self.proxy_service.is_proxy_active():
                        logger.info("Nhả proxy do không có tài khoản sẵn sàng làm việc")
                        self.proxy_service.unregister_proxy()
                        self.current_proxy_account_id = None
                    
                    self.db.set("device_is_working", False)
                    self.db.set("device_message", MainServiceConstants.MSG_DEVICE_NO_ACCOUNTS)
                    
                    # Nghỉ trước khi kiểm tra lại
                    if not self.safe_sleep(30):
                        break
                    continue
                
                # Reset counter khi có tài khoản để làm việc
                self.no_job_consecutive_count = 0
                
                # Cập nhật working account
                self.current_working_account = account_to_work
                
                # Đảm bảo có proxy trước khi làm việc
                if not self.proxy_service.ensure_proxy_if_needed("Làm việc hài hòa"):
                    logger.error("Không thể đảm bảo proxy để làm việc")
                    if not self.safe_sleep(10):
                        break
                    continue
                
                # Đánh dấu đang làm việc
                self.db.set("device_is_working", True)
                self.db.set("device_message", MainServiceConstants.MSG_WORKING_HARMONIOUS)
                
                # Làm việc với tài khoản
                work_result = self._work_with_single_account(account_to_work)
                
                # Nếu work_result = False, nghĩa là account cần nghỉ ngơi
                # Tiếp tục tìm account khác ngay lập tức
                if not work_result:
                    logger.info("Account đã được đặt nghỉ ngơi, tìm account khác...")
                    continue
                
                # Nghỉ ngắn giữa các lần làm việc với cùng account
                action_delay_min = self.get_global_config("action_delay_min", 3)
                action_delay_max = self.get_global_config("action_delay_max", 8)
                delay_time = random.randint(action_delay_min, action_delay_max)
                logger.info(f"Nghỉ {delay_time}s trước khi làm việc tiếp theo")
                if not self.safe_sleep(delay_time):
                    break
                
            except Exception as e:
                logger.exception(e, "Lỗi trong vòng lặp chính MainService")
                # Nghỉ một chút trước khi thử lại
                if not self.safe_sleep(30):
                    break
        
        # Cleanup khi thoát
        self._cleanup_on_exit()
        logger.info("MainService đã dừng")
    
    def _cleanup_on_exit(self):
        """Cleanup khi MainService dừng"""
        try:
            # Nhả proxy
            if self.proxy_service.is_proxy_active():
                logger.info("Nhả proxy khi MainService dừng")
                self.proxy_service.unregister_proxy()
                self.current_proxy_account_id = None
            
            # Đóng tất cả app
            for app_name, handler in self.job_handlers.items():
                logger.info(f"Đóng app {app_name} khi MainService dừng")
                if hasattr(handler, 'close_app'):
                    handler.close_app()
                    
        except Exception as e:
            logger.warning(f"Lỗi cleanup: {e}")
    
    def _verify_current_account_on_app(self, app_name: str, handler) -> Optional[Dict[str, Any]]:
        """
        Verify tài khoản thực tế đang login trên app
        
        Args:
            app_name: Tên app
            handler: Job handler của app
            
        Returns:
            Dict: Thông tin tài khoản đang login thật trên app, None nếu không có hoặc lỗi
        """
        try:
            if not hasattr(handler, 'get_current_logged_in_username'):
                logger.warning(f"Handler {app_name} không hỗ trợ get_current_logged_in_username")
                return None
                
            # Lấy thông tin tài khoản hiện tại từ UI
            current_account_username = handler.get_current_logged_in_username()
            if not current_account_username:
                logger.info(f"Không có tài khoản nào đang login trên {app_name}")
                return None
                
            # Tìm tài khoản trong DB
            accounts = self.db.get_accounts(app=app_name)
            for account in accounts:
                if account.get('unique_username') == current_account_username:
                    logger.info(f"Verified: Tài khoản {current_account_username} đang login thật trên {app_name}")
                    return account
                    
            logger.warning(f"Tài khoản {current_account_username} đang login trên {app_name} nhưng không có trong DB")
            return None
            
        except Exception as e:
            logger.error(f"Lỗi khi verify current account trên {app_name}: {e}")
            return None

    def _sync_account_login_status_with_reality(self, app_name: str, handler):
        """
        Đồng bộ trạng thái is_login trong DB với thực tế trên app
        
        Args:
            app_name: Tên app
            handler: Job handler của app
        """
        try:
            # Đảm bảo có proxy trước khi verify account (nếu cần)
            if not self.proxy_service.ensure_proxy_if_needed(f"Verify account trên {app_name}"):
                logger.warning(f"Không thể đảm bảo proxy để verify account trên {app_name}, bỏ qua verify")
                return
            
            # Verify tài khoản thực tế đang login
            current_account = self._verify_current_account_on_app(app_name, handler)
            
            # Reset tất cả tài khoản của app này về is_login = False trong DB
            accounts = self.db.get_accounts(app=app_name)
            reset_count = 0
            for account in accounts:
                if account.get("is_login", False):
                    self.db.update_account(account["id"], {
                        "is_login": False,
                        "is_sync": False
                    })
                    reset_count += 1
                    logger.debug(f"Reset is_login = False cho tài khoản {account.get('unique_username')}")
            
            if reset_count > 0:
                logger.info(f"Reset {reset_count} tài khoản về is_login = False cho {app_name}")
            
            # Cập nhật tài khoản thực tế đang login
            if current_account:
                self.db.update_account(current_account["id"], {
                    "is_login": True,
                    "is_sync": False
                })
                self.current_logged_in_accounts[app_name] = current_account["id"]
                logger.info(f"Sync trạng thái: Tài khoản {current_account.get('unique_username')} đang login thật trên {app_name}")
            else:
                # Không có tài khoản nào login
                if app_name in self.current_logged_in_accounts:
                    del self.current_logged_in_accounts[app_name]
                logger.info(f"Sync trạng thái: Không có tài khoản nào đang login trên {app_name}")
                
        except Exception as e:
            logger.error(f"Lỗi khi sync login status cho {app_name}: {e}")

    def _initial_sync_all_accounts_login_status(self):
        """
        Khởi tạo ban đầu: đọc tất cả apps và sync trạng thái is_login cho chuẩn xác
        Chỉ gọi một lần khi khởi động MainService
        """
        try:
            logger.info("🔍 Bắt đầu khởi tạo: Sync trạng thái login cho tất cả apps...")
            
            # Clear tracking để bắt đầu fresh
            self.current_logged_in_accounts.clear()
            self.initial_account_verified.clear()
            
            # Sync từng app
            for app_name in self.enabled_apps:
                if app_name in self.job_handlers:
                    logger.info(f"📱 Sync trạng thái login cho {app_name}...")
                    try:
                        handler = self.job_handlers[app_name]
                        self._sync_account_login_status_with_reality(app_name, handler)
                        self.initial_account_verified[app_name] = True
                        logger.info(f"✅ Hoàn thành sync {app_name}")
                    except Exception as e:
                        logger.error(f"❌ Lỗi sync {app_name}: {e}")
                        self.initial_account_verified[app_name] = False
                else:
                    logger.warning(f"⚠️ Không có handler cho {app_name}, bỏ qua sync")
                    
            logger.info(f"🎯 Hoàn thành khởi tạo sync login status. Tracking: {self.current_logged_in_accounts}")
            
        except Exception as e:
            logger.error(f"❌ Lỗi trong initial sync accounts: {e}")

    def _update_logged_in_status(self, app_name: str, account_id: int, is_login: bool):
        """
        Cập nhật trạng thái đăng nhập của tài khoản (tương tự JobService)
        
        Args:
            app_name: Tên app
            account_id: ID tài khoản 
            is_login: True nếu đã đăng nhập, False nếu logout
        """
        try:
            # Cập nhật database
            self.db.update_account(account_id, {
                "is_login": is_login,
                "is_sync": False
            })
            
            # Cập nhật tracking trong memory
            if is_login:
                # Đánh dấu tài khoản khác của cùng app là logout
                if app_name in self.current_logged_in_accounts:
                    old_account_id = self.current_logged_in_accounts[app_name]
                    if old_account_id != account_id:
                        self.db.update_account(old_account_id, {
                            "is_login": False,
                            "is_sync": False
                        })
                        logger.debug(f"Đánh dấu tài khoản cũ {old_account_id} ({app_name}) logout")
                
                # Lưu tài khoản mới
                self.current_logged_in_accounts[app_name] = account_id
                logger.info(f"Đã cập nhật trạng thái login cho tài khoản {account_id} ({app_name})")
            else:
                # Xóa khỏi tracking nếu logout
                if app_name in self.current_logged_in_accounts and self.current_logged_in_accounts[app_name] == account_id:
                    del self.current_logged_in_accounts[app_name]
                    logger.debug(f"Xóa tài khoản {account_id} ({app_name}) khỏi tracking")
                    
        except Exception as e:
            logger.error(f"Lỗi khi cập nhật trạng thái đăng nhập: {e}")

    def stop(self):
        """Dừng MainService"""
        logger.info("Dừng MainService...")
        self.running = False
    
    def force_stop_all(self):
        """Force stop tất cả"""
        logger.info("Force stop MainService...")
        self.running = False
        with self._lock:
            self.force_stop = True
    
    def get_service_stats(self) -> Dict[str, Any]:
        """
        Lấy thống kê của MainService
        
        Returns:
            Dict: Thống kê service
        """
        try:
            workable_accounts = self._get_all_workable_accounts()
            
            stats = {
                "service_type": "MainService",
                "is_running": self.running,
                "is_initialized": self.is_initialized,
                "total_workable_accounts": len(workable_accounts),
                "current_working_account": self.current_working_account.get("unique_username") if self.current_working_account else None,
                "enabled_apps": self.get_enabled_apps(),
                "care_action_counts": self.care_action_counts,
                "no_job_consecutive_count": self.no_job_consecutive_count,
                "proxy_active": self.proxy_service.is_proxy_active() if hasattr(self.proxy_service, 'is_proxy_active') else False
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"Lỗi get service stats: {e}")
            return {}
    
    # Methods để tương thích với JobService interface cho MQTT service
    def handle_mqtt_config_update(self, config_changes: Dict[str, Any] = None):
        """
        Xử lý cập nhật config từ MQTT
        
        Args:
            config_changes: Các thay đổi config
        """
        try:
            logger.info("MainService nhận config update từ MQTT")
            if config_changes:
                logger.info(f"Config changes: {config_changes}")
                
                # Cập nhật enabled_apps nếu có thay đổi trong global_config
                if "global_config" in config_changes:
                    old_enabled_apps = self.enabled_apps.copy()  # Cache hiện tại
                    
                    # Lấy global_config mới từ database sau khi đã lưu
                    new_global_config = self.db.get_global_config({})
                    new_enabled_apps = new_global_config.get("enabled_apps", config.ENABLED_APPS)
                    
                    # Kiểm tra xem enabled_apps có thay đổi không
                    if set(old_enabled_apps) != set(new_enabled_apps):
                        logger.info(f"Phát hiện thay đổi enabled_apps: {old_enabled_apps} -> {new_enabled_apps}")
                        
                        # Xử lý thay đổi enabled_apps
                        self._handle_enabled_apps_change(old_enabled_apps, new_enabled_apps)
                        
                        # Sync cache với global_config mới
                        self.enabled_apps = new_enabled_apps
                        logger.info(f"Đã sync enabled_apps cache: {self.enabled_apps}")
                    else:
                        logger.debug("enabled_apps không thay đổi")
                
                # Kiểm tra sync_status changes và reload accounts nếu cần
                sync_status_changed = False
                for key in config_changes:
                    if key.endswith('_sync_status'):
                        sync_status_changed = True
                        logger.info(f"Phát hiện thay đổi sync status: {key} = {config_changes[key]}")
                
                if sync_status_changed:
                    logger.info("🔄 Sync status đã thay đổi, reload accounts và re-scan từ thiết bị...")
                    # Clear current working account để force refresh
                    self.current_working_account = None
                    # Clear login tracking để force re-verification
                    self.current_logged_in_accounts.clear()
                    self.initial_account_verified.clear()
                    # Reset các counter để bắt đầu cycle mới
                    self.no_account_consecutive_count = 0
                    self.no_job_consecutive_count = 0
                    
                    # Trigger re-scan accounts từ thiết bị cho các app được enable
                    self._rescan_device_accounts_async()
                    
                    logger.info("✅ Đã reset working account, login tracking và trigger re-scan sau sync status change")
                
        except Exception as e:
            logger.error(f"Lỗi handle mqtt config update: {e}")
    
    def handle_mqtt_account_update(self):
        """Xử lý cập nhật tài khoản từ MQTT"""
        try:
            logger.info("MainService nhận account update từ MQTT")
            # Clear current working account để force refresh
            self.current_working_account = None
            
        except Exception as e:
            logger.error(f"Lỗi handle mqtt account update: {e}")
    
    def handle_mqtt_force_start_session(self):
        """Xử lý yêu cầu bắt đầu session từ MQTT"""
        try:
            logger.info("MainService nhận force start session từ MQTT")
            # Reset các counter
            self.no_job_consecutive_count = 0
            
        except Exception as e:
            logger.error(f"Lỗi handle mqtt force start session: {e}")
    
    def shutdown(self):
        """Shutdown MainService"""
        try:
            logger.info("Shutdown MainService...")
            self.stop()
            self._cleanup_on_exit()
            
        except Exception as e:
            logger.error(f"Lỗi shutdown MainService: {e}")
    
    # Thêm các method khác để tương thích với JobService
    def reset_current_proxy_ip(self) -> bool:
        """Reset IP proxy hiện tại"""
        try:
            if hasattr(self.proxy_service, 'reset_current_proxy_ip'):
                return self.proxy_service.reset_current_proxy_ip()
            return False
            
        except Exception as e:
            logger.error(f"Lỗi reset proxy IP: {e}")
            return False
    
    def get_proxy_status(self) -> str:
        """Lấy trạng thái proxy"""
        try:
            if hasattr(self.proxy_service, 'get_proxy_status'):
                return self.proxy_service.get_proxy_status()
            return "Unknown"
            
        except Exception as e:
            logger.error(f"Lỗi get proxy status: {e}")
            return "Error"
    
    def get_proxy_info(self) -> Dict[str, Any]:
        """Lấy thông tin proxy"""
        try:
            if hasattr(self.proxy_service, 'get_proxy_info'):
                return self.proxy_service.get_proxy_info()
            return {}
            
        except Exception as e:
            logger.error(f"Lỗi get proxy info: {e}")
            return {}
    
    def _handle_enabled_apps_change(self, old_enabled_apps: List[str], new_enabled_apps: List[str]) -> None:
        """
        Xử lý khi có thay đổi enabled_apps từ MQTT config update
        
        Args:
            old_enabled_apps: Danh sách app được enable trước đó
            new_enabled_apps: Danh sách app được enable mới
        """
        try:
            # Xác định apps bị disable
            disabled_apps = set(old_enabled_apps) - set(new_enabled_apps)
            enabled_apps = set(new_enabled_apps) - set(old_enabled_apps)
            
            if disabled_apps:
                logger.info(f"🚫 Apps bị disable: {list(disabled_apps)}")
                
                # 1. Reset current_working_account nếu thuộc app bị disable
                if self.current_working_account:
                    current_app = self.current_working_account.get("app")
                    if current_app in disabled_apps:
                        current_username = self.current_working_account.get("unique_username", "unknown")
                        logger.info(f"🔄 Reset current working account {current_username} ({current_app}) do app bị disable")
                        self.current_working_account = None
                
                # 2. Clear login tracking của app bị disable
                for app_name in disabled_apps:
                    if app_name in self.current_logged_in_accounts:
                        account_id = self.current_logged_in_accounts[app_name]
                        del self.current_logged_in_accounts[app_name]
                        logger.info(f"🧹 Clear login tracking cho {app_name} (account_id: {account_id})")
                    
                    # Clear initial_account_verified để force re-verify nếu app được enable lại
                    if app_name in self.initial_account_verified:
                        del self.initial_account_verified[app_name]
                        logger.info(f"🧹 Clear verified status cho {app_name}")
                
                # 3. Set tất cả accounts của app bị disable về is_login=False
                for app_name in disabled_apps:
                    try:
                        accounts = self.db.get_accounts(app=app_name)
                        for account in accounts:
                            if account.get("is_login", False):
                                self.db.update_account(account["id"], {
                                    "is_login": False,
                                    "is_sync": False
                                })
                                logger.info(f"🔄 Set is_login=False cho account {account.get('unique_username')} ({app_name})")
                    except Exception as e:
                        logger.error(f"Lỗi khi reset accounts của {app_name}: {e}")
                
                logger.info(f"✅ Đã reset trạng thái cho {len(disabled_apps)} apps bị disable")
            
            if enabled_apps:
                logger.info(f"✅ Apps được enable: {list(enabled_apps)}")
                # Apps mới được enable sẽ tự động được xử lý trong _rescan_device_accounts_async
            
        except Exception as e:
            logger.error(f"Lỗi trong _handle_enabled_apps_change: {e}")

    def _rescan_device_accounts_async(self):
        """
        Re-scan accounts từ thiết bị một cách async để không block main thread
        """
        def _rescan_worker():
            try:
                logger.info("🔍 Bắt đầu re-scan accounts từ thiết bị...")
                
                # Re-scan cho từng app được enable
                for app_name in self.enabled_apps:
                    if app_name in self.job_handlers:
                        try:
                            handler = self.job_handlers[app_name]
                            logger.info(f"📱 Re-scan accounts từ {app_name}...")
                            
                            # Kiểm tra và đăng ký proxy nếu cần trước khi sync accounts
                            if not self.proxy_service.check_proxy_requirement():
                                logger.warning(f"Không thể lấy proxy cho việc re-scan {app_name}, bỏ qua")
                                continue
                            
                            # Sử dụng method sync_accounts_to_db từ BaseJob thay vì tự implement
                            device_accounts = handler.sync_accounts_to_db()
                            
                            if device_accounts:
                                logger.info(f"✅ {app_name}: Đã sync {len(device_accounts)} tài khoản từ thiết bị")
                            else:
                                logger.info(f"📱 {app_name}: Không tìm thấy account nào từ thiết bị hoặc lỗi sync")
                                
                        except Exception as e:
                            logger.error(f"Lỗi re-scan accounts cho {app_name}: {e}")
                
                logger.info("🎯 Hoàn thành re-scan accounts từ thiết bị")
                
            except Exception as e:
                logger.error(f"Lỗi trong _rescan_worker: {e}")
        
        # Chạy trong thread riêng để không block main loop
        rescan_thread = threading.Thread(target=_rescan_worker, daemon=True)
        rescan_thread.start()
        logger.info("🚀 Đã khởi động re-scan thread")
    
    def reset_expired_accounts(self):
        """Reset các tài khoản expired"""
        try:
            # Lấy danh sách accounts expired và reset nếu đã hết thời gian chờ
            accounts = self.db.get_all_accounts()
            current_time = time.time()
            
            for account in accounts:
                if account.get("is_expired"):
                    # Kiểm tra đã hết thời gian chờ chưa (ví dụ 1 giờ)
                    expired_time = account.get("expired_time", 0)
                    if current_time - expired_time > 3600:  # 1 giờ
                        logger.info(f"Reset expired account: {account.get('unique_username')}")
                        self.db.update_account(account["id"], {
                            "is_expired": False,
                            "expired_time": None,
                            "has_error": False
                        })
                        
        except Exception as e:
            logger.error(f"Lỗi reset expired accounts: {e}")
    
    def reset_logout_accounts(self):
        """Reset các tài khoản logout"""
        try:
            # Reset trạng thái login của các account nếu cần
            accounts = self.db.get_all_accounts()
            
            for account in accounts:
                if not account.get("is_login") and account.get("is_active"):
                    # Có thể thêm logic để thử login lại
                    pass
                    
        except Exception as e:
            logger.error(f"Lỗi reset logout accounts: {e}")
    
    def is_account_can_run_job(self, app_name: str) -> bool:
        """
        Kiểm tra có tài khoản nào có thể làm job cho app không
        
        Args:
            app_name: Tên app
            
        Returns:
            bool: True nếu có tài khoản có thể làm job
        """
        try:
            accounts = self.db.get_accounts(app=app_name)
            for account in accounts:
                if self._can_run_job(account):
                    return True
            return False
            
        except Exception as e:
            logger.error(f"Lỗi check account can run job: {e}")
            return False
    
    def work(self):
        """
        Main work loop với logic chuyển account thông minh
        """
        logger.info("MainService bắt đầu hoạt động với logic session management")
        
        current_account = None
        work_start_time = time.time()
        
        while True:
            try:
                # Lấy account để làm việc
                if not current_account or self._should_switch_account(current_account.get("id")):
                    if current_account:
                        # Set nghỉ ngơi cho account hiện tại
                        self._set_account_rest(current_account.get("id"))
                        
                        # Log lý do chuyển
                        session = self._get_account_session(current_account.get("id"))
                        switch_reason = self._get_switch_reason(current_account.get("id"), session)
                        logger.info(f"Chuyển từ account {current_account.get('unique_username')}. Lý do: {switch_reason}")
                    
                    # Tìm account mới
                    current_account = self._get_next_available_account()
                    
                    if not current_account:
                        logger.info("Không có account khả dụng, chờ 60s...")
                        self.db.set("device_message", "Chờ account khả dụng...")
                        self.safe_sleep(60)
                        continue
                    
                    # Reset session cho account mới
                    account_id = current_account.get("id")
                    if account_id in self.account_sessions:
                        del self.account_sessions[account_id]
                    
                    logger.info(f"Bắt đầu session mới với account {current_account.get('unique_username')}")
                
                # Làm việc với account hiện tại
                success = self._work_with_single_account(current_account)
                
                # Kiểm tra điều kiện dừng (nếu cần)
                work_duration = time.time() - work_start_time
                if work_duration > 86400:  # 24 giờ
                    logger.info("Đã làm việc 24 giờ, nghỉ ngơi...")
                    break
                
            except KeyboardInterrupt:
                logger.info("Nhận tín hiệu dừng từ người dùng")
                break
            except Exception as e:
                logger.error(f"Lỗi trong work loop: {e}")
                self.safe_sleep(30)  # Nghỉ 30s khi có lỗi
        
        logger.info("MainService kết thúc hoạt động")
').decode('utf-8'))
