import base64
exec(base64.b64decode('aW1wb3J0IGRhdGV0aW1lCmltcG9ydCB0aW1lCmltcG9ydCByYW5kb20KZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdCwgT3B0aW9uYWwKZnJvbSBqb2JzLmpvYl9iYXNlIGltcG9ydCBCYXNlSm9iCgpjbGFzcyBJbnN0YWdyYW1Kb2IoQmFzZUpvYik6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UsIGdvbGlrZV9zZXJ2aWNlPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oZGJfc2VydmljZSwgaGVscGVyX3NlcnZpY2UsIGdvbGlrZV9zZXJ2aWNlKQogICAgICAgIHNlbGYuYXBwX3BhY2thZ2UgPSAiY29tLmluc3RhZ3JhbS5hbmRyb2lkIgogICAgICAgIHNlbGYuYXBwX25hbWUgPSAiaW5zdGFncmFtIgogICAgICAgIAogICAgZGVmIGR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoc2VsZiwgbWF4X3JldHJpZXM9Mywgd2FpdF9iZXR3ZWVuX3JldHJpZXM9MC41KToKICAgICAgICAiIiIKICAgICAgICBEdW1wIG3DoG4gaMOsbmggWE1MIHbhu5tpIGPGoSBjaOG6vyB0aOG7rSBs4bqhaSBu4bq/dSBn4bq3cCBs4buXaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1heF9yZXRyaWVzOiBT4buRIGzhuqduIHRo4butIHThu5FpIMSRYQogICAgICAgICAgICB3YWl0X2JldHdlZW5fcmV0cmllczogVGjhu51pIGdpYW4gY2jhu50gZ2nhu69hIGPDoWMgbOG6p24gdGjhu60gKGdpw6J5KQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFhNTCBj4bunYSBtw6BuIGjDrG5oIGhv4bq3YyBOb25lIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyDEkOG7o2kgVUkg4buVbiDEkeG7i25oCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdF9iZXR3ZWVuX3JldHJpZXMpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIHJldHVybiBzY3JlZW5feG1sCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgZHVtcCBYTUwgKGzhuqduIHthdHRlbXB0KzF9L3ttYXhfcmV0cmllc30pOiB7c3RyKGUpfSIpCiAgICAgICAgICAgICAgICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGNobyBs4bqnbiB0aOG7rSB0aeG6v3AgdGhlbwogICAgICAgICAgICAgICAgd2FpdF9iZXR3ZWVuX3JldHJpZXMgKz0gMC41CiAgICAgICAgICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyBkdW1wIFhNTCBzYXUge21heF9yZXRyaWVzfSBs4bqnbiB0aOG7rSIpCiAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAKICAgIGRlZiBpc19ob21lX3NjcmVlbihzZWxmKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEtp4buDbSB0cmEgeGVtIGPDsyDEkWFuZyDhu58gbcOgbiBow6xuaCB0cmFuZyBjaOG7pyBJbnN0YWdyYW0gaGF5IGtow7RuZwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgxJFhbmcg4bufIHRyYW5nIGNo4bunLCBGYWxzZSBu4bq/dSBraMO0bmcKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgWE1MIG3DoG4gaMOsbmggaGnhu4duIHThuqFpIHbhu5tpIGPGoSBjaOG6vyB0aOG7rSBs4bqhaQogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSAxOiBDw7MgbsO6dCAiVHJhbmcgY2jhu6ciIMSRxrDhu6NjIGNo4buNbiAoc2VsZWN0ZWQ9dHJ1ZSkgdHJvbmcgdGhhbmggdGFiIGtow7RuZwogICAgICAgICAgICBob21lX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sLCAKICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYz0iVHJhbmcgY2jhu6ciCiAgICAgICAgICAgICkKICAgICAgICAgICAgaWYgaG9tZV90YWI6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGhvbWVfdGFiKToKICAgICAgICAgICAgICAgICAgICBsb2dvX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3RpdGxlX2xvZ29fY2hldnJvbl9jb250YWluZXIiCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBpZiBsb2dvX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbG9nb19idXR0b24uZ2V0KCJ2aXNpYmxlLXRvLXVzZXIiKSA9PSAidHJ1ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgdMOsbSB0aOG6pXkgdGFiICJUcmFuZyBjaOG7pyIgbmjGsG5nIGNoxrBhIMSRxrDhu6NjIGNo4buNbiwgY2xpY2sgdsOgbyDEkcOzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfdGFiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxLjUpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gMS41cwogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgdMOsbSB0aOG6pXkgdGFiICJUcmFuZyBjaOG7pyIgbmjGsG5nIGNoxrBhIMSRxrDhu6NjIGNo4buNbiwgY2xpY2sgdsOgbyDEkcOzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGhvbWVfdGFiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxLjUpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gMS41cwogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgICMgS2jDtG5nIHTDrG0gdGjhuqV5IGPDoWMgeeG6v3UgdOG7kSBj4bunYSB0cmFuZyBjaOG7pwogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBraeG7g20gdHJhIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgSW5zdGFncmFtIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgZGVmIGVuc3VyZV9ob21lX3NjcmVlbihzZWxmLCBtYXhfcmV0cmllczogaW50ID0gMykgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkOG6o20gYuG6o28gxJFhbmcg4bufIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgSW5zdGFncmFtLCBu4bq/dSBraMO0bmcgdGjDrCBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBtYXhfcmV0cmllczogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIHJldHJ5X2NvdW50ID0gMAogICAgICAgIAogICAgICAgIHdoaWxlIHJldHJ5X2NvdW50IDwgbWF4X3JldHJpZXM6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIMSRYW5nIOG7nyB0cmFuZyBjaOG7pyBraMO0bmcKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGtow7RuZyDhu58gdHJhbmcgY2jhu6csIMSRw7NuZyB2w6AgbeG7nyBs4bqhaSBhcHAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHBo4bqjaSB0cmFuZyBjaOG7pyBJbnN0YWdyYW0sIGto4bufaSDEkeG7mW5nIGzhuqFpIGFwcC4uLiIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQoKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KQogICAgICAgICAgICBpZiBub3Qgc2VsZi52YWxpZGF0ZV9hcHBfbm90X2Jhbm5lZCgpOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIHJldHJ5X2NvdW50ICs9IDEKICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgbeG7nyB0cmFuZyBjaOG7pyBJbnN0YWdyYW0gc2F1IHttYXhfcmV0cmllc30gbOG6p24gdGjhu60iKQogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgdmFsaWRhdGVfYXBwX25vdF9iYW5uZWQoc2VsZik6CiAgICAgICAgIiIiCiAgICAgICAgxJDhuqNtIGLhuqNvIGtow7RuZyBjw7MgdMOgaSBraG/huqNuIG7DoG8gYuG7iyBiYW5uZWQKICAgICAgICAiIiIKICAgICAgICAjIEtp4buDbSB0cmEgZGlhbG9nIGPhuqNuaCBiw6FvCiAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgYWxlcnRfY29udGFpbmVyID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9pZ2RzX2FsZXJ0X2RpYWxvZ190ZXh0X2NvbnRhaW5lciIKICAgICAgICApCiAgICAgICAgCiAgICAgICAgI0tp4buDbSB0cmEgY8OzIHRow7RuZyBiw6FvIHRo4bupIGzhuqFpIHNhdS4KICAgICAgICBpZiBhbGVydF9jb250YWluZXI6CiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0acOqdSDEkeG7gSBkaWFsb2cKICAgICAgICAgICAgaGVhZGxpbmUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvaWdkc19hbGVydF9kaWFsb2dfaGVhZGxpbmUiCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGhlYWRsaW5lIGFuZCBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGhlYWRsaW5lKSA9PSAiVGjhu60gbOG6oWkgc2F1IjoKICAgICAgICAgICAgICAgICMgTOG6pXkgbuG7mWkgZHVuZyBj4bqjbmggYsOhbwogICAgICAgICAgICAgICAgc3VidGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCwKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2lnZHNfYWxlcnRfZGlhbG9nX3N1YnRleHQiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHN1YnRleHQ6CiAgICAgICAgICAgICAgICAgICAgd2FybmluZ19tZXNzYWdlID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dChzdWJ0ZXh0KQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTOG6pXkgZGFuaCBzw6FjaCBj4bqjbmggYsOhbyBoaeG7h24gdOG6oWkgdOG7qyBkYgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfd2FybmluZ3MgPSBzZWxmLmRiLmdldCgibG9ncy13YXJuaW5nLW1lc3NhZ2UiLCBbXSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFRow6ptIGPhuqNuaCBiw6FvIG3hu5tpCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF93YXJuaW5ncy5hcHBlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAidGltZSI6IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLmlzb2Zvcm1hdCgpLAogICAgICAgICAgICAgICAgICAgICAgICAibWVzcyI6IHdhcm5pbmdfbWVzc2FnZQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBDaOG7iSBnaeG7ryBs4bqhaSB04buRaSDEkWEgMjAgbG9nIGfhuqduIG5o4bqldAogICAgICAgICAgICAgICAgICAgIGlmIGxlbihjdXJyZW50X3dhcm5pbmdzKSA+IDIwOgogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3dhcm5pbmdzID0gY3VycmVudF93YXJuaW5nc1stMjA6XQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTMawdSBs4bqhaSB2w6BvIGRiCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5zZXQoImxvZ3Mtd2FybmluZy1tZXNzYWdlIiwgY3VycmVudF93YXJuaW5ncykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYixJDDoyBsxrB1IGPhuqNuaCBiw6FvOiB7d2FybmluZ19tZXNzYWdlfSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBC4bqlbSBuw7p0IE9LIGxpw6puIHThu6VjIGNobyDEkeG6v24ga2hpIGtow7RuZyBjw7JuIGRpYWxvZwogICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICNLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gcGjhuqNpIMSRxINuZyBuaOG6rXAga2jDtG5nCiAgICAgICAgIyBLaeG7g20gdHJhIGNvbnRhaW5lciBibG9rcwogICAgICAgIGJsb2tzX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgIHNjcmVlbl94bWwsCiAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYmxva3NfY29udGFpbmVyIgogICAgICAgICkKICAgICAgICAKICAgICAgICBpZiBibG9rc19jb250YWluZXI6CiAgICAgICAgICAgICMgVMOsbSB04bqldCBj4bqjIGPDoWMgdmlldyB0cm9uZyBjb250YWluZXIKICAgICAgICAgICAgdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sLAogICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXciCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdmlldyDEkeG6p3UgdGnDqm4gY8OzIHRleHQga2jDoWMgbnVsbAogICAgICAgICAgICB3YXJuaW5nX3RleHQgPSBOb25lCiAgICAgICAgICAgIGZvciB2aWV3IGluIHZpZXdzOgogICAgICAgICAgICAgICAgdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodmlldykKICAgICAgICAgICAgICAgIGlmIHRleHQgYW5kIHRleHQuc3RyaXAoKSBhbmQgdGV4dCAhPSAibnVsbCIgYW5kIHRleHQgIT0gIiAiIGFuZCBsZW4odGV4dC5zdHJpcCgpKSA+IDEwOgogICAgICAgICAgICAgICAgICAgIHdhcm5pbmdfdGV4dCA9IHRleHQKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgd2FybmluZ190ZXh0OiAKICAgICAgICAgICAgICAgICMgVGjhu7FjIGhp4buHbiBsb2dvdXQgdsOgIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgQsaw4bubYyAxOiBC4bqlbSB2w6BvIG1lbnUKICAgICAgICAgICAgICAgICAgICBtZW51X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJNZW51IikKICAgICAgICAgICAgICAgICAgICBpZiBtZW51X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG1lbnVfYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQsaw4bubYyAyOiDEkOG7jWMgbOG6oWkgWE1MIHbDoCB0w6xtIHRleHQgIsSQxINuZyB4deG6pXQga2jhu49pIgogICAgICAgICAgICAgICAgICAgICAgICBtZW51X3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG1lbnVfeG1sOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3MgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwobWVudV94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQudmlldy5WaWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nb3V0X3ZpZXcgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IE5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHZpZXcgaW4gdmlld3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld190ZXh0ID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh2aWV3KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHZpZXdfdGV4dCBhbmQgdmlld190ZXh0LnN0YXJ0c3dpdGgoIsSQxINuZyB4deG6pXQga2jhu49pIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ291dF92aWV3ID0gdmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEPhuq90IGLhu48gIsSQxINuZyB4deG6pXQga2jhu49pIiB2w6AgdHJpbSDEkeG7gyBs4bqleSB1c2VybmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHZpZXdfdGV4dC5yZXBsYWNlKCLEkMSDbmcgeHXhuqV0IGto4buPaSIsICIiKS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxvZ291dF92aWV3IGFuZCB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIELGsOG7m2MgMzogQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgYWNjb3VudCB0cm9uZyBkYXRhYmFzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlZC8lbS8leSAlSDolTSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVfcmVhc29uID0gZiJQaMOhdCBoaeG7h24gecOqdSBj4bqndSB4w6FjIG1pbmggbMO6Yzoge2N1cnJlbnRfdGltZX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHTDoGkga2hv4bqjbiB0aGVvIHVuaXF1ZV91c2VybmFtZSB2w6AgY+G6rXAgbmjhuq10CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMgPSBzZWxmLmRiLmdldF9hY2NvdW50cyhhcHA9Imluc3RhZ3JhbSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGFjY291bnQgaW4gYWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiKSA9PSB1c2VybmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiZGlzYWJsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImluYWN0aXZlX3JlYXNvbiI6IGluYWN0aXZlX3JlYXNvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRbImlkIl0sIHVwZGF0ZV9kYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIsSQw6MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdMOgaSBraG/huqNuIHt1c2VybmFtZX06IHtpbmFjdGl2ZV9yZWFzb259IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBCxrDhu5tjIDQ6IELhuqVtIHbDoG8gIsSQxINuZyB4deG6pXQga2jhu49pIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsb2dvdXRfdmlldykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIELGsOG7m2MgNTogWMOhYyBuaOG6rW4gxJHEg25nIHh14bqldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjb25maXJtX3htbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybV94bWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0PSLEkMSDbmcgeHXhuqV0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvbmZpcm1fYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNvbmZpcm1fYnV0dG9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KSAgIyBDaOG7nSA1IGdpw6J5IGhvw6BuIHThuqV0IGxvZ291dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIMSRxINuZyB4deG6pXQga2jhu49pIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG1lbnUgxJHEg25nIHh14bqldCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIMSR4buNYyBYTUwgbWVudSIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IE1lbnUiKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIGxvZ291dDoge3N0cihlKX0iKQogICAgICAgICAgICAgICAgICAgICMgRmFsbGJhY2s6IMSRw7NuZyBhcHAgbuG6v3Uga2jDtG5nIGxvZ291dCDEkcaw4bujYwogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmNsb3NlX2FwcChzZWxmLmFwcF9wYWNrYWdlKQoKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiBUcnVlCiAgICBkZWYgZ2V0X2FjY291bnRzX2Zyb21fZGV2aWNlKHNlbGYpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIkzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIEluc3RhZ3JhbSB04burIHRoaeG6v3QgYuG7iyIiIgogICAgICAgIGFjY291bnRzID0gW10KICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pyBJbnN0YWdyYW0KICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE5o4bqlbiB2w6BvIHRhYiAiVHJhbmcgY8OhIG5ow6JuIgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgcHJvZmlsZV90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iVHJhbmcgY8OhIG5ow6JuIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBwcm9maWxlX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgICAgICByZXR1cm4gW10KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE5o4bqlcCB2w6BvIHRhYiBUcmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24gaGnhu4duIHThuqFpIHThu6sgdHJhbmcgY8OhIG5ow6JuCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHVzZXJuYW1lIHThu6sgdGnDqnUgxJHhu4EgbOG7m24gdHJvbmcgYWN0aW9uIGJhcgogICAgICAgICAgICB1c2VybmFtZV90aXRsZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sLCAKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9sYXJnZV90aXRsZV9hdXRvX3NpemUiCiAgICAgICAgICAgICkKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX3RpdGxlOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgwLjUpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV9kb3duKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX2xhcmdlX3RpdGxlX2F1dG9fc2l6ZSIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgdXNlcm5hbWVfdGl0bGU6CiAgICAgICAgICAgICAgICBjdXJyZW50X3VzZXJuYW1lID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh1c2VybmFtZV90aXRsZSkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUw6xtIHRo4bqleSB1c2VybmFtZSBoaeG7h24gdOG6oWkgdOG7qyB0acOqdSDEkeG7gToge2N1cnJlbnRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBOaOG6pXAgdsOgbyB0acOqdSDEkeG7gSB1c2VybmFtZSDEkeG7gyBt4bufIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIodXNlcm5hbWVfdGl0bGUpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBM4bqleSBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgYWNjb3VudHNfeG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBUw6xtIHThuqV0IGPhuqMgY8OhYyBwaOG6p24gdOG7rSBWaWV3R3JvdXAgY8OzIGNvbnRlbnQtZGVzYyAobMOgIHVzZXJuYW1lKQogICAgICAgICAgICAgICAgYWNjb3VudF9pdGVtcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbCgKICAgICAgICAgICAgICAgICAgICBhY2NvdW50c194bWwsCiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXdHcm91cCIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBM4buNYyB2w6AgeOG7rSBsw70gY8OhYyBt4bulYyB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgIGZvciBpdGVtIGluIGFjY291bnRfaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgIyBM4bqleSBjb250ZW50LWRlc2MgY+G7p2EgaXRlbQogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYyA9IGl0ZW0uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgICAgICAgICBpZiBub3QgY29udGVudF9kZXNjIG9yIGNvbnRlbnRfZGVzYyA9PSAibnVsbCI6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDonkgY8OzIHBo4bqjaSBsw6AgbsO6dCAixJBpIMSR4bq/biBUcnVuZyB0w6JtIHTDoGkga2hv4bqjbiIga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgaWYgIlRydW5nIHTDom0gdMOgaSBraG/huqNuIiBpbiBjb250ZW50X2Rlc2M6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgQuG7jyBxdWEgbsO6dCAiVGjDqm0gdMOgaSBraG/huqNuIiAKICAgICAgICAgICAgICAgICAgICBpZiAiVGjDqm0gdMOgaSBraG/huqNuIiBpbiBjb250ZW50X2Rlc2M6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBY4butIGzDvSB0csaw4budbmcgaOG7o3AgY8OzIHRow7RuZyBiw6FvIHRyb25nIGNvbnRlbnQtZGVzYyAodmQ6ICJ1c2VybmFtZSwgMTAgdGjDtG5nIGLDoW8iKQogICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gY29udGVudF9kZXNjCiAgICAgICAgICAgICAgICAgICAgaWYgIiwiIGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBjb250ZW50X2Rlc2Muc3BsaXQoIiwiKVswXS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBQaMawxqFuZyBwaMOhcCAyOiBUw6xtIHRy4buxYyB0aeG6v3AgdHJvbmcgY8OhYyB2aWV3IGNvbgogICAgICAgICAgICAgICAgICAgIGNoaWxkX3ZpZXdzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKAogICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50c194bWwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzX25hbWU9ImFuZHJvaWQudmlldy5WaWV3IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEzhuqV5IGJvdW5kcyBj4bunYSBpdGVtIGhp4buHbiB04bqhaSDEkeG7gyB0w6xtIHZpZXcgY29uIHRodeG7mWMgduG7gSBuw7MKICAgICAgICAgICAgICAgICAgICBpdGVtX2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyhpdGVtKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciB2aWV3IGluIGNoaWxkX3ZpZXdzOgogICAgICAgICAgICAgICAgICAgICAgICB2aWV3X2JvdW5kcyA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X2JvdW5kcyh2aWV3KQogICAgICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIHZpZXcgY8OzIG7hurFtIHRyb25nIGl0ZW0ga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3X2JvdW5kc1swXSA+PSBpdGVtX2JvdW5kc1swXSBhbmQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3X2JvdW5kc1sxXSA+PSBpdGVtX2JvdW5kc1sxXSBhbmQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3X2JvdW5kc1syXSA8PSBpdGVtX2JvdW5kc1syXSBhbmQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3X2JvdW5kc1szXSA8PSBpdGVtX2JvdW5kc1szXSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQodmlldykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHZpZXdfdGV4dCBhbmQgInRow7RuZyBiw6FvIiBub3QgaW4gdmlld190ZXh0Lmxvd2VyKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUw6xtIHRo4bqleSB2aWV3IGNvbiBjaOG7qWEgdMOqbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHZpZXdfdGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIG7DoHkgY8OzIMSRYW5nIMSRxrDhu6NjIGNo4buNbiBraMO0bmcKICAgICAgICAgICAgICAgICAgICBpc19zZWxlY3RlZCA9IGl0ZW0uZ2V0KCJzZWxlY3RlZCIpID09ICJ0cnVlIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVOG6oW8gdGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgICAgICAgICBhY2NvdW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IHVzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiYWN0aXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX2xvZ2luIjogaXNfc2VsZWN0ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICJhdmF0YXJfdGh1bWIiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAibGV2ZWwiOiAzLAogICAgICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGFjY291bnRzLmFwcGVuZChhY2NvdW50KQogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiBJbnN0YWdyYW06IHt1c2VybmFtZX0gKHNlbGVjdGVkOiB7aXNfc2VsZWN0ZWR9KSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTmjhuqVuIGJhY2sgxJHhu4MgxJHDs25nIGRhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBRdWF5IGzhuqFpIHRyYW5nIGNo4bunIGLhurFuZyBwaMawxqFuZyB0aOG7qWMgYmFja190b19ob21lCiAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gSW5zdGFncmFtIikKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnRzCiAgICAKICAgIGRlZiBfZGlzbWlzc19hbGxfZGlhbG9ncyhzZWxmLCBtYXhfYXR0ZW1wdHM6IGludCA9IDUpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgQuG6pW0gbsO6dCBPSyBsacOqbiB04bulYyBjaG8gxJHhur9uIGtoaSBraMO0bmcgY8OybiBkaWFsb2cgbsOgbwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1heF9hdHRlbXB0czogU+G7kSBs4bqnbiB0aOG7rSB04buRaSDEkWEKICAgICAgICAiIiIKICAgICAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShtYXhfYXR0ZW1wdHMpOgogICAgICAgICAgICAjIEzhuqV5IGzhuqFpIFhNTCDEkeG7gyB0w6xtIG7DunQgT0sKICAgICAgICAgICAgY3VycmVudF94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBpZiBub3QgY3VycmVudF94bWw6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIG9rX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoCiAgICAgICAgICAgICAgICBjdXJyZW50X3htbCwKICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvaWdkc19hbGVydF9kaWFsb2dfcHJpbWFyeV9idXR0b24iCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG9rX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihva19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIGLhuqVtIE9LIGzhuqduIHthdHRlbXB0ICsgMX0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBLaMO0bmcgY8OybiBuw7p0IE9LLCB0aG/DoXQgdsOybmcgbOG6t3AKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgxJHDs25nIGjhur90IGRpYWxvZyIpCiAgICAgICAgICAgICAgICBicmVhawogICAgCiAgICBkZWYgYmFja190b19ob21lKHNlbGYsIG1heF9iYWNrX2NvdW50OiBpbnQgPSA1LCBtYXhfcmV0cmllczogaW50ID0gMSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBRdWF5IGzhuqFpIG3DoG4gaMOsbmggdHJhbmcgY2jhu6cgSW5zdGFncmFtCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgbWF4X2JhY2tfY291bnQ6IFPhu5EgbOG6p24gbmjhuqVuIEJhY2sgdOG7kWkgxJFhIHRyxrDhu5tjIGtoaSB0aOG7rSBraOG7n2kgxJHhu5luZyBs4bqhaSBhcHAKICAgICAgICAgICAgbWF4X3JldHJpZXM6IFPhu5EgbOG6p24gdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIHThu5FpIMSRYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3Uga2jDtG5nCiAgICAgICAgIiIiCiAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIOG7nyB0cmFuZyBjaOG7pyBjaMawYQogICAgICAgIGlmIHNlbGYuaXNfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJBhbmcgdMOsbSBjw6FjaCBxdWF5IHbhu4EgdHJhbmcgY2jhu6cgSW5zdGFncmFtLi4uIikKICAgICAgICAKICAgICAgICAjIFRo4butIGzhuqFpIHRvw6BuIGLhu5kgcXXDoSB0csOsbmggdOG7kWkgxJFhIG1heF9yZXRyaWVzIGzhuqduCiAgICAgICAgZm9yIHJldHJ5IGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICAgICAgIyBUaOG7rSBi4bqlbSBuw7p0IGJhY2sgdOG7kWkgxJFhIG1heF9iYWNrX2NvdW50IGzhuqduCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG1heF9iYWNrX2NvdW50KToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gxJHDoyB24buBIHRyYW5nIGNo4bunIGNoxrBhCiAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgcXVheSB24buBIHRyYW5nIGNo4bunIHNhdSB7aSsxfSBs4bqnbiBi4bqlbSBiYWNrIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0pIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSB24bqrbiBraMO0bmcgduG7gSDEkcaw4bujYyB0cmFuZyBjaOG7pywga2lsbCBhcHAgdsOgIG3hu58gbOG6oWkKICAgICAgICAgICAgaWYgcmV0cnkgPCBtYXhfcmV0cmllcyAtIDE6ICAjIENo4buJIGxvZyBj4bqjbmggYsOhbyBu4bq/dSBjw7JuIGzhuqduIHRo4butIHRp4bq/cCB0aGVvCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHRo4buDIHbhu4EgdHJhbmcgY2jhu6cgc2F1IHttYXhfYmFja19jb3VudH0gbOG6p24gYuG6pW0gYmFjaywgdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0ve21heF9yZXRyaWVzfSkuLi4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgduG7gSB0cmFuZyBjaOG7pyBzYXUge21heF9iYWNrX2NvdW50fSBs4bqnbiBi4bqlbSBiYWNrIChs4bqnbiB0aOG7rSBjdeG7kWkge3JldHJ5KzF9L3ttYXhfcmV0cmllc30pLi4uIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmhlbHBlci5jbG9zZV9hcHAoc2VsZi5hcHBfcGFja2FnZSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fYXBwKHNlbGYuYXBwX3BhY2thZ2UpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg1KSAgIyDEkOG7o2kgYXBwIG3hu58KCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLnZhbGlkYXRlX2FwcF9ub3RfYmFubmVkKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gY8OzIOG7nyB0cmFuZyBjaOG7pyBraMO0bmcKICAgICAgICAgICAgaWYgc2VsZi5pc19ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgcXVheSB24buBIHRyYW5nIGNo4bunIHNhdSBraGkga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIChs4bqnbiB0aOG7rSB7cmV0cnkrMX0pIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgduG7gSB0cmFuZyBjaOG7pyBuZ2F5IGPhuqMgc2F1IHttYXhfcmV0cmllc30gbOG6p24gdGjhu60ga2jhu59pIMSR4buZbmcgbOG6oWkgYXBwIikKICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgCgogICAgCiAgICBkZWYgbWFwX2dvbGlrZV9hY2NvdW50cyhzZWxmLCBnb2xpa2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dLCBkZXZpY2VfYWNjb3VudHM6IExpc3RbRGljdFtzdHIsIEFueV1dKSAtPiBMaXN0W0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiIKICAgICAgICDDgW5oIHjhuqEgdMOgaSBraG/huqNuIHThu6sgR29MaWtlIHbDoG8gdMOgaSBraG/huqNuIHRyw6puIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGdvbGlrZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdOG7qyBHb0xpa2UgQVBJCiAgICAgICAgICAgIGRldmljZV9hY2NvdW50czogRGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdHLDqm4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIHTDoGkga2hv4bqjbiDEkcOjIMOhbmggeOG6oQogICAgICAgICIiIgogICAgICAgIG1hcHBlZF9hY2NvdW50cyA9IFtdCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIENodeG6qW4gaMOzYSBk4buvIGxp4buHdSB04burIEdvTGlrZQogICAgICAgICAgICBnb2xpa2VfZGF0YSA9IHt9CiAgICAgICAgICAgIGZvciBhY2MgaW4gZ29saWtlX2FjY291bnRzOgogICAgICAgICAgICAgICAgIyBUcsOtY2ggeHXhuqV0IHRow7RuZyB0aW4gdOG7qyB0w6BpIGtob+G6o24gR29MaWtlCiAgICAgICAgICAgICAgICBnb2xpa2VfYWNjb3VudCA9IHsKICAgICAgICAgICAgICAgICAgICAiZ29saWtlX2lkIjogYWNjLmdldCgiaWQiKSwKICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiBhY2MuZ2V0KCJpbnN0YWdyYW1fZnVsbF9uYW1lIikgb3IgYWNjLmdldCgiaW5zdGFncmFtX3VzZXJuYW1lIiksCiAgICAgICAgICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGFjYy5nZXQoImluc3RhZ3JhbV9pZCIpLAogICAgICAgICAgICAgICAgICAgICJ1bmlxdWVfdXNlcm5hbWUiOiBhY2MuZ2V0KCJpbnN0YWdyYW1fdXNlcm5hbWUiKSwKICAgICAgICAgICAgICAgICAgICAiYXZhdGFyX3RodW1iIjogYWNjLmdldCgicHJvZmlsZV9waWNfdXJsIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBT4butIGThu6VuZyB1bmlxdWVfdXNlcm5hbWUgbMOgbSBraMOzYSDEkeG7gyBk4buFIMOhbmggeOG6oQogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBnb2xpa2VfYWNjb3VudFsidW5pcXVlX3VzZXJuYW1lIl0KICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgIGdvbGlrZV9kYXRhW3VzZXJuYW1lLmxvd2VyKCldID0gZ29saWtlX2FjY291bnQKICAgICAgICAgICAgCiAgICAgICAgICAgICMgw4FuaCB44bqhIHbhu5tpIHTDoGkga2hv4bqjbiB0csOqbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgZm9yIGRldmljZV9hY2NvdW50IGluIGRldmljZV9hY2NvdW50czoKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZGV2aWNlX2FjY291bnQuZ2V0KCJ1bmlxdWVfdXNlcm5hbWUiLCAiIikubG93ZXIoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1c2VybmFtZSBpbiBnb2xpa2VfZGF0YToKICAgICAgICAgICAgICAgICAgICAjIMSQw6MgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHRyb25nIGRhbmggc8OhY2ggR29MaWtlCiAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB04burIEdvTGlrZSB2w6BvIHTDoGkga2hv4bqjbiB0aGnhur90IGLhu4sKICAgICAgICAgICAgICAgICAgICBnb2xpa2VfaW5mbyA9IGdvbGlrZV9kYXRhW3VzZXJuYW1lXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4KICAgICAgICAgICAgICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgImdvbGlrZV9pZCI6IGdvbGlrZV9pbmZvWyJnb2xpa2VfaWQiXSwKICAgICAgICAgICAgICAgICAgICAgICAgImlzX2dvbGlrZV9saW5rZWQiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAiYXZhdGFyX3RodW1iIjogZ29saWtlX2luZm9bImF2YXRhcl90aHVtYiJdIG9yIGRldmljZV9hY2NvdW50LmdldCgiYXZhdGFyX3RodW1iIiwgIiIpLAogICAgICAgICAgICAgICAgICAgICAgICAidW5pcXVlX2lkIjogZ29saWtlX2luZm9bInVuaXF1ZV9pZCJdIG9yIGRldmljZV9hY2NvdW50LmdldCgidW5pcXVlX2lkIiwgIiIpLAogICAgICAgICAgICAgICAgICAgICAgICAibmlja25hbWUiOiBnb2xpa2VfaW5mb1sibmlja25hbWUiXSBvciBkZXZpY2VfYWNjb3VudC5nZXQoIm5pY2tuYW1lIiwgIiIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgVMOsbSBJRCB0w6BpIGtob+G6o24gdHJvbmcgREIKICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2lkID0gZGV2aWNlX2FjY291bnQuZ2V0KCJpZCIpCiAgICAgICAgICAgICAgICAgICAgaWYgYWNjb3VudF9pZDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdsOgbyBEQgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnVwZGF0ZV9hY2NvdW50KGFjY291bnRfaWQsIHVwZGF0ZV9kYXRhKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB2w6BvIGRldmljZV9hY2NvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9hY2NvdW50LnVwZGF0ZSh1cGRhdGVfZGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkX2FjY291bnRzLmFwcGVuZChkZXZpY2VfYWNjb3VudCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkMOjIMOhbmggeOG6oSB0w6BpIGtob+G6o24gSW5zdGFncmFtOiB7dXNlcm5hbWV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBtYXBwZWRfYWNjb3VudHMKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgw6FuaCB44bqhIHTDoGkga2hv4bqjbiBJbnN0YWdyYW0iKQogICAgICAgICAgICByZXR1cm4gW10KICAgIGRlZiBnZXRfcmVwb3J0X3BheWxvYWQoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0sIGpvYjogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIFThuqFvIHBheWxvYWQgY2hvIHZp4buHYyBiw6FvIGPDoW8gaG/DoG4gdGjDoG5oIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IFBheWxvYWQgY2hvIEFQSSBiw6FvIGPDoW8KICAgICAgICAiIiIKICAgICAgICBnb2xpa2VfaWQgPSBhY2NvdW50LmdldCgiZ29saWtlX2lkIikKICAgICAgICBqb2JfaWQgPSBqb2IuZ2V0KCJpZCIpCiAgICAgICAgCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZCBvciBub3Qgam9iX2lkOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiVGhp4bq/dSB0aMO0bmcgdGluIHTDoGkga2hv4bqjbiBob+G6t2Mgam9iIMSR4buDIHThuqFvIHBheWxvYWQgYsOhbyBjw6FvIikKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImluc3RhZ3JhbV91c2Vyc19hZHZlcnRpc2luZ19pZCI6IGpvYl9pZCwKICAgICAgICAgICAgImluc3RhZ3JhbV9hY2NvdW50X2lkIjogZ29saWtlX2lkLAogICAgICAgICAgICAiYXN5bmMiOiBUcnVlLAogICAgICAgICAgICAiZGF0YSI6IE5vbmUKICAgICAgICB9ICAgIAogICAgICAgICAgCiAgICAKICAgIAogICAgZGVmIGV4ZWN1dGVfam9iKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldLCBqb2I6IERpY3Rbc3RyLCBBbnldKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnQ6IFRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIGpvYjogVGjDtG5nIHRpbiBqb2IKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IEvhur90IHF14bqjIHRo4buxYyBoaeG7h24gam9iLCBiYW8gZ+G7k206CiAgICAgICAgICAgICAgICAtIHN0YXR1cyAoaW50KTogTcOjIHRy4bqhbmcgdGjDoWkgam9iCiAgICAgICAgICAgICAgICAgICAgMDogQ2jGsGEgdGjhu7FjIGhp4buHbgogICAgICAgICAgICAgICAgICAgIDE6IFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIDI6IFRo4bqldCBi4bqhaSwga2jDtG5nIHTDrG0gdGjhuqV5IMSR4buRaSB0xrDhu6NuZwogICAgICAgICAgICAgICAgICAgIDM6IFRo4bqldCBi4bqhaSwgxJHDoyBi4buLIHVuZm9sbG93L3VubGlrZQogICAgICAgICAgICAgICAgICAgIDQ6IFRo4bqldCBi4bqhaSwgecOqdSBj4bqndSDEkWFuZyBjaOG7nQogICAgICAgICAgICAgICAgLSBtZXNzYWdlIChzdHIpOiBUaMO0bmcgYsOhbyBr4bq/dCBxdeG6owogICAgICAgICAgICAgICAgLSBzdWNjZXNzIChib29sKTogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgam9iX3R5cGUgPSBqb2IuZ2V0KCJ0eXBlIiwgIiIpLmxvd2VyKCkKICAgICAgICAgICAgam9iX2xpbmsgPSBqb2IuZ2V0KCJsaW5rIiwgIiIpCiAgICAgICAgICAgIGpvYl9pZCA9IGpvYi5nZXQoImlkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyB0aOG7sWMgaGnhu4duIGpvYiB7am9iX2lkfSBsb+G6oWkge2pvYl90eXBlfSB24bubaSBsaW5rIHtqb2JfbGlua30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGxv4bqhaSBqb2IgxJHGsOG7o2MgaOG7lyB0cuG7owogICAgICAgICAgICBpZiBqb2JfdHlwZSBub3QgaW4gWyJmb2xsb3ciLCAibGlrZSJdOgogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYiTG/huqFpIGpvYiB7am9iX3R5cGV9IGtow7RuZyDEkcaw4bujYyBo4buXIHRy4bujIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogMiwKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBUaOG7sWMgaGnhu4duIGpvYiB0aGVvIGxv4bqhaQogICAgICAgICAgICBqb2Jfc3RhdHVzID0gMCAgIyBN4bq3YyDEkeG7i25oIGzDoCBjaMawYSBsw6BtCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBqb2JfdHlwZSA9PSAiZm9sbG93IjoKICAgICAgICAgICAgICAgIGpvYl9zdGF0dXMgPSBzZWxmLl9wZXJmb3JtX2ZvbGxvd19qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIGVsaWYgam9iX3R5cGUgPT0gImxpa2UiOgogICAgICAgICAgICAgICAgam9iX3N0YXR1cyA9IHNlbGYuX3BlcmZvcm1fbGlrZV9qb2Ioam9iX2xpbmspCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFThuqFvIGvhur90IHF14bqjIHRy4bqjIHbhu4EgZOG7sWEgdHLDqm4gam9iX3N0YXR1cwogICAgICAgICAgICBpZiBqb2Jfc3RhdHVzID09IDE6ICAjIFRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYixJDDoyBob8OgbiB0aMOgbmggam9iIHtqb2JfdHlwZX0gdGjDoG5oIGPDtG5nIgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBUcnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSAyOiAgIyBLaMO0bmcgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiJLaMO0bmcgdGjhu4MgdMOsbSB0aOG6pXkgxJHhu5FpIHTGsOG7o25nIMSR4buDIHRo4buxYyBoaeG7h24gam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gMzogICMgQuG7iyB1bmZvbGxvdy91bmxpa2UKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBmIsSQw6MgYuG7iyB1bmZvbGxvdy91bmxpa2UgdHJvbmcgam9iIHtqb2JfdHlwZX0iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiBqb2Jfc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICAic3VjY2VzcyI6IEZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsaWYgam9iX3N0YXR1cyA9PSA0OiAgIyBZw6p1IGPhuqd1IMSRYW5nIGNo4budCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gZiJZw6p1IGPhuqd1IMSRYW5nIGNo4budIHRyb25nIGpvYiB7am9iX3R5cGV9IgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogam9iX3N0YXR1cywKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBlbGlmIGpvYl9zdGF0dXMgPT0gNTogICMgR+G7rWkgecOqdSBj4bqndQogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYiR+G7rWkgecOqdSBj4bqndSBjaOG7nSBkdXnhu4d0IHtqb2JfdHlwZX0iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKG1lc3NhZ2UpCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiBqb2Jfc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogbWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICAic3VjY2VzcyI6IEZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2U6ICAjIFRy4bqhbmcgdGjDoWkga2jDtG5nIHjDoWMgxJHhu4tuaAogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYiVHLhuqFuZyB0aMOhaSBraMO0bmcgeMOhYyDEkeG7i25oIGtoaSB0aOG7sWMgaGnhu4duIGpvYiB7am9iX3R5cGV9IHN0YXR1czp7am9iX3N0YXR1c30iCiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihtZXNzYWdlKQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogMCwKICAgICAgICAgICAgICAgICAgICAibWVzc2FnZSI6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBtZXNzYWdlID0gZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBqb2I6IHtzdHIoZSl9IgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgbWVzc2FnZSkKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJzdGF0dXMiOiAyLAogICAgICAgICAgICAgICAgIm1lc3NhZ2UiOiBtZXNzYWdlLAogICAgICAgICAgICAgICAgInN1Y2Nlc3MiOiBGYWxzZQogICAgICAgICAgICB9CiAgICAKICAgIGRlZiBfcGVyZm9ybV9mb2xsb3dfam9iKHNlbGYsIHByb2ZpbGVfbGluazogc3RyKSAtPiBpbnQ6CiAgICAgICAgIiIiCiAgICAgICAgVGjhu7FjIGhp4buHbiBqb2IgZm9sbG93IHRyw6puIEluc3RhZ3JhbQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHByb2ZpbGVfbGluazogTGluayDEkeG6v24gdHJhbmcgY8OhIG5ow6JuIGPhuqduIGZvbGxvdwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiBi4buLIHVuZm9sbG93KQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJFhbmcg4bufIHRyYW5nIGNo4bunCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmVuc3VyZV9ob21lX3NjcmVlbigpOgogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFRyw61jaCB4deG6pXQgdXNlcm5hbWUgdOG7qyBVUkwKICAgICAgICAgICAgaW1wb3J0IHJlCiAgICAgICAgICAgIGltcG9ydCByYW5kb20KICAgICAgICAgICAgdXNlcm5hbWVfbWF0Y2ggPSByZS5zZWFyY2gocidpbnN0YWdyYW1cLmNvbS8oW14vXSspJywgcHJvZmlsZV9saW5rKQogICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfbWF0Y2g6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0aOG7gyB0csOtY2ggeHXhuqV0IHVzZXJuYW1lIHThu6sgbGluazoge3Byb2ZpbGVfbGlua30iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB1c2VybmFtZSA9IHVzZXJuYW1lX21hdGNoLmdyb3VwKDEpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJhbmRvbSBjaOG7jW4gMSB0cm9uZyAyIGPDoWNoOiB0w6xtIGtp4bq/bSBob+G6t2MgbeG7nyB0cuG7sWMgdGnhur9wIGxpbmsKICAgICAgICAgICAgaWYgcmFuZG9tLmNob2ljZShbVHJ1ZSwgRmFsc2VdKToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIHRyYW5nIGPDoSBuaMOibiBi4bqxbmcgY8OhY2ggdMOsbSBraeG6v206IHt1c2VybmFtZX0iKQogICAgICAgICAgICAgICAgIyBDw6FjaCAxOiBUw6xtIGtp4bq/bSB1c2VybmFtZSAoY8OhY2ggY8WpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgxJDDs25nIGPDoWMgZGlhbG9nIG7hur91IGPDswogICAgICAgICAgICAgICAgICAgIGRpYWxvZyA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudChjb250ZW50X2Rlc2M9IkRpYWxvZyIpCiAgICAgICAgICAgICAgICAgICAgaWYgZGlhbG9nOgogICAgICAgICAgICAgICAgICAgICAgICAjIFRhcCB2w6BvIGtodSB24buxYyB0cuG7kW5nIMSR4buDIMSRw7NuZyBkaWFsb2cKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsIGhlaWdodCA9IHNlbGYuaGVscGVyLmdldF9zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcChpbnQod2lkdGgqMC4yKSwgaW50KGhlaWdodCowLjIpKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KSAgIyBUxINuZyB0aOG7nWkgZ2lhbiBjaOG7nSBsw6puIDEuNXMKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE3hu58gdHJhbmcgdMOsbSBraeG6v20gCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oLCB0aOG7rSBt4bufIGLhurFuZyBsaW5rIHRy4buxYyB0aeG6v3AiKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwcm9maWxlX2xpbmspCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCg0KSAgIyBUxINuZyB0aOG7nWkgZ2lhbiBjaOG7nSBsw6puIDRzCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHNlYXJjaF90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvc2VhcmNoX3RhYiIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZWFyY2hfdGFiOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IHRhYiBUw6xtIGtp4bq/bSwgdGjhu60gbeG7nyBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIoc2VhcmNoX3RhYikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAycwogICAgICAgICAgICAgICAgICAgIHNlYXJjaF90YWIgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnQocmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9zZWFyY2hfdGFiIikKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VhcmNoX3RhYiBvciBub3Qgc2VsZi5oZWxwZXIuaXNfZWxlbWVudF9zZWxlY3RlZChzZWFyY2hfdGFiKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF90YWIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEpIAoKICAgICAgICAgICAgICAgICAgICAjIE5o4bqlbiB2w6BvIHRoYW5oIHTDrG0ga2nhur9tCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oIGtoaSB0w6xtIMO0IG5o4bqtcCwgdGjhu60gbeG7nyBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2lucHV0ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfc2VhcmNoX2VkaXRfdGV4dCIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlYXJjaF9pbnB1dDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF90YWIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKSAKICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoX2lucHV0ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50KHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9zZWFyY2hfZWRpdF90ZXh0IikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VhcmNoX2lucHV0OgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHTDrG0gdGjhuqV5IMO0IG5o4bqtcCB0w6xtIGtp4bq/bSwgdGjhu60gbeG7nyBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFjDs2EgbuG7mWkgZHVuZyB0w6xtIGtp4bq/bSBoaeG7h24gdOG6oWkgbuG6v3UgY8OzCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHNlYXJjaF9pbnB1dCkKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTmjhuq1wIHVzZXJuYW1lIGPhuqduIHTDrG0gduG7m2kga8O9IHThu7EgQCBwaMOtYSB0csaw4bubYwogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLmlucHV0X3RleHQoZiJ7dXNlcm5hbWV9IikKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA1cyDEkeG7gyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSBoaeG7h24gxJHhuqd5IMSR4bunCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBUw6xtIGvhur90IHF14bqjIHRoZW8gcmVzb3VyY2UtaWQgY+G7pSB0aOG7gwogICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkgICMgVGhvw6F0IHTDrG0ga2nhur9tCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSwgdGjhu60gbeG7nyBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wIikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdXNlcl9yZXN1bHQgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcm93X3NlYXJjaF91c2VyX3VzZXJuYW1lIikKICAgICAgICAgICAgICAgICAgICBpZiB1c2VyX3Jlc3VsdDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJfcmVzdWx0KQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlLWlkLCB0aOG7rSB0w6xtIHRoZW8ga+G6v3QgcXXhuqMgdGjDtG5nIHRoxrDhu51uZwogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dCIpCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdF9mb3VuZCA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRfdGV4dCA9IHNlbGYuaGVscGVyLmdldF9lbGVtZW50X3RleHQocmVzdWx0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUubG93ZXIoKSBpbiByZXN1bHRfdGV4dC5sb3dlcigpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihyZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0X2ZvdW5kID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZXN1bHRfZm91bmQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIktow7RuZyB0w6xtIHRo4bqleSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB0cm9uZyBr4bq/dCBxdeG6oyB0w6xtIGtp4bq/bSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocHJvZmlsZV9saW5rKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB0w6xtIGtp4bq/bSB0w6BpIGtob+G6o246IHtzdHIoZSl9IikKICAgICAgICAgICAgICAgICAgICAjIE7hur91IGPDsyBs4buXaSwgc+G7rSBk4bulbmcgcGjGsMahbmcgdGjhu6ljIG3hu58gbGluawogICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLm9wZW5fdXJsKHByb2ZpbGVfbGluaykKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBDw6FjaCAyOiBN4bufIHRy4buxYyB0aeG6v3AgVVJMIHRow7RuZyBxdWEgaGVscGVyLm9wZW5fdXJsKCkKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJN4bufIHRyYW5nIGPDoSBuaMOibiBi4bqxbmcgbGluayB0cuG7sWMgdGnhur9wOiB7cHJvZmlsZV9saW5rfSIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5vcGVuX3VybChwcm9maWxlX2xpbmspCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNCkgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0cwogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSB0aMOqbSBjaG8gdHJhbmcgaOG7kyBzxqEgdOG6o2kgeG9uZwogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIG7DunQgRm9sbG93IHRoZW8gcmVzb3VyY2UtaWQgY2jDrW5oIHjDoWMKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyBkdW1wIG3DoG4gaMOsbmgga2hpIHTDrG0gbsO6dCBmb2xsb3ciKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBmb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Byb2ZpbGVfaGVhZGVyX2ZvbGxvd19idXR0b24iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgdGhlbyByZXNvdXJjZS1pZCwgdGjhu60gdMOsbSB0aGVvIHRleHQKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkgdGhlbyByZXNvdXJjZS1pZCwgdGjhu60gdMOsbSB0aGVvIHRleHQiKQogICAgICAgICAgICAgICAgIyBUw6xtIG7DunQgdGhlbyB0ZXh0CiAgICAgICAgICAgICAgICBmb2xsb3dfdGV4dHMgPSBbIlRoZW8gZMO1aSIsICJGb2xsb3ciLCAixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIHRleHQgaW4gZm9sbG93X3RleHRzOgogICAgICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9dGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaOG7rSBs4bqhaSBs4bqnbiBu4buvYSBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkgbsO6dCBmb2xsb3cKICAgICAgICAgICAgaWYgbm90IGZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJLaMO0bmcgdMOsbSB0aOG6pXkgbsO6dCB0aGVvIGTDtWkg4bufIGzhuqduIMSR4bqndSwgdGjhu60gdnXhu5F0IG3DoG4gaMOsbmggdsOgIHTDrG0gbOG6oWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCBraGkgdMOsbSBs4bqhaSBuw7p0IGZvbGxvdyIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvcHJvZmlsZV9oZWFkZXJfZm9sbG93X2J1dHRvbiIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICMgVMOsbSBuw7p0IHRoZW8gdGV4dAogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsiVGhlbyBkw7VpIiwgIkZvbGxvdyIsICLEkGFuZyB0aGVvIGTDtWkiLCAiRm9sbG93aW5nIiwgIsSQw6MgecOqdSBj4bqndSIsICJSZXF1ZXN0ZWQiXQogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD10ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBmb2xsb3dfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IHRoZW8gZMO1aSBzYXUgbmhp4buBdSBs4bqnbiB0aOG7rSIpCiAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0ZXh0IGPhu6dhIG7DunQKICAgICAgICAgICAgYnV0dG9uX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KGZvbGxvd19idXR0b24pCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJUZXh0IGPhu6dhIG7DunQgZm9sbG93OiB7YnV0dG9uX3RleHR9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgbMOgICLEkGFuZyB0aGVvIGTDtWkiIGhv4bq3YyAiRm9sbG93aW5nIiB0aMOsIMSRw6MgZm9sbG93IHLhu5NpCiAgICAgICAgICAgIGlmIGJ1dHRvbl90ZXh0IGluIFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyJdOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgdGhlbyBkw7VpIHTDoGkga2hv4bqjbiB7dXNlcm5hbWV9IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3UgbMOgICLEkMOjIHnDqnUgY+G6p3UiIGhv4bq3YyAiUmVxdWVzdGVkIiB0aMOsIMSRw6MgecOqdSBj4bqndSBmb2xsb3cgcuG7k2kKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIl06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYixJDDoyB5w6p1IGPhuqd1IHRoZW8gZMO1aSB0w6BpIGtob+G6o24ge3VzZXJuYW1lfSB04burIHRyxrDhu5tjIikKICAgICAgICAgICAgICAgIHJldHVybiA1CiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGzDoCAiVGhlbyBkw7VpIiBob+G6t2MgIkZvbGxvdyIgdGjDrCBjbGljayB2w6BvIG7DunQKICAgICAgICAgICAgaWYgYnV0dG9uX3RleHQgaW4gWyJUaGVvIGTDtWkiLCAiRm9sbG93Il06CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJUaOG7sWMgaGnhu4duIGNsaWNrIHbDoG8gbsO6dCB0aGVvIGTDtWkiKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGZvbGxvd19idXR0b24pCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiAycwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIGPDsyBkaWFsb2cgaGnhu4duIGzDqm4ga2jDtG5nCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIHRo4buDIGtp4buDbSB0cmEgZGlhbG9nLCBuaMawbmcgY8OzIHRo4buDIMSRw6MgdGhlbyBkw7VpIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB0cuG6oW5nIHRow6FpIG7DunQKICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZGlhbG9nX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9kaWFsb2dfY29udGFpbmVyIikKICAgICAgICAgICAgICAgIGlmIGRpYWxvZ19jb250YWluZXI6CiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gIlRo4butIGzhuqFpIHNhdSIga2jDtG5nCiAgICAgICAgICAgICAgICAgICAgcmV0cnlfdGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iVGjhu60gbOG6oWkgc2F1IikKICAgICAgICAgICAgICAgICAgICBpZiByZXRyeV90ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKCJKb2Iga2jDtG5nIGhvw6BuIHRow6BuaCwgYuG7iyBnaeG7m2kgaOG6oW4gdGhlbyBkw7VpICh0aOG7rSBs4bqhaSBzYXUpIikKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gIlnDqnUgY+G6p3UgY+G7p2EgYuG6oW4gxJFhbmcgY2jhu50iIGtow7RuZwogICAgICAgICAgICAgICAgICAgIHdhaXRpbmdfdGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iWcOqdSBj4bqndSBj4bunYSBi4bqhbiDEkWFuZyBjaOG7nSIpCiAgICAgICAgICAgICAgICAgICAgaWYgd2FpdGluZ190ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICAjIELhuqVtIG7DunQgT0sgbGnDqm4gdOG7pWMgY2hvIMSR4bq/biBraGkga2jDtG5nIGPDsm4gZGlhbG9nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJIb8OgbiB0aMOgbmgsIHnDqnUgY+G6p3UgdGhlbyBkw7VpIMSRYW5nIGNo4budIGR1eeG7h3QiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgTuG6v3UgbMOgIGRpYWxvZyBraMOhYywgYuG6pW0gT0sgbGnDqm4gdOG7pWMKICAgICAgICAgICAgICAgICAgICBzZWxmLl9kaXNtaXNzX2FsbF9kaWFsb2dzKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgY+G6p24geMOhYyBuaOG6rW4gdGhlbyBkw7VpIGtow7RuZyAodMOgaSBraG/huqNuIHJpw6puZyB0xrApCiAgICAgICAgICAgICAgICBjb25maXJtX2NvbnRhaW5lciA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9sYXlvdXRfY29udGFpbmVyX2JvdHRvbV9zaGVldCIpCiAgICAgICAgICAgICAgICBpZiBjb25maXJtX2NvbnRhaW5lcjoKICAgICAgICAgICAgICAgICAgICAjIFTDrG0gbsO6dCAiVGhlbyBkw7VpIiB0cm9uZyBjb250YWluZXIKICAgICAgICAgICAgICAgICAgICBjb25maXJtX2ZvbGxvd19idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIHRleHQ9IlRoZW8gZMO1aSIsY2xhc3NfbmFtZT0iYW5kcm9pZC52aWV3LlZpZXciKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBjb25maXJtX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1fZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iRm9sbG93IixjbGFzc19uYW1lPSJhbmRyb2lkLnZpZXcuVmlldyIpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGNvbmZpcm1fZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKGNvbmZpcm1fZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB0ZXh0IHNhdSBraGkgbmjhuqVuIHRoZW8gZMO1aQogICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIHRo4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBuw7p0LCBuaMawbmcgY8OzIHRo4buDIMSRw6MgdGhlbyBkw7VpIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHVwZGF0ZWRfZm9sbG93X2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9wcm9maWxlX2hlYWRlcl9mb2xsb3dfYnV0dG9uIikKICAgICAgICAgICAgICAgIGlmIG5vdCB1cGRhdGVkX2ZvbGxvd19idXR0b246CiAgICAgICAgICAgICAgICAgICAgIyBUaOG7rSB0w6xtIGzhuqFpIHRoZW8gdGV4dAogICAgICAgICAgICAgICAgICAgIGZvbGxvd190ZXh0cyA9IFsixJBhbmcgdGhlbyBkw7VpIiwgIkZvbGxvd2luZyIsICLEkMOjIHnDqnUgY+G6p3UiLCAiUmVxdWVzdGVkIiwgIlRoZW8gZMO1aSIsICJGb2xsb3ciXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciB0ZXh0IGluIGZvbGxvd190ZXh0czoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZF9mb2xsb3dfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCB0ZXh0PXRleHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfZm9sbG93X2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX3RleHQgPSBzZWxmLmhlbHBlci5nZXRfZWxlbWVudF90ZXh0KHVwZGF0ZWRfZm9sbG93X2J1dHRvbikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEtp4buDbSB0cmEgY8OhYyB0csaw4budbmcgaOG7o3Aga2jDoWMgbmhhdQogICAgICAgICAgICAgICAgICAgIGlmIHVwZGF0ZWRfdGV4dCBpbiBbIsSQYW5nIHRoZW8gZMO1aSIsICJGb2xsb3dpbmciXToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiRm9sbG93IHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsixJDDoyB5w6p1IGPhuqd1IiwgIlJlcXVlc3RlZCJdOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLEkMOjIGfhu61pIHnDqnUgY+G6p3UgdGhlbyBkw7VpIHRow6BuaCBjw7RuZyEiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNQogICAgICAgICAgICAgICAgICAgIGVsaWYgdXBkYXRlZF90ZXh0IGluIFsiVGhlbyBkw7VpIiwgIkZvbGxvdyJdOgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSBjw7MgdGjDtG5nIGLDoW8gIlnDqnUgY+G6p3UgY+G7p2EgYuG6oW4gxJFhbmcgY2jhu50iIGtow7RuZwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5wcmVzc19iYWNrKCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDEuNSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIHRo4buDIGtp4buDbSB0cmEgdGnhur9wLCBnaeG6oyDEkeG7i25oIGzDoCDEkcOjIGfhu61pIHnDqnUgY+G6p3UgdGhlbyBkw7VpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRpbmdfdGV4dCA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgdGV4dD0iWcOqdSBj4bqndSBj4bunYSBi4bqhbiDEkWFuZyBjaOG7nSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdhaXRpbmdfdGV4dDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQuG6pW0gbsO6dCBPSyBsacOqbiB04bulYyBjaG8gxJHhur9uIGtoaSBraMO0bmcgY8OybiBkaWFsb2cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rpc21pc3NfYWxsX2RpYWxvZ3MoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiSG/DoG4gdGjDoG5oLCB5w6p1IGPhuqd1IHRoZW8gZMO1aSDEkWFuZyBjaOG7nSBkdXnhu4d0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA0CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAKCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJGb2xsb3cga2jDtG5nIHRow6BuaCBjw7RuZywgdGV4dCBj4bunYSBuw7p0IGzDoDoge3VwZGF0ZWRfdGV4dH0iKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMgogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIEtow7RuZyB0w6xtIHRo4bqleSBuw7p0LCBjw7MgdGjhu4MgxJHDoyBmb2xsb3cgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIHTDrG0gdGjhuqV5IG7DunQgZm9sbG93IHNhdSBraGkgbmjhuqVuLCBnaeG6oyDEkeG7i25oIMSRw6MgdGjDoG5oIGPDtG5nIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJUZXh0IGPhu6dhIG7DunQga2jDtG5nIGto4bubcCB24bubaSAnVGhlbyBkw7VpJyBob+G6t2MgJ0ZvbGxvdyc6IHtidXR0b25fdGV4dH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGZvbGxvdzoge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gMgogICAgCiAgICBkZWYgX3BlcmZvcm1fbGlrZV9qb2Ioc2VsZiwgcG9zdF9saW5rOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBUaOG7sWMgaGnhu4duIGpvYiBsaWtlIGLDoGkgxJHEg25nIHRyw6puIEluc3RhZ3JhbQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHBvc3RfbGluazogTGluayDEkeG6v24gYsOgaSDEkcSDbmcgY+G6p24gbGlrZQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFRy4bqhbmcgdGjDoWkgam9iICgwOiBjaMawYSBsw6BtLCAxOiBob8OgbiB0aMOgbmgsIDI6IGzhu5dpLCAzOiBi4buLIHVubGlrZSkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiAyCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIk3hu58gYsOgaSDEkcSDbmcgYuG6sW5nIGxpbmsgdHLhu7FjIHRp4bq/cDoge3Bvc3RfbGlua30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBN4bufIHRy4buxYyB0aeG6v3AgVVJMIHRow7RuZyBxdWEgaGVscGVyLm9wZW5fdXJsKCkKICAgICAgICAgICAgc2VsZi5oZWxwZXIub3Blbl91cmwocG9zdF9saW5rKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaOG7nSB0cmFuZyBiw6BpIMSRxINuZyB04bqjaSB4b25nIHbhu5tpIHRo4budaSBnaWFuIG5n4bqrdSBuaGnDqm4KICAgICAgICAgICAgd2FpdF90aW1lID0gcmFuZG9tLnJhbmRpbnQoNCwgNikgICMgVMSDbmcgdGjhu51pIGdpYW4gY2jhu50gbMOqbiA0LTZzCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiLEkGFuZyBjaOG7nSB7d2FpdF90aW1lfXMgxJHhu4MgdHJhbmcgdOG6o2kgeG9uZy4uLiIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCh3YWl0X3RpbWUpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZ14buRdCBuaOG6uSBsw6puIHRyw6puIGtob+G6o25nIDEgbuG7rWEgbcOgbiBow6xuaCDEkeG7gyBoaeG7g24gdGjhu4sgbsO6dCBsaWtlCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlZ14buRdCBuaOG6uSDEkeG7gyBoaeG7g24gdGjhu4sgbsO6dCBsaWtlIikKICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KSAgIyBUxINuZyB0aOG7nWkgZ2lhbiBjaOG7nSBsw6puIDEuNXMKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVMOsbSBuw7p0IGxpa2UgdGhlbyByZXNvdXJjZS1pZAogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcigiS2jDtG5nIHRo4buDIGR1bXAgbcOgbiBow6xuaCBraGkgdMOsbSBuw7p0IGxpa2UiKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBsaWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9yb3dfZmVlZF9idXR0b25fbGlrZSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSwgdGjhu60gdnXhu5F0IGzhuqduIG7hu69hCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2UsIHRo4butIHZ14buRdCBs4bqnbiBu4buvYSIpCiAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMS41KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgICAgIGlmIG5vdCBzY3JlZW5feG1sOgogICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgZHVtcCBtw6BuIGjDrG5oIGtoaSB0w6xtIGzhuqFpIG7DunQgbGlrZSIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Jvd19mZWVkX2J1dHRvbl9saWtlIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHbhuqtuIGtow7RuZyB0w6xtIHRo4bqleSB0aGVvIHJlc291cmNlLWlkLCB0aOG7rSB0w6xtIHRoZW8gY29udGVudC1kZXNjCiAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIlRo4butIHTDrG0gbsO6dCBsaWtlIHRoZW8gY29udGVudC1kZXNjIikKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRow61jaCIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIG5vdCBsaWtlX2J1dHRvbjoKICAgICAgICAgICAgICAgICAgICAjIFRo4butIHTDrG0gduG7m2kgdGV4dCB0aeG6v25nIEFuaAogICAgICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9Ikxpa2UiKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBO4bq/dSB24bqrbiBraMO0bmcgdMOsbSB0aOG6pXksIGLDoW8gbOG7l2kKICAgICAgICAgICAgaWYgbm90IGxpa2VfYnV0dG9uOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSBuw7p0IGxpa2Ugc2F1IG5oaeG7gXUgbOG6p24gdGjhu60iKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgeGVtIMSRw6MgbGlrZSBjaMawYSBi4bqxbmcgdGh14buZYyB0w61uaCBzZWxlY3RlZAogICAgICAgICAgICBpc19zZWxlY3RlZCA9IHNlbGYuaGVscGVyLmlzX2VsZW1lbnRfc2VsZWN0ZWQobGlrZV9idXR0b24pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IHNlbGVjdGVkIGtow7RuZyBjw7MgZ2nDoSB0cuG7iywgdGjhu60gdMOsbSBuw7p0ICJC4buPIHRow61jaCIgaG/hurdjICJVbmxpa2UiCiAgICAgICAgICAgIGlmIG5vdCBpc19zZWxlY3RlZDoKICAgICAgICAgICAgICAgIHVubGlrZV9idXR0b24gPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iQuG7jyB0aMOtY2giKQogICAgICAgICAgICAgICAgaWYgbm90IHVubGlrZV9idXR0b246CiAgICAgICAgICAgICAgICAgICAgdW5saWtlX2J1dHRvbiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJVbmxpa2UiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpc19zZWxlY3RlZCA9IGJvb2wodW5saWtlX2J1dHRvbikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE7hur91IMSRw6MgbGlrZSBy4buTaSB0aMOsIGhvw6BuIHRow6BuaAogICAgICAgICAgICBpZiBpc19zZWxlY3RlZDoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIsSQw6MgbGlrZSBiw6BpIHZp4bq/dCBuw6B5IHThu6sgdHLGsOG7m2MiKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIExpa2UgYsOgaSB2aeG6v3QKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiTmjhuqVuIG7DunQgbGlrZSIpCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihsaWtlX2J1dHRvbikKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpICAjIFTEg25nIHRo4budaSBnaWFuIGNo4budIGzDqm4gMnMKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSBs4bqhaSB4ZW0gxJHDoyBsaWtlIHRow6BuaCBjw7RuZyBjaMawYQogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5kdW1wX3NjcmVlbl93aXRoX3JldHJ5KCkKICAgICAgICAgICAgaWYgbm90IHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICAjIEtow7RuZyB0aOG7gyBraeG7g20gdHJhLCBnaeG6oyDEkeG7i25oIMSRw6MgbGlrZSB0aMOgbmggY8O0bmcKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0aOG7gyBraeG7g20gdHJhIGzhuqFpIHRy4bqhbmcgdGjDoWkgbGlrZSwgZ2nhuqMgxJHhu4tuaCB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBjaGVja191bmxpa2UgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKHNjcmVlbl94bWwsIGNvbnRlbnRfZGVzYz0iQuG7jyB0aMOtY2giKQogICAgICAgICAgICBpZiBub3QgY2hlY2tfdW5saWtlOgogICAgICAgICAgICAgICAgY2hlY2tfdW5saWtlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlVubGlrZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIGzhuqFpIGLhurFuZyByZXNvdXJjZS1pZCB2w6Agc2VsZWN0ZWQKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3VubGlrZToKICAgICAgICAgICAgICAgIGxpa2VfYnV0dG9uX2FmdGVyID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL3Jvd19mZWVkX2J1dHRvbl9saWtlIikKICAgICAgICAgICAgICAgIGlmIGxpa2VfYnV0dG9uX2FmdGVyIGFuZCBzZWxmLmhlbHBlci5pc19lbGVtZW50X3NlbGVjdGVkKGxpa2VfYnV0dG9uX2FmdGVyKToKICAgICAgICAgICAgICAgICAgICBjaGVja191bmxpa2UgPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgY2hlY2tfdW5saWtlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygixJDDoyBsaWtlIGLDoGkgdmnhur90IHRow6BuaCBjw7RuZyIpCiAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0aOG7gyB4w6FjIG5o4bqtbiDEkcOjIGxpa2UgYsOgaSB2aeG6v3QiKQogICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gam9iIGxpa2U6IHtzdHIoZSl9IikKICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAgICAgCiAgICBkZWYgX2NhcmVfc3dpcGVfZmVlZChzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJWdeG7kXQgYuG6o25nIHRpbiBJbnN0YWdyYW0gMy01IGLDoGkgbmjGsCBuZ8aw4budaSBkw7luZyB0aMO0bmcgdGjGsOG7nW5nIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBudW1fc3dpcGVzID0gcmFuZG9tLnJhbmRpbnQoMywgMTApCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKG51bV9zd2lwZXMpOgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfdXAoKQogICAgICAgICAgICAgICAgIyBUaOG7nWkgZ2lhbiBk4burbmcgbmfhuqt1IG5oacOqbiAxLjUg4oCTIDMuNSBnacOieSBnaeG7r2EgY8OhYyBs4bqnbiB2deG7kXQKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxLjUsIDMuNSkpCiAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHZ14buRdCBmZWVkOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgX2NhcmVfdmlld19zdG9yaWVzKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlhlbSBzdG9yeSAzLTUgc3RvcnkgduG7m2kgdOG7kWMgxJHhu5kgbmfhuqt1IG5oacOqbiIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB0aOG7nWkgZ2lhbiB4ZW0gc3RvcnkgY3Xhu5FpIGPDuW5nIHThu6sgYWNjb3VudAogICAgICAgICAgICBsYXN0X3ZpZXdfc3RvcmllcyA9IGFjY291bnQuZ2V0KCJsYXN0X3ZpZXdfc3RvcmllcyIsIDApCiAgICAgICAgICAgIGN1cnJlbnRfdGltZSA9IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgaWYgbGFzdF92aWV3X3N0b3JpZXMgPiAwIGFuZCAoY3VycmVudF90aW1lIC0gbGFzdF92aWV3X3N0b3JpZXMpIDwgMTA4MDA6ICAjIDMgdGnhur9uZyA9IDEwODAwIGdpw6J5CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCJDaMawYSDEkeG7pyAzIHRp4bq/bmcga+G7gyB04burIGzhuqduIHhlbSBzdG9yeSBjdeG7kWksIGLhu48gcXVhIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgICAgICAjIFTDrG0gdOG6pXQgY+G6oyBzdG9yeSB0aHVtYm5haWxzIHRoZW8gcmVzb3VyY2UtaWQKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuZHVtcF9zY3JlZW5fd2l0aF9yZXRyeSgpCiAgICAgICAgICAgIHN0b3J5X3RodW1icyA9IFtdCiAgICAgICAgICAgIGlmIHNjcmVlbl94bWw6CiAgICAgICAgICAgICAgICBzdG9yeV90aHVtYnMgPSBzZWxmLmhlbHBlci5maW5kX2FsbF9lbGVtZW50c19pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hdmF0YXJfaW1hZ2VfdmlldyIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEtp4buDbSB0cmEgbuG6v3UgY8OzIMOtdCBuaOG6pXQgMiBzdG9yeSB0aMOsIG3hu5tpIGzDoG0KICAgICAgICAgICAgaWYgbGVuKHN0b3J5X3RodW1icykgPCAyOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIktow7RuZyDEkeG7pyBzdG9yeSDEkeG7gyB4ZW0gKGNo4buJIGPDsyB7bGVuKHN0b3J5X3RodW1icyl9IHN0b3J5KSwgYuG7jyBxdWEiKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUmFuZG9tIGNo4buNbiBzdG9yeSB04burIHRo4bupIDIgxJHhur9uIGN14buRaQogICAgICAgICAgICBzdGFydF9pbmRleCA9IHJhbmRvbS5yYW5kaW50KDEsIGxlbihzdG9yeV90aHVtYnMpIC0gMSkKICAgICAgICAgICAgc2VsZWN0ZWRfc3RvcnkgPSBzdG9yeV90aHVtYnNbc3RhcnRfaW5kZXhdCiAgICAgICAgICAgIAogICAgICAgICAgICAjIELhuqVtIHbDoG8gc3RvcnkgxJHGsOG7o2MgY2jhu41uCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWxlY3RlZF9zdG9yeSkKICAgICAgICAgICAgc2VsZi5zYWZlX3NsZWVwKDIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFhlbSAzLTggc3RvcnkgduG7m2kgdOG7kWMgxJHhu5kgbmfhuqt1IG5oacOqbgogICAgICAgICAgICBudW1fc3RvcmllcyA9IHJhbmRvbS5yYW5kaW50KDMsIDgpCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKG51bV9zdG9yaWVzKToKICAgICAgICAgICAgICAgICMgVGjhu51pIGdpYW4geGVtIHN0b3J5OiBuZ+G6r24gaG/hurdjIGTDoGkgbmfhuqt1IG5oacOqbgogICAgICAgICAgICAgICAgd2FpdCA9IHJhbmRvbS51bmlmb3JtKDEuMCwgMy4wKSBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBGYWxzZV0pIGVsc2UgcmFuZG9tLnVuaWZvcm0oMy4wLCA1LjApCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAod2FpdCkKICAgICAgICAgICAgICAgICMgQ2h1eeG7g24gc2FuZyBzdG9yeSB0aeG6v3AgdGhlbyBi4bqxbmcgY8OhY2ggYuG6pW0gdsOgbyB24buLIHRyw60gbmfhuqt1IG5oacOqbiDhu58gZ2nhu69hIG3DoG4gaMOsbmgKICAgICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQgPSBzZWxmLmhlbHBlci5nZXRfc2NyZWVuX3NpemUoKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfcmlnaHQoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaG/DoXQgc3Rvcnkgdmlld2VyCiAgICAgICAgICAgIHNlbGYuaGVscGVyLnByZXNzX2JhY2soKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdGjhu51pIGdpYW4geGVtIHN0b3J5IGN14buRaSBjw7luZyB2w6BvIGFjY291bnQKICAgICAgICAgICAgaWYgYWNjb3VudCBhbmQgImlkIiBpbiBhY2NvdW50OgogICAgICAgICAgICAgICAgc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50WyJpZCJdLCB7Imxhc3Rfdmlld19zdG9yaWVzIjogY3VycmVudF90aW1lfSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiTOG7l2kga2hpIHhlbSBzdG9yeToge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9jYXJlX3ZpZXdfbm90aWZpY2F0aW9ucyhzZWxmLCBhY2NvdW50OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJN4bufIHRhYiB0aMO0bmcgYsOhbyB2w6AgY3Xhu5luIG5o4bq5IiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAxOiBLaeG7g20gdHJhIGPDsyBub3RpZmljYXRpb24gYmFkZ2Uga2jDtG5nCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICBpZiBub3Qgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbl9iYWRnZSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9sZWRfYmFkZ2UiKQogICAgICAgICAgICBpZiBub3Qgbm90aWZpY2F0aW9uX2JhZGdlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIGPDsyBub3RpZmljYXRpb24gYmFkZ2UsIGLhu48gcXVhIHhlbSB0aMO0bmcgYsOhbyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCxrDhu5tjIDI6IELhuqVtIHbDoG8gbm90aWZpY2F0aW9uIHRhYgogICAgICAgICAgICBub3RpZmljYXRpb25fdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL25vdGlmaWNhdGlvbiIpCiAgICAgICAgICAgIGlmIG5vdCBub3RpZmljYXRpb25fdGFiOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZygiS2jDtG5nIHTDrG0gdGjhuqV5IG5vdGlmaWNhdGlvbiB0YWIiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKG5vdGlmaWNhdGlvbl90YWIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgyLCAzKSkgICMgxJDhu41jIDItM3MKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyAzOiBSYW5kb20geOG7rSBsw70KICAgICAgICAgICAgaWYgcmFuZG9tLmNob2ljZShbVHJ1ZSwgRmFsc2VdKToKICAgICAgICAgICAgICAgICMgVMOsbSB2w6AgYuG6pW0gdsOgbyBzdG9yeSByb3cKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmR1bXBfc2NyZWVuX3dpdGhfcmV0cnkoKQogICAgICAgICAgICAgICAgaWYgc2NyZWVuX3htbDoKICAgICAgICAgICAgICAgICAgICBzdG9yeV9yb3dzID0gc2VsZi5oZWxwZXIuZmluZF9hbGxfZWxlbWVudHNfaW5feG1sKHNjcmVlbl94bWwsIHJlc291cmNlX2lkPSJhY3Rpdml0eV9mZWVkX25ld3NmZWVkX3N0b3J5X3JvdyIpCiAgICAgICAgICAgICAgICAgICAgaWYgc3Rvcnlfcm93cyBhbmQgbGVuKHN0b3J5X3Jvd3MpID4gMDoKICAgICAgICAgICAgICAgICAgICAgICAgIyBSYW5kb20gY2jhu41uIGluZGV4IHThu6sgMS0zIChob+G6t2Mgw610IGjGoW4gbuG6v3Uga2jDtG5nIMSR4bunKQogICAgICAgICAgICAgICAgICAgICAgICBtYXhfaW5kZXggPSBtaW4oMywgbGVuKHN0b3J5X3Jvd3MpIC0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbWF4X2luZGV4ID49IDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9pbmRleCA9IHJhbmRvbS5yYW5kaW50KDEsIG1heF9pbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX3N0b3J5ID0gc3Rvcnlfcm93c1tzZWxlY3RlZF9pbmRleF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnRhcF9lbGVtZW50X2NlbnRlcihzZWxlY3RlZF9zdG9yeSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgzLCA0KSkgICMgQ2jhu50gMy00cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFZ14buRdCBsw6puIDEtMyBs4bqnbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMSwgMykpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAocmFuZG9tLnVuaWZvcm0oMSwgMikpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFJhbmRvbSB2deG7kXQgbMOqbiBob+G6t2Mga2jDtG5nCiAgICAgICAgICAgICAgICBpZiByYW5kb20uY2hvaWNlKFtUcnVlLCBGYWxzZV0pOgogICAgICAgICAgICAgICAgICAgICMgVnXhu5F0IGzDqm4gMS0zIGzhuqduCiAgICAgICAgICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMSwgMykpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhlbHBlci5zd2lwZV91cCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcChyYW5kb20udW5pZm9ybSgxLCAyKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQsaw4bubYyA0OiBRdWF5IGzhuqFpIGhvbWUKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgeGVtIHRow7RuZyBiw6FvOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgcGVyZm9ybV9jYXJlKHNlbGYsIGFjY291bnQ6IERpY3Rbc3RyLCBBbnldKToKICAgICAgICAiIiJDaMSDbSBzw7NjIG5o4bq5IChtaW5pIGNhcmUpIGNobyB0w6BpIGtob+G6o24gSW5zdGFncmFtIiIiCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIkLhuq90IMSR4bqndSBtaW5pIGNhcmUgY2hvIHTDoGkga2hv4bqjbiBJbnN0YWdyYW06IHthY2NvdW50Wyd1bmlxdWVfdXNlcm5hbWUnXX0iKQoKICAgICAgICAjIERhbmggc8OhY2ggY8OhYyBow6BuaCDEkeG7mW5nIGNoxINtIHPDs2MKICAgICAgICBhY3Rpb25zID0gW3NlbGYuX2NhcmVfc3dpcGVfZmVlZCwgc2VsZi5fY2FyZV92aWV3X3N0b3JpZXMsIHNlbGYuX2NhcmVfdmlld19ub3RpZmljYXRpb25zXQogICAgICAgIHJhbmRvbS5zaHVmZmxlKGFjdGlvbnMpCgogICAgICAgIGZvciBhY3Rpb24gaW4gYWN0aW9uczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYWN0aW9uKGFjY291bnQpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgdGjhu7FjIGhp4buHbiBow6BuaCDEkeG7mW5nIHthY3Rpb24uX19uYW1lX199OiB7ZX0iKQoKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiSG/DoG4gdGjDoG5oIG1pbmkgY2FyZSBjaG8gdMOgaSBraG/huqNuIEluc3RhZ3JhbToge2FjY291bnRbJ3VuaXF1ZV91c2VybmFtZSddfSIpCiAgICAgICAgCiAgICBkZWYgX3BlcmZvcm1fYWNjb3VudF9zd2l0Y2goc2VsZiwgdGFyZ2V0X2FjY291bnQ6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIFRo4buxYyBoaeG7h24gY8OhYyB0aGFvIHTDoWMgVUkgxJHhu4MgY2h1eeG7g24gdMOgaSBraG/huqNuIEluc3RhZ3JhbQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhcmdldF9hY2NvdW50OiBUw6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24gxJHhur9uCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIMSRYW5nIOG7nyB0cmFuZyBjaOG7pwogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfaG9tZV9zY3JlZW4oKToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVuIHbDoG8gdGFiICJUcmFuZyBjw6EgbmjDom4iCiAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICBwcm9maWxlX3RhYiA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoc2NyZWVuX3htbCwgY29udGVudF9kZXNjPSJUcmFuZyBjw6EgbmjDom4iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHByb2ZpbGVfdGFiOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0YWIgVHJhbmcgY8OhIG5ow6JuIikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVwIHbDoG8gdGFiIFRyYW5nIGPDoSBuaMOibgogICAgICAgICAgICBzZWxmLmhlbHBlci50YXBfZWxlbWVudF9jZW50ZXIocHJvZmlsZV90YWIpCiAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgyKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUw6xtIHVzZXJuYW1lIHThu6sgdGnDqnUgxJHhu4EgbOG7m24gdHJvbmcgYWN0aW9uIGJhcgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgdXNlcm5hbWVfdGl0bGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfbGFyZ2VfdGl0bGVfYXV0b19zaXplIgogICAgICAgICAgICApCiAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZV90aXRsZToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIHVzZXJuYW1lX3RpdGxlID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbCgKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgcmVzb3VyY2VfaWQ9ImNvbS5pbnN0YWdyYW0uYW5kcm9pZDppZC9hY3Rpb25fYmFyX2xhcmdlX3RpdGxlX2F1dG9fc2l6ZSIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHVzZXJuYW1lX3RpdGxlOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoIktow7RuZyB0w6xtIHRo4bqleSB0acOqdSDEkeG7gSB1c2VybmFtZSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIE5o4bqlcCB2w6BvIHRpw6p1IMSR4buBIHVzZXJuYW1lIMSR4buDIG3hu58gZGFuaCBzw6FjaCB0w6BpIGtob+G6o24KICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHVzZXJuYW1lX3RpdGxlKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgdMOqbiB0w6BpIGtob+G6o24gY+G6p24gY2h1eeG7g24gxJHhur9uCiAgICAgICAgICAgIHRhcmdldF91c2VybmFtZSA9IHRhcmdldF9hY2NvdW50LmdldCgidW5pcXVlX3VzZXJuYW1lIiwgIiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrG0gdHLhu7FjIHRp4bq/cCB0w6BpIGtob+G6o24gdGhlbyB0ZXh0IChjw6FjaCDEkcahbiBnaeG6o24gbmjhuqV0KQogICAgICAgICAgICBhY2NvdW50c194bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICB0YXJnZXRfaXRlbSA9IHNlbGYuaGVscGVyLmZpbmRfZWxlbWVudF9pbl94bWwoYWNjb3VudHNfeG1sLCB0ZXh0PXRhcmdldF91c2VybmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCB0YXJnZXRfaXRlbToKICAgICAgICAgICAgICAgICMgVGjhu60gdMOsbSB0aGVvIGNvbnRlbnQtZGVzYyAoY8OzIHRo4buDIGNo4bupYSB0aMO0bmcgYsOhbykKICAgICAgICAgICAgICAgIHRhcmdldF9pdGVtcyA9IHNlbGYuaGVscGVyLmZpbmRfYWxsX2VsZW1lbnRzX2luX3htbChhY2NvdW50c194bWwsIGNsYXNzX25hbWU9ImFuZHJvaWQudmlldy5WaWV3R3JvdXAiKQogICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gdGFyZ2V0X2l0ZW1zOgogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfZGVzYyA9IGl0ZW0uZ2V0KCJjb250ZW50LWRlc2MiLCAiIikKICAgICAgICAgICAgICAgICAgICBpZiB0YXJnZXRfdXNlcm5hbWUgaW4gY29udGVudF9kZXNjIGFuZCAiVGjDqm0gdMOgaSBraG/huqNuIiBub3QgaW4gY29udGVudF9kZXNjIGFuZCAiVHJ1bmcgdMOibSB0w6BpIGtob+G6o24iIG5vdCBpbiBjb250ZW50X2Rlc2M6CiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldF9pdGVtID0gaXRlbQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IHRhcmdldF9pdGVtOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoZiJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIHt0YXJnZXRfdXNlcm5hbWV9IHRyb25nIGRhbmggc8OhY2ggdMOgaSBraG/huqNuIEluc3RhZ3JhbSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IHTDoGkga2hv4bqjbiBsw6AgYuG7iyB2w7QgaGnhu4d1IGjDs2EgdHJvbmcgREIKICAgICAgICAgICAgICAgIHNlbGYuZGIudXBkYXRlX2FjY291bnQodGFyZ2V0X2FjY291bnRbImlkIl0sIHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImRpc2FibGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGlzYWJsZV9yZWFzb24iOiAiVMOgaSBraG/huqNuIGtow7RuZyBjw7MgdHLDqm4gdGhp4bq/dCBi4buLIiwKICAgICAgICAgICAgICAgICAgICAibGFzdF91cGRhdGUiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE5o4bqlbiBCYWNrIMSR4buDIMSRw7NuZyBkYW5oIHPDoWNoIHTDoGkga2hv4bqjbgogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIucHJlc3NfYmFjaygpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBRdWF5IHbhu4EgdHJhbmcgY2jhu6cKICAgICAgICAgICAgICAgIHNlbGYuYmFja190b19ob21lKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBOaOG6pXAgdsOgbyB0w6BpIGtob+G6o24gbeG7pWMgdGnDqnUKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHRhcmdldF9pdGVtKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoNSkgICMgxJDhu6NpIGNodXnhu4NuIHTDoGkga2hv4bqjbiBob8OgbiB04bqldAogICAgICAgICAgICAKICAgICAgICAgICAgIyBLaeG7g20gdHJhIHhlbSDEkcOjIGNodXnhu4NuIHTDoGkga2hv4bqjbiB0aMOgbmggY8O0bmcgY2jGsGEKICAgICAgICAgICAgY3VycmVudF91c2VybmFtZSA9IHNlbGYuZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGN1cnJlbnRfdXNlcm5hbWUgPT0gdGFyZ2V0X3VzZXJuYW1lOgogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgY2h1eeG7g24gdMOgaSBraG/huqNuIHRow6BuaCBjw7RuZyBzYW5nIHt0YXJnZXRfdXNlcm5hbWV9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIsSQw6MgYuG6pW0gdsOgbyB0w6BpIGtob+G6o24ge3RhcmdldF91c2VybmFtZX0gbmjGsG5nIGtp4buDbSB0cmEgbOG6oWkgdGjhuqV5IMSRYW5nIMSRxINuZyBuaOG6rXAgbMOgIHtjdXJyZW50X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5leGNlcHRpb24oZSwgIkzhu5dpIGtoaSBjaHV54buDbiB0w6BpIGtob+G6o24gSW5zdGFncmFtIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhuqNtIGLhuqNvIHF1YXkgduG7gSB0cmFuZyBjaOG7pwogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2N1cnJlbnRfbG9nZ2VkX2luX3VzZXJuYW1lKHNlbGYpIC0+IE9wdGlvbmFsW3N0cl06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdXNlcm5hbWUgY+G7p2EgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHIgaG/hurdjIE5vbmU6IFVzZXJuYW1lIGPhu6dhIHTDoGkga2hv4bqjbiDEkWFuZyDEkcSDbmcgbmjhuq1wLCBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgY8OzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIMSQ4bqjbSBi4bqjbyDEkWFuZyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgaWYgbm90IHNlbGYuZW5zdXJlX2hvbWVfc2NyZWVuKCk6CiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgIyBDw6FjaCAxOiDEkOG7jWMgdOG7qyBhdmF0YXJfaW1hZ2VfdmlldyDhu58gdHJhbmcgY2jhu6cKICAgICAgICAgICAgc2NyZWVuX3htbCA9IHNlbGYuaGVscGVyLmR1bXBfc2NyZWVuX3htbCgpCiAgICAgICAgICAgIGF2YXRhcl92aWV3ID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2F2YXRhcl9pbWFnZV92aWV3IikKICAgICAgICAgICAgaWYgYXZhdGFyX3ZpZXc6CiAgICAgICAgICAgICAgICBjb250ZW50X2Rlc2MgPSBhdmF0YXJfdmlldy5nZXQoImNvbnRlbnQtZGVzYyIsICIiKQogICAgICAgICAgICAgICAgIyBjb250ZW50LWRlc2MgZOG6oW5nOiAiVGluIGPhu6dhIG5nb3RoaXllbjI2MDEwMDU5LCAwLzEsIENoxrBhIHhlbSIKICAgICAgICAgICAgICAgIGlmIGNvbnRlbnRfZGVzYyBhbmQgIlRpbiBj4bunYSAiIGluIGNvbnRlbnRfZGVzYzoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gY29udGVudF9kZXNjLnNwbGl0KCJUaW4gY+G7p2EgIiwgMSlbMV0uc3BsaXQoIiwiLCAxKVswXS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbOG6pXkgdXNlcm5hbWUgdOG7qyB0cmFuZyBjaOG7pzoge3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgY+G6r3QgY2h14buXaSBs4bqleSB1c2VybmFtZSB04burIGNvbnRlbnQtZGVzYzoge2V9IikKCiAgICAgICAgICAgICMgQ8OhY2ggMjogTuG6v3Uga2jDtG5nIHRow6BuaCBjw7RuZyDhu58gY8OhY2ggMSwgdGjhu60gdsOgbyB0cmFuZyBjw6EgbmjDom4KICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygiS2jDtG5nIGzhuqV5IMSRxrDhu6NjIHVzZXJuYW1lIHThu6sgdHJhbmcgY2jhu6csIHRo4butIHbDoG8gdHJhbmcgY8OhIG5ow6JuIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTmjhuqVuIHbDoG8gdGFiICJUcmFuZyBjw6EgbmjDom4iCiAgICAgICAgICAgIHByb2ZpbGVfdGFiID0gc2VsZi5oZWxwZXIuZmluZF9lbGVtZW50X2luX3htbChzY3JlZW5feG1sLCBjb250ZW50X2Rlc2M9IlRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgIGlmIG5vdCBwcm9maWxlX3RhYjoKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKCJLaMO0bmcgdMOsbSB0aOG6pXkgdGFiIFRyYW5nIGPDoSBuaMOibiIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICAgICAgc2VsZi5oZWxwZXIudGFwX2VsZW1lbnRfY2VudGVyKHByb2ZpbGVfdGFiKQogICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMikKCiAgICAgICAgICAgICMgxJDhu41jIHVzZXJuYW1lIHThu6sgdGnDqnUgxJHhu4EgbOG7m24gdHJvbmcgYWN0aW9uIGJhcgogICAgICAgICAgICBzY3JlZW5feG1sID0gc2VsZi5oZWxwZXIuZHVtcF9zY3JlZW5feG1sKCkKICAgICAgICAgICAgdXNlcm5hbWVfdGl0bGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgc2NyZWVuX3htbCwgCiAgICAgICAgICAgICAgICByZXNvdXJjZV9pZD0iY29tLmluc3RhZ3JhbS5hbmRyb2lkOmlkL2FjdGlvbl9iYXJfbGFyZ2VfdGl0bGVfYXV0b19zaXplIgogICAgICAgICAgICApCiAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZV90aXRsZToKICAgICAgICAgICAgICAgIHNlbGYuaGVscGVyLnN3aXBlX3VwKCkKICAgICAgICAgICAgICAgIHNlbGYuc2FmZV9zbGVlcCgxKQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMC41KQogICAgICAgICAgICAgICAgc2VsZi5oZWxwZXIuc3dpcGVfZG93bigpCiAgICAgICAgICAgICAgICBzZWxmLnNhZmVfc2xlZXAoMSkKICAgICAgICAgICAgICAgIHNjcmVlbl94bWwgPSBzZWxmLmhlbHBlci5kdW1wX3NjcmVlbl94bWwoKQogICAgICAgICAgICAgICAgdXNlcm5hbWVfdGl0bGUgPSBzZWxmLmhlbHBlci5maW5kX2VsZW1lbnRfaW5feG1sKAogICAgICAgICAgICAgICAgICAgIHNjcmVlbl94bWwsIAogICAgICAgICAgICAgICAgICAgIHJlc291cmNlX2lkPSJjb20uaW5zdGFncmFtLmFuZHJvaWQ6aWQvYWN0aW9uX2Jhcl9sYXJnZV90aXRsZV9hdXRvX3NpemUiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB1c2VybmFtZV90aXRsZToKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gc2VsZi5oZWxwZXIuZ2V0X2VsZW1lbnRfdGV4dCh1c2VybmFtZV90aXRsZSkKICAgICAgICAgICAgICAgICMgUXVheSBs4bqhaSB0cmFuZyBjaOG7pwogICAgICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIsSQw6MgbOG6pXkgdXNlcm5hbWUgdOG7qyB0cmFuZyBjw6EgbmjDom46IHt1c2VybmFtZX0iKQogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCgogICAgICAgICAgICAjIE7hur91IGtow7RuZyB0w6xtIHRo4bqleSB0acOqdSDEkeG7gSwgdGjhu60gdMOsbSBiaeG7g3UgdMaw4bujbmcgdHJhbmcgY8OhIG5ow6JuIGtow6FjCiAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oIktow7RuZyB0w6xtIHRo4bqleSB0acOqdSDEkeG7gSB1c2VybmFtZSwgdGjhu60gdMOsbSB0aGVvIGPDoWNoIGtow6FjIikKICAgICAgICAgICAgc2VsZi5iYWNrX3RvX2hvbWUoKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgbOG6pXkgdXNlcm5hbWUgdMOgaSBraG/huqNuIMSRYW5nIMSRxINuZyBuaOG6rXAiKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLmJhY2tfdG9faG9tZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICBkZWYgZ2V0X2pvYl9wYXJhbXMoc2VsZiwgYWNjb3VudDogRGljdFtzdHIsIEFueV0pIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRoYW0gc+G7kSDEkeG7gyBn4buNaSBBUEkgbOG6pXkgam9iIGNobyBJbnN0YWdyYW0KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50OiBUaMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogVGhhbSBz4buRCiAgICAgICAgIiIiCiAgICAgICAgZ29saWtlX2lkID0gYWNjb3VudC5nZXQoImdvbGlrZV9pZCIpCiAgICAgICAgaWYgbm90IGdvbGlrZV9pZDoKICAgICAgICAgICAgcmV0dXJuIHt9CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICJpbnN0YWdyYW1fYWNjb3VudF9pZCI6IGdvbGlrZV9pZCwKICAgICAgICAgICAgImRhdGEiOiAibnVsbCIKICAgICAgICB9').decode('utf-8'))
