import base64
exec(base64.b64decode('aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBUdXBsZSwgRGljdCwgTGlzdAppbXBvcnQgY29uZmlnCmltcG9ydCBvcwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHN5cwppbXBvcnQgdHJhY2ViYWNrCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmltcG9ydCBsb2dnaW5nLmhhbmRsZXJzCmltcG9ydCBzdWJwcm9jZXNzCmZyb20gZW51bSBpbXBvcnQgRW51bQoKIyBUaGVvIGTDtWkgdOG6pXQgY+G6oyBjw6FjIGxvZ2dlciDEkcOjIHThuqFvCmFsbF9sb2dnZXJzOiBEaWN0W3N0ciwgJ0xvZ2dlciddID0ge30KCiMgQmnhur9uIHRvw6BuIGPhu6VjIMSR4buDIGzGsHUgdHLhuqFuZyB0aMOhaQpoZWxwZXJfYXZhaWxhYmxlID0gRmFsc2UKbmV0d29ya19hdmFpbGFibGUgPSBGYWxzZQoKIyDEkOG7i25oIG5naMSpYSBjw6FjIGxldmVsIGxvZwpjbGFzcyBMb2dMZXZlbChFbnVtKToKICAgIERFQlVHID0gbG9nZ2luZy5ERUJVRwogICAgSU5GTyA9IGxvZ2dpbmcuSU5GTwogICAgV0FSTklORyA9IGxvZ2dpbmcuV0FSTklORwogICAgRVJST1IgPSBsb2dnaW5nLkVSUk9SCiAgICBDUklUSUNBTCA9IGxvZ2dpbmcuQ1JJVElDQUwKCiMgQ+G6pXUgaMOsbmggbG9nZ2VyIHbhu5tpIFJvdGF0aW5nRmlsZUhhbmRsZXIgxJHhu4MgZ2nhu5tpIGjhuqFuIGvDrWNoIHRoxrDhu5tjIGZpbGUKIyBU4bqhbyBSb3RhdGluZ0ZpbGVIYW5kbGVyIC0gZ2nhu5tpIGjhuqFuIGtob+G6o25nIDIwMDAgZMOybmcgKMaw4bubYyB0w61uaCB+MjAwS0IpCiMgU+G7rSBk4bulbmcgxJHGsOG7nW5nIGThuqtuIHR1eeG7h3QgxJHhu5FpIMSR4buDIHRyw6FuaCB24bqlbiDEkeG7gSB3b3JraW5nIGRpcmVjdG9yeQppbXBvcnQgY29uZmlnCmxvZ19maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oY29uZmlnLkJBU0VfRElSLCAnYXBwLmxvZycpCnJvdGF0aW5nX2hhbmRsZXIgPSBsb2dnaW5nLmhhbmRsZXJzLlJvdGF0aW5nRmlsZUhhbmRsZXIoCiAgICBsb2dfZmlsZV9wYXRoLCAKICAgIG1heEJ5dGVzPTIwMCoxMDI0LCAgIyAyMDBLQiBwZXIgZmlsZSAoa2hv4bqjbmcgMjAwMCBkw7JuZykKICAgIGJhY2t1cENvdW50PTAsICAgICAgIyBLaMO0bmcgZ2nhu68gZmlsZSBiYWNrdXAsIGNo4buJIHjDs2EgcGjhuqduIHRo4burYQogICAgZW5jb2Rpbmc9J3V0Zi04JwopCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5ERUJVRywgICMgU2V0IHbhu4EgREVCVUcgxJHhu4MgY8OzIHRo4buDIMSRaeG7gXUgY2jhu4luaCBxdWEgY29uZmlnCiAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLAogICAgZGF0ZWZtdD0nJWQvJW0gJUg6JU06JVMnLAogICAgaGFuZGxlcnM9WwogICAgICAgIGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpLAogICAgICAgIHJvdGF0aW5nX2hhbmRsZXIKICAgIF0KKQoKY2xhc3MgTG9nZ2VyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYubG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIobmFtZSkKICAgICAgICAjIMSQ4bqjbSBi4bqjbyBsb2dnZXIga2jDtG5nIHByb3BhZ2F0ZSDEkeG7gyB0csOhbmggZHVwbGljYXRlIGxvZ3MKICAgICAgICAjIHbDoCBz4butIGThu6VuZyBoYW5kbGVycyB04burIGJhc2ljQ29uZmlnCiAgICAgICAgaWYgbm90IHNlbGYubG9nZ2VyLmhhbmRsZXJzOgogICAgICAgICAgICAjIExvZ2dlciBz4bq9IHPhu60gZOG7pW5nIGhhbmRsZXJzIHThu6sgcm9vdCBsb2dnZXIgdGjDtG5nIHF1YSBwcm9wYWdhdGlvbgogICAgICAgICAgICBzZWxmLmxvZ2dlci5wcm9wYWdhdGUgPSBUcnVlCiAgICAgICAgCiAgICBkZWYgZGVidWcoc2VsZiwgbWVzc2FnZSk6CiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcobWVzc2FnZSkKICAgICAgICAKICAgIGRlZiBpbmZvKHNlbGYsIG1lc3NhZ2UpOgogICAgICAgIHNlbGYubG9nZ2VyLmluZm8obWVzc2FnZSkKICAgICAgICAKICAgIGRlZiB3YXJuaW5nKHNlbGYsIG1lc3NhZ2UpOgogICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcobWVzc2FnZSkKICAgICAgICAKICAgIGRlZiBlcnJvcihzZWxmLCBtZXNzYWdlKToKICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihtZXNzYWdlKQogICAgICAgIAogICAgZGVmIGNyaXRpY2FsKHNlbGYsIG1lc3NhZ2UpOgogICAgICAgIHNlbGYubG9nZ2VyLmNyaXRpY2FsKG1lc3NhZ2UpCiAgICAgICAgCiAgICBkZWYgZXhjZXB0aW9uKHNlbGYsIGUsIG1lc3NhZ2U9IkV4Y2VwdGlvbiBvY2N1cnJlZCIpOgogICAgICAgIHNlbGYubG9nZ2VyLmV4Y2VwdGlvbihmInttZXNzYWdlfToge3N0cihlKX0iKQoKIyBU4bqhbyBsb2dnZXIgbeG6t2MgxJHhu4tuaCBjaG8gbW9kdWxlIHV0aWxzCmxvZ2dlciA9IExvZ2dlcigiVXRpbHMiKQojIEFkZCB2w6BvIGRpY3Rpb25hcnkgxJHhu4MgdGhlbyBkw7VpCmFsbF9sb2dnZXJzWyJVdGlscyJdID0gbG9nZ2VyCgpkZWYgc2V0X2FsbF9sb2dnZXJzX2xldmVsKGxldmVsOiBpbnQpOgogICAgIiIiCiAgICBDw6BpIMSR4bq3dCBj4bqlcCDEkeG7mSBsb2cgY2hvIHThuqV0IGPhuqMgY8OhYyBsb2dnZXIgxJHDoyB04bqhbyB2w6Agcm9vdCBsb2dnZXIKICAgIAogICAgQXJnczoKICAgICAgICBsZXZlbDogQ+G6pXAgxJHhu5kgbG9nIHThu5FpIHRoaeG7g3UgKExvZ0xldmVsLkRFQlVHLCBMb2dMZXZlbC5JTkZPLCBMb2dMZXZlbC5FUlJPUikKICAgICIiIgogICAgIyBTZXQgbGV2ZWwgY2hvIHJvb3QgbG9nZ2VyIHbDoCB04bqldCBj4bqjIGhhbmRsZXJzCiAgICByb290X2xvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCkKICAgIHJvb3RfbG9nZ2VyLnNldExldmVsKGxldmVsLnZhbHVlKSAgIyBsZXZlbCBpcyBMb2dMZXZlbCBlbnVtCiAgICAKICAgICMgU2V0IGxldmVsIGNobyB04bqldCBj4bqjIGhhbmRsZXJzCiAgICBmb3IgaGFuZGxlciBpbiByb290X2xvZ2dlci5oYW5kbGVyczoKICAgICAgICBoYW5kbGVyLnNldExldmVsKGxldmVsLnZhbHVlKQogICAgCiAgICAjIFNldCBsZXZlbCBjaG8gdOG6pXQgY+G6oyBjdXN0b20gbG9nZ2VycwogICAgZm9yIGxvZ2dlcl9uYW1lLCBsb2dnZXJfaW5zdGFuY2UgaW4gYWxsX2xvZ2dlcnMuaXRlbXMoKToKICAgICAgICBsb2dnZXJfaW5zdGFuY2UubG9nZ2VyLnNldExldmVsKGxldmVsLnZhbHVlKQogICAgICAgIApkZWYgc2V0dXBfZGVmYXVsdF9sb2dnaW5nKHByb2R1Y3Rpb246IGJvb2wgPSBGYWxzZSwgbG9nX3RvX2ZpbGU6IGJvb2wgPSBGYWxzZSk6CiAgICAiIiIKICAgIFRoaeG6v3QgbOG6rXAgY+G6pXUgaMOsbmggbG9nIG3hurdjIMSR4buLbmggY2hvIOG7qW5nIGThu6VuZwogICAgCiAgICBBcmdzOgogICAgICAgIHByb2R1Y3Rpb246IFRydWUgbuG6v3UgxJFhbmcgY2jhuqF5IHRyb25nIG3DtGkgdHLGsOG7nW5nIHByb2R1Y3Rpb24gKGNo4buJIGxvZyB04burIElORk8gdHLhu58gbMOqbikKICAgICAgICBsb2dfdG9fZmlsZTogVHJ1ZSDEkeG7gyBnaGkgbG9nIHJhIGZpbGUKICAgICIiIgogICAgbGV2ZWwgPSBMb2dMZXZlbC5JTkZPIGlmIHByb2R1Y3Rpb24gZWxzZSBMb2dMZXZlbC5ERUJVRwogICAgCiAgICAjIMSQ4bq3dCBsZXZlbCBjaG8gdOG6pXQgY+G6oyBjw6FjIGxvZ2dlciBoaeG7h24gY8OzCiAgICBzZXRfYWxsX2xvZ2dlcnNfbGV2ZWwobGV2ZWwpCiAgICAKICAgICMgVOG6r3QgZGVidWcgbG9nIGPhu6dhIHVybGxpYjMgdsOgIHJlcXVlc3RzIMSR4buDIGdp4bqjbSBub2lzZQogICAgbG9nZ2luZy5nZXRMb2dnZXIoInVybGxpYjMuY29ubmVjdGlvbnBvb2wiKS5zZXRMZXZlbChsb2dnaW5nLldBUk5JTkcpCiAgICBsb2dnaW5nLmdldExvZ2dlcigicmVxdWVzdHMucGFja2FnZXMudXJsbGliMy5jb25uZWN0aW9ucG9vbCIpLnNldExldmVsKGxvZ2dpbmcuV0FSTklORykKICAgIGxvZ2dpbmcuZ2V0TG9nZ2VyKCJ1cmxsaWIzIikuc2V0TGV2ZWwobG9nZ2luZy5XQVJOSU5HKQogICAgCiAgICAjIMSQ4bq3dCBsb2dfdG9fZmlsZSBjaG8gbG9nZ2VyIGhp4buHbiBjw7MKICAgIGlmIGxvZ190b19maWxlOgogICAgICAgIGZvciBsb2dnZXJfbmFtZSwgbG9nZ2VyX2luc3RhbmNlIGluIGFsbF9sb2dnZXJzLml0ZW1zKCk6CiAgICAgICAgICAgICMgVOG6oW8gZmlsZSBsb2cgbeG7m2kgbuG6v3UgY2jGsGEgY8OzCiAgICAgICAgICAgIGlmIG5vdCBsb2dnZXJfaW5zdGFuY2UubG9nX3RvX2ZpbGU6CiAgICAgICAgICAgICAgICBsb2dnZXJfaW5zdGFuY2UubG9nX3RvX2ZpbGUgPSBUcnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVOG6oW8gdGjGsCBt4bulYyBsb2cgbuG6v3UgY+G6p24KICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhsb2dnZXJfaW5zdGFuY2UubG9nX2Rpcik6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMobG9nZ2VyX2luc3RhbmNlLmxvZ19kaXIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgVOG6oW8gdMOqbiBmaWxlIGxvZyB24bubaSBuZ8OgeSB0aMOhbmcKICAgICAgICAgICAgICAgIHRvZGF5ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZLSVtLSVkIikKICAgICAgICAgICAgICAgIGxvZ19maWxlbmFtZSA9IGYie2xvZ2dlcl9uYW1lfV97dG9kYXl9LmxvZyIKICAgICAgICAgICAgICAgIGxvZ2dlcl9pbnN0YW5jZS5sb2dfZmlsZSA9IG9zLnBhdGguam9pbihsb2dnZXJfaW5zdGFuY2UubG9nX2RpciwgbG9nX2ZpbGVuYW1lKQoKZGVmIGdldF9sb2dnZXIobmFtZTogc3RyLCBsZXZlbDogaW50ID0gTG9nTGV2ZWwuREVCVUcsIGxvZ190b19maWxlOiBib29sID0gRmFsc2UpIC0+IExvZ2dlcjoKICAgICIiIgogICAgVOG6oW8gdsOgIHRy4bqjIHbhu4EgbeG7mXQgbG9nZ2VyIHbhu5tpIGPhuqV1IGjDrG5oIGNo4buJIMSR4buLbmgKICAgIAogICAgQXJnczoKICAgICAgICBuYW1lOiBUw6puIGPhu6dhIGxvZ2dlci9tb2R1bGUKICAgICAgICBsZXZlbDogQ+G6pXAgxJHhu5kgbG9nIHThu5FpIHRoaeG7g3UKICAgICAgICBsb2dfdG9fZmlsZTogVHJ1ZSDEkeG7gyBnaGkgbG9nIHJhIGZpbGUKICAgIAogICAgUmV0dXJuczoKICAgICAgICBMb2dnZXI6IMSQ4buRaSB0xrDhu6NuZyBsb2dnZXIgxJHDoyBj4bqldSBow6xuaAogICAgIiIiCiAgICAjIEtp4buDbSB0cmEgeGVtIGxvZ2dlciDEkcOjIHThu5NuIHThuqFpIGNoxrBhCiAgICBpZiBuYW1lIGluIGFsbF9sb2dnZXJzOgogICAgICAgIHJldHVybiBhbGxfbG9nZ2Vyc1tuYW1lXQogICAgICAgIAogICAgIyBU4bqhbyBsb2dnZXIgbeG7m2kKICAgIGxvZ2dlcl9pbnN0YW5jZSA9IExvZ2dlcihuYW1lKQogICAgIyBUaMOqbSB2w6BvIGRpY3Rpb25hcnkgxJHhu4MgdGhlbyBkw7VpCiAgICBhbGxfbG9nZ2Vyc1tuYW1lXSA9IGxvZ2dlcl9pbnN0YW5jZQogICAgcmV0dXJuIGxvZ2dlcl9pbnN0YW5jZQoKZGVmIGNoZWNrX2hlbHBlcl9zZXJ2aWNlKGhlbHBlcl9zZXJ2aWNlKToKICAgICIiIgogICAgS2nhu4NtIHRyYSBIZWxwZXJTZXJ2aWNlIGPDsyBob+G6oXQgxJHhu5luZyBraMO0bmcKICAgIAogICAgUmV0dXJuczoKICAgICAgICBUdXBsZVtib29sLCBBbnldOiAoVHJ1ZS9GYWxzZSwgcmVzcG9uc2UgZGF0YSBu4bq/dSBjw7MpCiAgICAiIiIKICAgIGdsb2JhbCBoZWxwZXJfYXZhaWxhYmxlCiAgICAKICAgIHRyeToKICAgICAgICAjIEtp4buDbSB0cmEgYuG6sW5nIGPDoWNoIGfhu41pIGdldF9kZXZpY2VfaW5mbwogICAgICAgIHJlc3BvbnNlID0gaGVscGVyX3NlcnZpY2UuZ2V0X2RldmljZV9pbmZvKCkKICAgICAgICAKICAgICAgICBpZiByZXNwb25zZVsic3RhdHVzIl0gPT0gInN1Y2Nlc3MiOgogICAgICAgICAgICBsb2dnZXIuaW5mbygiSGVscGVyU2VydmljZSDEkWFuZyBob+G6oXQgxJHhu5luZyIpCiAgICAgICAgICAgIGhlbHBlcl9hdmFpbGFibGUgPSBUcnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRy4bqjIHbhu4EgdGjDtG5nIHRpbiB0aGnhur90IGLhu4sgxJHhu4MgY8OzIHRo4buDIGzGsHUgdsOgbyBEQgogICAgICAgICAgICBpZiAiZGF0YSIgaW4gcmVzcG9uc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSwgcmVzcG9uc2UKICAgICAgICAgICAgcmV0dXJuIFRydWUsIE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJIZWxwZXJTZXJ2aWNlIHRy4bqjIHbhu4EgbOG7l2k6IHtyZXNwb25zZS5nZXQoJ21lc3NhZ2UnLCAnS2jDtG5nIHLDtSBs4buXaScpfSIpCiAgICAgICAgICAgIGhlbHBlcl9hdmFpbGFibGUgPSBGYWxzZQogICAgICAgICAgICByZXR1cm4gRmFsc2UsIE5vbmUKICAgICAgICAgICAgCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGtp4buDbSB0cmEgSGVscGVyU2VydmljZToge2V9IikKICAgICAgICBoZWxwZXJfYXZhaWxhYmxlID0gRmFsc2UKICAgICAgICByZXR1cm4gRmFsc2UsIE5vbmUKCmRlZiBjaGVja19uZXR3b3JrX2Nvbm5lY3Rpb24oKToKICAgICIiIgogICAgS2nhu4NtIHRyYSBr4bq/dCBu4buRaSBt4bqhbmcgdsOgIGNsb3VkIHNlcnZlcgogICAgCiAgICBSZXR1cm5zOgogICAgICAgIFR1cGxlW2Jvb2wsIEFueV06IChUcnVlL0ZhbHNlLCByZXNwb25zZSBkYXRhIG7hur91IGPDsykKICAgICIiIgogICAgZ2xvYmFsIG5ldHdvcmtfYXZhaWxhYmxlCiAgICAKICAgIHRyeToKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgbuG7kWkgxJHhur9uIGNsb3VkIFVSTCAoa2jDtG5nIHRow6ptIC9waW5nIG7hu69hKQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGNvbmZpZy5DTE9VRF9VUkwsIHRpbWVvdXQ9NSkKICAgICAgICAKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJL4bq/dCBu4buRaSBt4bqhbmcg4buVbiDEkeG7i25oIikKICAgICAgICAgICAgbmV0d29ya19hdmFpbGFibGUgPSBUcnVlCiAgICAgICAgICAgIHJldHVybiBUcnVlLCByZXNwb25zZS5qc29uKCkgaWYgcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpID09ICdhcHBsaWNhdGlvbi9qc29uJyBlbHNlIE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgxJHhur9uIGNsb3VkIHNlcnZlcjoge3Jlc3BvbnNlLnN0YXR1c19jb2RlfSIpCiAgICAgICAgICAgIG5ldHdvcmtfYXZhaWxhYmxlID0gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCBOb25lCiAgICAgICAgICAgIAogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGvhur90IG7hu5FpIG3huqFuZzoge2V9IikKICAgICAgICBuZXR3b3JrX2F2YWlsYWJsZSA9IEZhbHNlCiAgICAgICAgcmV0dXJuIEZhbHNlLCBOb25lCgpkZWYgaXNfaGVscGVyX2F2YWlsYWJsZSgpIC0+IGJvb2w6CiAgICAiIiJUcuG6oyB24buBIHRy4bqhbmcgdGjDoWkgaGnhu4duIHThuqFpIGPhu6dhIGhlbHBlciBzZXJ2aWNlIiIiCiAgICByZXR1cm4gaGVscGVyX2F2YWlsYWJsZQoKZGVmIGlzX25ldHdvcmtfYXZhaWxhYmxlKCkgLT4gYm9vbDoKICAgICIiIlRy4bqjIHbhu4EgdHLhuqFuZyB0aMOhaSBoaeG7h24gdOG6oWkgY+G7p2Ega+G6v3QgbuG7kWkgbeG6oW5nIiIiCiAgICByZXR1cm4gbmV0d29ya19hdmFpbGFibGUKCmRlZiByZXRyeV91bnRpbF9zdWNjZXNzKGZ1bmMsIG1heF9yZXRyaWVzOiBpbnQsIGRlbGF5OiBpbnQsICphcmdzLCAqKmt3YXJncykgLT4gVHVwbGVbYm9vbCwgT3B0aW9uYWxbQW55XV06CiAgICAiIiIKICAgIFRo4butIHRo4buxYyBoaeG7h24gbeG7mXQgaMOgbSBuaGnhu4F1IGzhuqduIGNobyDEkeG6v24ga2hpIHRow6BuaCBjw7RuZwogICAgCiAgICBBcmdzOgogICAgICAgIGZ1bmM6IEjDoG0gY+G6p24gdGjhu7FjIGhp4buHbgogICAgICAgIG1heF9yZXRyaWVzOiBT4buRIGzhuqduIHRo4butIHThu5FpIMSRYQogICAgICAgIGRlbGF5OiBUaOG7nWkgZ2lhbiBjaOG7nSBnaeG7r2EgY8OhYyBs4bqnbiB0aOG7rSAoZ2nDonkpCiAgICAgICAgKmFyZ3MsICoqa3dhcmdzOiBUaGFtIHPhu5EgY2hvIGjDoG0gY+G6p24gdGjhu7FjIGhp4buHbgogICAgICAgIAogICAgUmV0dXJuczoKICAgICAgICBUdXBsZVtib29sLCBBbnldOiAoVGjDoG5oIGPDtG5nIGhheSBraMO0bmcsIEvhur90IHF14bqjIHRy4bqjIHbhu4EgbuG6v3UgY8OzKQogICAgIiIiCiAgICByZXRyeV9jb3VudCA9IDAKICAgIHN1Y2Nlc3MgPSBGYWxzZQogICAgcmVzdWx0ID0gTm9uZQogICAgCiAgICB3aGlsZSByZXRyeV9jb3VudCA8IG1heF9yZXRyaWVzIGFuZCBub3Qgc3VjY2VzczoKICAgICAgICBzdWNjZXNzLCByZXN1bHQgPSBmdW5jKCphcmdzLCAqKmt3YXJncykKICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICByZXR1cm4gVHJ1ZSwgcmVzdWx0CiAgICAgICAgICAgIAogICAgICAgIHJldHJ5X2NvdW50ICs9IDEKICAgICAgICBpZiByZXRyeV9jb3VudCA8IG1heF9yZXRyaWVzOgogICAgICAgICAgICBsb2dnZXIuZGVidWcoZiJUaOG7rSBs4bqhaSBzYXUge2RlbGF5fSBnacOieS4uLiAoY8OybiB7bWF4X3JldHJpZXMgLSByZXRyeV9jb3VudH0gbOG6p24pIikKICAgICAgICAgICAgdGltZS5zbGVlcChkZWxheSkKICAgIAogICAgcmV0dXJuIEZhbHNlLCBOb25lIAoKZGVmIGdldF9kZXZpY2VfaWRfZnJvbV9zeXN0ZW0oKSAtPiBzdHI6CiAgICAiIiIKICAgIEzhuqV5IGRldmljZV9pZCB04burIGjhu4cgdGjhu5FuZyBi4bqxbmcgbOG7h25oIGdldHByb3Agcm8uc2VyaWFsbm8gKGTDoG5oIGNobyBBbmRyb2lkL1Rlcm11eCkKICAgIFRyw6puIFdpbmRvd3Mgc+G6vSB0cuG6oyB24buBIGVtcHR5IHN0cmluZyBt4buZdCBjw6FjaCBpbSBs4bq3bmcuCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgc3RyOiBEZXZpY2UgSUQgaG/hurdjIGNodeG7l2kgcuG7l25nIG7hur91IGtow7RuZyBs4bqleSDEkcaw4bujYwogICAgIiIiCiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHN1YnByb2Nlc3MKICAgICAgICBpbXBvcnQgcGxhdGZvcm0KICAgICAgICAKICAgICAgICAjIE7hur91IMSRYW5nIGNo4bqheSB0csOqbiBXaW5kb3dzLCBjaOG6pXAgbmjhuq1uIGzhu5dpIGltIGzhurduZwogICAgICAgIGlmIHBsYXRmb3JtLnN5c3RlbSgpID09ICJXaW5kb3dzIjoKICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCLEkGFuZyBjaOG6oXkgdHLDqm4gV2luZG93cywgYuG7jyBxdWEgbOG7h25oIGdldHByb3AgKGTDoG5oIGNobyBBbmRyb2lkL1Rlcm11eCkiKQogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICAKICAgICAgICAjIFRyw6puIEFuZHJvaWQvVGVybXV4LCB0aOG7sWMgaGnhu4duIGzhu4duaCBnZXRwcm9wIHJvLnNlcmlhbG5vCiAgICAgICAgcmVzdWx0ID0gc3VicHJvY2Vzcy5ydW4oCiAgICAgICAgICAgIFsiZ2V0cHJvcCIsICJyby5zZXJpYWxubyJdLAogICAgICAgICAgICBjaGVjaz1UcnVlLAogICAgICAgICAgICBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFLAogICAgICAgICAgICB0ZXh0PVRydWUKICAgICAgICApCiAgICAgICAgCiAgICAgICAgIyBM4bqleSBr4bq/dCBxdeG6oyB2w6AgbG/huqFpIGLhu48ga2hv4bqjbmcgdHLhuq9uZyB0aOG7q2EKICAgICAgICBkZXZpY2VfaWQgPSByZXN1bHQuc3Rkb3V0LnN0cmlwKCkKICAgICAgICAKICAgICAgICBpZiBkZXZpY2VfaWQ6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyBs4bqleSDEkcaw4bujYyBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmc6IHtkZXZpY2VfaWR9IikKICAgICAgICAgICAgcmV0dXJuIGRldmljZV9pZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJLaMO0bmcgbOG6pXkgxJHGsOG7o2MgZGV2aWNlX2lkIHThu6sgaOG7hyB0aOG7kW5nIikKICAgICAgICAgICAgcmV0dXJuICIiCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgIyBJbSBs4bq3bmcgdHLDqm4gV2luZG93cywgY2jhu4kgbG9nIGRlYnVnCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbXBvcnQgcGxhdGZvcm0KICAgICAgICAgICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gIldpbmRvd3MiOgogICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYiTOG7l2kgZ2V0cHJvcCB0csOqbiBXaW5kb3dzIChiw6xuaCB0aMaw4budbmcpOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgbOG6pXkgZGV2aWNlX2lkIHThu6sgaOG7hyB0aOG7kW5nOiB7c3RyKGUpfSIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBsb2dnZXIuZGVidWcoZiJM4buXaSBraGkgbOG6pXkgZGV2aWNlX2lkOiB7c3RyKGUpfSIpCiAgICAgICAgcmV0dXJuICIiIAoKIyBIw6BtIGtp4buDbSB0cmEga+G6v3QgbuG7kWkgbeG6oW5nCmRlZiBjaGVja19uZXR3b3JrX2Nvbm5lY3Rpb24oKSAtPiBUdXBsZVtib29sLCBzdHJdOgogICAgIiIiCiAgICBLaeG7g20gdHJhIGvhur90IG7hu5FpIG3huqFuZyBi4bqxbmcgY8OhY2ggcGluZyBnb29nbGUuY29tCiAgICAKICAgIFJldHVybnM6CiAgICAgICAgVHVwbGVbYm9vbCwgc3RyXTogKFRydWUsICJTdWNjZXNzIikgbuG6v3UgdGjDoG5oIGPDtG5nLCAoRmFsc2UsIGVycm9yX21lc3NhZ2UpIG7hur91IHRo4bqldCBi4bqhaQogICAgIiIiCiAgICB0cnk6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20iLCB0aW1lb3V0PTUpCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICByZXR1cm4gVHJ1ZSwgIlN1Y2Nlc3MiCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlLCBmIkhUVFAgZXJyb3I6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0iCiAgICBleGNlcHQgcmVxdWVzdHMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJldHVybiBGYWxzZSwgZiJOZXR3b3JrIGVycm9yOiB7c3RyKGUpfSIKCiMgSMOgbSBraeG7g20gdHJhIEhlbHBlclNlcnZpY2UKZGVmIGNoZWNrX2hlbHBlcl9zZXJ2aWNlKGhlbHBlcikgLT4gVHVwbGVbYm9vbCwgT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dXToKICAgICIiIgogICAgS2nhu4NtIHRyYSBr4bq/dCBu4buRaSDEkeG6v24gSGVscGVyU2VydmljZQogICAgCiAgICBBcmdzOgogICAgICAgIGhlbHBlcjogSGVscGVyU2VydmljZSBpbnN0YW5jZQogICAgICAgIAogICAgUmV0dXJuczoKICAgICAgICBUdXBsZVtib29sLCBPcHRpb25hbFtEaWN0XV06IChUcnVlLCByZXNwb25zZV9kYXRhKSBu4bq/dSB0aMOgbmggY8O0bmcsIChGYWxzZSwgTm9uZSkgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAiIiIKICAgIHRyeToKICAgICAgICAjIEfhu41pIEFQSSBraeG7g20gdHJhCiAgICAgICAgcmVzcG9uc2UgPSBoZWxwZXIuZ2V0X2RldmljZV9pbmZvKCkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMKICAgICAgICBpZiByZXNwb25zZSBhbmQgInN0YXR1cyIgaW4gcmVzcG9uc2UgYW5kIHJlc3BvbnNlWyJzdGF0dXMiXSA9PSAic3VjY2VzcyI6CiAgICAgICAgICAgIHJldHVybiBUcnVlLCByZXNwb25zZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZSwgTm9uZQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXR1cm4gRmFsc2UsIE5vbmUKCiMgSMOgbSBr4bq/dCBu4buRaSBBREIKZGVmIGNvbm5lY3RfYWRiKGhvc3Q6IHN0ciwgcG9ydDogaW50KSAtPiBib29sOgogICAgIiIiCiAgICBL4bq/dCBu4buRaSDEkeG6v24gdGhp4bq/dCBi4buLIEFuZHJvaWQgcXVhIEFEQgogICAgCiAgICBBcmdzOgogICAgICAgIGhvc3Q6IMSQ4buLYSBjaOG7iSBJUCBj4bunYSB0aGnhur90IGLhu4sKICAgICAgICBwb3J0OiBQb3J0IEFEQiAodGjGsOG7nW5nIGzDoCA1NTU1KQogICAgICAgIAogICAgUmV0dXJuczoKICAgICAgICBib29sOiBUcnVlIG7hur91IGvhur90IG7hu5FpIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAiIiIKICAgIGxvZ2dlciA9IGdldF9sb2dnZXIoIkFEQiIpCiAgICAKICAgIHRyeToKICAgICAgICAjIEtp4buDbSB0cmEgQURCIMSRw6MgxJHGsOG7o2MgY8OgaSDEkeG6t3QgY2jGsGEKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsiYWRiIiwgInZlcnNpb24iXSwgY2hlY2s9VHJ1ZSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSkKICAgICAgICBleGNlcHQgKHN1YnByb2Nlc3MuU3VicHJvY2Vzc0Vycm9yLCBGaWxlTm90Rm91bmRFcnJvcik6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiQURCIGtow7RuZyDEkcaw4bujYyBjw6BpIMSR4bq3dCBob+G6t2Mga2jDtG5nIGPDsyB0cm9uZyBQQVRIIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICMgS2jhu59pIMSR4buZbmcgQURCIHNlcnZlciBu4bq/dSBjaMawYSBjaOG6oXkKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbImFkYiIsICJzdGFydC1zZXJ2ZXIiXSwgY2hlY2s9RmFsc2UsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgCiAgICAgICAgIyBL4bq/dCBu4buRaSDEkeG6v24gdGhp4bq/dCBi4buLCiAgICAgICAgY29ubmVjdF9jbWQgPSBbImFkYiIsICJjb25uZWN0IiwgZiJ7aG9zdH06e3BvcnR9Il0KICAgICAgICByZXN1bHQgPSBzdWJwcm9jZXNzLnJ1bihjb25uZWN0X2NtZCwgY2hlY2s9RmFsc2UsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUsIHRleHQ9VHJ1ZSkKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgcXXhuqMKICAgICAgICBvdXRwdXQgPSByZXN1bHQuc3Rkb3V0CiAgICAgICAgaWYgImNvbm5lY3RlZCIgaW4gb3V0cHV0Lmxvd2VyKCkgYW5kICJ1bmFibGUiIG5vdCBpbiBvdXRwdXQubG93ZXIoKToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGvhur90IG7hu5FpIHRow6BuaCBjw7RuZyDEkeG6v24ge2hvc3R9Ontwb3J0fSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIGvhur90IG7hu5FpIMSR4bq/biB7aG9zdH06e3BvcnR9OiB7b3V0cHV0fSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsIGYiTOG7l2kga2hpIGvhur90IG7hu5FpIEFEQiDEkeG6v24ge2hvc3R9Ontwb3J0fSIpCiAgICAgICAgcmV0dXJuIEZhbHNlIAoKZGVmIHJlYWRfdXNlcl9pZF9mcm9tX2tleV9maWxlKCkgLT4gT3B0aW9uYWxbc3RyXToKICAgICIiIgogICAgxJDhu41jIHVzZXJfaWQgdOG7qyBmaWxlIC5kbmR2aW5ha2V5IHRyb25nIHRoxrAgbeG7pWMgY2hhIGPhu6dhIHByb2plY3QKICAgIAogICAgUmV0dXJuczoKICAgICAgICBPcHRpb25hbFtzdHJdOiB1c2VyX2lkIMSRw6MgdHJpbSBob+G6t2MgTm9uZSBu4bq/dSBraMO0bmcgxJHhu41jIMSRxrDhu6NjCiAgICAiIiIKICAgIHRyeToKICAgICAgICAjIFThuqFvIMSRxrDhu51uZyBk4bqrbiB04bubaSBmaWxlIC5kbmR2aW5ha2V5ICh0aMawIG3hu6VjIGNoYSBj4bunYSBwcm9qZWN0KQogICAgICAgIHBhcmVudF9kaXIgPSBvcy5wYXRoLmRpcm5hbWUoY29uZmlnLkJBU0VfRElSKQogICAgICAgIGtleV9maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4ocGFyZW50X2RpciwgJy5kbmR2aW5ha2V5JykKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgZmlsZSBjw7MgdOG7k24gdOG6oWkga2jDtG5nCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGtleV9maWxlX3BhdGgpOgogICAgICAgICAgICBsb2dnZXIgPSBnZXRfbG9nZ2VyKCJVc2VySWRSZWFkZXIiKQogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJGaWxlIC5kbmR2aW5ha2V5IGtow7RuZyB04buTbiB04bqhaSB04bqhaToge2tleV9maWxlX3BhdGh9IikKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJDaMawxqFuZyB0csOsbmggc+G6vSBk4burbmcgdsOsIGtow7RuZyBjw7MgZmlsZSBrZXkhIikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAKICAgICAgICAjIMSQ4buNYyBu4buZaSBkdW5nIGZpbGUKICAgICAgICB3aXRoIG9wZW4oa2V5X2ZpbGVfcGF0aCwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICB1c2VyX2lkID0gZi5yZWFkKCkuc3RyaXAoKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB1c2VyX2lkIGtow7RuZyBy4buXbmcKICAgICAgICBpZiBub3QgdXNlcl9pZDoKICAgICAgICAgICAgbG9nZ2VyID0gZ2V0X2xvZ2dlcigiVXNlcklkUmVhZGVyIikKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJGaWxlIC5kbmR2aW5ha2V5IHLhu5duZyBob+G6t2MgY2jhu4kgY2jhu6lhIGtob+G6o25nIHRy4bqvbmciKQogICAgICAgICAgICBsb2dnZXIuZXJyb3IoIkNoxrDGoW5nIHRyw6xuaCBz4bq9IGThu6tuZyB2w6wgZmlsZSBrZXkga2jDtG5nIGjhu6NwIGzhu4chIikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAKICAgICAgICBsb2dnZXIgPSBnZXRfbG9nZ2VyKCJVc2VySWRSZWFkZXIiKQogICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyDEkeG7jWMgdXNlcl9pZCB0aMOgbmggY8O0bmc6IHt1c2VyX2lkfSIpCiAgICAgICAgcmV0dXJuIHVzZXJfaWQKICAgICAgICAKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBsb2dnZXIgPSBnZXRfbG9nZ2VyKCJVc2VySWRSZWFkZXIiKQogICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSDEkeG7jWMgZmlsZSAuZG5kdmluYWtleToge2V9IikKICAgICAgICBsb2dnZXIuZXJyb3IoIkNoxrDGoW5nIHRyw6xuaCBz4bq9IGThu6tuZyB2w6wga2jDtG5nIHRo4buDIMSR4buNYyBmaWxlIGtleSEiKQogICAgICAgIHJldHVybiBOb25l').decode('utf-8'))
