import base64
exec(base64.b64decode('import time
from typing import Dict, Any, List, Optional, Callable
from abc import ABC, abstractmethod
import utils
from utils import LogLevel, Logger
import urllib.parse
import random
import config
# Tạo logger cho BaseJob
logger = utils.get_logger("BaseJob")

class BaseJob(ABC):
    def __init__(self, db_service, helper_service, golike_service=None):
        self.db = db_service
        self.helper = helper_service
        self.golike_service = golike_service
        self.app_package = ""
        self.app_name = ""
        # Hàm sleep mặc định là time.sleep
        self._sleep_func = time.sleep
        # Tạo logger cho instance cụ thể
        self.logger = utils.get_logger(f"Job.{self.__class__.__name__}")
        
        # Proxy service sẽ được set sau khi khởi tạo
        self.proxy_service = None
        
        # App-specific configuration cache
        self._app_config_cache = None
        self._config_cache_time = 0
        self._config_cache_ttl = 300  # Cache 5 phút
        
        # Default config cho app (có thể override trong subclass)
        self._default_config = {
            "action_weights": {
                "newsfeed": 15,      # 15% vuốt newsfeed/bảng tin
                "reels": 20,         # 20% xem reels/video
                "notification": 10,   # 10% xem thông báo
                "profile": 15,       # 15% xem profile
                "job": 20,           # 20% làm job
                "explore": 5,        # 5% khám phá
                "search": 15         # 15% tìm kiếm
            },
            "min_actions_per_session": 5,         # Tối thiểu actions mỗi session
            "max_session_duration_minutes": 30,   # Thời gian tối đa mỗi session (phút)
            "action_delay_min": 3,                # Delay tối thiểu giữa actions (giây)
            "action_delay_max": 10                # Delay tối đa giữa actions (giây)
        }
        
    def set_proxy_service(self, proxy_service):
        """
        Thiết lập proxy service cho job handler
        
        Args:
            proxy_service: ProxyService instance
        """
        self.proxy_service = proxy_service
        
    @abstractmethod
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Lấy danh sách tài khoản từ thiết bị"""
        pass

        
    def sync_accounts_to_db(self) -> List[Dict[str, Any]]:
        """
        Đồng bộ tài khoản từ thiết bị vào database và map với tài khoản GoLike
        """
        try:
            # Lấy danh sách tài khoản từ thiết bị
            device_accounts = self.get_accounts_from_device()
            
            # Lấy device_id từ database
            android_id = self.db.get_or_create_device_id()
            
            # Lấy danh sách tài khoản hiện có trong DB cho app này
            existing_accounts = self.db.get_accounts(app=self.app_name)
            
            # Tạo set các unique_username từ thiết bị để dễ so sánh
            device_usernames = set()
            for account in device_accounts:
                username = account.get("unique_username")
                if username:
                    device_usernames.add(username)
            
            # Kiểm tra tài khoản trong DB mà không còn trên thiết bị -> đánh dấu logout
            for existing_account in existing_accounts:
                existing_username = existing_account.get("unique_username")
                if existing_username and existing_username not in device_usernames:
                    # Tài khoản có trong DB nhưng không có trên thiết bị -> logout
                    if existing_account.get("status") != "logout":
                        self.logger.info(f"Tài khoản {existing_username} không còn trên thiết bị, đánh dấu logout")
                        self.db.update_account(existing_account["id"], {
                            "status": "logout",
                            "inactive_reason": "Tài khoản không còn trên thiết bị",
                            "is_sync": False
                        })
            
            # Cập nhật hoặc thêm mới vào DB
            for account in device_accounts:
                # Thêm thông tin app và device_id
                account["app"] = self.app_name
                account["device_id"] = android_id
                # Đánh dấu là chưa đồng bộ để gửi lên server
                account["is_sync"] = False
                
                # Kiểm tra tài khoản đã tồn tại chưa dựa vào unique_username + app
                existing_account = self.db.get_account_by_unique_username(self.app_name, account.get("unique_username"))
                
                if existing_account:
                    # Cập nhật tài khoản hiện có - chỉ đồng bộ trạng thái login/logout
                    account_id = existing_account["id"]
                    
                    # Chuẩn bị dữ liệu cập nhật tối thiểu
                    update_data = {
                        "is_login": account.get("is_login", False),
                        "last_update": account.get("last_update", int(time.time())),
                        "is_sync": False
                    }
                    
                    # Kiểm tra nếu tài khoản trong DB đang ở trạng thái logout nhưng xuất hiện lại trên thiết bị
                    if existing_account.get("status") == "logout":
                        # Reset từ logout về active và xóa inactive_reason
                        update_data["status"] = "active"
                        update_data["inactive_reason"] = ""
                        self.logger.info(f"Tài khoản {account.get('unique_username')} đã xuất hiện lại trên thiết bị, reset từ logout về active")
                    # Nếu đã active thì giữ nguyên status, không thay đổi gì khác
                    
                    self.db.update_account(account_id, update_data)
                    self.logger.info(f"Đã cập nhật trạng thái đăng nhập cho tài khoản {account.get('unique_username')} trong {self.app_name}")
                else:
                    # Thêm tài khoản mới với trạng thái active
                    account["status"] = "active"
                    self.db.add_account(account)
                    self.logger.info(f"Đã thêm tài khoản mới {account.get('unique_username')} cho {self.app_name}")
            
            # Sau khi đồng bộ tài khoản từ thiết bị, thực hiện mapping với GoLike
            self.logger.info(f"Bắt đầu mapping tài khoản {self.app_name} với GoLike...")
            try:
                # Lấy danh sách tài khoản GoLike
                golike_accounts = self.get_golike_accounts()
                
                if golike_accounts:
                    self.logger.info(f"Tìm thấy {len(golike_accounts)} tài khoản GoLike cho {self.app_name}")
                    
                    # Lấy danh sách tài khoản đã cập nhật từ DB
                    updated_device_accounts = self.db.get_accounts(app=self.app_name)
                    
                    # Thực hiện mapping
                    mapped_count = self.map_golike_accounts(golike_accounts, updated_device_accounts)
                    
                    if isinstance(mapped_count, int):
                        self.logger.info(f"Đã mapping {mapped_count} tài khoản {self.app_name} với GoLike")
                    else:
                        self.logger.info(f"Hoàn thành mapping tài khoản {self.app_name} với GoLike")
                else:
                    self.logger.warning(f"Không tìm thấy tài khoản GoLike nào cho {self.app_name}")
                    
            except Exception as e:
                self.logger.warning(f"Lỗi khi mapping với GoLike: {e}")
                # Không throw exception vì sync tài khoản từ thiết bị đã thành công
                
            return device_accounts
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi đồng bộ tài khoản {self.app_name}")
            return []
            
    def is_golike_authenticated(self) -> bool:
        """
        Kiểm tra xem đã có thông tin xác thực GoLike hợp lệ chưa
        Sử dụng GoLikeService để validate chặt chẽ hơn
        
        Returns:
            bool: True nếu đã xác thực đầy đủ, False nếu thiếu thông tin
        """
        return self.golike_service.is_golike_authenticated()
    
    def api_request(self, url: str, method: str = "GET", payload: Dict[str, Any] = None) -> Optional[Dict[str, Any]]:
        """
        Gọi API GoLike thông qua GoLikeService
        
        Args:
            url: URL của API
            method: Phương thức HTTP (GET hoặc POST)
            payload: Dữ liệu gửi đi (cho POST request)
            
        Returns:
            Dict hoặc None: Kết quả API nếu thành công, None nếu thất bại
        """
        if not self.golike_service:
            self.logger.error(f"Không thể gọi API: GoLikeService chưa được cung cấp cho {self.app_name} job")
            return None
            
        # Xử lý payload cho GET request - thêm vào URL
        if method.upper() == "GET" and payload:
            # Tạo query string từ payload
            query_params = []
            for key, value in payload.items():
                if value is not None:
                    query_params.append(f"{urllib.parse.quote(key)}={urllib.parse.quote(str(value))}")
            
            # Thêm query string vào URL
            if query_params:
                separator = "&" if "?" in url else "?"
                url = f"{url}{separator}{'&'.join(query_params)}"
            
            # Đặt payload về None vì đã đưa vào URL
            payload = None
        
        return self.golike_service.api_request(url, method, payload)
    
    def get_golike_accounts(self) -> List[Dict[str, Any]]:
        """
        Lấy danh sách tài khoản đã đăng ký với GoLike
        
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản GoLike
        """
        try:
            # Đường dẫn API lấy danh sách tài khoản
            url = f"{self.get_account_url()}"
            
            # Gọi API
            response = self.api_request(url)
            
            if response and response.get("success", False):
                accounts = response.get("data", [])
                return accounts
            
            return []
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy danh sách tài khoản GoLike")
            return []
    
    def map_golike_accounts(self, golike_accounts: List[Dict[str, Any]], device_accounts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Ánh xạ tài khoản từ GoLike vào tài khoản trên thiết bị
        
        Args:
            golike_accounts: Danh sách tài khoản từ GoLike API
            device_accounts: Danh sách tài khoản trên thiết bị
            
        Returns:
            List[Dict[str, Any]]: Danh sách tài khoản đã ánh xạ
        """
        # Phương thức mặc định, cần override ở lớp con
        return []
    
    def fetch_job(self, account: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Lấy thông tin job từ GoLike
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict hoặc None: Thông tin job nếu có, None nếu không có
        """
        try:
            # Đường dẫn API lấy job
            url = f"{self.get_jobs_url()}"
            
            # Tham số tùy theo loại app
            params = self.get_job_params(account)
            
            # Gọi API
            response = self.api_request(url, "GET", params)
            
            if response and response.get("success", False):
                job = response.get("data", None)
                if job:
                    # Chuẩn hóa dữ liệu job
                    return self.map_job_data(job)
            
            return None
        except Exception as e:
            self.logger.exception(e, "Lỗi khi lấy job")
            return None
    
    def map_job_data(self, job_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chuẩn hóa dữ liệu job từ API
        
        Args:
            job_data: Dữ liệu job từ API
            
        Returns:
            Dict[str, Any]: Dữ liệu job đã chuẩn hóa
        """
        return {
            "app": self.app_name,
            "id": job_data.get("id"),
            "link": job_data.get("link"),
            "type": job_data.get("type"),
            "object_id": job_data.get("object_id"),
            "price_after_cost": job_data.get("price_after_cost"),
            "status": "idle",  # Status mặc định là idle
            "raw_data": job_data  # Lưu lại dữ liệu gốc để tham khảo khi cần
        }
    
    def validate_job_before_execution(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Kiểm tra và validate job trước khi thực hiện
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả validation:
                - valid (bool): True nếu job hợp lệ, False nếu không
                - should_skip (bool): True nếu nên skip job, False nếu không
                - reason (str): Lý do không hợp lệ hoặc skip
                - message (str): Thông báo chi tiết
        """
        try:
            job_type = job.get("type", "").lower()
            job_price = job.get("price_after_cost", 0)
            
            # Kiểm tra job follow
            if job_type == "follow":
                # 1. Kiểm tra giá tiền của job follow
                min_follow_price = self.db.get("min_follow_price", 30)  # Mặc định 30
                if job_price < min_follow_price:
                    return {
                        "valid": False,
                        "should_skip": True,
                        "message": f"Job follow có giá {job_price} < {min_follow_price}, skip job."
                    }
                
                # Đã bỏ kiểm tra khóa follow vì không còn giới hạn follow
            
            # Job hợp lệ
            return {
                "valid": True,
                "should_skip": False,
                "message": "Job hợp lệ"
            }
            
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi validate job: {str(e)}")
            return {
                "valid": False,
                "should_skip": False,
                "reason": "validation_error",
                "message": f"Lỗi khi validate job: {str(e)}"
            }
    
    def execute_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Kết quả thực hiện job, bao gồm:
                - status (int): Mã trạng thái job
                    0: Chưa thực hiện
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
        """
        # Mặc định không làm gì, cần override ở lớp con
        self.logger.info(f"Thực hiện job cho tài khoản {account.get('unique_username')}")
        return self._create_job_result(0, "Chưa thực hiện job", False)
    
    def _create_job_result(self, status: int, message: str, success: bool, **kwargs) -> Dict[str, Any]:
        """
        Tạo kết quả job chuẩn
        
        Args:
            status (int): Mã trạng thái job
                0: Chưa thực hiện
                1: Thành công
                2: Thất bại, không tìm thấy đối tượng
                3: Thất bại, đã bị unfollow/unlike
                4: Thất bại, yêu cầu đang chờ
                5: Gửi yêu cầu chờ duyệt (Instagram)
            message (str): Thông báo kết quả
            success (bool): True nếu thành công, False nếu thất bại
            **kwargs: Các thông tin bổ sung
            
        Returns:
            Dict[str, Any]: Kết quả job đã chuẩn hóa
        """
        result = {
            "status": status,
            "message": message,
            "success": success
        }
        
        # Thêm thông tin bổ sung nếu có
        result.update(kwargs)
        
        return result
    
    def report_job(self, account: Dict[str, Any], job: Dict[str, Any], result: Dict[str, Any]) -> bool:
        """
        Báo cáo kết quả job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            result: Kết quả thực hiện job bao gồm:
                - status (int): Mã trạng thái job
                    1: Thành công
                    2: Thất bại, không tìm thấy đối tượng
                    3: Thất bại, đã bị unfollow/unlike
                - message (str): Thông báo kết quả
                - success (bool): True nếu thành công, False nếu thất bại
            
        Returns:
            bool: True nếu báo cáo thành công, False nếu thất bại
        """
        try:
            job_id = job.get("id")
            job_type = job.get("type", "")
            job_status = result.get("status", 0)
            job_success = result.get("success", False)
            
            # Ghi lại lịch sử job
            self.record_job_history(account, job, result)
            
            if not job_id:
                self.logger.error("Không có ID job để báo cáo")
                return False
                
            # Kiểm tra trạng thái job và xử lý tương ứng
            
            # Nếu status là 2 (lỗi không tìm thấy đối tượng), hủy job và báo cáo thất bại
            if job_status == 2:
                self.logger.warning(f"Lỗi khi thực hiện job {job_id}, không tìm thấy đối tượng, hủy job")
                return self.skip_job(account, job)
            
            # Nếu status là 6 (đạt giới hạn hoặc bị khóa), hủy job
            if job_status == 6:
                self.logger.info(f"Job {job_id} bị hủy do đạt giới hạn hoặc tài khoản bị khóa")
                return self.skip_job(account, job)
            
            # Nếu status là 3 (đã bị unfollow/unlike), đánh dấu trong result để JobService xử lý
            if job_status == 3:
                account_username = account.get('unique_username')
                self.logger.warning(f"Phát hiện bị unfollow/unlike, tài khoản {account_username}")
                
                # Hủy job hiện tại
                self.skip_job(account, job)
                
                # Đánh dấu unfollow trong result để JobService xử lý tập trung
                result["unfollow"] = True
                
                return False
            
            if job_status == 4:
                self.logger.warning(f"Yêu cầu đang chờ trong job {job_type}, hủy job")
                self.skip_job(account, job)
                return False
            
            # Nếu job thành công, báo cáo kết quả
            if job_success:
                # URL API báo cáo job
                url = self.get_complete_jobs_url()
                
                # Tạo payload cho báo cáo job
                payload = self.get_report_payload(account, job)
                if not payload:
                    self.logger.error("Không thể tạo payload cho báo cáo job")
                    return False
                
                # Thử gọi API tối đa 3 lần
                for attempt in range(3):
                    response = self.api_request(url, "POST", payload)
                    
                    if response and response.get("success", False):
                        self.logger.info(f"Đã báo cáo job {job_id} thành công")
                        return True
                    elif response and response.get("status") == 400:
                        error_msg = response.get('message', '')
                        self.logger.error(f"[{attempt + 1}] Báo cáo job lỗi: {error_msg}, thử lại sau 5s...")
                    else:
                        self.logger.error(f"Phản hồi không mong đợi khi báo cáo job: {response}")
                        break
                    self.safe_sleep(5)
                
                # Nếu không thành công sau 3 lần thử, hủy job
                self.logger.error(f"Không thể báo cáo job {job_id} sau 3 lần thử")
                return self.skip_job(account, job)
            else:
                # Job không thành công, hủy job
                self.logger.warning(f"Job {job_id} không thành công, hủy job")
                return self.skip_job(account, job)
                
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job")
            return False
    
    def get_report_payload(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tạo payload cho việc báo cáo hoàn thành job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Payload cho API báo cáo
        """
        golike_id = account.get("golike_id")
        job_id = job.get("id")
        
        if not golike_id or not job_id:
            self.logger.error("Thiếu thông tin tài khoản hoặc job để tạo payload báo cáo")
            return {}
            
        return {
            "ads_id": job_id,
            "account_id": golike_id,
            "async": True,
            "data": None
        }
    
    def get_skip_payload(self, account: Dict[str, Any], job: Dict[str, Any]) -> Dict[str, Any]:
        """
        Tạo payload cho việc bỏ qua/hủy job
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            Dict[str, Any]: Payload cho API skip job
        """
        golike_id = account.get("golike_id")
        job_id = job.get("id")
        job_type = job.get("type")
        object_id = job.get("object_id")
        
        if not golike_id or not job_id:
            self.logger.error("Thiếu thông tin tài khoản hoặc job để tạo payload hủy")
            return {}
            
        return {
            "ads_id": job_id,
            "account_id": golike_id,
            "object_id": object_id,
            "type": job_type
        }
        
    def skip_job(self, account: Dict[str, Any], job: Dict[str, Any]) -> bool:
        """
        Bỏ qua/hủy job hiện tại
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            bool: True nếu hủy thành công, False nếu thất bại
        """
        import config
        
        try:
            # URL API để skip job
            url = self.get_skip_jobs_url()
            
            # Tạo payload cho việc skip job
            payload = self.get_skip_payload(account, job)
            if not payload:
                self.logger.error("Không thể tạo payload cho skip job")
                return False
            
            # Gọi API
            response = self.api_request(url, "POST", payload)
            
            if response and response.get("success", False):
                self.logger.info(f"Đã hủy job {job.get('id')}")
                return True
            
            self.logger.error(f"Hủy job {job.get('id')} thất bại: {response}")
            return False
        except Exception as e:
            self.logger.exception(e, "Lỗi khi hủy job")
            return False
    def close_app(self):
        """
        Đóng app
        """
        self.helper.close_app(self.app_package)
        self.safe_sleep(1)
    def get_api_base_url(self) -> str:
        """
        Lấy URL gốc của API GoLike
        
        Returns:
            str: URL gốc
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}"
    
    def get_account_url(self) -> str:
        """
        Lấy URL API tài khoản của GoLike
        
        Returns:
            str: URL API tài khoản
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}-account"
    
    def get_jobs_url(self) -> str:
        """
        Lấy URL API jobs của GoLike
        
        Returns:
            str: URL API jobs
        """
        import config
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/jobs"
    
    def get_complete_jobs_url(self) -> str:
        """
        Lấy URL API báo cáo job hoàn thành của GoLike
        
        Returns:
            str: URL API báo cáo job hoàn thành
        """
        import config
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/complete-jobs"
    
    def get_skip_jobs_url(self) -> str:
        """
        Lấy URL API skip jobs của GoLike
        
        Returns:
            str: URL API skip jobs
        """
        import config
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/skip-jobs"
    
    def get_job_report_url(self, job_id: str) -> str:
        """
        Lấy URL API báo cáo job của GoLike
        
        Args:
            job_id: ID của job
            
        Returns:
            str: URL API báo cáo job
        """
        import config
        return f"{config.GOLIKE_API_BASE}/{self.app_name}/jobs/{job_id}/report"
    
    def get_job_params(self, account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Lấy tham số để gọi API lấy job
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            Dict[str, Any]: Tham số
        """
        # Mặc định không có tham số, cần override ở lớp con
        return {}
    
    def get_accounts_from_device(self) -> List[Dict[str, Any]]:
        """Phương thức cơ sở để lấy danh sách tài khoản, cần override ở class con"""
        return []
    
    def set_sleep_function(self, sleep_func: Callable[[float], bool]):
        """
        Đặt hàm sleep tùy chỉnh
        
        Args:
            sleep_func: Hàm sleep nhận một tham số là số giây và trả về True nếu sleep đủ thời gian,
                        False nếu bị dừng lại
        """
        self._sleep_func = sleep_func
        
    def safe_sleep(self, seconds: float) -> bool:
        """
        Ngủ an toàn, có thể dừng lại ngay lập tức
        
        Args:
            seconds: Số giây cần ngủ
            
        Returns:
            bool: True nếu ngủ đủ thời gian, False nếu bị dừng lại
        """
        return self._sleep_func(seconds)
    
    def switch_to_account(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chuyển đổi sang tài khoản mục tiêu
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            Dict[str, Any]: {
                'success': bool,
                'reason': str (nếu thất bại),
                'message': str
            }
        """
        try:
            self.logger.info(f"Đang chuyển đổi sang tài khoản {target_account.get('unique_username', 'unknown')}")
            
            # Đặt thời gian chờ tối đa (giây)
            timeout = 60
            start_time = time.time()
            
            # Lấy username của tài khoản đang đăng nhập
            current_username = self.get_current_logged_in_username()
            target_username = target_account.get("unique_username")
            
            # Nếu đã đăng nhập đúng tài khoản rồi, không cần chuyển đổi
            if current_username and current_username == target_username:
                self.logger.info(f"Đã đăng nhập tài khoản {target_username} rồi")
                return {'success': True, 'message': f'Đã đăng nhập tài khoản {target_username}'}
            
            # Nếu chưa đăng nhập đúng tài khoản, thực hiện chuyển đổi
            while time.time() - start_time < timeout:
                try:
                    # Phương thức này sẽ được ghi đè bởi lớp con tùy theo ứng dụng
                    switch_result = self._perform_account_switch(target_account)
                    
                    # Kiểm tra kết quả trả về từ _perform_account_switch
                    if isinstance(switch_result, dict):
                        if not switch_result.get('success', False):
                            return switch_result  # Trả về ngay lỗi từ _perform_account_switch
                    elif not switch_result:
                        # Tương thích với implementation cũ trả về boolean
                        return {
                            'success': False, 
                            'reason': 'switch_failed',
                            'message': 'Không thể chuyển tài khoản'
                        }
                    
                    # Đợi một chút để ứng dụng load xong
                    self.safe_sleep(3)
                    
                    # Kiểm tra lại xem đã chuyển đúng tài khoản chưa
                    new_username = self.get_current_logged_in_username()
                    
                    if new_username and new_username == target_username:
                        self.logger.info(f"Đã chuyển sang tài khoản {target_username} thành công")
                        
                        # Cập nhật trạng thái đăng nhập trong DB
                        self.db.reset_login_status_by_app(self.app_name)
                        self.db.update_account(target_account["id"], {"is_login": True, "is_sync": False})
                        
                        return {'success': True, 'message': f'Chuyển sang tài khoản {target_username} thành công'}
                    
                    # Nếu chưa thành công, đợi một chút rồi thử lại
                    self.safe_sleep(2)
                except Exception as e:
                    self.logger.error(f"Lỗi khi chuyển tài khoản: {str(e)}")
                    self.safe_sleep(2)
            
            self.logger.error(f"Không thể chuyển sang tài khoản {target_username} sau {timeout} giây")
            return {
                'success': False, 
                'reason': 'timeout',
                'message': f'Không thể chuyển sang tài khoản {target_username} sau {timeout} giây'
            }
        except Exception as e:
            self.logger.exception(e, f"Lỗi khi chuyển tài khoản")
            return {
                'success': False, 
                'reason': 'exception',
                'message': f'Lỗi khi chuyển tài khoản: {str(e)}'
            }
    
    def _perform_account_switch(self, target_account: Dict[str, Any]) -> Dict[str, Any]:
        """
        Thực hiện các thao tác UI để chuyển tài khoản
        Phương thức này cần được ghi đè bởi lớp con
        
        Args:
            target_account: Tài khoản cần chuyển đến
            
        Returns:
            Dict[str, Any]: {
                'success': bool,
                'reason': str (nếu thất bại - 'account_not_found', 'ui_error', etc.),
                'message': str
            }
        """
        # Phương thức cơ sở chỉ log cảnh báo
        self.logger.warning(f"Phương thức _perform_account_switch chưa được triển khai cho {self.__class__.__name__}")
        return {
            'success': False, 
            'reason': 'not_implemented',
            'message': f'Phương thức _perform_account_switch chưa được triển khai cho {self.__class__.__name__}'
        }
        return False
        
    def get_current_logged_in_username(self) -> Optional[str]:
        """
        Lấy username của tài khoản đang đăng nhập
        
        Returns:
            str hoặc None: Username của tài khoản đang đăng nhập, hoặc None nếu không có
        """
        # Phương thức cơ sở chỉ log cảnh báo
        self.logger.warning(f"Phương thức get_current_logged_in_username chưa được triển khai cho {self.__class__.__name__}")
        return None
    
    def record_job_history(self, account: Dict[str, Any], job: Dict[str, Any], result: Dict[str, Any]) -> str:
        """
        Ghi lại lịch sử job vào database
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            result: Kết quả thực hiện job
            
        Returns:
            str: UUID của bản ghi lịch sử job hoặc chuỗi rỗng nếu thất bại
        """
        try:
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            
            # Chuẩn bị dữ liệu job history
            job_data = {
                "account_uuid": account.get("account_uuid", ""),
                "device_id": device_id,
                "app": self.app_name,
                "job_id": job.get("id", ""),
                "job_type": job.get("type", ""),
                "object_id": job.get("object_id", ""),
                "link": job.get("link", ""),
                "status": result.get("status", 0),
                "success": result.get("success", False),
                "price": job.get("price_after_cost", 0),
                "error_message": result.get("message", "") if not result.get("success", False) else "",
                "created_at": int(time.time()),
                "is_sync": False  # Đảm bảo trạng thái là chưa đồng bộ
            }
            
            # Lưu vào database
            job_uuid = self.db.add_job_history(job_data)
            if job_uuid:
                self.logger.debug(f"Đã lưu lịch sử job {job.get('id')} vào database với UUID: {job_uuid}")
            else:
                self.logger.warning(f"Không thể lưu lịch sử job {job.get('id')} vào database")
            
            return job_uuid
        except Exception as e:
            self.logger.exception(e, "Lỗi khi ghi lịch sử job")
            return ""

    def report_job_completed(self, account: Dict[str, Any], job: Dict[str, Any], report_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Báo cáo job đã hoàn thành
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            report_data: Dữ liệu báo cáo
            
        Returns:
            Dict[str, Any]: Kết quả báo cáo từ API
        """
        try:
            # Lấy job_id từ job
            job_id = job.get("id")
            if not job_id:
                self.logger.error("Không tìm thấy job_id trong job")
                return {"status": "error", "message": "Không tìm thấy job_id trong job"}
                
            # Chuẩn bị dữ liệu báo cáo
            payload = {
                "id": job_id,
                "status": True
            }
            
            # Thêm dữ liệu báo cáo nếu có
            if report_data:
                payload.update(report_data)
                
            # Gọi API báo cáo job đã hoàn thành
            url = self.get_complete_jobs_url()
            result = self.golike_service.api_request(url, method="POST", payload=payload)
            
            if not result:
                self.logger.error("Không thể báo cáo job đã hoàn thành")
                return {"status": "error", "message": "Không thể báo cáo job đã hoàn thành"}
                
            self.logger.info(f"Đã báo cáo job {job_id} hoàn thành thành công")
            return {"status": "success", "message": "Đã báo cáo job hoàn thành thành công", "data": result}
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job đã hoàn thành")
            return {"status": "error", "message": f"Lỗi khi báo cáo job đã hoàn thành: {str(e)}"}
            
    def report_job_skipped(self, account: Dict[str, Any], job: Dict[str, Any], reason: str = "") -> Dict[str, Any]:
        """
        Báo cáo job đã bị bỏ qua
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            reason: Lý do bỏ qua job
            
        Returns:
            Dict[str, Any]: Kết quả báo cáo từ API
        """
        try:
            # Lấy job_id từ job
            job_id = job.get("id")
            if not job_id:
                self.logger.error("Không tìm thấy job_id trong job")
                return {"status": "error", "message": "Không tìm thấy job_id trong job"}
                
            # Chuẩn bị dữ liệu báo cáo
            payload = {
                "id": job_id
            }
            
            # Thêm lý do nếu có
            if reason:
                payload["reason"] = reason
                
            # Gọi API báo cáo job đã bị bỏ qua
            url = self.get_skip_jobs_url()
            result = self.golike_service.api_request(url, method="POST", payload=payload)
            
            if not result:
                self.logger.error("Không thể báo cáo job đã bị bỏ qua")
                return {"status": "error", "message": "Không thể báo cáo job đã bị bỏ qua"}
                
            self.logger.info(f"Đã báo cáo job {job_id} bị bỏ qua thành công")
            return {"status": "success", "message": "Đã báo cáo job bị bỏ qua thành công", "data": result}
            
        except Exception as e:
            self.logger.exception(e, "Lỗi khi báo cáo job đã bị bỏ qua")
            return {"status": "error", "message": f"Lỗi khi báo cáo job đã bị bỏ qua: {str(e)}"}
    
    def get_account_list_url(self) -> str:
        """
        Lấy URL API danh sách tài khoản
        
        Returns:
            str: URL API danh sách tài khoản
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}"
        
    def get_account_detail_url(self) -> str:
        """
        Lấy URL API chi tiết tài khoản
        
        Returns:
            str: URL API chi tiết tài khoản
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}-account"
        
    def get_job_list_url(self) -> str:
        """
        Lấy URL API danh sách job
        
        Returns:
            str: URL API danh sách job
        """
        return f"{config.GOLIKE_API_BASE}/advertising/publishers/{self.app_name}/jobs"
        
    def get_job_report_url(self, job_id: str) -> str:
        """
        Lấy URL API báo cáo job
        
        Args:
            job_id: ID của job
            
        Returns:
            str: URL API báo cáo job
        """
        return f"{config.GOLIKE_API_BASE}/{self.app_name}/jobs/{job_id}/report"
    
    # =============================================================================
    # ABSTRACT METHODS CHO CARE ACTIONS (KHÔNG PHẢI JOB)
    # =============================================================================
    
    def perform_newsfeed_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động vuốt newsfeed/bảng tin
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_newsfeed_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    def perform_reels_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động xem reels/video
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_reels_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    def perform_notification_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động xem thông báo
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_notification_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    def perform_profile_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động xem profile
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_profile_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    def perform_explore_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động khám phá/tìm hiểu
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_explore_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    def perform_search_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động tìm kiếm
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        self.logger.warning(f"perform_search_action chưa được implement cho {self.__class__.__name__}")
        return False
    
    # =============================================================================
    # METHODS HỖ TRỢ CHO APP MANAGEMENT
    # =============================================================================
    
    @abstractmethod
    def open_app(self) -> bool:
        """
        Mở app tương ứng
        
        Returns:
            bool: True nếu thành công
        """
        pass
    
    @abstractmethod
    def ensure_home_screen(self) -> bool:
        """
        Đảm bảo đang ở màn hình home (implementation chung)
        
        Returns:
            bool: True nếu thành công
        """
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                # Bước 1: Kiểm tra package hiện tại
                current_package = self.helper.get_current_package()
                if current_package != self.app_package:
                    self.logger.info(f"App chưa mở (hiện tại: {current_package}), đang mở app...")
                    self.helper.open_app(self.app_package)
                    # Chờ 10 giây cho app khởi động
                    if not self.safe_sleep(10):
                        return False
                
                # Bước 2: Kiểm tra có phải trang chủ không
                if self.is_home_screen():
                    self.logger.debug("Đã ở màn hình home")
                    return True
                
                # Bước 3: Validate app không bị banned
                if not self.validate_app_not_banned():
                    self.logger.warning("App bị banned, đóng và mở lại...")
                    self.helper.close_app(self.app_package)
                    if not self.safe_sleep(2):
                        return False
                    continue  # Retry từ đầu
                
                # Bước 4: Xử lý các dialog và về home
                self._handle_dialogs_and_navigate_home()
                
                # Bước 5: Kiểm tra lại
                if self.is_home_screen():
                    return True
                
                self.logger.warning(f"Attempt {attempt + 1}: Vẫn chưa về được home screen")
                
            except Exception as e:
                self.logger.error(f"Lỗi ensure_home_screen attempt {attempt + 1}: {e}")
                
        self.logger.error(f"Không thể về home screen sau {max_retries} lần thử")
        return False

    @abstractmethod
    def validate_app_not_banned(self) -> bool:
        """
        Kiểm tra app có bị banned không
        
        Returns:
            bool: True nếu không bị banned, False nếu bị banned
        """
        pass
    
    def _handle_dialogs_and_navigate_home(self):
        """
        Xử lý các dialog và navigate về home (có thể override trong subclass)
        """
        # Default implementation - subclass có thể override
        self.logger.debug("Đang xử lý dialogs và navigate về home...")
        
        # Thử nhấn back một vài lần
        for _ in range(3):
            if self.is_home_screen():
                break
            self.helper.press_back()
            self.safe_sleep(1)
        
        # Nếu vẫn chưa về được home, thử tìm home button
        if not self.is_home_screen():
            home_button = self.helper.find_element(content_desc="Trang chủ")
            if not home_button:
                home_button = self.helper.find_element(text="Trang chủ")
            if not home_button:
                home_button = self.helper.find_element(text="Home")
                
            if home_button:
                self.helper.tap_element_center(home_button)
                self.safe_sleep(2)

    @abstractmethod
    def is_home_screen(self) -> bool:
        """
        Kiểm tra xem có đang ở màn hình home không
        
        Returns:
            bool: True nếu đang ở home screen
        """
        pass
    
    # =============================================================================
    # METHODS HỖ TRỢ CHO ACTION WEIGHTS CONFIGURATION
    # =============================================================================
    
    def get_action_weights(self) -> Dict[str, int]:
        """
        Lấy tỉ lệ hành động cho app này - ưu tiên từ DB, fallback về default
        
        Returns:
            Dict[str, int]: Tỉ lệ hành động {action_name: weight_percent}
        """
        try:
            app_config = self.get_app_config()
            return app_config.get("action_weights", self._default_config["action_weights"])
        except Exception as e:
            self.logger.warning(f"Lỗi lấy action weights, dùng default: {e}")
            return self._default_config["action_weights"]
    
    def get_app_config(self) -> Dict[str, Any]:
        """
        Lấy config cho app này từ DB với priority: app_config → global_config → default
        Luôn đọc từ DB, không cache để có thể update qua MQTT
        
        Returns:
            Dict[str, Any]: Config của app, merge theo priority
        """
        try:
            # Sử dụng DB service để lấy config với priority logic
            return self.db.get_app_config(self.app_name, self._default_config)
        except Exception as e:
            self.logger.warning(f"Lỗi lấy app config, dùng default: {e}")
            return self._default_config.copy()
    
    def save_app_config(self, config_updates: Dict[str, Any]) -> bool:
        """
        Lưu config cho app này vào DB (merge với config hiện tại)
        
        Args:
            config_updates: Các config cần cập nhật
            
        Returns:
            bool: True nếu thành công
        """
        try:
            return self.db.update_app_config(self.app_name, config_updates)
        except Exception as e:
            self.logger.error(f"Lỗi lưu app config: {e}")
            return False
    
    def init_default_app_config(self) -> bool:
        """
        Khởi tạo config mặc định cho app nếu chưa có trong DB
        
        Returns:
            bool: True nếu thành công
        """
        try:
            # Lấy config hiện tại (chỉ riêng của app, không merge)
            app_config_key = f"{self.app_name}_config"
            current_app_config = self.db.get(app_config_key, {})
            
            if not current_app_config:
                # Chưa có config riêng cho app, lưu default
                success = self.db.set_app_config(self.app_name, self._default_config)
                if success:
                    self.logger.info(f"Đã khởi tạo config mặc định cho {self.app_name}")
                return success
            else:
                # Đã có config, kiểm tra và bổ sung các keys thiếu
                updated = False
                for key, default_value in self._default_config.items():
                    if key not in current_app_config:
                        current_app_config[key] = default_value
                        updated = True
                
                # Special check cho action_weights
                if "action_weights" in current_app_config and "action_weights" in self._default_config:
                    for action, weight in self._default_config["action_weights"].items():
                        if action not in current_app_config["action_weights"]:
                            current_app_config["action_weights"][action] = weight
                            updated = True
                
                if updated:
                    success = self.db.set_app_config(self.app_name, current_app_config)
                    if success:
                        self.logger.info(f"Đã cập nhật config thiếu cho {self.app_name}")
                    return success
                
                return True  # Không cần update
        except Exception as e:
            self.logger.error(f"Lỗi khởi tạo default app config: {e}")
            return False
    
    def get_min_actions_per_session(self) -> int:
        """
        Lấy số action tối thiểu mỗi session từ config
        
        Returns:
            int: Số action tối thiểu
        """
        app_config = self.get_app_config()
        return app_config.get("min_actions_per_session", 5)
    
    def get_max_session_duration_minutes(self) -> int:
        """
        Lấy thời gian tối đa mỗi session từ config
        
        Returns:
            int: Thời gian tối đa (phút)
        """
        app_config = self.get_app_config()
        return app_config.get("max_session_duration_minutes", 30)
    
    def get_action_delay_range(self) -> tuple[int, int]:
        """
        Lấy khoảng delay giữa các actions từ config
        
        Returns:
            tuple[int, int]: (min_delay, max_delay) trong giây
        """
        app_config = self.get_app_config()
        min_delay = app_config.get("action_delay_min", 3)
        max_delay = app_config.get("action_delay_max", 10)
        return (min_delay, max_delay)
    
    def should_skip_job_action(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra có nên skip job action không dựa trên config và trạng thái
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu nên skip job action
        """
        try:
            # Kiểm tra action_weights để quyết định có làm job không
            action_weights = self.get_action_weights()
            job_weight = action_weights.get("job", 0)
            
            # Nếu job weight = 0 thì skip job action
            if job_weight == 0:
                return True
            
            # Kiểm tra các điều kiện job thường
            return not self._can_run_job(account)
            
        except Exception as e:
            self.logger.warning(f"Lỗi kiểm tra skip job action: {e}")
            return True  # An toàn - skip nếu lỗi
    
    def get_supported_actions(self) -> List[str]:
        """
        Lấy danh sách hành động được hỗ trợ bởi app này
        App có thể override để hỗ trợ các hành động khác nhau
        
        Returns:
            List[str]: Danh sách action names được hỗ trợ
        """
        return list(self.get_action_weights().keys())
    
    def perform_action(self, action: str, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động được chỉ định với config-based logic
        
        Args:
            action: Tên hành động
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        try:
            # Kiểm tra action có được hỗ trợ không
            if action not in self.get_supported_actions():
                self.logger.warning(f"Action '{action}' không được hỗ trợ bởi {self.__class__.__name__}")
                return False
            
            # Xử lý đặc biệt cho job action dựa trên config
            if action == "job":
                if self.should_skip_job_action(account):
                    self.logger.info(f"Skip job action cho {account.get('unique_username')} theo config")
                    # Thay thế bằng action khác (không phải job)
                    alternative_action = self._choose_alternative_action()
                    if alternative_action:
                        self.logger.info(f"Thực hiện {alternative_action} thay cho job")
                        return self.perform_action(alternative_action, account)
                    return True  # Nếu không có alternative, coi như thành công
            
            # Thử gọi method động cho action tùy chỉnh trước
            custom_method_name = f"perform_{action}_action"
            if hasattr(self, custom_method_name):
                custom_method = getattr(self, custom_method_name)
                if callable(custom_method):
                    self.logger.info(f"Sử dụng custom method '{custom_method_name}' cho action '{action}'")
                    return custom_method(account)
            
            # Mapping các actions tới methods chuẩn
            standard_action_methods = {
                "newsfeed": self.perform_newsfeed_action,
                "reels": self.perform_reels_action,
                "notification": self.perform_notification_action,
                "profile": self.perform_profile_action,
                "job": self.perform_job_action,
                "explore": self.perform_explore_action,
                "search": self.perform_search_action,
                "post": self.perform_post_action
            }
            
            # Lấy method tương ứng với action
            action_method = standard_action_methods.get(action)
            if not action_method:
                self.logger.warning(f"Không tìm thấy method cho action '{action}'")
                return False
            
            # Thực hiện action
            self.logger.info(f"Thực hiện action '{action}' cho {account.get('unique_username')}")
            return action_method(account)
            
        except Exception as e:
            self.logger.error(f"Lỗi thực hiện action '{action}': {e}")
            return False
    
    def _choose_alternative_action(self) -> Optional[str]:
        """
        Chọn action thay thế khi không thể làm job
        
        Returns:
            str: Tên action thay thế, hoặc None nếu không có
        """
        import random
        
        try:
            # Lấy action weights không bao gồm job
            action_weights = self.get_action_weights()
            alternative_weights = {k: v for k, v in action_weights.items() if k != "job"}
            
            if not alternative_weights:
                return None
            
            # Chọn random theo weight
            actions = list(alternative_weights.keys())
            weights = list(alternative_weights.values())
            
            chosen_action = random.choices(actions, weights=weights, k=1)[0]
            return chosen_action
            
        except Exception as e:
            self.logger.warning(f"Lỗi chọn alternative action: {e}")
            return "newsfeed"  # Fallback to newsfeed
    
    def calculate_actions_needed_for_session(self, accounts: List[Dict[str, Any]]) -> int:
        """
        Tính toán số actions cần thiết cho session dựa trên config và số jobs có thể
        
        Args:
            accounts: Danh sách tài khoản
            
        Returns:
            int: Số actions cần thực hiện trong session
        """
        try:
            # Lấy config min actions
            min_actions = self.get_min_actions_per_session()
            
            # Đếm số tài khoản có thể làm job
            job_capable_accounts = 0
            for account in accounts:
                if not self.should_skip_job_action(account):
                    job_capable_accounts += 1
            
            # Base actions dựa trên số tài khoản
            # Mỗi tài khoản có thể làm job sẽ tương ứng với 2-3 actions
            default_actions_per_account = 2.5
            actions_from_accounts = int(job_capable_accounts * default_actions_per_account)
            
            # Lấy max giữa actions từ accounts và min actions
            total_actions = max(actions_from_accounts, min_actions)
            
            self.logger.info(f"Tính toán actions cho session: {job_capable_accounts} accounts có thể làm việc, "
                           f"{default_actions_per_account} actions/account = {actions_from_accounts} actions từ accounts, "
                           f"min {min_actions} => total {total_actions} actions")
            
            return total_actions
            
        except Exception as e:
            self.logger.error(f"Lỗi tính toán actions needed: {e}")
            return self.get_min_actions_per_session()  # Fallback
    
    def choose_weighted_action(self, exclude_actions: List[str] = None) -> str:
        """
        Chọn action theo weight từ config
        
        Args:
            exclude_actions: Danh sách actions cần loại trừ
            
        Returns:
            str: Action được chọn
        """
        import random
        
        try:
            action_weights = self.get_action_weights()
            
            # Loại trừ actions không mong muốn
            if exclude_actions:
                action_weights = {k: v for k, v in action_weights.items() if k not in exclude_actions}
            
            if not action_weights:
                return "newsfeed"  # Fallback
            
            # Chọn random theo weight
            actions = list(action_weights.keys())
            weights = list(action_weights.values())
            
            chosen_action = random.choices(actions, weights=weights, k=1)[0]
            return chosen_action
            
        except Exception as e:
            self.logger.warning(f"Lỗi chọn weighted action: {e}")
            return "newsfeed"  # Fallback
    
    def perform_job_action(self, account: Dict[str, Any]) -> bool:
        """
        Thực hiện hành động làm job - Complete job processing pipeline
        
        Pipeline:
        1. Validate GoLike headers
        2. Validate account can run job
        3. Fetch job from GoLike  
        4. Update device message
        5. Validate job before execution
        6. Execute job
        7. Report job result to GoLike
        8. Update job statistics
        
        App có thể override để có logic làm job riêng
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu thành công
        """
        try:
            username = account.get("unique_username")
            account_id = account.get("id")
            
            self.logger.info(f"Làm job cho {username}")
            
            # Bước 0: Kiểm tra xác thực GoLike
            if not self.is_golike_authenticated():
                return False
            
            # Bước 1: Kiểm tra có thể làm job không
            if not self._can_run_job(account):
                self.logger.info(f"Account {username} không thể làm job")
                return False
            
            # Bước 2: Fetch job từ GoLike
            self.logger.info(f"Lấy job cho tài khoản {username}")
            try:
                job = self.fetch_job(account)
                
                if not job:
                    self.logger.info(f"Không có job cho tài khoản {username}")
                    return False
                    
            except Exception as e:
                self.logger.error(f"Lỗi khi lấy job cho tài khoản {username}: {e}")
                return False
            
            # Bước 3: Cập nhật device message cho job
            self.update_device_message_for_job(account, job)
            
            # Bước 4: Validate job
            if not self.validate_job_with_handler(account, job):
                self.logger.info(f"Job không hợp lệ hoặc đã skip cho {username}")
                return True  # Skip job không phải lỗi
            
            # Bước 5: Thực hiện job
            self.logger.info(f"Thực hiện job cho tài khoản {username}: {job.get('type', 'unknown')}")
            job_result = self.execute_job(account, job)
            
            if not job_result:
                self.logger.error(f"Không nhận được kết quả job từ handler cho {username}")
                return False
            
            # Bước 6: Báo cáo kết quả về GoLike
            try:
                self.report_job(account, job, job_result)
                success = job_result.get("success", False)
                self.logger.info(f"Đã báo cáo job cho {username}: success={success}")
            except Exception as e:
                self.logger.warning(f"Lỗi báo cáo job cho {username}: {e}")
            
            # Bước 7: Cập nhật thống kê job
            success = job_result.get("success", False)
            job_type = job.get("type", "")
            self.update_job_stats(account, success, job_type, job_result)
            
            return success
            
        except Exception as e:
            self.logger.error(f"Lỗi làm job: {e}")
            return False
    
    def _can_run_job(self, account: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem tài khoản có thể làm job không
        
        Args:
            account: Thông tin tài khoản
            
        Returns:
            bool: True nếu có thể làm job
        """
        try:
            # 1. Kiểm tra trạng thái cơ bản
            account_status = account.get("status", "active")
            if account_status in ["disabled", "logout"]:
                return False
            
            # Nếu inactive, kiểm tra job_disable_until
            if account_status == "inactive":
                job_disable_until = account.get("job_disable_until", 0)
                if job_disable_until > time.time():
                    return False
            
            # 2. Kiểm tra job_enable
            if not account.get("job_enable", False):
                return False
            
            # 3. Kiểm tra đã liên kết GoLike (cần cho jobs)
            if not account.get("is_golike_linked", False):
                return False
            
            # 4. Kiểm tra đã login
            if not account.get("is_login", False):
                return False
            
            # 5. Kiểm tra giới hạn daily
            daily_limit = account.get("job_max_day", 100)
            daily_count = account.get("job_today", 0)
            if daily_count >= daily_limit:
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Lỗi kiểm tra can run job: {e}")
            return False
    
    def _validate_job_before_execution(self, account: Dict[str, Any], job: Dict[str, Any]) -> bool:
        """
        Validate job trước khi thực hiện
        App có thể override để có logic validate riêng
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            bool: True nếu job hợp lệ
        """
        try:
            validation_result = self.validate_job_before_execution(account, job)
            if not validation_result.get("valid", True):
                if validation_result.get("should_skip", False):
                    self.logger.info(f"Skip job theo yêu cầu validation")
                else:
                    self.logger.info(f"Job không hợp lệ theo validation")
                return False
            return True
        except Exception as e:
            self.logger.warning(f"Lỗi validate job: {e}")
            return True  # Tiếp tục nếu validate lỗi
    
    def update_device_message_for_job(self, account: Dict[str, Any], job: Dict[str, Any]):
        """
        Cập nhật device message cho job hiện tại
        App có thể override để custom message format
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
        """
        try:
            link = job.get('link', '')
            # Clean up link để hiển thị ngắn gọn hơn
            if link.startswith('https://www.instagram.com/'):
                link = link.replace('https://www.instagram.com/', '')
            elif link.startswith('https://www.tiktok.com/'):
                link = link.replace('https://www.tiktok.com/', '')
            
            message = f"[{account.get('app')}][{account.get('unique_username')}][{job.get('type')}][{link}]"
            
            # Cập nhật device message thông qua db service
            if hasattr(self, 'db') and self.db:
                self.db.set("device_message", message)
            
        except Exception as e:
            self.logger.warning(f"Lỗi cập nhật device message: {e}")
    
    def validate_job_with_handler(self, account: Dict[str, Any], job: Dict[str, Any]) -> bool:
        """
        Validate job trước khi thực hiện - sử dụng abstract method validation
        
        Args:
            account: Thông tin tài khoản
            job: Thông tin job
            
        Returns:
            bool: True nếu job hợp lệ, False nếu cần skip hoặc continue
        """
        try:
            validation_result = self.validate_job_before_execution(account, job)
            if not validation_result.get("valid", True):
                if validation_result.get("should_skip", False):
                    # Skip job
                    skip_message = validation_result.get("message", "Job không hợp lệ")
                    self.logger.info(f"Skip job: {skip_message}")
                    try:
                        # Ghi lại history cho job bị skip
                        self.record_job_history(account, job, {
                            "status": 2, 
                            "success": False, 
                            "message": skip_message
                        })
                        # Báo skip job về GoLike
                        self.skip_job(account, job)
                    except Exception as e:
                        self.logger.warning(f"Skip job lỗi: {e}")
                    
                    # Sleep ngắn để tránh spam
                    skip_sleep_time = random.randint(3, 10)
                    self.logger.info(f"Nghỉ {skip_sleep_time}s sau khi skip job để tránh spam")
                    self._sleep_func(skip_sleep_time)
                else:
                    self.logger.warning(f"Job không hợp lệ: {validation_result.get('message', 'Unknown error')}")
                return False
            return True
        except Exception as e:
            self.logger.warning(f"Lỗi validate job: {e}")
            return True  # Tiếp tục nếu validate lỗi
    
    def update_job_stats(self, account: Dict[str, Any], success: bool, job_type: str, job_result: Dict[str, Any]):
        """
        Cập nhật thống kê job - app có thể override để custom logic
        
        Args:
            account: Thông tin tài khoản
            success: Job có thành công không
            job_type: Loại job
            job_result: Kết quả job
        """
        try:
            account_id = account.get("id")
            
            if success:
                # Tăng job count cho account
                current_count = account.get("job_today", 0)
                new_count = current_count + 1
                
                # Tăng total jobs
                current_total = account.get("total_jobs", 0)
                new_total = current_total + 1
                
                # Cập nhật job count trong database
                if hasattr(self, 'db') and self.db:
                    self.db.update_account(account_id, {
                        "job_today": new_count,
                        "total_jobs": new_total,
                        "last_job_time": int(time.time())
                    })
                
                self.logger.info(f"Cập nhật job count cho account {account.get('unique_username')}: today={new_count}, total={new_total}")
            
        except Exception as e:
            self.logger.warning(f"Lỗi cập nhật job stats: {e}")').decode('utf-8'))
