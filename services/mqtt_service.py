import base64
exec(base64.b64decode('import paho.mqtt.client as mqtt
import threading
import json
import time
import uuid
import os
from typing import Dict, Any, List, Optional, Callable, Union
import config
import utils
import socket

# Logger
logger = utils.get_logger("MQTTService")

class MQTTService:
    def __init__(self, db_service, device_id, helper_service=None):
        # Khởi tạo các service
        self.db = db_service
        self.helper_service = helper_service
        
        # Cấu hình MQTT
        self.client_id = f"{config.MQTT_CLIENT_ID_PREFIX}_{device_id}"
        self.broker_url = config.MQTT_SERVERS[config.MODE]
        self.broker_address = self.broker_url.replace("mqtt://", "").split(":")[0]
        self.broker_port = int(self.broker_url.split(":")[-1]) if ":" in self.broker_url else 1883
        self.username = config.MQTT_USERNAME
        self.password = config.MQTT_PASSWORD
        
        # Trạng thái kết nối
        self.is_connected = False
        self.client = None
        self.device_id = device_id
        
        
        # Topics
        self.topic_client_sync = config.MQTT_TOPIC_CLIENT_SYNC
        self.topic_server_task = f"{config.MQTT_TOPIC_SERVER_TASK_PREFIX}/{self.device_id}"
        
        # Quản lý task và sync
        self.task_handlers = {}
        self.sync_thread = None
        self.running = False
        self.stop_event = threading.Event()
        self.sync_interval = self.db.get_device_config("sync_interval", config.SYNC_INTERVAL)
        
        # Kiểm tra môi trường Termux
        self.is_termux = 'TERMUX_VERSION' in os.environ or '/data/data/com.termux' in os.environ.get('PATH', '')
        if self.is_termux:
            logger.info("Đang chạy trong môi trường Termux")

    def _create_client(self) -> mqtt.Client:
        """Tạo và cấu hình MQTT client"""
        client = None

        # Thử tạo với API v2
        try:
            client = mqtt.Client(
                client_id=self.client_id,
                clean_session=True,
                protocol=mqtt.MQTTv311,
                callback_api_version=getattr(mqtt.CallbackAPIVersion, 'VERSION2', None)
            )
            logger.info("Tạo MQTT client với API v2")
        except (AttributeError, TypeError):
            # Fallback API v1
            client = mqtt.Client(
                client_id=self.client_id,
                clean_session=True,
                protocol=mqtt.MQTTv311
            )
            logger.info("Tạo MQTT client với API v1")
        
        # Cấu hình xác thực nếu có
        if self.username and self.password:
            client.username_pw_set(self.username, self.password)
        
        # Đăng ký callback
        client.on_connect = self._on_connect
        client.on_message = self._on_message
        client.on_disconnect = self._on_disconnect
        
        return client

    def connect(self) -> bool:
        """Kết nối đến MQTT broker"""
        def can_connect(host: str, port: int, timeout: float = 2.0) -> bool:
            try:
                with socket.create_connection((host, port), timeout=timeout):
                    return True
            except Exception:
                return False

        main_host = self.broker_address
        main_port = self.broker_port
        fallback_host = "10.0.0.5"
        fallback_port = 9020

        # Kiểm tra kết nối socket tới cả 2 IP
        main_ok = can_connect(main_host, main_port)
        fallback_ok = can_connect(fallback_host, fallback_port)

        if main_ok:
            connect_host = main_host
            connect_port = main_port
        elif fallback_ok:
            connect_host = fallback_host
            connect_port = fallback_port
        else:
            logger.error(f"Không kết nối được socket tới cả {main_host}:{main_port} lẫn {fallback_host}:{fallback_port}")
            return False

        try:
            # Tạo client mới nếu chưa có
            if self.client is None:
                self.client = self._create_client()
            # Reset trạng thái
            self.stop_event.clear()
            self.is_connected = False
            self.client.reconnect_delay_set(min_delay=1, max_delay=60)
            logger.info(f"Đang kết nối tới MQTT broker {connect_host}:{connect_port}")
            self.client.connect_async(connect_host, connect_port, keepalive=60)
            self.client.loop_start()

            def _wait_connected(timeout_sec: int = 10) -> bool:
                for _ in range(timeout_sec):
                    if self.is_connected:
                        return True
                    time.sleep(1)
                return False

            if _wait_connected():
                logger.info(f"Đã kết nối thành công đến MQTT broker {connect_host}:{connect_port}")
                self.broker_address = connect_host
                self.broker_port = connect_port
                return True
            else:
                logger.error(f"Kết nối MQTT thất bại tới {connect_host}:{connect_port}")
                return False
        except Exception as e:
            logger.error(f"Lỗi khi kết nối MQTT: {str(e)}")
            return False

    def ensure_connected(self) -> bool:
        """Đảm bảo kết nối MQTT trước khi thực hiện các thao tác"""
        if self.is_connected:
            return True
        logger.warning("MQTT chưa kết nối, đang thử kết nối lại...")
        return self.connect()

    def _on_connect(self, client, userdata, flags, rc, properties=None):
        """Callback khi kết nối thành công"""
        if rc == 0:
            self.is_connected = True
            logger.info("Đã kết nối thành công tới MQTT broker")
            
            # Đăng ký nhận task
            self.client.subscribe(self.topic_server_task, qos=1)
            logger.info(f"Đã đăng ký nhận task tại: {self.topic_server_task}")
            
            # Gửi thông báo kết nối
            self.send_connect_notification()
        else:
            logger.error(f"Kết nối MQTT thất bại với mã lỗi: {rc}")

    def _on_disconnect(self, client, userdata, rc, properties=None, reason_code=None, **kwargs):
        """Callback khi ngắt kết nối"""
        self.is_connected = False
        if rc != 0:
            logger.warning(f"Ngắt kết nối MQTT không mong muốn với mã lỗi: {rc}")
        else:
            logger.info("Đã ngắt kết nối MQTT")

    def _safe_publish(self, topic: str, payload: str, qos: int = 1) -> bool:
        """
        Gửi message an toàn với kiểm tra kết nối trước khi publish
        
        Args:
            topic: MQTT topic
            payload: Nội dung message (string)
            qos: Quality of Service (0, 1, hoặc 2)
            
        Returns:
            bool: True nếu gửi thành công, False nếu thất bại
        """
        try:
            if not self.ensure_connected():
                logger.error(f"Không thể gửi message đến {topic}: MQTT chưa kết nối")
                return False
            
            result = self.client.publish(topic, payload, qos=qos)
            
            if result.rc == mqtt.MQTT_ERR_SUCCESS:
                logger.info(f"Đã gửi message thành công đến {topic}")
                return True
            else:
                logger.error(f"Lỗi khi gửi message đến {topic}: {mqtt.error_string(result.rc)}")
                return False
            
        except Exception as e:
            logger.error(f"Lỗi khi gửi message đến {topic}: {str(e)}")
            return False

    def send_task_report(self, task_id: str, device_id: str, status: str, client_message: str = ""):
        """Gửi báo cáo kết quả thực hiện task"""
        try:
            report_data = {
                "task_id": task_id,
                "device_id": device_id,
                "status": status,
                "client_message": client_message,
                "timestamp": int(time.time())
            }

            if self._safe_publish("dndvina/client/task_report", json.dumps(report_data)):
                logger.info(f"Đã gửi báo cáo task {task_id} với trạng thái {status}")
                return True
            return False

        except Exception as e:
            logger.error(f"Lỗi khi gửi báo cáo task: {str(e)}")
            return False

    def send_connect_notification(self):
        """Gửi thông báo kết nối đến server"""
        try:
            connect_data = {
                "device_id": self.device_id,
                "timestamp": int(time.time())
            }

            if self._safe_publish("dndvina/client/connect", json.dumps(connect_data)):
                logger.info(f"Đã gửi thông báo kết nối cho thiết bị {self.device_id}")
                return True
            return False

        except Exception as e:
            logger.error(f"Lỗi khi gửi thông báo kết nối: {str(e)}")
            return False

    def register_task_handler(self, task_type: str, handler: Callable):
        """
        Đăng ký handler cho loại task
        
        Args:
            task_type: Loại task
            handler: Hàm xử lý task
        """
        self.task_handlers[task_type] = handler
    
    def sync_data(self):
        """Đồng bộ dữ liệu với server"""
        try:
            # Nếu chưa kết nối MQTT, không thể đồng bộ
            if not self.is_connected:
                logger.warning("Chưa kết nối MQTT, không thể đồng bộ dữ liệu")
                return
                
            # Lấy helper service
            helper = self.helper_service
            if not helper:
                logger.error("Không có helper service, không thể đồng bộ dữ liệu")
                return
                
            # Lấy device_id
            device_id = self.db.get_or_create_device_id()
            if not device_id:
                logger.error("Không thể xác định device_id, không thể đồng bộ dữ liệu")
                return
                
            # Lấy thông tin thiết bị
            device_info = None
            try:
                device_info_response = helper.get_device_info()
                
                # Nếu lấy thành công, lưu vào database
                if device_info_response["status"] == "success" and "data" in device_info_response:
                    # Lưu thông tin thiết bị vào database
                    self.db.save_device_info(device_info_response["data"])
                    device_info = device_info_response["data"]
            except Exception as e:
                logger.error(f"Lỗi khi lấy thông tin thiết bị: {e}")
                
            # Nếu không lấy được thông tin thiết bị, sử dụng thông tin đã lưu trong database
            if not device_info:
                device_info = self.db.get_device_info()
                
            if not device_info:
                logger.warning("Không có thông tin thiết bị, đồng bộ dữ liệu có thể không đầy đủ")
                device_info = {}
                
            # Lấy cấu hình thiết bị
            device_config = self.db.get_all_device_config()
            
            # Gộp các trạng thái runtime (pause_job, device_is_working, device_message) vào device_info
            for runtime_key in ["pause_job", "device_is_working", "device_message"]:
                if runtime_key in device_config:
                    device_info[runtime_key] = device_config.pop(runtime_key)
                else:
                    # Giá trị mặc định nếu chưa cấu hình
                    device_info[runtime_key] = False if runtime_key != "device_message" else ""
            
            # Loại bỏ golike_report khỏi device_config để gửi riêng
            golike_report = None
            if "golike_report" in device_config:
                golike_report = device_config.pop("golike_report")
            
            # Loại bỏ golike_api_base khỏi device_config
            if "golike_api_base" in device_config:
                device_config.pop("golike_api_base")
                logger.debug("Đã loại bỏ golike_api_base khỏi dữ liệu đồng bộ")
                
            # Lấy các tài khoản chưa đồng bộ
            pending_accounts = self.db.get_pending_sync_items("accounts", limit=50)
            
            # Lấy các job chưa đồng bộ
            pending_jobs = self.db.get_pending_sync_items("jobs_history", limit=50)
                
            # Tạo payload
            payload = {
                "device_id": device_id,
                "device_info": device_info,
                "device_config": device_config,
                "timestamp": int(time.time())
            }
            
            # Thêm golike_report nếu có
            if golike_report:
                payload["golike_report"] = golike_report
                
            # Thêm tài khoản chưa đồng bộ nếu có
            if pending_accounts:
                payload["accounts"] = pending_accounts
                logger.info(f"Đồng bộ {len(pending_accounts)} tài khoản chưa đồng bộ")
                
            # Thêm job chưa đồng bộ nếu có
            if pending_jobs:
                payload["jobs"] = pending_jobs
                logger.info(f"Đồng bộ {len(pending_jobs)} job chưa đồng bộ")
                
            # Gửi dữ liệu
            self._safe_publish(config.MQTT_TOPIC_CLIENT_SYNC, json.dumps(payload))
            
        except Exception as e:
            logger.exception(e, "Lỗi khi đồng bộ dữ liệu với server")
    
    def start_sync_thread(self):
        """Bắt đầu thread đồng bộ tự động"""
        if self.sync_thread is not None and self.sync_thread.is_alive():
            logger.warning("Thread đồng bộ đã đang chạy")
            return
            
        self.running = True
        self.stop_event.clear()
        self.sync_thread = threading.Thread(target=self._sync_loop, daemon=True)
        self.sync_thread.start()
        logger.info("Đã khởi động thread đồng bộ tự động")
    
    def _sync_loop(self):
        """Loop đồng bộ tự động"""
        logger.info(f"Bắt đầu đồng bộ tự động mỗi {self.sync_interval} giây")

        while not self.stop_event.is_set() and self.running:
            try:
                if self.is_connected:
                    self.sync_data()
            except Exception as e:
                logger.error(f"Lỗi trong quá trình đồng bộ tự động: {str(e)}")
                
            # Nghỉ đến lần đồng bộ tiếp theo
            for _ in range(self.sync_interval):
                if self.stop_event.is_set() or not self.running:
                    break
                time.sleep(1)
    
    def stop_sync_thread(self):
        """Dừng thread đồng bộ tự động"""
        self.running = False
        self.stop_event.set()
        if self.sync_thread is not None:
            self.sync_thread.join(timeout=2.0)
            self.sync_thread = None
        logger.info("Đã dừng thread đồng bộ tự động")
    
    def disconnect(self):
        """Ngắt kết nối MQTT"""
        self.stop_sync_thread()
        
        if self.client is not None:
            self.client.loop_stop()
            self.client.disconnect()
            self.is_connected = False
            logger.info("Đã ngắt kết nối MQTT")
    
    def setup_mqtt_handlers(self):
        """Thiết lập các handler cho MQTT tasks"""
        # Đăng ký các task handler mặc định
        self.register_task_handler("update_config", self._handle_update_device_config)
        self.register_task_handler("update_synced", self._handle_update_synced)
        self.register_task_handler("account_update", self._handle_account_update)
        
        logger.info("Đã thiết lập các MQTT task handler")
        
    def _handle_update_device_config(self, task_data):
        """
        Xử lý task cập nhật cấu hình thiết bị
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            
            logger.info(f"Nhận yêu cầu cập nhật cấu hình thiết bị từ server (task_id: {task_id})")
            config_data = task_data.get("config_data", {})
            if not config_data:
                logger.warning("Dữ liệu cấu hình thiết bị rỗng")
                self.send_task_report(task_id, device_id, "failed", "Dữ liệu cấu hình thiết bị rỗng")
                return
            
            # Lưu từng cấu hình thiết bị
            success = self.db.save_device_config(config_data)
            
            if success:
                logger.info(f"Đã cập nhật cấu hình thiết bị: {', '.join(config_data.keys())}")
                
                # Cập nhật sync_interval nếu nó thay đổi
                if "sync_interval" in config_data:
                    new_sync_interval = config_data["sync_interval"]
                    if new_sync_interval != self.sync_interval:
                        logger.info(f"Cập nhật sync_interval từ {self.sync_interval} thành {new_sync_interval}")
                        self.sync_interval = new_sync_interval
                        
                        # Khởi động lại thread đồng bộ nếu đang chạy
                        if self.sync_thread is not None and self.sync_thread.is_alive():
                            logger.info("Khởi động lại thread đồng bộ với khoảng thời gian mới")
                            self.stop_sync_thread()
                            self.start_sync_thread()
                
                # Thông báo cho JobService nếu có thay đổi liên quan đến jobs
                job_related_keys = ["max_jobs_per_day", "max_jobs_per_session", "job_interval_seconds","care_in_working_job"]
                if any(key in config_data for key in job_related_keys):
                    logger.info("Áp dụng cấu hình mới cho JobService")
                    # Không cần khởi động lại, JobService sẽ lấy cấu hình mới khi cần
                
                # Gửi báo cáo thành công
                self.send_task_report(task_id, device_id, "success", f"Đã cập nhật cấu hình thiết bị: {', '.join(config_data.keys())}")
                
            else:
                error_msg = "Không thể cập nhật cấu hình thiết bị"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
            
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật cấu hình thiết bị: {str(e)}"
            logger.error(error_msg)
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def _handle_update_synced(self, task_data):
        """
        Xử lý task cập nhật trạng thái đồng bộ
        
        Args:
            task_data: Dữ liệu task từ server
        """
        try:
            logger.info("Nhận yêu cầu cập nhật trạng thái đồng bộ từ server")
            data = task_data.get("data", {})
            
            # Đánh dấu tài khoản đã đồng bộ
            if "accounts" in data and isinstance(data["accounts"], list):
                for account_uuid in data["accounts"]:
                    self.db.mark_as_synced("accounts", account_uuid)
                    logger.debug(f"Đánh dấu tài khoản đã đồng bộ: {account_uuid}")
                logger.info(f"Đã cập nhật {len(data['accounts'])} tài khoản đã đồng bộ")
            
            # Đánh dấu job đã đồng bộ
            if "jobs" in data and isinstance(data["jobs"], list):
                for job_uuid in data["jobs"]:
                    self.db.mark_as_synced("jobs_history", job_uuid)
                    logger.debug(f"Đánh dấu job đã đồng bộ: {job_uuid}")
                logger.info(f"Đã cập nhật {len(data['jobs'])} job đã đồng bộ")
            
            # Hiển thị thông báo từ server nếu có
            if "message" in task_data:
                logger.info(f"Thông báo từ server: {task_data['message']}")
                
        except Exception as e:
            logger.error(f"Lỗi xử lý cập nhật trạng thái đồng bộ: {str(e)}")
            
    
    def _handle_account_update(self, task_data):
        """
        Xử lý task cập nhật thông tin tài khoản
        
        Args:
            task_data: Dữ liệu task từ server có cấu trúc:
            {
                "task_id": "task_1749399536272_641",
                "device_id": "a125f624f41a4f7c",
                "task_type": "account_update",
                "data": {
                    "app": "instagram",
                    "status": "inactive",
                    "job_max_day": 108,
                    "job_today": 30,
                    "job_enable": true,
                    "account_uuid": "7ed9557d-76a4-47f7-8850-7ceef0c690af"
                },
                "message": "",
                "status": "pending"
            }
        """
        try:
            task_id = task_data.get("task_id")
            device_id = task_data.get("device_id")
            data = task_data.get("data", {})
            
            logger.info(f"Nhận yêu cầu cập nhật tài khoản từ server (task_id: {task_id})")
            
            if not data or "account_uuid" not in data:
                logger.warning("Dữ liệu tài khoản không hợp lệ")
                self.send_task_report(task_id, device_id, "failed", "Dữ liệu tài khoản không hợp lệ")
                return
                
            # Lấy tài khoản từ DB
            account = self.db.get_account_by_uuid(data["account_uuid"])
            if not account:
                error_msg = f"Không tìm thấy tài khoản với UUID: {data['account_uuid']}"
                logger.warning(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                return
                
            # Cập nhật thông tin tài khoản
            update_data = {}
            valid_fields = ["status", "job_max_day", "max_jobs_per_session", "job_enable","job_disable_until","max_follow_session","max_follow_day","disable_follow"]
            
            for key, value in data.items():
                if key in valid_fields:
                    update_data[key] = value
                    
            if not update_data:
                logger.warning("Không có thông tin cần cập nhật")
                self.send_task_report(task_id, device_id, "failed", "Không có thông tin cần cập nhật")
                return
                    
            # Lưu lại vào DB
            update_data["is_sync"] = False
            success = self.db.update_account(account["id"], update_data)
            
            if success:
                logger.info(f"Đã cập nhật tài khoản {account.get('unique_username', '')} (UUID: {data['account_uuid']}) với dữ liệu: {update_data}")
                self.send_task_report(task_id, device_id, "success", f"Đã cập nhật tài khoản {account.get('unique_username', '')}")
            else:
                error_msg = f"Không thể cập nhật tài khoản {account.get('unique_username', '')}"
                logger.error(error_msg)
                self.send_task_report(task_id, device_id, "failed", error_msg)
                
        except Exception as e:
            error_msg = f"Lỗi xử lý cập nhật tài khoản: {str(e)}"
            logger.error(error_msg)
            self.send_task_report(task_id, device_id, "failed", error_msg)

    def start(self):
        """
        Khởi động MQTT service
        
        Returns:
            bool: True nếu khởi động thành công, False nếu thất bại
        """
        try:
            # Thiết lập các handler trước khi kết nối
            self.setup_mqtt_handlers()
            self.connect()
            # Khởi động sync thread sau khi kết nối thành công
            self.start_sync_thread()
            logger.info("Đã khởi động MQTT service và đồng bộ dữ liệu")
            
            return True
        except Exception as e:
            logger.exception(e, "Lỗi khi khởi động MQTT service")
            return False

    def _on_message(self, client, userdata, msg, properties=None):
        """
        Callback khi nhận được message từ MQTT broker
        
        Args:
            client: MQTT client instance
            userdata: User data được truyền vào client
            msg: Message object chứa topic và payload
            properties: Properties của message (MQTT v5)
        """
        try:
            logger.info(f"Nhận message từ topic: {msg.topic}")
            
            # Parse payload JSON
            try:
                payload = json.loads(msg.payload.decode('utf-8'))
            except json.JSONDecodeError:
                logger.error(f"Không thể parse JSON từ payload: {msg.payload}")
                return
            
            # Xử lý message dựa trên topic
            if msg.topic == self.topic_server_task:
                self._handle_server_task(payload)
            else:
                logger.warning(f"Nhận message từ topic không xác định: {msg.topic}")
            
        except Exception as e:
            logger.error(f"Lỗi khi xử lý message: {str(e)}")

    def _handle_server_task(self, payload: Dict[str, Any]):
        """
        Xử lý task từ server
        
        Args:
            payload: Dữ liệu task từ server
        """
        try:
            task_type = payload.get("task_type")
            if not task_type:
                logger.warning("Nhận task không có task_type")
                return
            
            logger.info(f"Nhận task từ server: {task_type}")
            
            # Gọi handler tương ứng nếu đã đăng ký
            if task_type in self.task_handlers:
                self.task_handlers[task_type](payload)
            else:
                logger.warning(f"Không tìm thấy handler cho task_type: {task_type}")
            
        except Exception as e:
            logger.error(f"Lỗi xử lý task từ server: {str(e)}")').decode('utf-8'))
