import base64
exec(base64.b64decode('import requests
import json
import random
import time
import re
import subprocess
import os
import config
from typing import Dict, Any, Optional, Tuple, List, Union
try:
    from lxml import etree
    LXML_AVAILABLE = True
except ImportError:
    LXML_AVAILABLE = False

class HelperService:
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.is_adb_connected = False
        self.device_ip = None
        
        # Nếu base_url chứa địa chỉ IP, thử kết nối ADB
        ip_match = re.search(r"http://([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)", base_url)
        if ip_match:
            self.device_ip = ip_match.group(1)
            self.check_and_connect_adb()

    def check_and_connect_adb(self) -> bool:
        """
        Kiểm tra và kết nối ADB tới thiết bị
        """
        try:
            # Kiểm tra ADB có được cài đặt không
            subprocess.run(["adb", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # Kết nối ADB đến thiết bị sử dụng địa chỉ từ config
            adb_address = f"{config.ADB_HOST}:{config.ADB_PORT}"
            
            # Thử kết nối đến thiết bị
            connect_process = subprocess.run(
                ["adb", "connect", adb_address],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Kiểm tra kết quả kết nối
            if "connected" in connect_process.stdout.lower():
                self.is_adb_connected = True
                print(f"Đã kết nối ADB thành công đến {adb_address}")
                return True
                
        except (subprocess.SubprocessError, FileNotFoundError) as e:
            print(f"Không thể kết nối ADB: {e}")
        
        self.is_adb_connected = False
        return False

    def _get_adb_device_param(self) -> List[str]:
        """
        Trả về tham số thiết bị cho lệnh ADB
        
        Returns:
            List[str]: Danh sách tham số [-s, device_id] hoặc list rỗng nếu không có thiết bị
        """
        if self.is_adb_connected:
            adb_address = f"{config.ADB_HOST}:{config.ADB_PORT}"
            return ["-s", adb_address]
        return []

    def _make_request(self, endpoint: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Thực hiện request API và trả về kết quả dạng JSON hoặc XML
        """
        url = f"{self.base_url}/{endpoint}"
        try:
            # Thiết lập timeout cho request
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            # Kiểm tra Content-Type
            content_type = response.headers.get('Content-Type', '')
            if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                # Trả về XML dưới dạng text
                return {"status": "success", "data": response.text}
            else:
                # Trả về JSON
                return response.json()
        except requests.exceptions.Timeout:
            print(f"Request timeout khi gọi {url}, thử khởi động lại helper app")
            self._restart_helper_app()
            # Thử lại request sau khi khởi động lại helper app
            try:
                time.sleep(1)  # Chờ 1 giây để ứng dụng khởi động
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                
                content_type = response.headers.get('Content-Type', '')
                if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                    return {"status": "success", "data": response.text}
                else:
                    return response.json()
            except requests.exceptions.RequestException as e:
                print(f"Vẫn lỗi sau khi thử khởi động lại helper app: {e}")
                return {"status": "error", "message": str(e)}
        except requests.exceptions.ConnectionError as e:
            # Bắt lỗi kết nối bị từ chối hoặc không thể kết nối
            print(f"Lỗi kết nối khi gọi {url}, thử khởi động lại helper app: {e}")
            self._restart_helper_app()
            # Thử lại request sau khi khởi động lại helper app
            try:
                time.sleep(2)  # Chờ 2 giây để ứng dụng khởi động
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                
                content_type = response.headers.get('Content-Type', '')
                if 'application/xml' in content_type or endpoint == 'dump-screen-xml':
                    return {"status": "success", "data": response.text}
                else:
                    return response.json()
            except requests.exceptions.RequestException as e:
                print(f"Vẫn lỗi sau khi thử khởi động lại helper app: {e}")
                return {"status": "error", "message": str(e)}
        except requests.exceptions.RequestException as e:
            print(f"Lỗi khi thực hiện request: {e}")
            return {"status": "error", "message": str(e)}

    def _restart_helper_app(self) -> bool:
        """
        Khởi động lại helper app sử dụng ADB
        
        Returns:
            bool: True nếu thành công, False nếu thất bại
        """
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Khởi động helper app bằng ADB
                cmd = ["adb"] + device_params + ["shell", "am", "start", "-n", "com.dndvina.helper/.MainActivity"]
                subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                print("Đã khởi động lại helper app qua ADB")
                return True
            except subprocess.SubprocessError as e:
                print(f"Lỗi khi khởi động lại helper app qua ADB: {e}")
                return False
        else:
            print("Không thể khởi động lại helper app vì ADB chưa được kết nối")
            return False

    def tap(self, x: int, y: int) -> Dict[str, Any]:
        """
        Chạm vào vị trí x,y trên màn hình
        """
        return self._make_request("tap", params={"x": x, "y": y})

    def tap_element(self, bounds: str) -> Dict[str, Any]:
        """
        Chạm vào một phần tử dựa trên bounds của nó
        Format bounds: "[x1,y1][x2,y2]"
        """
        # Phân tích bounds để lấy tọa độ
        match = re.match(r"\[(\d+),(\d+)\]\[(\d+),(\d+)\]", bounds)
        if match:
            x1, y1, x2, y2 = map(int, match.groups())
            # Chọn một điểm ngẫu nhiên trong bounds
            x = random.randint(x1, x2)
            y = random.randint(y1, y2)
            return self.tap(x, y)
        return {"status": "error", "message": "Định dạng bounds không hợp lệ"}

    def swipe_up(self) -> Dict[str, Any]:
        """
        Vuốt lên từ vị trí ngẫu nhiên phù hợp
        """
        return self._make_request("swipe_up")

    def swipe_down(self) -> Dict[str, Any]:
        """
        Vuốt xuống từ vị trí ngẫu nhiên phù hợp
        """
        return self._make_request("swipe_down")

    def input_text(self, text: str, speed: float = 1.0, 
                  direct_mode: bool = False, perfect_mode: bool = True) -> Dict[str, Any]:
        """
        Mô phỏng gõ phím với tốc độ ngẫu nhiên giống người thật
        """
        params = {
            "text": text,
            "speed": speed,
            "direct_mode": str(direct_mode).lower(),
            "perfect_mode": str(perfect_mode).lower()
        }
        return self._make_request("input_text", params=params)

    def show_toast(self, message: str, type_: str = "info", 
                  position: str = "bottom") -> Dict[str, Any]:
        """
        Hiển thị thông báo toast
        """
        params = {
            "message": message,
            "type": type_,
            "position": position
        }
        return self._make_request("toast-message", params=params)

    def get_device_info(self) -> Dict[str, Any]:
        """
        Lấy thông tin chi tiết về thiết bị
        """
        return self._make_request("device-info")

    def dump_screen_xml(self) -> str:
        """
        Dump toàn bộ cấu trúc XML của màn hình hiện tại
        
        Trả về nội dung XML dưới dạng chuỗi
        """
        response = self._make_request("dump-screen-xml")
        if response["status"] == "success":
            return response["data"]
        return ""

    def open_app(self, package: str, activity: str = None) -> Dict[str, Any]:
        """
        Mở một ứng dụng với package name và activity cụ thể
        """
        params = {"package": package}
        if activity:
            params["activity"] = activity
        return self._make_request("open_app", params=params)

    def close_app(self, package: str) -> Dict[str, Any]:
        """
        Đóng một ứng dụng đang chạy
        Ưu tiên sử dụng ADB nếu đã kết nối
        """
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Đóng ứng dụng bằng ADB
                cmd = ["adb"] + device_params + ["shell", f"am force-stop {package}"]
                subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                return {"status": "success", "message": f"Đã đóng {package} bằng ADB"}
            except subprocess.SubprocessError as e:
                print(f"Lỗi khi đóng ứng dụng bằng ADB: {e}")
                # Nếu lỗi, thử phương thức HTTP
        
        # Sử dụng HTTP API nếu không có ADB hoặc ADB bị lỗi
        return self._make_request("press_home")

    def _sanitize_xml(self, xml_content: str) -> str:
        """
        Xử lý các ký tự đặc biệt trong XML để tránh lỗi khi phân tích
        
        Args:
            xml_content: Chuỗi XML cần xử lý
            
        Returns:
            str: Chuỗi XML đã được xử lý
        """
        # Thay thế các ký tự & không hợp lệ bằng &amp;
        # Nhưng giữ nguyên các entity hợp lệ như &amp;, &lt;, &gt;, &quot;, &apos;
        xml_content = re.sub(r'&(?!(amp|lt|gt|quot|apos);)', '&amp;', xml_content)
        
        # Loại bỏ các ký tự điều khiển không hợp lệ trong XML
        xml_content = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F]', '', xml_content)
        
        return xml_content

    def find_element_in_xml(self, xml_content: str, 
                          text: str = None, content_desc: str = None, 
                          resource_id: str = None, class_name: str = None) -> Optional[Dict[str, Any]]:
        """
        Tìm phần tử trong XML dựa trên text, content-desc, resource-id hoặc class
        
        Args:
            xml_content: Nội dung XML
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            class_name: Class name của phần tử cần tìm
            
        Returns:
            Optional[Dict[str, Any]]: Phần tử đầu tiên tìm thấy hoặc None nếu không tìm thấy
        """
        if not xml_content:
            return None
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Xây dựng XPath query dựa trên các điều kiện
                conditions = []
                if text is not None:
                    conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    conditions.append(f'@class="{class_name}"')
                
                xpath_query = "//node"
                if conditions:
                    xpath_query += "[" + " and ".join(conditions) + "]"
                
                # Tìm phần tử đầu tiên phù hợp
                element = root.xpath(xpath_query)
                if element:
                    return self._element_to_dict(element[0])
                    
            except Exception as e:
                print(f"Lỗi khi tìm phần tử với lxml: {e}")
        
        # Fallback: Tìm kiếm bằng regex
        if text:
            pattern = f'text="{text}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa text
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        if content_desc:
            pattern = f'content-desc="{content_desc}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa content-desc
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        if resource_id:
            pattern = f'resource-id="{resource_id}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa resource-id
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
                    
        if class_name:
            pattern = f'class="{class_name}"'
            match = re.search(pattern, xml_content)
            if match:
                # Tìm thẻ node chứa class
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    return self._extract_attributes(node_content)
        
        return None
    
    def find_all_elements_in_xml(self, xml_content: str, 
                               text: str = None, content_desc: str = None, 
                               resource_id: str = None, class_name: str = None) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử trong XML phù hợp với điều kiện
        """
        results = []
        
        if not xml_content:
            return results
            
        if LXML_AVAILABLE:
            try:
                # Xử lý các ký tự đặc biệt trong XML để tránh lỗi EntityRef
                xml_content = self._sanitize_xml(xml_content)
                
                # Parse XML với tùy chọn recover để xử lý lỗi
                parser = etree.XMLParser(recover=True)
                root = etree.fromstring(xml_content.encode('utf-8'), parser=parser)
                
                # Xây dựng XPath query dựa trên các điều kiện
                conditions = []
                if text is not None:
                    conditions.append(f'@text="{text}"')
                if content_desc is not None:
                    conditions.append(f'@content-desc="{content_desc}"')
                if resource_id is not None:
                    conditions.append(f'@resource-id="{resource_id}"')
                if class_name is not None:
                    conditions.append(f'@class="{class_name}"')
                
                xpath_query = "//node"
                if conditions:
                    xpath_query += "[" + " and ".join(conditions) + "]"
                
                # Tìm tất cả phần tử phù hợp
                elements = root.xpath(xpath_query)
                for element in elements:
                    results.append(self._element_to_dict(element))
                    
            except Exception as e:
                print(f"Lỗi khi tìm phần tử với lxml: {e}")
                print(f"Thử tìm phần tử bằng phương thức thay thế...")
        
        # Fallback: Tìm kiếm bằng regex (chỉ trả về kết quả đơn giản)
        if not results and text:
            pattern = f'text="{text}"'
            for match in re.finditer(pattern, xml_content):
                start_pos = xml_content.rfind('<node', 0, match.start())
                if start_pos != -1:
                    end_pos = xml_content.find('>', start_pos) + 1
                    node_content = xml_content[start_pos:end_pos]
                    results.append(self._extract_attributes(node_content))
        
        return results
    
    def _extract_attributes(self, node_content: str) -> Dict[str, Any]:
        """
        Trích xuất các thuộc tính từ nội dung của một thẻ node
        """
        attributes = {}
        
        # Các thuộc tính cần trích xuất
        attr_patterns = {
            "class": r'class="([^"]*)"',
            "package": r'package="([^"]*)"',
            "resource-id": r'resource-id="([^"]*)"',
            "text": r'text="([^"]*)"',
            "content-desc": r'content-desc="([^"]*)"',
            "bounds": r'bounds="([^"]*)"',
            "checkable": r'checkable="([^"]*)"',
            "checked": r'checked="([^"]*)"',
            "clickable": r'clickable="([^"]*)"',
            "enabled": r'enabled="([^"]*)"',
            "focusable": r'focusable="([^"]*)"',
            "focused": r'focused="([^"]*)"',
            "scrollable": r'scrollable="([^"]*)"',
            "long-clickable": r'long-clickable="([^"]*)"',
            "password": r'password="([^"]*)"',
            "selected": r'selected="([^"]*)"'
        }
        
        for attr_name, pattern in attr_patterns.items():
            match = re.search(pattern, node_content)
            if match:
                attributes[attr_name] = match.group(1)
                
        return attributes

    def _element_to_dict(self, element) -> Dict[str, Any]:
        """
        Chuyển đổi một phần tử XML từ lxml thành dict
        """
        result = {}
        
        # Lấy tất cả thuộc tính
        for key, value in element.attrib.items():
            result[key] = value
            
        return result

    def find_element(self, text: str = None, content_desc: str = None, 
                    resource_id: str = None, class_name: str = None) -> Optional[Dict[str, Any]]:
        """
        Tìm phần tử trên màn hình dựa trên text, content-desc, resource-id hoặc class
        """
        xml_content = self.dump_screen_xml()
        return self.find_element_in_xml(xml_content, text, content_desc, resource_id, class_name)

    def find_all_elements(self, text: str = None, content_desc: str = None, 
                        resource_id: str = None, class_name: str = None) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử trên màn hình phù hợp với điều kiện
        """
        xml_content = self.dump_screen_xml()
        return self.find_all_elements_in_xml(xml_content, text, content_desc, resource_id, class_name)

    def is_element_selected(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được chọn hay không
        """
        return element.get("selected") == "true"

    def wait_for_element(self, text: str = None, content_desc: str = None, 
                        resource_id: str = None, timeout: int = 30, 
                        check_interval: int = 1) -> Optional[Dict[str, Any]]:
        """
        Chờ đợi cho đến khi một phần tử xuất hiện trên màn hình
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            element = self.find_element(text, content_desc, resource_id)
            if element:
                return element
                
            time.sleep(check_interval)
        
        return None
        
    def get_element_text(self, element: Dict[str, Any]) -> str:
        """
        Lấy text của một phần tử
        """
        return element.get("text", "")
    
    def get_element_content_desc(self, element: Dict[str, Any]) -> str:
        """
        Lấy content-desc của một phần tử
        """
        return element.get("content-desc", "")
    
    def get_element_resource_id(self, element: Dict[str, Any]) -> str:
        """
        Lấy resource-id của một phần tử
        """
        return element.get("resource-id", "")
    
    def get_element_class(self, element: Dict[str, Any]) -> str:
        """
        Lấy class của một phần tử
        """
        return element.get("class", "")
    
    def get_element_enabled(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được kích hoạt không
        """
        return element.get("enabled") == "true"
    
    def get_element_clickable(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có thể nhấp vào không
        """
        return element.get("clickable") == "true"
    
    def get_element_focused(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được focus không
        """
        return element.get("focused") == "true"
    
    def get_element_checked(self, element: Dict[str, Any]) -> bool:
        """
        Kiểm tra xem phần tử có được chọn không (cho checkbox)
        """
        return element.get("checked") == "true"
    
    def get_element_bounds(self, element: Dict[str, Any]) -> Tuple[int, int, int, int]:
        """
        Lấy tọa độ bounds của phần tử dưới dạng tuple (x1, y1, x2, y2)
        """
        bounds = element.get("bounds", "[0,0][0,0]")
        match = re.match(r"\[(\d+),(\d+)\]\[(\d+),(\d+)\]", bounds)
        if match:
            return tuple(map(int, match.groups()))
        return (0, 0, 0, 0)
    
    def get_element_center(self, element: Dict[str, Any]) -> Tuple[int, int]:
        """
        Lấy tọa độ trung tâm của phần tử
        """
        x1, y1, x2, y2 = self.get_element_bounds(element)
        return ((x1 + x2) // 2, (y1 + y2) // 2)
    
    def tap_element_center(self, element: Dict[str, Any]) -> Dict[str, Any]:
        """
        Chạm vào trung tâm của phần tử
        """
        x, y = self.get_element_center(element)
        return self.tap(x, y)
    
    def long_press(self, x: int, y: int, duration: int = 1000) -> Dict[str, Any]:
        """
        Nhấn giữ tại vị trí x,y trong một khoảng thời gian
        """
        params = {
            "x": x,
            "y": y,
            "duration": duration
        }
        return self._make_request("long_press", params=params)
    
    def long_press_element(self, element: Dict[str, Any], duration: int = 1000) -> Dict[str, Any]:
        """
        Nhấn giữ tại trung tâm của phần tử
        """
        x, y = self.get_element_center(element)
        return self.long_press(x, y, duration)
    
    def swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, 
             duration: int = 500) -> Dict[str, Any]:
        """
        Vuốt từ điểm (start_x, start_y) đến điểm (end_x, end_y)
        """
        params = {
            "start_x": start_x,
            "start_y": start_y,
            "end_x": end_x,
            "end_y": end_y,
            "duration": duration
        }
        return self._make_request("swipe", params=params)
    
    def swipe_between_elements(self, start_element: Dict[str, Any], 
                              end_element: Dict[str, Any], 
                              duration: int = 500) -> Dict[str, Any]:
        """
        Vuốt từ phần tử start_element đến phần tử end_element
        """
        start_x, start_y = self.get_element_center(start_element)
        end_x, end_y = self.get_element_center(end_element)
        return self.swipe(start_x, start_y, end_x, end_y, duration)
    
    def wait_for_element_to_disappear(self, text: str = None, content_desc: str = None, 
                                    resource_id: str = None, timeout: int = 30, 
                                    check_interval: int = 1) -> bool:
        """
        Chờ đợi cho đến khi một phần tử biến mất khỏi màn hình
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            element = self.find_element(text, content_desc, resource_id)
            if not element:
                return True
                
            time.sleep(check_interval)
        
        return False
    
    def wait_for_any_element(self, elements_to_find: List[Dict[str, str]], 
                           timeout: int = 30, check_interval: int = 1) -> Optional[Dict[str, Any]]:
        """
        Chờ đợi cho đến khi bất kỳ phần tử nào trong danh sách xuất hiện
        
        elements_to_find là danh sách các dict với các khóa: text, content_desc, resource_id
        """
        start_time = time.time()
        while time.time() - start_time < timeout:
            for element_criteria in elements_to_find:
                element = self.find_element(
                    element_criteria.get("text"), 
                    element_criteria.get("content_desc"), 
                    element_criteria.get("resource_id")
                )
                if element:
                    return element
                
            time.sleep(check_interval)
        
        return None
    
    def get_screen_size(self) -> Tuple[int, int]:
        """
        Lấy kích thước màn hình (width, height)
        """
        device_info = self.get_device_info()
        if device_info["status"] == "success" and "screen_size" in device_info["data"]:
            size = device_info["data"]["screen_size"]
            return (size["width"], size["height"])
        return (0, 0)
    
    def take_screenshot(self, file_path: str = None) -> Dict[str, Any]:
        """
        Chụp ảnh màn hình và lưu vào file_path (nếu được cung cấp)
        """
        params = {}
        if file_path:
            params["file_path"] = file_path
        return self._make_request("screenshot", params=params)
    
    def get_current_activity(self) -> str:
        """
        Lấy tên activity hiện tại
        """
        device_info = self.get_device_info()
        if device_info["status"] == "success" and "current_activity" in device_info["data"]:
            return device_info["data"]["current_activity"]
        return ""
    
    def get_current_package(self) -> str:
        """
        Lấy tên package hiện tại
        """
        device_info = self.get_device_info()
        if device_info["status"] == "success" and "current_package" in device_info["data"]:
            return device_info["data"]["current_package"]
        return ""
    
    def press_back(self) -> Dict[str, Any]:
        """
        Nhấn nút Back
        """
        return self._make_request("press_back")
    
    def press_home(self) -> Dict[str, Any]:
        """
        Nhấn nút Home
        """
        return self._make_request("press_home")
    
    def press_recent_apps(self) -> Dict[str, Any]:
        """
        Nhấn nút Recent Apps
        """
        return self._make_request("press_recent_apps")

    def is_app_installed(self, package_name: str) -> bool:
        """
        Kiểm tra xem ứng dụng đã được cài đặt trên thiết bị chưa
        Ưu tiên sử dụng ADB nếu đã kết nối
        
        Args:
            package_name: Tên package của ứng dụng cần kiểm tra
            
        Returns:
            bool: True nếu ứng dụng đã cài đặt, False nếu chưa
        """
        # Ưu tiên sử dụng ADB nếu đã kết nối
        if self.is_adb_connected:
            try:
                # Lấy tham số thiết bị
                device_params = self._get_adb_device_param()
                
                # Kiểm tra ứng dụng bằng ADB
                cmd = ["adb"] + device_params + ["shell", f"pm list packages | grep -x package:{package_name}"]
                result = subprocess.run(
                    cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Nếu có kết quả, ứng dụng đã được cài đặt
                return package_name in result.stdout
            except subprocess.SubprocessError:
                # Nếu lỗi ADB, sử dụng API HTTP
                pass
        
        # Sử dụng HTTP API
        response = self._make_request("app-installed", {"package": package_name})
        if response["status"] == "success":
            return response["data"].get("installed", False)
        return False
        
    def find_elements(self, class_name: str = None, text: str = None, 
                      content_desc: str = None, resource_id: str = None) -> List[Dict[str, Any]]:
        """
        Tìm tất cả các phần tử theo class_name, text, content_desc hoặc resource_id
        Đây là một phương thức tiện lợi kết hợp dump_screen_xml và find_all_elements_in_xml
        
        Args:
            class_name: Class name của phần tử cần tìm
            text: Text của phần tử cần tìm
            content_desc: Content description của phần tử cần tìm
            resource_id: Resource ID của phần tử cần tìm
            
        Returns:
            List[Dict[str, Any]]: Danh sách các phần tử tìm thấy
        """
        # Lấy XML màn hình hiện tại
        screen_xml = self.dump_screen_xml()
        if not screen_xml:
            return []
            
        # Sử dụng find_all_elements_in_xml để tìm các phần tử
        return self.find_all_elements_in_xml(
            screen_xml, 
            text=text, 
            content_desc=content_desc, 
            resource_id=resource_id,
            class_name=class_name
        )

    def open_url(self, url: str) -> Dict[str, Any]:
        """
        Mở một URL trên thiết bị. Hữu ích để mở các link mạng xã hội trực tiếp.
        
        Args:
            url: URL cần mở (ví dụ: https://www.instagram.com/username/)
            
        Returns:
            Dict[str, Any]: Kết quả từ server
        """
        return self._make_request("open_url", params={"url": url})

    def get_clipboard(self) -> str:
        """
        Lấy nội dung clipboard từ thiết bị
        
        Returns:
            str: Nội dung clipboard hoặc chuỗi rỗng nếu không có nội dung
        """
        response = self._make_request("clipboard")
        if response.get("status") == "success" and response.get("data", {}).get("has_content"):
            return response["data"]["clipboard_text"]
        return ""

    def swipe_left(self) -> Dict[str, Any]:
        """
        Vuốt sang trái (tối ưu cho ngón cái tay phải)
        """
        return self._make_request("swipe_left")

    def swipe_right(self) -> Dict[str, Any]:
        """
        Vuốt sang phải (tối ưu cho ngón cái tay phải)
        """
        return self._make_request("swipe_right")

    def is_installed(self, package: str) -> Dict[str, Any]:
        """
        Kiểm tra xem ứng dụng có được cài đặt hay không (dùng API mới)
        Args:
            package: Tên package của ứng dụng
        Returns:
            dict: Kết quả kiểm tra
        """
        return self._make_request("is_installed", params={"package": package})

# Ví dụ sử dụng
if __name__ == "__main__":
    helper = HelperService()
    
    # Lấy kích thước màn hình
    width, height = helper.get_screen_size()
    print(f"Kích thước màn hình: {width}x{height}")
    
    # Mở TikTok
    helper.open_app("com.ss.android.ugc.trill")
    
    # Chờ đợi cho đến khi nút "Trang chủ" hoặc nút "Khám phá" xuất hiện
    elements_to_find = [
        {"content_desc": "Trang chủ"},
        {"content_desc": "Khám phá"}
    ]
    
    element = helper.wait_for_any_element(elements_to_find)
    
    if element:
        print(f"Đã tìm thấy phần tử: {helper.get_element_content_desc(element)}")
        helper.tap_element_center(element)
    else:
        print("Không tìm thấy phần tử nào sau thời gian chờ") ').decode('utf-8'))
