import base64
exec(base64.b64decode('import time
import requests
from typing import Dict, Any, Optional
import utils

# Tạo logger riêng cho ProxyService
logger = utils.get_logger("ProxyService")

class ProxyService:
    """
    Service quản lý proxy và tương tác với proxy server
    """
    
    def __init__(self, db_service, helper_service):
        """
        Khởi tạo ProxyService
        
        Args:
            db_service: DatabaseService để lưu trữ dữ liệu
            helper_service: HelperService để tương tác với thiết bị
        """
        self.db = db_service
        self.helper = helper_service
        
        # Trạng thái proxy hiện tại
        self.current_proxy_id = None
        self.current_proxy_name = None
        self.current_proxy_table = None  # Table name được cấp từ proxy server
        self.proxy_last_update = 0  # Thời gian update cuối cùng
        
        # Đếm số lần thất bại khi setup proxy
        self.proxy_setup_fail_count = 0
        
        # Xóa proxy table name cũ khỏi device config khi khởi tạo
        self.db.set_device_config("proxy_table_name", None)
    
    def _proxy_api_call(self, endpoint: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Gọi API proxy server
        
        Args:
            endpoint: Endpoint API (register, update, unregister, reset-ip)
            data: Dữ liệu gửi
            
        Returns:
            Dict response hoặc None nếu lỗi
        """
        try:
            proxy_server = self.db.get("proxy_server", "http://10.0.0.5:9032")
            url = f"{proxy_server}/{endpoint}"
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Proxy API {endpoint} failed with status {response.status_code}: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Lỗi khi gọi Proxy API {endpoint}: {e}")
            return None
    
    def register_proxy(self) -> bool:
        """
        Đăng ký với proxy server để được cấp phát table
        
        Returns:
            bool: True nếu được cấp table hoặc đã có table, False nếu vào queue hoặc lỗi
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.error("Không thể lấy local IP, bỏ qua đăng ký proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("register", data)
            
            if not response:
                return False
                
            status = response.get("status")
            
            if status == "success":
                # Được cấp table thành công
                table_name = response.get("data", {}).get("table_name")
                action = response.get("data", {}).get("action")
                
                self.current_proxy_table = table_name
                self.current_proxy_name = f"{table_name}"
                
                # Lưu proxy table name vào device config để gửi lên server
                self.db.set_device_config("proxy_table_name", table_name)
                
                logger.info(f"Proxy đã được cấp table: {table_name} (action: {action})")
                
                # Gọi reset-ip để đổi IP mới
                if table_name:
                    ppoe_name = table_name.replace("to_", "")  # Chuyển "to_pppoe2" thành "pppoe2"
                    reset_data = {"ppoe_name": f"{ppoe_name}"} 
                        
                    reset_response = self._proxy_api_call("reset-ip", reset_data)
                    if reset_response and reset_response.get("status") == "success":
                        logger.info(f"Đã reset IP cho {reset_data['ppoe_name']}")
                    else:
                        logger.warning(f"Không thể reset IP cho {reset_data['ppoe_name']}")
                
                return True
                
            elif status == "queued":
                # Vào queue chờ
                queue_position = response.get("data", {}).get("queue_position", 0)
                logger.info(f"Proxy server full, vào hàng đợi vị trí {queue_position}")
                return False
                
            else:
                logger.error(f"Proxy register thất bại: {response.get('message', 'Unknown error')}")
                return False
                
        except Exception as e:
            logger.exception(e, "Lỗi khi đăng ký proxy")
            return False
    
    def update_proxy(self) -> bool:
        """
        Cập nhật timestamp sử dụng proxy
        
        Returns:
            bool: True nếu update thành công
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.warning("Không thể lấy local IP, bỏ qua update proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("update", data)
            
            if response and response.get("status") == "success":
                self.proxy_last_update = time.time()
                # Log thông tin từ response nếu có
                data = response.get("data", {})
                table_name = data.get("table_name", "unknown")
                logger.debug(f"Proxy update thành công cho table: {table_name}")
                return True
            else:
                logger.warning(f"Proxy update thất bại: {response.get('message') if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.warning(f"Lỗi khi update proxy: {e}")
            return False
    
    def unregister_proxy(self) -> bool:
        """
        Hủy đăng ký và giải phóng table
        
        Returns:
            bool: True nếu unregister thành công
        """
        try:
            # Lấy local IP từ helper service
            local_ip = self.helper.get_local_ip()
            if not local_ip:
                logger.warning("Không thể lấy local IP, bỏ qua unregister proxy")
                return False
            
            data = {"local_ip": local_ip}
            response = self._proxy_api_call("unregister", data)
            
            if response and response.get("status") == "success":
                released_table = response.get("data", {}).get("released_table")
                logger.info(f"Đã unregister proxy và giải phóng table: {released_table}")
                
                # Reset trạng thái proxy
                self.current_proxy_table = None
                self.current_proxy_name = None
                self.proxy_last_update = 0
                
                # Xóa proxy table name khỏi device config
                self.db.set_device_config("proxy_table_name", None)
                
                return True
            else:
                logger.warning(f"Proxy unregister thất bại: {response.get('message') if response else 'No response'}")
                return False
                
        except Exception as e:
            logger.warning(f"Lỗi khi unregister proxy: {e}")
            return False
    
    def reset_ip(self, table_name: str = None) -> bool:
        """
        Reset IP cho proxy hiện tại hoặc table được chỉ định
        
        Args:
            table_name: Tên table cần reset IP (optional, nếu không có sẽ dùng table hiện tại)
            
        Returns:
            bool: True nếu reset thành công, False nếu thất bại
        """
        try:
            # Sử dụng table được chỉ định hoặc table hiện tại
            target_table = table_name or self.current_proxy_table
            
            if not target_table:
                logger.error("Không có table proxy để reset IP")
                return False
            
            # Chuyển table name thành ppoe name
            ppoe_name = target_table.replace("to_", "")  # Chuyển "to_pppoe2" thành "pppoe2"
            reset_data = {"ppoe_name": f"{ppoe_name}"}
            
            logger.info(f"Đang reset IP cho table: {target_table} (ppoe: {ppoe_name})")
            
            reset_response = self._proxy_api_call("reset-ip", reset_data)
            if reset_response and reset_response.get("status") == "success":
                logger.info(f"Đã reset IP cho {ppoe_name} thành công")
                return True
            else:
                error_msg = reset_response.get('message') if reset_response else 'No response'
                logger.error(f"Không thể reset IP cho {ppoe_name}: {error_msg}")
                return False
                
        except Exception as e:
            logger.exception(e, f"Lỗi khi reset IP cho table: {table_name or self.current_proxy_table}")
            return False
    
    def check_proxy_requirement(self) -> bool:
        """
        Kiểm tra và đăng ký proxy nếu cần
        
        Returns:
            bool: True nếu có proxy hoặc không cần proxy, False nếu cần proxy nhưng chưa được cấp
        """
        use_proxy = self.db.get("use_proxy", False)
        
        if not use_proxy:
            return True  # Không cần proxy
            
        # Nếu đã có table thì return True
        if self.current_proxy_table:
            return True
            
        # Chưa có table, thử đăng ký
        return self.register_proxy()
    
    def get_proxy_display_name(self) -> str:
        """
        Lấy tên hiển thị cho proxy hiện tại
        
        Returns:
            str: Tên hiển thị của proxy
        """
        if self.current_proxy_name:
            return self.current_proxy_name
        elif self.current_proxy_table:
            return f"{self.current_proxy_table}"
        else:
            return "Unknown"
    
    def setup_proxy_for_session(self) -> bool:
        """
        Thiết lập proxy cho phiên làm việc
        
        Returns:
            bool: True nếu thiết lập thành công, False nếu thất bại
        """
        # Nếu đã có table proxy thì setup xong rồi
        if self.current_proxy_table:
            proxy_name = self.get_proxy_display_name()
            logger.info(f"Proxy {proxy_name} đã sẵn sàng cho phiên làm việc")
            return True
            
        # Nếu chưa có thì đăng ký
        return self.register_proxy()
    
    def release_proxy_after_session(self) -> bool:
        """
        Giải phóng proxy sau khi kết thúc phiên làm việc
        
        Returns:
            bool: True nếu giải phóng thành công, False nếu thất bại
        """
        try:
            if self.current_proxy_table:
                proxy_name = self.get_proxy_display_name()
                logger.info(f"Đang giải phóng proxy {proxy_name}")
                
                # Gọi API unregister
                if self.unregister_proxy():
                    logger.info(f"Đã giải phóng proxy {proxy_name} thành công")
                    return True
                else:
                    logger.warning(f"Giải phóng proxy {proxy_name} thất bại")
                    return False
            else:
                logger.debug("Không có proxy để giải phóng")
                return True
                    
        except Exception as e:
            logger.exception(e, f"Lỗi khi giải phóng proxy")
            return False
    
    def is_proxy_active(self) -> bool:
        """
        Kiểm tra xem có proxy đang hoạt động không
        
        Returns:
            bool: True nếu có proxy đang hoạt động, False nếu không
        """
        return bool(self.current_proxy_table)
    
    def get_proxy_info(self) -> Dict[str, Any]:
        """
        Lấy thông tin proxy hiện tại
        
        Returns:
            Dict[str, Any]: Thông tin proxy
        """
        return {
            "proxy_id": self.current_proxy_id,
            "proxy_name": self.current_proxy_name,
            "proxy_table": self.current_proxy_table,
            "last_update": self.proxy_last_update,
            "display_name": self.get_proxy_display_name(),
            "is_active": self.is_proxy_active()
        }
    
    def force_reset_current_ip(self) -> bool:
        """
        Bắt buộc reset IP cho proxy hiện tại (có thể gọi trong quá trình làm việc)
        
        Returns:
            bool: True nếu reset thành công, False nếu thất bại
        """
        if not self.current_proxy_table:
            logger.warning("Không có proxy đang hoạt động để reset IP")
            return False
            
        logger.info("Bắt buộc reset IP cho proxy hiện tại trong quá trình làm việc")
        return self.reset_ip()
    
    def get_proxy_status(self) -> str:
        """
        Lấy trạng thái proxy hiện tại dưới dạng string
        
        Returns:
            str: Trạng thái proxy
        """
        if not self.db.get("use_proxy", False):
            return "Không sử dụng proxy"
        elif not self.current_proxy_table:
            return "Chưa có proxy"
        else:
            return f"Đang sử dụng proxy: {self.get_proxy_display_name()}"
').decode('utf-8'))
