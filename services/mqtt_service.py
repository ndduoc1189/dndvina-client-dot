import base64
exec(base64.b64decode('aW1wb3J0IHBhaG8ubXF0dC5jbGllbnQgYXMgbXF0dAppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCBqc29uCmltcG9ydCB0aW1lCmltcG9ydCB1dWlkCmltcG9ydCBvcwpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBMaXN0LCBPcHRpb25hbCwgQ2FsbGFibGUsIFVuaW9uCmltcG9ydCBjb25maWcKaW1wb3J0IHV0aWxzCmltcG9ydCBzb2NrZXQKaW1wb3J0IHJhbmRvbQoKIyBMb2dnZXIKbG9nZ2VyID0gdXRpbHMuZ2V0X2xvZ2dlcigiTVFUVFNlcnZpY2UiKQoKY2xhc3MgTVFUVFNlcnZpY2U6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfc2VydmljZSwgZGV2aWNlX2lkLCBoZWxwZXJfc2VydmljZT1Ob25lKToKICAgICAgICAjIEto4bufaSB04bqhbyBjw6FjIHNlcnZpY2UKICAgICAgICBzZWxmLmRiID0gZGJfc2VydmljZQogICAgICAgIHNlbGYuaGVscGVyX3NlcnZpY2UgPSBoZWxwZXJfc2VydmljZQogICAgICAgIAogICAgICAgICMgQ+G6pXUgaMOsbmggTVFUVAogICAgICAgIHNlbGYuY2xpZW50X2lkID0gZiJ7Y29uZmlnLk1RVFRfQ0xJRU5UX0lEX1BSRUZJWH1fe3JhbmRvbS5yYW5kaW50KDEsIDk5KX1fe2RldmljZV9pZH0iCiAgICAgICAgc2VsZi5icm9rZXJfdXJsID0gY29uZmlnLk1RVFRfU0VSVkVSU1tjb25maWcuTU9ERV0KICAgICAgICBzZWxmLmJyb2tlcl9hZGRyZXNzID0gc2VsZi5icm9rZXJfdXJsLnJlcGxhY2UoIm1xdHQ6Ly8iLCAiIikuc3BsaXQoIjoiKVswXQogICAgICAgIHNlbGYuYnJva2VyX3BvcnQgPSBpbnQoc2VsZi5icm9rZXJfdXJsLnNwbGl0KCI6IilbLTFdKSBpZiAiOiIgaW4gc2VsZi5icm9rZXJfdXJsIGVsc2UgMTg4MwogICAgICAgIHNlbGYudXNlcm5hbWUgPSBjb25maWcuTVFUVF9VU0VSTkFNRQogICAgICAgIHNlbGYucGFzc3dvcmQgPSBjb25maWcuTVFUVF9QQVNTV09SRAogICAgICAgIAogICAgICAgICMgVHLhuqFuZyB0aMOhaSBr4bq/dCBu4buRaQogICAgICAgIHNlbGYuaXNfY29ubmVjdGVkID0gRmFsc2UKICAgICAgICBzZWxmLmNsaWVudCA9IE5vbmUKICAgICAgICBzZWxmLmRldmljZV9pZCA9IGRldmljZV9pZAogICAgICAgIAogICAgICAgICMgUmVjb25uZWN0aW9uIGxvZ2ljCiAgICAgICAgc2VsZi5yZWNvbm5lY3RfZGVsYXkgPSAxICAjIELhuq90IMSR4bqndSB24bubaSAxIGdpw6J5CiAgICAgICAgc2VsZi5tYXhfcmVjb25uZWN0X2RlbGF5ID0gNjAgICMgVOG7kWkgxJFhIDYwIGdpw6J5CiAgICAgICAgc2VsZi5yZWNvbm5lY3RfY291bnQgPSAwCiAgICAgICAgc2VsZi5sYXN0X2Rpc2Nvbm5lY3RfdGltZSA9IDAKICAgICAgICBzZWxmLm1hbnVhbF9kaXNjb25uZWN0ID0gRmFsc2UgICMgRmxhZyDEkeG7gyBwaMOibiBiaeG7h3QgZGlzY29ubmVjdCBjw7MgY2jhu6cgw70gdsOgIGtow7RuZyBjaOG7pyDDvQogICAgICAgIAogICAgICAgICMgVG9waWNzCiAgICAgICAgc2VsZi50b3BpY19jbGllbnRfc3luYyA9IGNvbmZpZy5NUVRUX1RPUElDX0NMSUVOVF9TWU5DCiAgICAgICAgc2VsZi50b3BpY19zZXJ2ZXJfdGFzayA9IGYie2NvbmZpZy5NUVRUX1RPUElDX1NFUlZFUl9UQVNLX1BSRUZJWH0ve3NlbGYuZGV2aWNlX2lkfSIKICAgICAgICAKICAgICAgICAjIFF14bqjbiBsw70gdGFzayB2w6Agc3luYwogICAgICAgIHNlbGYudGFza19oYW5kbGVycyA9IHt9CiAgICAgICAgc2VsZi5zeW5jX3RocmVhZCA9IE5vbmUKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBGYWxzZQogICAgICAgIHNlbGYuc3RvcF9ldmVudCA9IHRocmVhZGluZy5FdmVudCgpCiAgICAgICAgc2VsZi5zeW5jX2ludGVydmFsID0gc2VsZi5kYi5nZXRfZGV2aWNlX2NvbmZpZygic3luY19pbnRlcnZhbCIsIGNvbmZpZy5TWU5DX0lOVEVSVkFMKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSBtw7RpIHRyxrDhu51uZyBUZXJtdXgKICAgICAgICBzZWxmLmlzX3Rlcm11eCA9ICdURVJNVVhfVkVSU0lPTicgaW4gb3MuZW52aXJvbiBvciAnL2RhdGEvZGF0YS9jb20udGVybXV4JyBpbiBvcy5lbnZpcm9uLmdldCgnUEFUSCcsICcnKQogICAgICAgIGlmIHNlbGYuaXNfdGVybXV4OgogICAgICAgICAgICBsb2dnZXIuaW5mbygixJBhbmcgY2jhuqF5IHRyb25nIG3DtGkgdHLGsOG7nW5nIFRlcm11eCIpCgogICAgZGVmIF9jcmVhdGVfY2xpZW50KHNlbGYpIC0+IG1xdHQuQ2xpZW50OgogICAgICAgICIiIlThuqFvIHbDoCBj4bqldSBow6xuaCBNUVRUIGNsaWVudCIiIgogICAgICAgIGNsaWVudCA9IE5vbmUKCiAgICAgICAgIyBUaOG7rSB04bqhbyB24bubaSBBUEkgdjIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNsaWVudCA9IG1xdHQuQ2xpZW50KAogICAgICAgICAgICAgICAgY2xpZW50X2lkPXNlbGYuY2xpZW50X2lkLAogICAgICAgICAgICAgICAgY2xlYW5fc2Vzc2lvbj1UcnVlLAogICAgICAgICAgICAgICAgcHJvdG9jb2w9bXF0dC5NUVRUdjMxMSwKICAgICAgICAgICAgICAgIGNhbGxiYWNrX2FwaV92ZXJzaW9uPWdldGF0dHIobXF0dC5DYWxsYmFja0FQSVZlcnNpb24sICdWRVJTSU9OMicsIE5vbmUpCiAgICAgICAgICAgICkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlThuqFvIE1RVFQgY2xpZW50IHbhu5tpIEFQSSB2MiIpCiAgICAgICAgZXhjZXB0IChBdHRyaWJ1dGVFcnJvciwgVHlwZUVycm9yKToKICAgICAgICAgICAgIyBGYWxsYmFjayBBUEkgdjEKICAgICAgICAgICAgY2xpZW50ID0gbXF0dC5DbGllbnQoCiAgICAgICAgICAgICAgICBjbGllbnRfaWQ9c2VsZi5jbGllbnRfaWQsCiAgICAgICAgICAgICAgICBjbGVhbl9zZXNzaW9uPVRydWUsCiAgICAgICAgICAgICAgICBwcm90b2NvbD1tcXR0Lk1RVFR2MzExCiAgICAgICAgICAgICkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlThuqFvIE1RVFQgY2xpZW50IHbhu5tpIEFQSSB2MSIpCiAgICAgICAgCiAgICAgICAgIyBD4bqldSBow6xuaCB4w6FjIHRo4buxYyBu4bq/dSBjw7MKICAgICAgICBpZiBzZWxmLnVzZXJuYW1lIGFuZCBzZWxmLnBhc3N3b3JkOgogICAgICAgICAgICBjbGllbnQudXNlcm5hbWVfcHdfc2V0KHNlbGYudXNlcm5hbWUsIHNlbGYucGFzc3dvcmQpCiAgICAgICAgCiAgICAgICAgIyDEkMSDbmcga8O9IGNhbGxiYWNrCiAgICAgICAgY2xpZW50Lm9uX2Nvbm5lY3QgPSBzZWxmLl9vbl9jb25uZWN0CiAgICAgICAgY2xpZW50Lm9uX21lc3NhZ2UgPSBzZWxmLl9vbl9tZXNzYWdlCiAgICAgICAgY2xpZW50Lm9uX2Rpc2Nvbm5lY3QgPSBzZWxmLl9vbl9kaXNjb25uZWN0CiAgICAgICAgCiAgICAgICAgIyBD4bqldSBow6xuaCBrZWVwLWFsaXZlIGTDoGkgaMahbiB2w6AgcmVjb25uZWN0aW9uCiAgICAgICAgY2xpZW50LnJlY29ubmVjdF9kZWxheV9zZXQobWluX2RlbGF5PTEsIG1heF9kZWxheT02MCkKICAgICAgICAKICAgICAgICByZXR1cm4gY2xpZW50CgogICAgZGVmIGNvbm5lY3Qoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiJL4bq/dCBu4buRaSDEkeG6v24gTVFUVCBicm9rZXIgduG7m2kgZXhwb25lbnRpYWwgYmFja29mZiIiIgogICAgICAgIGRlZiBjYW5fY29ubmVjdChob3N0OiBzdHIsIHBvcnQ6IGludCwgdGltZW91dDogZmxvYXQgPSAzLjApIC0+IGJvb2w6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggc29ja2V0LmNyZWF0ZV9jb25uZWN0aW9uKChob3N0LCBwb3J0KSwgdGltZW91dD10aW1lb3V0KToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIG1haW5faG9zdCA9IHNlbGYuYnJva2VyX2FkZHJlc3MKICAgICAgICBtYWluX3BvcnQgPSBzZWxmLmJyb2tlcl9wb3J0CiAgICAgICAgZmFsbGJhY2tfaG9zdCA9ICIxMC4wLjAuNSIKICAgICAgICBmYWxsYmFja19wb3J0ID0gOTAyMAoKICAgICAgICAjIEtp4buDbSB0cmEga+G6v3QgbuG7kWkgc29ja2V0IHThu5tpIGPhuqMgMiBJUAogICAgICAgIG1haW5fb2sgPSBjYW5fY29ubmVjdChtYWluX2hvc3QsIG1haW5fcG9ydCkKICAgICAgICBmYWxsYmFja19vayA9IGNhbl9jb25uZWN0KGZhbGxiYWNrX2hvc3QsIGZhbGxiYWNrX3BvcnQpCgogICAgICAgIGlmIG1haW5fb2s6CiAgICAgICAgICAgIGNvbm5lY3RfaG9zdCA9IG1haW5faG9zdAogICAgICAgICAgICBjb25uZWN0X3BvcnQgPSBtYWluX3BvcnQKICAgICAgICBlbGlmIGZhbGxiYWNrX29rOgogICAgICAgICAgICBjb25uZWN0X2hvc3QgPSBmYWxsYmFja19ob3N0CiAgICAgICAgICAgIGNvbm5lY3RfcG9ydCA9IGZhbGxiYWNrX3BvcnQKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJLaMO0bmcga+G6v3QgbuG7kWkgxJHGsOG7o2Mgc29ja2V0IHThu5tpIGPhuqMge21haW5faG9zdH06e21haW5fcG9ydH0gbOG6q24ge2ZhbGxiYWNrX2hvc3R9OntmYWxsYmFja19wb3J0fSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVOG6oW8gY2xpZW50IG3hu5tpIG7hur91IGNoxrBhIGPDsyBob+G6t2MgY2xpZW50IGPFqSBi4buLIGzhu5dpCiAgICAgICAgICAgIGlmIHNlbGYuY2xpZW50IGlzIE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLmNsaWVudCA9IHNlbGYuX2NyZWF0ZV9jbGllbnQoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSZXNldCB0cuG6oW5nIHRow6FpCiAgICAgICAgICAgIHNlbGYuc3RvcF9ldmVudC5jbGVhcigpCiAgICAgICAgICAgIHNlbGYuaXNfY29ubmVjdGVkID0gRmFsc2UKICAgICAgICAgICAgc2VsZi5tYW51YWxfZGlzY29ubmVjdCA9IEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQYW5nIGvhur90IG7hu5FpIHThu5tpIE1RVFQgYnJva2VyIHtjb25uZWN0X2hvc3R9Ontjb25uZWN0X3BvcnR9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU+G7rSBk4bulbmcga2VlcGFsaXZlIGzhu5tuIGjGoW4gKDEyMCBnacOieSB0aGF5IHbDrCA2MCkKICAgICAgICAgICAgc2VsZi5jbGllbnQuY29ubmVjdF9hc3luYyhjb25uZWN0X2hvc3QsIGNvbm5lY3RfcG9ydCwga2VlcGFsaXZlPTEyMCkKICAgICAgICAgICAgc2VsZi5jbGllbnQubG9vcF9zdGFydCgpCgogICAgICAgICAgICBkZWYgX3dhaXRfY29ubmVjdGVkKHRpbWVvdXRfc2VjOiBpbnQgPSAxNSkgLT4gYm9vbDoKICAgICAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHRpbWVvdXRfc2VjKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmlzX2Nvbm5lY3RlZDoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgICAgIGlmIF93YWl0X2Nvbm5lY3RlZCgpOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGvhur90IG7hu5FpIHRow6BuaCBjw7RuZyDEkeG6v24gTVFUVCBicm9rZXIge2Nvbm5lY3RfaG9zdH06e2Nvbm5lY3RfcG9ydH0iKQogICAgICAgICAgICAgICAgc2VsZi5icm9rZXJfYWRkcmVzcyA9IGNvbm5lY3RfaG9zdAogICAgICAgICAgICAgICAgc2VsZi5icm9rZXJfcG9ydCA9IGNvbm5lY3RfcG9ydAogICAgICAgICAgICAgICAgIyBSZXNldCByZWNvbm5lY3QgZGVsYXkga2hpIGvhur90IG7hu5FpIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3RfZGVsYXkgPSAxCiAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdF9jb3VudCA9IDAKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJL4bq/dCBu4buRaSBNUVRUIHRo4bqldCBi4bqhaSB04bubaSB7Y29ubmVjdF9ob3N0fTp7Y29ubmVjdF9wb3J0fSIpCiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhbnVwX2NsaWVudCgpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBr4bq/dCBu4buRaSBNUVRUOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHNlbGYuX2NsZWFudXBfY2xpZW50KCkKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9jbGVhbnVwX2NsaWVudChzZWxmKToKICAgICAgICAiIiJE4buNbiBk4bq5cCBNUVRUIGNsaWVudCIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgc2VsZi5jbGllbnQ6CiAgICAgICAgICAgICAgICBzZWxmLmNsaWVudC5sb29wX3N0b3AoKQogICAgICAgICAgICAgICAgc2VsZi5jbGllbnQuZGlzY29ubmVjdCgpCiAgICAgICAgICAgICAgICBzZWxmLmNsaWVudCA9IE5vbmUKICAgICAgICAgICAgc2VsZi5pc19jb25uZWN0ZWQgPSBGYWxzZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJM4buXaSBraGkgZOG7jW4gZOG6uXAgTVFUVCBjbGllbnQ6IHtlfSIpCgogICAgZGVmIGVuc3VyZV9jb25uZWN0ZWQoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiLEkOG6o20gYuG6o28ga+G6v3QgbuG7kWkgTVFUVCB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbiBjw6FjIHRoYW8gdMOhYyB24bubaSByYXRlIGxpbWl0aW5nIiIiCiAgICAgICAgaWYgc2VsZi5pc19jb25uZWN0ZWQ6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIMSRYW5nIHRyb25nIHF1w6EgdHLDrG5oIHJlY29ubmVjdCBraMO0bmcKICAgICAgICBjdXJyZW50X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIGlmIGN1cnJlbnRfdGltZSAtIHNlbGYubGFzdF9kaXNjb25uZWN0X3RpbWUgPCA1OiAgIyBDaOG7nSDDrXQgbmjhuqV0IDUgZ2nDonkgdOG7qyBs4bqnbiBkaXNjb25uZWN0IGN14buRaQogICAgICAgICAgICBsb2dnZXIuZGVidWcoIsSQYW5nIHRyb25nIHRo4budaSBnaWFuIGNvb2xkb3duIHJlY29ubmVjdCwgY2jhu50uLi4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk1RVFQgY2jGsGEga+G6v3QgbuG7kWksIMSRYW5nIHRo4butIGvhur90IG7hu5FpIGzhuqFpLi4uIikKICAgICAgICByZXR1cm4gc2VsZi5jb25uZWN0KCkKCiAgICBkZWYgX29uX2Nvbm5lY3Qoc2VsZiwgY2xpZW50LCB1c2VyZGF0YSwgZmxhZ3MsIHJjLCBwcm9wZXJ0aWVzPU5vbmUpOgogICAgICAgICIiIkNhbGxiYWNrIGtoaSBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmciIiIKICAgICAgICBpZiByYyA9PSAwOgogICAgICAgICAgICBzZWxmLmlzX2Nvbm5lY3RlZCA9IFRydWUKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6Mga+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nIHThu5tpIE1RVFQgYnJva2VyIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDEg25nIGvDvSBuaOG6rW4gdGFzawogICAgICAgICAgICBzZWxmLmNsaWVudC5zdWJzY3JpYmUoc2VsZi50b3BpY19zZXJ2ZXJfdGFzaywgcW9zPTEpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYixJDDoyDEkcSDbmcga8O9IG5o4bqtbiB0YXNrIHThuqFpOiB7c2VsZi50b3BpY19zZXJ2ZXJfdGFza30iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4butaSB0aMO0bmcgYsOhbyBr4bq/dCBu4buRaQogICAgICAgICAgICBzZWxmLnNlbmRfY29ubmVjdF9ub3RpZmljYXRpb24oKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBSZXNldCByZWNvbm5lY3QgY291bnRlciBraGkga+G6v3QgbuG7kWkgdGjDoG5oIGPDtG5nCiAgICAgICAgICAgIHNlbGYucmVjb25uZWN0X2NvdW50ID0gMAogICAgICAgICAgICBzZWxmLnJlY29ubmVjdF9kZWxheSA9IDEKICAgICAgICBlbHNlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJL4bq/dCBu4buRaSBNUVRUIHRo4bqldCBi4bqhaSB24bubaSBtw6MgbOG7l2k6IHtyY30iKQogICAgICAgICAgICAjIFTEg25nIHJlY29ubmVjdCBjb3VudCBraGkga+G6v3QgbuG7kWkgdGjhuqV0IGLhuqFpCiAgICAgICAgICAgIHNlbGYucmVjb25uZWN0X2NvdW50ICs9IDEKCiAgICBkZWYgX29uX2Rpc2Nvbm5lY3Qoc2VsZiwgY2xpZW50LCB1c2VyZGF0YSwgcmMsIHByb3BlcnRpZXM9Tm9uZSwgcmVhc29uX2NvZGU9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgICIiIkNhbGxiYWNrIGtoaSBuZ+G6r3Qga+G6v3QgbuG7kWkgduG7m2kgY8ahIGNo4bq/IHJlY29ubmVjdCB0aMO0bmcgbWluaCIiIgogICAgICAgIHNlbGYuaXNfY29ubmVjdGVkID0gRmFsc2UKICAgICAgICBzZWxmLmxhc3RfZGlzY29ubmVjdF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAKICAgICAgICBpZiBzZWxmLm1hbnVhbF9kaXNjb25uZWN0OgogICAgICAgICAgICBsb2dnZXIuaW5mbygixJDDoyBuZ+G6r3Qga+G6v3QgbuG7kWkgTVFUVCB0aGVvIHnDqnUgY+G6p3UiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgCiAgICAgICAgaWYgcmMgIT0gMDoKICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3RfY291bnQgKz0gMQogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIk5n4bqvdCBr4bq/dCBu4buRaSBNUVRUIGtow7RuZyBtb25nIG114buRbiBs4bqnbiB7c2VsZi5yZWNvbm5lY3RfY291bnR9IHbhu5tpIG3DoyBs4buXaToge3JjfSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4buJIGF1dG8tcmVjb25uZWN0IG7hur91IGtow7RuZyBwaOG6o2kgbWFudWFsIGRpc2Nvbm5lY3QKICAgICAgICAgICAgaWYgbm90IHNlbGYuc3RvcF9ldmVudC5pc19zZXQoKToKICAgICAgICAgICAgICAgIHNlbGYuX3NjaGVkdWxlX3JlY29ubmVjdCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6Mgbmfhuq90IGvhur90IG7hu5FpIE1RVFQiKQoKICAgIGRlZiBfc2NoZWR1bGVfcmVjb25uZWN0KHNlbGYpOgogICAgICAgICIiIkzDqm4gbOG7i2NoIGvhur90IG7hu5FpIGzhuqFpIHbhu5tpIGV4cG9uZW50aWFsIGJhY2tvZmYiIiIKICAgICAgICAjIFTDrW5oIGRlbGF5IHbhu5tpIGV4cG9uZW50aWFsIGJhY2tvZmYKICAgICAgICBkZWxheSA9IG1pbihzZWxmLnJlY29ubmVjdF9kZWxheSAqICgyICoqIG1pbihzZWxmLnJlY29ubmVjdF9jb3VudCAtIDEsIDYpKSwgc2VsZi5tYXhfcmVjb25uZWN0X2RlbGF5KQogICAgICAgIAogICAgICAgIGxvZ2dlci5pbmZvKGYiU+G6vSB0aOG7rSBr4bq/dCBu4buRaSBs4bqhaSBzYXUge2RlbGF5fSBnacOieS4uLiIpCiAgICAgICAgCiAgICAgICAgZGVmIHJlY29ubmVjdF9hZnRlcl9kZWxheSgpOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5zdG9wX2V2ZW50LndhaXQoZGVsYXkpOiAgIyBDaOG7nSBkZWxheSBzZWNvbmRzLCB0cuG7qyBraGkgYuG7iyBzdG9wCiAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi5pc19jb25uZWN0ZWQgYW5kIG5vdCBzZWxmLm1hbnVhbF9kaXNjb25uZWN0OgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVGjhu60ga+G6v3QgbuG7kWkgbOG6oWkgTVFUVCAobOG6p24ge3NlbGYucmVjb25uZWN0X2NvdW50fSkiKQogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuY29ubmVjdCgpOgogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiS+G6v3QgbuG7kWkgbOG6oWkgTVFUVCB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTuG6v3UgduG6q24gdGjhuqV0IGLhuqFpLCBsw6puIGzhu4tjaCB0aOG7rSBs4bqhaQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnJlY29ubmVjdF9jb3VudCA8IDEwOiAgIyBHaeG7m2kgaOG6oW4gc+G7kSBs4bqnbiB0aOG7rQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2NoZWR1bGVfcmVjb25uZWN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigixJDDoyB0aOG7rSBr4bq/dCBu4buRaSBs4bqhaSBNUVRUIHF1w6Egbmhp4buBdSBs4bqnbiwgdOG6oW0gZOG7q25nIGF1dG8tcmVjb25uZWN0IikKICAgICAgICAKICAgICAgICAjIENo4bqheSB0cm9uZyB0aHJlYWQgcmnDqm5nIMSR4buDIGtow7RuZyBibG9jawogICAgICAgIHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PXJlY29ubmVjdF9hZnRlcl9kZWxheSwgZGFlbW9uPVRydWUpLnN0YXJ0KCkKCiAgICBkZWYgX3NhZmVfcHVibGlzaChzZWxmLCB0b3BpYzogc3RyLCBwYXlsb2FkOiBzdHIsIHFvczogaW50ID0gMSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBH4butaSBtZXNzYWdlIGFuIHRvw6BuIHbhu5tpIGtp4buDbSB0cmEga+G6v3QgbuG7kWkgdHLGsOG7m2Mga2hpIHB1Ymxpc2gKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0b3BpYzogTVFUVCB0b3BpYwogICAgICAgICAgICBwYXlsb2FkOiBO4buZaSBkdW5nIG1lc3NhZ2UgKHN0cmluZykKICAgICAgICAgICAgcW9zOiBRdWFsaXR5IG9mIFNlcnZpY2UgKDAsIDEsIGhv4bq3YyAyKQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGfhu61pIHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZiBub3Qgc2VsZi5lbnN1cmVfY29ubmVjdGVkKCk6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJLaMO0bmcgdGjhu4MgZ+G7rWkgbWVzc2FnZSDEkeG6v24ge3RvcGljfTogTVFUVCBjaMawYSBr4bq/dCBu4buRaSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuY2xpZW50LnB1Ymxpc2godG9waWMsIHBheWxvYWQsIHFvcz1xb3MpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXN1bHQucmMgPT0gbXF0dC5NUVRUX0VSUl9TVUNDRVNTOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGfhu61pIG1lc3NhZ2UgdGjDoG5oIGPDtG5nIMSR4bq/biB7dG9waWN9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSBraGkgZ+G7rWkgbWVzc2FnZSDEkeG6v24ge3RvcGljfToge21xdHQuZXJyb3Jfc3RyaW5nKHJlc3VsdC5yYyl9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4butaSBtZXNzYWdlIMSR4bq/biB7dG9waWN9OiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZW5kX3Rhc2tfcmVwb3J0KHNlbGYsIHRhc2tfaWQ6IHN0ciwgZGV2aWNlX2lkOiBzdHIsIHN0YXR1czogc3RyLCBjbGllbnRfbWVzc2FnZTogc3RyID0gIiIpOgogICAgICAgICIiIkfhu61pIGLDoW8gY8OhbyBr4bq/dCBxdeG6oyB0aOG7sWMgaGnhu4duIHRhc2siIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlcG9ydF9kYXRhID0gewogICAgICAgICAgICAgICAgInRhc2tfaWQiOiB0YXNrX2lkLAogICAgICAgICAgICAgICAgImRldmljZV9pZCI6IGRldmljZV9pZCwKICAgICAgICAgICAgICAgICJzdGF0dXMiOiBzdGF0dXMsCiAgICAgICAgICAgICAgICAiY2xpZW50X21lc3NhZ2UiOiBjbGllbnRfbWVzc2FnZSwKICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIHNlbGYuX3NhZmVfcHVibGlzaCgiZG5kdmluYS9jbGllbnQvdGFza19yZXBvcnQiLCBqc29uLmR1bXBzKHJlcG9ydF9kYXRhKSk6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgZ+G7rWkgYsOhbyBjw6FvIHRhc2sge3Rhc2tfaWR9IHbhu5tpIHRy4bqhbmcgdGjDoWkge3N0YXR1c30iKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGfhu61pIGLDoW8gY8OhbyB0YXNrOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBzZW5kX2Nvbm5lY3Rfbm90aWZpY2F0aW9uKHNlbGYpOgogICAgICAgICIiIkfhu61pIHRow7RuZyBiw6FvIGvhur90IG7hu5FpIMSR4bq/biBzZXJ2ZXIiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNvbm5lY3RfZGF0YSA9IHsKICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiBzZWxmLmRldmljZV9pZCwKICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiOiBpbnQodGltZS50aW1lKCkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIHNlbGYuX3NhZmVfcHVibGlzaCgiZG5kdmluYS9jbGllbnQvY29ubmVjdCIsIGpzb24uZHVtcHMoY29ubmVjdF9kYXRhKSk6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgZ+G7rWkgdGjDtG5nIGLDoW8ga+G6v3QgbuG7kWkgY2hvIHRoaeG6v3QgYuG7iyB7c2VsZi5kZXZpY2VfaWR9IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSBn4butaSB0aMO0bmcgYsOhbyBr4bq/dCBu4buRaToge3N0cihlKX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgcmVnaXN0ZXJfdGFza19oYW5kbGVyKHNlbGYsIHRhc2tfdHlwZTogc3RyLCBoYW5kbGVyOiBDYWxsYWJsZSk6CiAgICAgICAgIiIiCiAgICAgICAgxJDEg25nIGvDvSBoYW5kbGVyIGNobyBsb+G6oWkgdGFzawogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfdHlwZTogTG/huqFpIHRhc2sKICAgICAgICAgICAgaGFuZGxlcjogSMOgbSB44butIGzDvSB0YXNrCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi50YXNrX2hhbmRsZXJzW3Rhc2tfdHlwZV0gPSBoYW5kbGVyCiAgICAKICAgIGRlZiBzeW5jX2RhdGEoc2VsZik6CiAgICAgICAgIiIixJDhu5NuZyBi4buZIGThu68gbGnhu4d1IHbhu5tpIHNlcnZlciIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBO4bq/dSBjaMawYSBr4bq/dCBu4buRaSBNUVRULCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmlzX2Nvbm5lY3RlZDoKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJDaMawYSBr4bq/dCBu4buRaSBNUVRULCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgaGVscGVyIHNlcnZpY2UKICAgICAgICAgICAgaGVscGVyID0gc2VsZi5oZWxwZXJfc2VydmljZQogICAgICAgICAgICBpZiBub3QgaGVscGVyOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgY8OzIGhlbHBlciBzZXJ2aWNlLCBraMO0bmcgdGjhu4MgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkCiAgICAgICAgICAgIGRldmljZV9pZCA9IHNlbGYuZGIuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgICAgICBpZiBub3QgZGV2aWNlX2lkOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJLaMO0bmcgdGjhu4MgeMOhYyDEkeG7i25oIGRldmljZV9pZCwga2jDtG5nIHRo4buDIMSR4buTbmcgYuG7mSBk4buvIGxp4buHdSIpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLCiAgICAgICAgICAgIGRldmljZV9pbmZvID0gTm9uZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZXZpY2VfaW5mb19yZXNwb25zZSA9IGhlbHBlci5nZXRfZGV2aWNlX2luZm8oKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE7hur91IGzhuqV5IHRow6BuaCBjw7RuZywgbMawdSB2w6BvIGRhdGFiYXNlCiAgICAgICAgICAgICAgICBpZiBkZXZpY2VfaW5mb19yZXNwb25zZVsic3RhdHVzIl0gPT0gInN1Y2Nlc3MiIGFuZCAiZGF0YSIgaW4gZGV2aWNlX2luZm9fcmVzcG9uc2U6CiAgICAgICAgICAgICAgICAgICAgIyBMxrB1IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLIHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLnNhdmVfZGV2aWNlX2luZm8oZGV2aWNlX2luZm9fcmVzcG9uc2VbImRhdGEiXSkKICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaW5mbyA9IGRldmljZV9pbmZvX3Jlc3BvbnNlWyJkYXRhIl0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiTOG7l2kga2hpIGzhuqV5IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLOiB7ZX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTuG6v3Uga2jDtG5nIGzhuqV5IMSRxrDhu6NjIHRow7RuZyB0aW4gdGhp4bq/dCBi4buLLCBz4butIGThu6VuZyB0aMO0bmcgdGluIMSRw6MgbMawdSB0cm9uZyBkYXRhYmFzZQogICAgICAgICAgICBpZiBub3QgZGV2aWNlX2luZm86CiAgICAgICAgICAgICAgICBkZXZpY2VfaW5mbyA9IHNlbGYuZGIuZ2V0X2RldmljZV9pbmZvKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgZGV2aWNlX2luZm86CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiS2jDtG5nIGPDsyB0aMO0bmcgdGluIHRoaeG6v3QgYuG7iywgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IGPDsyB0aOG7gyBraMO0bmcgxJHhuqd5IMSR4bunIikKICAgICAgICAgICAgICAgIGRldmljZV9pbmZvID0ge30KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBkZXZpY2VfY29uZmlnID0gc2VsZi5kYi5nZXRfYWxsX2RldmljZV9jb25maWcoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBH4buZcCBjw6FjIHRy4bqhbmcgdGjDoWkgcnVudGltZSAocGF1c2Vfam9iLCBkZXZpY2VfaXNfd29ya2luZywgZGV2aWNlX21lc3NhZ2UpIHbDoG8gZGV2aWNlX2luZm8KICAgICAgICAgICAgZm9yIHJ1bnRpbWVfa2V5IGluIFsicGF1c2Vfam9iIiwgImRldmljZV9pc193b3JraW5nIiwgImRldmljZV9tZXNzYWdlIl06CiAgICAgICAgICAgICAgICBpZiBydW50aW1lX2tleSBpbiBkZXZpY2VfY29uZmlnOgogICAgICAgICAgICAgICAgICAgIGRldmljZV9pbmZvW3J1bnRpbWVfa2V5XSA9IGRldmljZV9jb25maWcucG9wKHJ1bnRpbWVfa2V5KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIEdpw6EgdHLhu4sgbeG6t2MgxJHhu4tuaCBu4bq/dSBjaMawYSBj4bqldSBow6xuaAogICAgICAgICAgICAgICAgICAgIGRldmljZV9pbmZvW3J1bnRpbWVfa2V5XSA9IEZhbHNlIGlmIHJ1bnRpbWVfa2V5ICE9ICJkZXZpY2VfbWVzc2FnZSIgZWxzZSAiIgogICAgICAgICAgICAKICAgICAgICAgICAgIyBMb+G6oWkgYuG7jyBnb2xpa2VfcmVwb3J0IGto4buPaSBkZXZpY2VfY29uZmlnIMSR4buDIGfhu61pIHJpw6puZwogICAgICAgICAgICBnb2xpa2VfcmVwb3J0ID0gTm9uZQogICAgICAgICAgICBpZiAiZ29saWtlX3JlcG9ydCIgaW4gZGV2aWNlX2NvbmZpZzoKICAgICAgICAgICAgICAgIGdvbGlrZV9yZXBvcnQgPSBkZXZpY2VfY29uZmlnLnBvcCgiZ29saWtlX3JlcG9ydCIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIExv4bqhaSBi4buPIGdvbGlrZV9hcGlfYmFzZSBraOG7j2kgZGV2aWNlX2NvbmZpZwogICAgICAgICAgICBpZiAiZ29saWtlX2FwaV9iYXNlIiBpbiBkZXZpY2VfY29uZmlnOgogICAgICAgICAgICAgICAgZGV2aWNlX2NvbmZpZy5wb3AoImdvbGlrZV9hcGlfYmFzZSIpCiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoIsSQw6MgbG/huqFpIGLhu48gZ29saWtlX2FwaV9iYXNlIGto4buPaSBk4buvIGxp4buHdSDEkeG7k25nIGLhu5kiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgY8OhYyB0w6BpIGtob+G6o24gY2jGsGEgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIHBlbmRpbmdfYWNjb3VudHMgPSBzZWxmLmRiLmdldF9wZW5kaW5nX3N5bmNfaXRlbXMoImFjY291bnRzIiwgbGltaXQ9NTApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzhuqV5IGPDoWMgam9iIGNoxrBhIMSR4buTbmcgYuG7mQogICAgICAgICAgICBwZW5kaW5nX2pvYnMgPSBzZWxmLmRiLmdldF9wZW5kaW5nX3N5bmNfaXRlbXMoImpvYnNfaGlzdG9yeSIsIGxpbWl0PTUwKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVOG6oW8gcGF5bG9hZAogICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgImRldmljZV9pZCI6IGRldmljZV9pZCwKICAgICAgICAgICAgICAgICJkZXZpY2VfaW5mbyI6IGRldmljZV9pbmZvLAogICAgICAgICAgICAgICAgImRldmljZV9jb25maWciOiBkZXZpY2VfY29uZmlnLAogICAgICAgICAgICAgICAgInRpbWVzdGFtcCI6IGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBnb2xpa2VfcmVwb3J0IG7hur91IGPDswogICAgICAgICAgICBpZiBnb2xpa2VfcmVwb3J0OgogICAgICAgICAgICAgICAgcGF5bG9hZFsiZ29saWtlX3JlcG9ydCJdID0gZ29saWtlX3JlcG9ydAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gdMOgaSBraG/huqNuIGNoxrBhIMSR4buTbmcgYuG7mSBu4bq/dSBjw7MKICAgICAgICAgICAgaWYgcGVuZGluZ19hY2NvdW50czoKICAgICAgICAgICAgICAgIHBheWxvYWRbImFjY291bnRzIl0gPSBwZW5kaW5nX2FjY291bnRzCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQ4buTbmcgYuG7mSB7bGVuKHBlbmRpbmdfYWNjb3VudHMpfSB0w6BpIGtob+G6o24gY2jGsGEgxJHhu5NuZyBi4buZIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGpvYiBjaMawYSDEkeG7k25nIGLhu5kgbuG6v3UgY8OzCiAgICAgICAgICAgIGlmIHBlbmRpbmdfam9iczoKICAgICAgICAgICAgICAgIHBheWxvYWRbImpvYnMiXSA9IHBlbmRpbmdfam9icwogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkOG7k25nIGLhu5kge2xlbihwZW5kaW5nX2pvYnMpfSBqb2IgY2jGsGEgxJHhu5NuZyBi4buZIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIEfhu61pIGThu68gbGnhu4d1CiAgICAgICAgICAgIHNlbGYuX3NhZmVfcHVibGlzaChjb25maWcuTVFUVF9UT1BJQ19DTElFTlRfU1lOQywganNvbi5kdW1wcyhwYXlsb2FkKSkKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IHbhu5tpIHNlcnZlciIpCiAgICAKICAgIGRlZiBzdGFydF9zeW5jX3RocmVhZChzZWxmKToKICAgICAgICAiIiJC4bqvdCDEkeG6p3UgdGhyZWFkIMSR4buTbmcgYuG7mSB04buxIMSR4buZbmciIiIKICAgICAgICBpZiBzZWxmLnN5bmNfdGhyZWFkIGlzIG5vdCBOb25lIGFuZCBzZWxmLnN5bmNfdGhyZWFkLmlzX2FsaXZlKCk6CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJUaHJlYWQgxJHhu5NuZyBi4buZIMSRw6MgxJFhbmcgY2jhuqF5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgIHNlbGYucnVubmluZyA9IFRydWUKICAgICAgICBzZWxmLnN0b3BfZXZlbnQuY2xlYXIoKQogICAgICAgIHNlbGYuc3luY190aHJlYWQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLl9zeW5jX2xvb3AsIGRhZW1vbj1UcnVlKQogICAgICAgIHNlbGYuc3luY190aHJlYWQuc3RhcnQoKQogICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIGto4bufaSDEkeG7mW5nIHRocmVhZCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nIikKICAgIAogICAgZGVmIF9zeW5jX2xvb3Aoc2VsZik6CiAgICAgICAgIiIiTG9vcCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nIiIiCiAgICAgICAgbG9nZ2VyLmluZm8oZiJC4bqvdCDEkeG6p3UgxJHhu5NuZyBi4buZIHThu7EgxJHhu5luZyBt4buXaSB7c2VsZi5zeW5jX2ludGVydmFsfSBnacOieSIpCgogICAgICAgIHdoaWxlIG5vdCBzZWxmLnN0b3BfZXZlbnQuaXNfc2V0KCkgYW5kIHNlbGYucnVubmluZzoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgc2VsZi5pc19jb25uZWN0ZWQ6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5zeW5jX2RhdGEoKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJM4buXaSB0cm9uZyBxdcOhIHRyw6xuaCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nOiB7c3RyKGUpfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBOZ2jhu4kgxJHhur9uIGzhuqduIMSR4buTbmcgYuG7mSB0aeG6v3AgdGhlbwogICAgICAgICAgICBmb3IgXyBpbiByYW5nZShzZWxmLnN5bmNfaW50ZXJ2YWwpOgogICAgICAgICAgICAgICAgaWYgc2VsZi5zdG9wX2V2ZW50LmlzX3NldCgpIG9yIG5vdCBzZWxmLnJ1bm5pbmc6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgIAogICAgZGVmIHN0b3Bfc3luY190aHJlYWQoc2VsZik6CiAgICAgICAgIiIiROG7q25nIHRocmVhZCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nIiIiCiAgICAgICAgc2VsZi5ydW5uaW5nID0gRmFsc2UKICAgICAgICBzZWxmLnN0b3BfZXZlbnQuc2V0KCkKICAgICAgICBpZiBzZWxmLnN5bmNfdGhyZWFkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLnN5bmNfdGhyZWFkLmpvaW4odGltZW91dD0yLjApCiAgICAgICAgICAgIHNlbGYuc3luY190aHJlYWQgPSBOb25lCiAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgZOG7q25nIHRocmVhZCDEkeG7k25nIGLhu5kgdOG7sSDEkeG7mW5nIikKICAgIAogICAgZGVmIGRpc2Nvbm5lY3Qoc2VsZik6CiAgICAgICAgIiIiTmfhuq90IGvhur90IG7hu5FpIE1RVFQiIiIKICAgICAgICBzZWxmLm1hbnVhbF9kaXNjb25uZWN0ID0gVHJ1ZSAgIyDEkMOhbmggZOG6pXUgxJHDonkgbMOgIGRpc2Nvbm5lY3QgY8OzIGNo4bunIMO9CiAgICAgICAgc2VsZi5zdG9wX3N5bmNfdGhyZWFkKCkKICAgICAgICAKICAgICAgICBpZiBzZWxmLmNsaWVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5jbGllbnQubG9vcF9zdG9wKCkKICAgICAgICAgICAgc2VsZi5jbGllbnQuZGlzY29ubmVjdCgpCiAgICAgICAgICAgIHNlbGYuaXNfY29ubmVjdGVkID0gRmFsc2UKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6Mgbmfhuq90IGvhur90IG7hu5FpIE1RVFQiKQogICAgICAgIAogICAgICAgICMgROG7q25nIHThuqV0IGPhuqMgYXV0by1yZWNvbm5lY3QKICAgICAgICBzZWxmLnN0b3BfZXZlbnQuc2V0KCkKICAgIAogICAgZGVmIHNldHVwX21xdHRfaGFuZGxlcnMoc2VsZik6CiAgICAgICAgIiIiVGhp4bq/dCBs4bqtcCBjw6FjIGhhbmRsZXIgY2hvIE1RVFQgdGFza3MiIiIKICAgICAgICAjIMSQxINuZyBrw70gY8OhYyB0YXNrIGhhbmRsZXIgbeG6t2MgxJHhu4tuaAogICAgICAgIHNlbGYucmVnaXN0ZXJfdGFza19oYW5kbGVyKCJ1cGRhdGVfY29uZmlnIiwgc2VsZi5faGFuZGxlX3VwZGF0ZV9kZXZpY2VfY29uZmlnKQogICAgICAgIHNlbGYucmVnaXN0ZXJfdGFza19oYW5kbGVyKCJ1cGRhdGVfc3luY2VkIiwgc2VsZi5faGFuZGxlX3VwZGF0ZV9zeW5jZWQpCiAgICAgICAgc2VsZi5yZWdpc3Rlcl90YXNrX2hhbmRsZXIoImFjY291bnRfdXBkYXRlIiwgc2VsZi5faGFuZGxlX2FjY291bnRfdXBkYXRlKQogICAgICAgIAogICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHRoaeG6v3QgbOG6rXAgY8OhYyBNUVRUIHRhc2sgaGFuZGxlciIpCiAgICAgICAgCiAgICBkZWYgX2hhbmRsZV91cGRhdGVfZGV2aWNlX2NvbmZpZyhzZWxmLCB0YXNrX2RhdGEpOgogICAgICAgICIiIgogICAgICAgIFjhu60gbMO9IHRhc2sgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfZGF0YTogROG7ryBsaeG7h3UgdGFzayB04burIHNlcnZlcgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgdGFza19pZCA9IHRhc2tfZGF0YS5nZXQoInRhc2tfaWQiKQogICAgICAgICAgICBkZXZpY2VfaWQgPSB0YXNrX2RhdGEuZ2V0KCJkZXZpY2VfaWQiKQogICAgICAgICAgICAKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJOaOG6rW4gecOqdSBj4bqndSBj4bqtcCBuaOG6rXQgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLIHThu6sgc2VydmVyICh0YXNrX2lkOiB7dGFza19pZH0pIikKICAgICAgICAgICAgY29uZmlnX2RhdGEgPSB0YXNrX2RhdGEuZ2V0KCJjb25maWdfZGF0YSIsIHt9KQogICAgICAgICAgICBpZiBub3QgY29uZmlnX2RhdGE6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiROG7ryBsaeG7h3UgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLIHLhu5duZyIpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgIkThu68gbGnhu4d1IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iyBy4buXbmciKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEzGsHUgdOG7q25nIGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iwogICAgICAgICAgICBzdWNjZXNzID0gc2VsZi5kYi5zYXZlX2RldmljZV9jb25maWcoY29uZmlnX2RhdGEpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBzdWNjZXNzOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiLEkMOjIGPhuq1wIG5o4bqtdCBj4bqldSBow6xuaCB0aGnhur90IGLhu4s6IHsnLCAnLmpvaW4oY29uZmlnX2RhdGEua2V5cygpKX0iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBzeW5jX2ludGVydmFsIG7hur91IG7DsyB0aGF5IMSR4buVaQogICAgICAgICAgICAgICAgaWYgInN5bmNfaW50ZXJ2YWwiIGluIGNvbmZpZ19kYXRhOgogICAgICAgICAgICAgICAgICAgIG5ld19zeW5jX2ludGVydmFsID0gY29uZmlnX2RhdGFbInN5bmNfaW50ZXJ2YWwiXQogICAgICAgICAgICAgICAgICAgIGlmIG5ld19zeW5jX2ludGVydmFsICE9IHNlbGYuc3luY19pbnRlcnZhbDoKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJD4bqtcCBuaOG6rXQgc3luY19pbnRlcnZhbCB04burIHtzZWxmLnN5bmNfaW50ZXJ2YWx9IHRow6BuaCB7bmV3X3N5bmNfaW50ZXJ2YWx9IikKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zeW5jX2ludGVydmFsID0gbmV3X3N5bmNfaW50ZXJ2YWwKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgS2jhu59pIMSR4buZbmcgbOG6oWkgdGhyZWFkIMSR4buTbmcgYuG7mSBu4bq/dSDEkWFuZyBjaOG6oXkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5zeW5jX3RocmVhZCBpcyBub3QgTm9uZSBhbmQgc2VsZi5zeW5jX3RocmVhZC5pc19hbGl2ZSgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkto4bufaSDEkeG7mW5nIGzhuqFpIHRocmVhZCDEkeG7k25nIGLhu5kgduG7m2kga2hv4bqjbmcgdGjhu51pIGdpYW4gbeG7m2kiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zdG9wX3N5bmNfdGhyZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhcnRfc3luY190aHJlYWQoKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFRow7RuZyBiw6FvIGNobyBKb2JTZXJ2aWNlIG7hur91IGPDsyB0aGF5IMSR4buVaSBsacOqbiBxdWFuIMSR4bq/biBqb2JzCiAgICAgICAgICAgICAgICBqb2JfcmVsYXRlZF9rZXlzID0gWyJtYXhfam9ic19wZXJfZGF5IiwgIm1heF9qb2JzX3Blcl9zZXNzaW9uIiwgImpvYl9pbnRlcnZhbF9zZWNvbmRzIiwiY2FyZV9pbl93b3JraW5nX2pvYiJdCiAgICAgICAgICAgICAgICBpZiBhbnkoa2V5IGluIGNvbmZpZ19kYXRhIGZvciBrZXkgaW4gam9iX3JlbGF0ZWRfa2V5cyk6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsOBcCBk4bulbmcgY+G6pXUgaMOsbmggbeG7m2kgY2hvIEpvYlNlcnZpY2UiKQogICAgICAgICAgICAgICAgICAgICMgS2jDtG5nIGPhuqduIGto4bufaSDEkeG7mW5nIGzhuqFpLCBKb2JTZXJ2aWNlIHPhur0gbOG6pXkgY+G6pXUgaMOsbmggbeG7m2kga2hpIGPhuqduCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgR+G7rWkgYsOhbyBjw6FvIHRow6BuaCBjw7RuZwogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgInN1Y2Nlc3MiLCBmIsSQw6MgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7izogeycsICcuam9pbihjb25maWdfZGF0YS5rZXlzKCkpfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGVycm9yX21zZyA9ICJLaMO0bmcgdGjhu4MgY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7iyIKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgZXJyb3JfbXNnKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGVycm9yX21zZyA9IGYiTOG7l2kgeOG7rSBsw70gY+G6rXAgbmjhuq10IGPhuqV1IGjDrG5oIHRoaeG6v3QgYuG7izoge3N0cihlKX0iCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICAgICAgICAgIHRhc2tfaWQgPSB0YXNrX2RhdGEuZ2V0KCJ0YXNrX2lkIikKICAgICAgICAgICAgZGV2aWNlX2lkID0gdGFza19kYXRhLmdldCgiZGV2aWNlX2lkIikKICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKCiAgICBkZWYgX2hhbmRsZV91cGRhdGVfc3luY2VkKHNlbGYsIHRhc2tfZGF0YSk6CiAgICAgICAgIiIiCiAgICAgICAgWOG7rSBsw70gdGFzayBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSDEkeG7k25nIGLhu5kKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YXNrX2RhdGE6IEThu68gbGnhu4d1IHRhc2sgdOG7qyBzZXJ2ZXIKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJOaOG6rW4gecOqdSBj4bqndSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSDEkeG7k25nIGLhu5kgdOG7qyBzZXJ2ZXIiKQogICAgICAgICAgICBkYXRhID0gdGFza19kYXRhLmdldCgiZGF0YSIsIHt9KQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkMOhbmggZOG6pXUgdMOgaSBraG/huqNuIMSRw6MgxJHhu5NuZyBi4buZCiAgICAgICAgICAgIGlmICJhY2NvdW50cyIgaW4gZGF0YSBhbmQgaXNpbnN0YW5jZShkYXRhWyJhY2NvdW50cyJdLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciBhY2NvdW50X3V1aWQgaW4gZGF0YVsiYWNjb3VudHMiXToKICAgICAgICAgICAgICAgICAgICBzZWxmLmRiLm1hcmtfYXNfc3luY2VkKCJhY2NvdW50cyIsIGFjY291bnRfdXVpZCkKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoZiLEkMOhbmggZOG6pXUgdMOgaSBraG/huqNuIMSRw6MgxJHhu5NuZyBi4buZOiB7YWNjb3VudF91dWlkfSIpCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IHtsZW4oZGF0YVsnYWNjb3VudHMnXSl9IHTDoGkga2hv4bqjbiDEkcOjIMSR4buTbmcgYuG7mSIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMSQw6FuaCBk4bqldSBqb2IgxJHDoyDEkeG7k25nIGLhu5kKICAgICAgICAgICAgaWYgImpvYnMiIGluIGRhdGEgYW5kIGlzaW5zdGFuY2UoZGF0YVsiam9icyJdLCBsaXN0KToKICAgICAgICAgICAgICAgIGZvciBqb2JfdXVpZCBpbiBkYXRhWyJqb2JzIl06CiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYi5tYXJrX2FzX3N5bmNlZCgiam9ic19oaXN0b3J5Iiwgam9iX3V1aWQpCiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGYixJDDoW5oIGThuqV1IGpvYiDEkcOjIMSR4buTbmcgYuG7mToge2pvYl91dWlkfSIpCiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IHtsZW4oZGF0YVsnam9icyddKX0gam9iIMSRw6MgxJHhu5NuZyBi4buZIikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgSGnhu4NuIHRo4buLIHRow7RuZyBiw6FvIHThu6sgc2VydmVyIG7hur91IGPDswogICAgICAgICAgICBpZiAibWVzc2FnZSIgaW4gdGFza19kYXRhOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUaMO0bmcgYsOhbyB04burIHNlcnZlcjoge3Rhc2tfZGF0YVsnbWVzc2FnZSddfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHjhu60gbMO9IGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIMSR4buTbmcgYuG7mToge3N0cihlKX0iKQogICAgICAgICAgICAKICAgIAogICAgZGVmIF9oYW5kbGVfYWNjb3VudF91cGRhdGUoc2VsZiwgdGFza19kYXRhKToKICAgICAgICAiIiIKICAgICAgICBY4butIGzDvSB0YXNrIGPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRhc2tfZGF0YTogROG7ryBsaeG7h3UgdGFzayB04burIHNlcnZlciBjw7MgY+G6pXUgdHLDumM6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ0YXNrX2lkIjogInRhc2tfMTc0OTM5OTUzNjI3Ml82NDEiLAogICAgICAgICAgICAgICAgImRldmljZV9pZCI6ICJhMTI1ZjYyNGY0MWE0ZjdjIiwKICAgICAgICAgICAgICAgICJ0YXNrX3R5cGUiOiAiYWNjb3VudF91cGRhdGUiLAogICAgICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImFwcCI6ICJpbnN0YWdyYW0iLAogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiaW5hY3RpdmUiLAogICAgICAgICAgICAgICAgICAgICJqb2JfbWF4X2RheSI6IDEwOCwKICAgICAgICAgICAgICAgICAgICAiam9iX3RvZGF5IjogMzAsCiAgICAgICAgICAgICAgICAgICAgImpvYl9lbmFibGUiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICJhY2NvdW50X3V1aWQiOiAiN2VkOTU1N2QtNzZhNC00N2Y3LTg4NTAtN2NlZWYwYzY5MGFmIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogIiIsCiAgICAgICAgICAgICAgICAic3RhdHVzIjogInBlbmRpbmciCiAgICAgICAgICAgIH0KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRhc2tfaWQgPSB0YXNrX2RhdGEuZ2V0KCJ0YXNrX2lkIikKICAgICAgICAgICAgZGV2aWNlX2lkID0gdGFza19kYXRhLmdldCgiZGV2aWNlX2lkIikKICAgICAgICAgICAgZGF0YSA9IHRhc2tfZGF0YS5nZXQoImRhdGEiLCB7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiTmjhuq1uIHnDqnUgY+G6p3UgY+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbiB04burIHNlcnZlciAodGFza19pZDoge3Rhc2tfaWR9KSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgZGF0YSBvciAiYWNjb3VudF91dWlkIiBub3QgaW4gZGF0YToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJE4buvIGxp4buHdSB0w6BpIGtob+G6o24ga2jDtG5nIGjhu6NwIGzhu4ciKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsICJE4buvIGxp4buHdSB0w6BpIGtob+G6o24ga2jDtG5nIGjhu6NwIGzhu4ciKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBM4bqleSB0w6BpIGtob+G6o24gdOG7qyBEQgogICAgICAgICAgICBhY2NvdW50ID0gc2VsZi5kYi5nZXRfYWNjb3VudF9ieV91dWlkKGRhdGFbImFjY291bnRfdXVpZCJdKQogICAgICAgICAgICBpZiBub3QgYWNjb3VudDoKICAgICAgICAgICAgICAgIGVycm9yX21zZyA9IGYiS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB24bubaSBVVUlEOiB7ZGF0YVsnYWNjb3VudF91dWlkJ119IgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZXJyb3JfbXNnKQogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3Rhc2tfcmVwb3J0KHRhc2tfaWQsIGRldmljZV9pZCwgImZhaWxlZCIsIGVycm9yX21zZykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdMOgaSBraG/huqNuCiAgICAgICAgICAgIHVwZGF0ZV9kYXRhID0ge30KICAgICAgICAgICAgdmFsaWRfZmllbGRzID0gWyJzdGF0dXMiLCAiam9iX21heF9kYXkiLCAibWF4X2pvYnNfcGVyX3Nlc3Npb24iLCAiam9iX2VuYWJsZSIsImpvYl9kaXNhYmxlX3VudGlsIiwibWF4X2ZvbGxvd19zZXNzaW9uIiwibWF4X2ZvbGxvd19kYXkiLCJkaXNhYmxlX2ZvbGxvdyJdCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkYXRhLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBrZXkgaW4gdmFsaWRfZmllbGRzOgogICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhW2tleV0gPSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgdXBkYXRlX2RhdGE6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygiS2jDtG5nIGPDsyB0aMO0bmcgdGluIGPhuqduIGPhuq1wIG5o4bqtdCIpCiAgICAgICAgICAgICAgICBzZWxmLnNlbmRfdGFza19yZXBvcnQodGFza19pZCwgZGV2aWNlX2lkLCAiZmFpbGVkIiwgIktow7RuZyBjw7MgdGjDtG5nIHRpbiBj4bqnbiBj4bqtcCBuaOG6rXQiKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgTMawdSBs4bqhaSB2w6BvIERCCiAgICAgICAgICAgIHVwZGF0ZV9kYXRhWyJpc19zeW5jIl0gPSBGYWxzZQogICAgICAgICAgICBzdWNjZXNzID0gc2VsZi5kYi51cGRhdGVfYWNjb3VudChhY2NvdW50WyJpZCJdLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHN1Y2Nlc3M6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIsSQw6MgY+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsICcnKX0gKFVVSUQ6IHtkYXRhWydhY2NvdW50X3V1aWQnXX0pIHbhu5tpIGThu68gbGnhu4d1OiB7dXBkYXRlX2RhdGF9IikKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJzdWNjZXNzIiwgZiLEkMOjIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnJyl9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGVycm9yX21zZyA9IGYiS2jDtG5nIHRo4buDIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCAnJyl9IgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGVycm9yX21zZyA9IGYiTOG7l2kgeOG7rSBsw70gY+G6rXAgbmjhuq10IHTDoGkga2hv4bqjbjoge3N0cihlKX0iCiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICAgICAgICAgIHNlbGYuc2VuZF90YXNrX3JlcG9ydCh0YXNrX2lkLCBkZXZpY2VfaWQsICJmYWlsZWQiLCBlcnJvcl9tc2cpCgogICAgZGVmIHN0YXJ0KHNlbGYpOgogICAgICAgICIiIgogICAgICAgIEto4bufaSDEkeG7mW5nIE1RVFQgc2VydmljZQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3Uga2jhu59pIMSR4buZbmcgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVGhp4bq/dCBs4bqtcCBjw6FjIGhhbmRsZXIgdHLGsOG7m2Mga2hpIGvhur90IG7hu5FpCiAgICAgICAgICAgIHNlbGYuc2V0dXBfbXF0dF9oYW5kbGVycygpCiAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgICMgS2jhu59pIMSR4buZbmcgc3luYyB0aHJlYWQgc2F1IGtoaSBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmcKICAgICAgICAgICAgc2VsZi5zdGFydF9zeW5jX3RocmVhZCgpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIGto4bufaSDEkeG7mW5nIE1RVFQgc2VydmljZSB2w6AgxJHhu5NuZyBi4buZIGThu68gbGnhu4d1IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXhjZXB0aW9uKGUsICJM4buXaSBraGkga2jhu59pIMSR4buZbmcgTVFUVCBzZXJ2aWNlIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9vbl9tZXNzYWdlKHNlbGYsIGNsaWVudCwgdXNlcmRhdGEsIG1zZywgcHJvcGVydGllcz1Ob25lKToKICAgICAgICAiIiIKICAgICAgICBDYWxsYmFjayBraGkgbmjhuq1uIMSRxrDhu6NjIG1lc3NhZ2UgdOG7qyBNUVRUIGJyb2tlcgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGNsaWVudDogTVFUVCBjbGllbnQgaW5zdGFuY2UKICAgICAgICAgICAgdXNlcmRhdGE6IFVzZXIgZGF0YSDEkcaw4bujYyB0cnV54buBbiB2w6BvIGNsaWVudAogICAgICAgICAgICBtc2c6IE1lc3NhZ2Ugb2JqZWN0IGNo4bupYSB0b3BpYyB2w6AgcGF5bG9hZAogICAgICAgICAgICBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzIGPhu6dhIG1lc3NhZ2UgKE1RVFQgdjUpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIk5o4bqtbiBtZXNzYWdlIHThu6sgdG9waWM6IHttc2cudG9waWN9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgUGFyc2UgcGF5bG9hZCBKU09OCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmxvYWRzKG1zZy5wYXlsb2FkLmRlY29kZSgndXRmLTgnKSkKICAgICAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiS2jDtG5nIHRo4buDIHBhcnNlIEpTT04gdOG7qyBwYXlsb2FkOiB7bXNnLnBheWxvYWR9IikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICAgICAgIyBY4butIGzDvSBtZXNzYWdlIGThu7FhIHRyw6puIHRvcGljCiAgICAgICAgICAgIGlmIG1zZy50b3BpYyA9PSBzZWxmLnRvcGljX3NlcnZlcl90YXNrOgogICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlX3NlcnZlcl90YXNrKHBheWxvYWQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIk5o4bqtbiBtZXNzYWdlIHThu6sgdG9waWMga2jDtG5nIHjDoWMgxJHhu4tuaDoge21zZy50b3BpY30iKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIGtoaSB44butIGzDvSBtZXNzYWdlOiB7c3RyKGUpfSIpCgogICAgZGVmIF9oYW5kbGVfc2VydmVyX3Rhc2soc2VsZiwgcGF5bG9hZDogRGljdFtzdHIsIEFueV0pOgogICAgICAgICIiIgogICAgICAgIFjhu60gbMO9IHRhc2sgdOG7qyBzZXJ2ZXIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBwYXlsb2FkOiBE4buvIGxp4buHdSB0YXNrIHThu6sgc2VydmVyCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICB0YXNrX3R5cGUgPSBwYXlsb2FkLmdldCgidGFza190eXBlIikKICAgICAgICAgICAgaWYgbm90IHRhc2tfdHlwZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJOaOG6rW4gdGFzayBraMO0bmcgY8OzIHRhc2tfdHlwZSIpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiTmjhuq1uIHRhc2sgdOG7qyBzZXJ2ZXI6IHt0YXNrX3R5cGV9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgR+G7jWkgaGFuZGxlciB0xrDGoW5nIOG7qW5nIG7hur91IMSRw6MgxJHEg25nIGvDvQogICAgICAgICAgICBpZiB0YXNrX3R5cGUgaW4gc2VsZi50YXNrX2hhbmRsZXJzOgogICAgICAgICAgICAgICAgc2VsZi50YXNrX2hhbmRsZXJzW3Rhc2tfdHlwZV0ocGF5bG9hZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYiS2jDtG5nIHTDrG0gdGjhuqV5IGhhbmRsZXIgY2hvIHRhc2tfdHlwZToge3Rhc2tfdHlwZX0iKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkzhu5dpIHjhu60gbMO9IHRhc2sgdOG7qyBzZXJ2ZXI6IHtzdHIoZSl9Iik=').decode('utf-8'))
