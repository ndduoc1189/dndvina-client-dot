import base64
exec(base64.b64decode('aW1wb3J0IHNxbGl0ZTMKaW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IHV1aWQKaW1wb3J0IHV0aWxzCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIExpc3QsIE9wdGlvbmFsLCBVbmlvbgppbXBvcnQgY29uZmlnCgojIFThuqFvIGxvZ2dlciBjaG8gRGF0YWJhc2VTZXJ2aWNlCmxvZ2dlciA9IHV0aWxzLmdldF9sb2dnZXIoIkRhdGFiYXNlU2VydmljZSIpCgpjbGFzcyBEYXRhYmFzZVNlcnZpY2U6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGJfcGF0aDogc3RyID0gImRhdGEuZGIiLCBkZWZhdWx0X2NvbmZpZ19wYXRoOiBzdHIgPSAiZGVmYXVsdENvbmZpZy5qc29uIik6CiAgICAgICAgc2VsZi5kYl9wYXRoID0gZGJfcGF0aAogICAgICAgIHNlbGYuZGVmYXVsdF9jb25maWdfcGF0aCA9IGRlZmF1bHRfY29uZmlnX3BhdGgKICAgICAgICBzZWxmLmxvY2FsID0gdGhyZWFkaW5nLmxvY2FsKCkgICMgTMawdSB0cuG7ryByacOqbmcgY2hvIG3hu5dpIHRocmVhZAogICAgICAgIAogICAgICAgICMgVOG6oW8gYuG6o25nIG7hur91IGNoxrBhIHThu5NuIHThuqFpCiAgICAgICAgc2VsZi5faW5pdF9kYigpCiAgICAgICAgCiAgICBkZWYgX2dldF9jb25uZWN0aW9uKHNlbGYpOgogICAgICAgICIiIkzhuqV5IGvhur90IG7hu5FpIFNRTGl0ZSBjaG8gdGhyZWFkIGhp4buHbiB04bqhaSIiIgogICAgICAgIGlmIG5vdCBoYXNhdHRyKHNlbGYubG9jYWwsICdjb25uJykgb3Igc2VsZi5sb2NhbC5jb25uIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYubG9jYWwuY29ubiA9IHNxbGl0ZTMuY29ubmVjdChzZWxmLmRiX3BhdGgpCiAgICAgICAgcmV0dXJuIHNlbGYubG9jYWwuY29ubgogICAgICAgIAogICAgZGVmIF9pbml0X2RiKHNlbGYpOgogICAgICAgICIiIkto4bufaSB04bqhbyBj4bqldSB0csO6YyBkYXRhYmFzZSBu4bq/dSBjaMawYSB04buTbiB04bqhaSIiIgogICAgICAgIGNvbm4gPSBzcWxpdGUzLmNvbm5lY3Qoc2VsZi5kYl9wYXRoKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAKICAgICAgICAjIFThuqFvIGLhuqNuZyBjb25maWcKICAgICAgICBjdXJzb3IuZXhlY3V0ZSgnJycKICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBjb25maWcgKAogICAgICAgICAgICBrZXkgVEVYVCBQUklNQVJZIEtFWSwKICAgICAgICAgICAgdmFsdWUgVEVYVAogICAgICAgICkKICAgICAgICAnJycpCiAgICAgICAgCiAgICAgICAgIyBU4bqhbyBi4bqjbmcgYWNjb3VudCB24bubaSB1dWlkCiAgICAgICAgY3Vyc29yLmV4ZWN1dGUoJycnCiAgICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYWNjb3VudHMgKAogICAgICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZLAogICAgICAgICAgICBhY2NvdW50X3V1aWQgVEVYVCBVTklRVUUsCiAgICAgICAgICAgIGFwcCBURVhULAogICAgICAgICAgICBuaWNrbmFtZSBURVhULAogICAgICAgICAgICB1bmlxdWVfaWQgVEVYVCwKICAgICAgICAgICAgdW5pcXVlX3VzZXJuYW1lIFRFWFQsCiAgICAgICAgICAgIHN0YXR1cyBURVhULAogICAgICAgICAgICBpbmFjdGl2ZV9yZWFzb24gVEVYVCwKICAgICAgICAgICAgaXNfbG9naW4gSU5URUdFUiwKICAgICAgICAgICAgYXZhdGFyX3RodW1iIFRFWFQsCiAgICAgICAgICAgIHRvdGFsX2pvYnMgSU5URUdFUiwKICAgICAgICAgICAgam9iX2VuYWJsZSBJTlRFR0VSLAogICAgICAgICAgICBqb2JfZGlzYWJsZV91bnRpbCBJTlRFR0VSLAogICAgICAgICAgICBqb2JfdG9kYXkgSU5URUdFUiwKICAgICAgICAgICAgam9iX21heF9kYXkgSU5URUdFUiwKICAgICAgICAgICAgam9ic19kb25lX2luX3Nlc3Npb24gSU5URUdFUiwKICAgICAgICAgICAgbWF4X2pvYnNfcGVyX3Nlc3Npb24gSU5URUdFUiwKICAgICAgICAgICAgbGFzdF9qb2JfdGltZSBJTlRFR0VSLAogICAgICAgICAgICBsYXN0X3VwZGF0ZSBJTlRFR0VSLAogICAgICAgICAgICBjYXJlX3RvZGF5IElOVEVHRVIsCiAgICAgICAgICAgIGlzX2dvbGlrZV9saW5rZWQgSU5URUdFUiBERUZBVUxUIDAsCiAgICAgICAgICAgIGdvbGlrZV9pZCBURVhULAogICAgICAgICAgICBkZXZpY2VfaWQgVEVYVCwKICAgICAgICAgICAgaXNfc3luYyBJTlRFR0VSIERFRkFVTFQgMCwKICAgICAgICAgICAgZGlzYWJsZV9mb2xsb3cgSU5URUdFUiBERUZBVUxUIDAsCiAgICAgICAgICAgIGZvbGxvd19kaXNhYmxlX3VudGlsIElOVEVHRVIgREVGQVVMVCAwLAogICAgICAgICAgICBmb2xsb3dfdG9kYXkgSU5URUdFUiBERUZBVUxUIDAsCiAgICAgICAgICAgIGZvbGxvd19pbl9zZXNzaW9uIElOVEVHRVIgREVGQVVMVCAwLAogICAgICAgICAgICBtYXhfZm9sbG93X2RheSBJTlRFR0VSIERFRkFVTFQgMjAsCiAgICAgICAgICAgIG1heF9mb2xsb3dfc2Vzc2lvbiBJTlRFR0VSIERFRkFVTFQgNSwKICAgICAgICAgICAgbGFzdF9mb2xsb3dfdGltZSBJTlRFR0VSIERFRkFVTFQgMCwKICAgICAgICAgICAgaW5hY3RpdmVfZm9sbG93X3JlYXNvbiBURVhULAogICAgICAgICAgICB1c2VyX2lkIFRFWFQsCiAgICAgICAgICAgIGRhdGEgVEVYVAogICAgICAgICkKICAgICAgICAnJycpCiAgICAgICAgCiAgICAgICAgIyBU4bqhbyBi4bqjbmcgam9ic19oaXN0b3J5IMSR4buDIGzGsHUgbOG7i2NoIHPhu60gam9iCiAgICAgICAgY3Vyc29yLmV4ZWN1dGUoJycnCiAgICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgam9ic19oaXN0b3J5ICgKICAgICAgICAgICAgaWQgSU5URUdFUiBQUklNQVJZIEtFWSwKICAgICAgICAgICAgam9iX3V1aWQgVEVYVCBVTklRVUUsCiAgICAgICAgICAgIGFjY291bnRfdXVpZCBURVhULAogICAgICAgICAgICBkZXZpY2VfaWQgVEVYVCwKICAgICAgICAgICAgYXBwIFRFWFQsCiAgICAgICAgICAgIGpvYl9pZCBURVhULAogICAgICAgICAgICBqb2JfdHlwZSBURVhULAogICAgICAgICAgICBvYmplY3RfaWQgVEVYVCwKICAgICAgICAgICAgbGluayBURVhULAogICAgICAgICAgICBzdGF0dXMgSU5URUdFUiBERUZBVUxUIDAsCiAgICAgICAgICAgIHN1Y2Nlc3MgSU5URUdFUiBERUZBVUxUIDAsCiAgICAgICAgICAgIHByaWNlIFJFQUwgREVGQVVMVCAwLAogICAgICAgICAgICBlcnJvcl9tZXNzYWdlIFRFWFQsCiAgICAgICAgICAgIGNyZWF0ZWRfYXQgSU5URUdFUiwKICAgICAgICAgICAgbGFzdF91cGRhdGUgSU5URUdFUiwKICAgICAgICAgICAgaXNfc3luYyBJTlRFR0VSIERFRkFVTFQgMCwKICAgICAgICAgICAgZGF0YSBURVhUCiAgICAgICAgKQogICAgICAgICcnJykKICAgICAgICAKICAgICAgICAjIEtp4buDbSB0cmEgdsOgIHRow6ptIGPhu5l0IGFjY291bnRfdXVpZCBu4bq/dSBjaMawYSB04buTbiB04bqhaQogICAgICAgIGN1cnNvci5leGVjdXRlKCJQUkFHTUEgdGFibGVfaW5mbyhhY2NvdW50cykiKQogICAgICAgIGNvbHVtbnMgPSBbcm93WzFdIGZvciByb3cgaW4gY3Vyc29yLmZldGNoYWxsKCldCiAgICAgICAgaWYgImFjY291bnRfdXVpZCIgbm90IGluIGNvbHVtbnM6CiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCJBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIGFjY291bnRfdXVpZCBURVhUIFVOSVFVRSIpCiAgICAgICAgICAgICMgVOG6oW8gVVVJRCBjaG8gY8OhYyB0w6BpIGtob+G6o24gxJHDoyB04buTbiB04bqhaQogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIGlkIEZST00gYWNjb3VudHMiKQogICAgICAgICAgICBhY2NvdW50cyA9IGN1cnNvci5mZXRjaGFsbCgpCiAgICAgICAgICAgIGZvciBhY2NvdW50IGluIGFjY291bnRzOgogICAgICAgICAgICAgICAgYWNjb3VudF9pZCA9IGFjY291bnRbMF0KICAgICAgICAgICAgICAgIGFjY291bnRfdXVpZCA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiVVBEQVRFIGFjY291bnRzIFNFVCBhY2NvdW50X3V1aWQgPSA/IFdIRVJFIGlkID0gPyIsIChhY2NvdW50X3V1aWQsIGFjY291bnRfaWQpKQogICAgICAgICAgICBwcmludCgixJDDoyB0aMOqbSBj4buZdCBhY2NvdW50X3V1aWQgdsOgbyBi4bqjbmcgYWNjb3VudHMgdsOgIHThuqFvIFVVSUQgY2hvIGPDoWMgdMOgaSBraG/huqNuIGhp4buHbiBjw7MiKQogICAgICAgIAogICAgICAgICMgS2nhu4NtIHRyYSB2w6AgdGjDqm0gY+G7mXQgdXNlcl9pZCBu4bq/dSBjaMawYSB04buTbiB04bqhaQogICAgICAgIGN1cnNvci5leGVjdXRlKCJQUkFHTUEgdGFibGVfaW5mbyhhY2NvdW50cykiKQogICAgICAgIGNvbHVtbnMgPSBbcm93WzFdIGZvciByb3cgaW4gY3Vyc29yLmZldGNoYWxsKCldCiAgICAgICAgaWYgInVzZXJfaWQiIG5vdCBpbiBjb2x1bW5zOgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiB1c2VyX2lkIFRFWFQiKQogICAgICAgICAgICBwcmludCgixJDDoyB0aMOqbSBj4buZdCB1c2VyX2lkIHbDoG8gYuG6o25nIGFjY291bnRzIikKICAgICAgICAgICAgCiAgICAgICAgIyBLaeG7g20gdHJhIHbDoCB0aMOqbSBj4buZdCBpc19zeW5jIG7hur91IGNoxrBhIHThu5NuIHThuqFpCiAgICAgICAgaWYgImlzX3N5bmMiIG5vdCBpbiBjb2x1bW5zOgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiBpc19zeW5jIElOVEVHRVIgREVGQVVMVCAwIikKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIsSQw6MgdGjDqm0gY+G7mXQgaXNfc3luYyB2w6BvIGLhuqNuZyBhY2NvdW50cyIpCiAgICAgICAgCiAgICAgICAgIyBU4bqhbyB1bmlxdWUgaW5kZXggY2hvIChhcHAsIHVuaXF1ZV91c2VybmFtZSkgxJHhu4MgdHLDoW5oIGR1cGxpY2F0ZSBhY2NvdW50cwogICAgICAgIHRyeToKICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIkNSRUFURSBVTklRVUUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfYWNjb3VudHNfYXBwX3VzZXJuYW1lIE9OIGFjY291bnRzKGFwcCwgdW5pcXVlX3VzZXJuYW1lKSIpCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCLEkMOjIHThuqFvIHVuaXF1ZSBpbmRleCBjaG8gKGFwcCwgdW5pcXVlX3VzZXJuYW1lKSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAjIE7hur91IGPDsyBkdXBsaWNhdGUgZGF0YSwgY+G6p24gY2xlYW51cCB0csaw4bubYwogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmIkPhuqNuaCBiw6FvIGtoaSB04bqhbyB1bmlxdWUgaW5kZXg6IHtlfSIpCiAgICAgICAgICAgIHNlbGYuX2NsZWFudXBfZHVwbGljYXRlX2FjY291bnRzKGN1cnNvcikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIkNSRUFURSBVTklRVUUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfYWNjb3VudHNfYXBwX3VzZXJuYW1lIE9OIGFjY291bnRzKGFwcCwgdW5pcXVlX3VzZXJuYW1lKSIpCiAgICAgICAgICAgICAgICBwcmludCgixJDDoyB04bqhbyB1bmlxdWUgaW5kZXggY2hvIChhcHAsIHVuaXF1ZV91c2VybmFtZSkgc2F1IGtoaSBjbGVhbnVwIikKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlMjoKICAgICAgICAgICAgICAgIHByaW50KGYiS2jDtG5nIHRo4buDIHThuqFvIHVuaXF1ZSBpbmRleDoge2UyfSIpCiAgICAgICAgCiAgICAgICAgIyBUaMOqbSBj4buZdCBkaXNhYmxlX2ZvbGxvdyBu4bq/dSBjaMawYSBjw7MKICAgICAgICBpZiAiZGlzYWJsZV9mb2xsb3ciIG5vdCBpbiBjb2x1bW5zOgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiBkaXNhYmxlX2ZvbGxvdyBJTlRFR0VSIERFRkFVTFQgMCIpCiAgICAgICAgICAgIHByaW50KCLEkMOjIHRow6ptIGPhu5l0IGRpc2FibGVfZm9sbG93IHbDoG8gYuG6o25nIGFjY291bnRzIikKICAgICAgICAKICAgICAgICAjIFRow6ptIGPhu5l0IGZvbGxvd19kaXNhYmxlX3VudGlsIG7hur91IGNoxrBhIGPDswogICAgICAgIGlmICJmb2xsb3dfZGlzYWJsZV91bnRpbCIgbm90IGluIGNvbHVtbnM6CiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCJBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIGZvbGxvd19kaXNhYmxlX3VudGlsIElOVEVHRVIgREVGQVVMVCAwIikKICAgICAgICAgICAgcHJpbnQoIsSQw6MgdGjDqm0gY+G7mXQgZm9sbG93X2Rpc2FibGVfdW50aWwgdsOgbyBi4bqjbmcgYWNjb3VudHMiKQogICAgICAgIAogICAgICAgICMgVGjDqm0gY8OhYyBj4buZdCBmb2xsb3cgdHJhY2tpbmcgbuG6v3UgY2jGsGEgY8OzCiAgICAgICAgZm9sbG93X2NvbHVtbnMgPSBbCiAgICAgICAgICAgICgiZm9sbG93X3RvZGF5IiwgIklOVEVHRVIgREVGQVVMVCAwIiksCiAgICAgICAgICAgICgiZm9sbG93X2luX3Nlc3Npb24iLCAiSU5URUdFUiBERUZBVUxUIDAiKSwKICAgICAgICAgICAgKCJtYXhfZm9sbG93X2RheSIsICJJTlRFR0VSIERFRkFVTFQgMjAiKSwKICAgICAgICAgICAgKCJtYXhfZm9sbG93X3Nlc3Npb24iLCAiSU5URUdFUiBERUZBVUxUIDUiKSwKICAgICAgICAgICAgKCJsYXN0X2ZvbGxvd190aW1lIiwgIklOVEVHRVIgREVGQVVMVCAwIiksCiAgICAgICAgICAgICgiaW5hY3RpdmVfZm9sbG93X3JlYXNvbiIsICJURVhUIikKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgZm9yIGNvbF9uYW1lLCBjb2xfdHlwZSBpbiBmb2xsb3dfY29sdW1uczoKICAgICAgICAgICAgaWYgY29sX25hbWUgbm90IGluIGNvbHVtbnM6CiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZShmIkFMVEVSIFRBQkxFIGFjY291bnRzIEFERCBDT0xVTU4ge2NvbF9uYW1lfSB7Y29sX3R5cGV9IikKICAgICAgICAgICAgICAgIHByaW50KGYixJDDoyB0aMOqbSBj4buZdCB7Y29sX25hbWV9IHbDoG8gYuG6o25nIGFjY291bnRzIikKICAgICAgICAKICAgICAgICAjIFRow6ptIGPDoWMgY+G7mXQgY2FyZSB0cmFja2luZyBu4bq/dSBjaMawYSBjw7MKICAgICAgICBjYXJlX2NvbHVtbnMgPSBbCiAgICAgICAgICAgICgibGFzdF9jYXJlX3RpbWUiLCAiSU5URUdFUiBERUZBVUxUIDAiKSwKICAgICAgICAgICAgKCJsYXN0X3ZpZXdfc3RvcmllcyIsICJJTlRFR0VSIERFRkFVTFQgMCIpLAogICAgICAgICAgICAoImNhcmVfZGF0YSIsICJURVhUIiksICAjIEzGsHUgSlNPTiBTbWFydCBDYXJlIGNobyB04burbmcgdMOgaSBraG/huqNuCiAgICAgICAgICAgICgibGFzdF9wb3N0X3RpbWUiLCAiSU5URUdFUiBERUZBVUxUIDAiKSAgIyBUaOG7nWkgZ2lhbiDEkcSDbmcgYsOgaSBn4bqnbiBuaOG6pXQKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgZm9yIGNvbF9uYW1lLCBjb2xfdHlwZSBpbiBjYXJlX2NvbHVtbnM6CiAgICAgICAgICAgIGlmIGNvbF9uYW1lIG5vdCBpbiBjb2x1bW5zOgogICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoZiJBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIHtjb2xfbmFtZX0ge2NvbF90eXBlfSIpCiAgICAgICAgICAgICAgICBwcmludChmIsSQw6MgdGjDqm0gY+G7mXQge2NvbF9uYW1lfSB2w6BvIGLhuqNuZyBhY2NvdW50cyIpCiAgICAgICAgCiAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgIGNvbm4uY2xvc2UoKQogICAgICAgIAogICAgZGVmIF9jbGVhbnVwX2R1cGxpY2F0ZV9hY2NvdW50cyhzZWxmLCBjdXJzb3IpOgogICAgICAgICIiIgogICAgICAgIEThu41uIGThurlwIGPDoWMgdMOgaSBraG/huqNuIGR1cGxpY2F0ZSBk4buxYSB0csOqbiAoYXBwLCB1bmlxdWVfdXNlcm5hbWUpCiAgICAgICAgR2nhu68gbOG6oWkgdMOgaSBraG/huqNuIGPDsyBpZCBs4bubbiBuaOG6pXQgKG3hu5tpIG5o4bqldCkKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgVMOsbSBjw6FjIG5ow7NtIGR1cGxpY2F0ZQogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiIiIKICAgICAgICAgICAgICAgIFNFTEVDVCBhcHAsIHVuaXF1ZV91c2VybmFtZSwgQ09VTlQoKikgYXMgY291bnQKICAgICAgICAgICAgICAgIEZST00gYWNjb3VudHMgCiAgICAgICAgICAgICAgICBXSEVSRSB1bmlxdWVfdXNlcm5hbWUgSVMgTk9UIE5VTEwgQU5EIHVuaXF1ZV91c2VybmFtZSAhPSAnJwogICAgICAgICAgICAgICAgR1JPVVAgQlkgYXBwLCB1bmlxdWVfdXNlcm5hbWUgCiAgICAgICAgICAgICAgICBIQVZJTkcgQ09VTlQoKikgPiAxCiAgICAgICAgICAgICIiIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGR1cGxpY2F0ZXMgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgICAgICAgICBpZiBub3QgZHVwbGljYXRlczoKICAgICAgICAgICAgICAgIHByaW50KCJLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIGR1cGxpY2F0ZSBuw6BvIikKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KGYiVMOsbSB0aOG6pXkge2xlbihkdXBsaWNhdGVzKX0gbmjDs20gdMOgaSBraG/huqNuIGR1cGxpY2F0ZSwgxJFhbmcgZOG7jW4gZOG6uXAuLi4iKQogICAgICAgICAgICAKICAgICAgICAgICAgdG90YWxfZGVsZXRlZCA9IDAKICAgICAgICAgICAgZm9yIGFwcCwgdXNlcm5hbWUsIGNvdW50IGluIGR1cGxpY2F0ZXM6CiAgICAgICAgICAgICAgICAjIEzhuqV5IHThuqV0IGPhuqMgdMOgaSBraG/huqNuIGR1cGxpY2F0ZSBj4bunYSBuaMOzbSBuw6B5CiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiIiIKICAgICAgICAgICAgICAgICAgICBTRUxFQ1QgaWQgRlJPTSBhY2NvdW50cyAKICAgICAgICAgICAgICAgICAgICBXSEVSRSBhcHAgPSA/IEFORCB1bmlxdWVfdXNlcm5hbWUgPSA/IAogICAgICAgICAgICAgICAgICAgIE9SREVSIEJZIGlkIERFU0MKICAgICAgICAgICAgICAgICIiIiwgKGFwcCwgdXNlcm5hbWUpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBhY2NvdW50X2lkcyA9IFtyb3dbMF0gZm9yIHJvdyBpbiBjdXJzb3IuZmV0Y2hhbGwoKV0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBHaeG7ryBs4bqhaSB0w6BpIGtob+G6o24gxJHhuqd1IHRpw6puIChpZCBs4bubbiBuaOG6pXQpLCB4w7NhIGPDoWMgdMOgaSBraG/huqNuIGPDsm4gbOG6oWkKICAgICAgICAgICAgICAgIGlmIGxlbihhY2NvdW50X2lkcykgPiAxOgogICAgICAgICAgICAgICAgICAgIGtlZXBfaWQgPSBhY2NvdW50X2lkc1swXSAgIyBJRCBs4bubbiBuaOG6pXQgKG3hu5tpIG5o4bqldCkKICAgICAgICAgICAgICAgICAgICBkZWxldGVfaWRzID0gYWNjb3VudF9pZHNbMTpdICAjIEPDoWMgSUQgY8OybiBs4bqhaQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBkZWxldGVfaWQgaW4gZGVsZXRlX2lkczoKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIkRFTEVURSBGUk9NIGFjY291bnRzIFdIRVJFIGlkID0gPyIsIChkZWxldGVfaWQsKSkKICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfZGVsZXRlZCArPSAxCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLEkMOjIHjDs2Ege2xlbihkZWxldGVfaWRzKX0gdMOgaSBraG/huqNuIGR1cGxpY2F0ZSBjaG8ge2FwcH06e3VzZXJuYW1lfSwgZ2nhu68gbOG6oWkgSUQge2tlZXBfaWR9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KGYixJDDoyBob8OgbiB0aMOgbmggZOG7jW4gZOG6uXAsIHjDs2EgdOG7lW5nIGPhu5luZyB7dG90YWxfZGVsZXRlZH0gdMOgaSBraG/huqNuIGR1cGxpY2F0ZSIpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgZOG7jW4gZOG6uXAgZHVwbGljYXRlIGFjY291bnRzOiB7ZX0iKQogICAgICAgIAogICAgICAgICMgS2jhu59pIHThuqFvIGPhuqV1IGjDrG5oIG3hurdjIMSR4buLbmggdOG7qyBjb25maWcucHkKICAgICAgICBzZWxmLmluaXRfZGVmYXVsdF9jb25maWcoKQogICAgICAgIAogICAgZGVmIGxvYWRfZGVmYXVsdF9jb25maWcoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIixJDhu41jIGPhuqV1IGjDrG5oIG3hurdjIMSR4buLbmggdOG7qyBmaWxlIiIiCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoc2VsZi5kZWZhdWx0X2NvbmZpZ19wYXRoKToKICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYuZGVmYXVsdF9jb25maWdfcGF0aCwgJ3InKSBhcyBmOgogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZChmKQogICAgICAgIHJldHVybiB7fQogICAgICAgIAogICAgZGVmIGdldChzZWxmLCBrZXk6IHN0ciwgZGVmYXVsdD1Ob25lKSAtPiBBbnk6CiAgICAgICAgIiIiTOG6pXkgZ2nDoSB0cuG7iyBj4bqldSBow6xuaCB04burIERCLCBu4bq/dSBraMO0bmcgY8OzIHRow6wgbOG6pXkgdOG7qyBkZWZhdWx0IGNvbmZpZyIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgdmFsdWUgRlJPTSBjb25maWcgV0hFUkUga2V5ID0gPyIsIChrZXksKSkKICAgICAgICByZXN1bHQgPSBjdXJzb3IuZmV0Y2hvbmUoKQogICAgICAgIAogICAgICAgIGlmIHJlc3VsdDoKICAgICAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgduG7gSBraeG7g3UgZOG7ryBsaeG7h3UgcGjDuSBo4bujcAogICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdFswXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5sb2Fkcyh2YWx1ZSkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBM4bqleSB04burIGRlZmF1bHQgY29uZmlnCiAgICAgICAgICAgIGRlZmF1bHRfY29uZmlnID0gc2VsZi5sb2FkX2RlZmF1bHRfY29uZmlnKCkKICAgICAgICAgICAgaWYga2V5IGluIGRlZmF1bHRfY29uZmlnOgogICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRfY29uZmlnW2tleV0KICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHQKICAgIAogICAgZGVmIHNldChzZWxmLCBrZXk6IHN0ciwgdmFsdWU6IEFueSkgLT4gYm9vbDoKICAgICAgICAiIiJMxrB1IGdpw6EgdHLhu4sgY+G6pXUgaMOsbmggdsOgbyBEQiIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGThu68gbGnhu4d1IHBo4bupYyB04bqhcCB0aMOgbmggSlNPTgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChkaWN0LCBsaXN0KSk6CiAgICAgICAgICAgIHZhbHVlID0ganNvbi5kdW1wcyh2YWx1ZSkKICAgICAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgKICAgICAgICAgICAgICAgICJJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIGNvbmZpZyAoa2V5LCB2YWx1ZSkgVkFMVUVTICg/LCA/KSIsCiAgICAgICAgICAgICAgICAoa2V5LCB2YWx1ZSkKICAgICAgICAgICAgKQogICAgICAgICAgICBjb25uLmNvbW1pdCgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBsxrB1IGPhuqV1IGjDrG5oOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIGRlbGV0ZShzZWxmLCBrZXk6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiJYw7NhIG3hu5l0IGPhuqV1IGjDrG5oIGto4buPaSBkYXRhYmFzZQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGtleTogS2jDs2EgY+G6pXUgaMOsbmggY+G6p24geMOzYQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiREVMRVRFIEZST00gY29uZmlnIFdIRVJFIGtleSA9ID8iLCAoa2V5LCkpCiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHjDs2EgY+G6pXUgaMOsbmgge2tleX06IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgc2F2ZV9kZXZpY2VfaW5mbyhzZWxmLCBkZXZpY2VfaW5mbzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiTMawdSB0aMO0bmcgdGluIHRoaeG6v3QgYuG7iyB2w6BvIGPhuqV1IGjDrG5oIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuc2V0KCJkZXZpY2VfaW5mbyIsIGRldmljZV9pbmZvKQogICAgCiAgICBkZWYgZ2V0X2RldmljZV9pbmZvKHNlbGYpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIkzhuqV5IHRow7RuZyB0aW4gdGhp4bq/dCBi4buLIMSRw6MgbMawdSIiIgogICAgICAgIGRldmljZV9pbmZvID0gc2VsZi5nZXQoImRldmljZV9pbmZvIiwge30pCiAgICAgICAgcmV0dXJuIGRldmljZV9pbmZvCiAgICAKICAgIGRlZiBhZGRfYWNjb3VudChzZWxmLCBhY2NvdW50X2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIlRow6ptIHTDoGkga2hv4bqjbiBt4bubaSB2w6BvIGRhdGFiYXNlIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgIyBJbXBvcnQgY29uZmlnIG1vZHVsZQogICAgICAgIGltcG9ydCBjb25maWcgYXMgY29uZmlnX21vZHVsZQogICAgICAgIAogICAgICAgICMgTuG6v3Uga2jDtG5nIGPDsyBkZXZpY2VfaWQsIHPhu60gZOG7pW5nIGRldmljZV9pZCBoaeG7h24gdOG6oWkKICAgICAgICBkZXZpY2VfaWQgPSBhY2NvdW50X2RhdGEuZ2V0KCJkZXZpY2VfaWQiKQogICAgICAgIGlmIG5vdCBkZXZpY2VfaWQ6CiAgICAgICAgICAgIGRldmljZV9pZCA9IHNlbGYuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgIAogICAgICAgICMgTOG6pXkgdXNlcl9pZCB04burIGRhdGFiYXNlIGNvbmZpZyBob+G6t2MgdOG7qyBhY2NvdW50X2RhdGEKICAgICAgICB1c2VyX2lkID0gYWNjb3VudF9kYXRhLmdldCgidXNlcl9pZCIpCiAgICAgICAgaWYgbm90IHVzZXJfaWQ6CiAgICAgICAgICAgIHVzZXJfaWQgPSBzZWxmLmdldCgidXNlcl9pZCIpICAjIEzhuqV5IHThu6sgY29uZmlnIGRhdGFiYXNlCiAgICAgICAgCiAgICAgICAgIyBUw6FjaCBk4buvIGxp4buHdSBjaMOtbmggdsOgIGThu68gbGnhu4d1IHBo4bulCiAgICAgICAgbWFpbl9kYXRhID0gewogICAgICAgICAgICAiYXBwIjogYWNjb3VudF9kYXRhLmdldCgiYXBwIiwgIiIpLAogICAgICAgICAgICAibmlja25hbWUiOiBhY2NvdW50X2RhdGEuZ2V0KCJuaWNrbmFtZSIsICIiKSwKICAgICAgICAgICAgInVuaXF1ZV9pZCI6IGFjY291bnRfZGF0YS5nZXQoInVuaXF1ZV9pZCIsICIiKSwKICAgICAgICAgICAgInVuaXF1ZV91c2VybmFtZSI6IGFjY291bnRfZGF0YS5nZXQoInVuaXF1ZV91c2VybmFtZSIsICIiKSwKICAgICAgICAgICAgInN0YXR1cyI6IGFjY291bnRfZGF0YS5nZXQoInN0YXR1cyIsICJpbmFjdGl2ZSIpLAogICAgICAgICAgICAiaW5hY3RpdmVfcmVhc29uIjogYWNjb3VudF9kYXRhLmdldCgiaW5hY3RpdmVfcmVhc29uIiwgIiIpLAogICAgICAgICAgICAiaXNfbG9naW4iOiAxIGlmIGFjY291bnRfZGF0YS5nZXQoImlzX2xvZ2luIiwgRmFsc2UpIGVsc2UgMCwKICAgICAgICAgICAgImF2YXRhcl90aHVtYiI6IGFjY291bnRfZGF0YS5nZXQoImF2YXRhcl90aHVtYiIsICIiKSwKICAgICAgICAgICAgInRvdGFsX2pvYnMiOiBhY2NvdW50X2RhdGEuZ2V0KCJ0b3RhbF9qb2JzIiwgMCksCiAgICAgICAgICAgICJqb2JfZW5hYmxlIjogMSBpZiBhY2NvdW50X2RhdGEuZ2V0KCJqb2JfZW5hYmxlIiwgVHJ1ZSkgZWxzZSAwLAogICAgICAgICAgICAiam9iX2Rpc2FibGVfdW50aWwiOiBhY2NvdW50X2RhdGEuZ2V0KCJqb2JfZGlzYWJsZV91bnRpbCIsIDApLAogICAgICAgICAgICAiam9iX3RvZGF5IjogYWNjb3VudF9kYXRhLmdldCgiam9iX3RvZGF5IiwgMCksCiAgICAgICAgICAgICJqb2JfbWF4X2RheSI6IGFjY291bnRfZGF0YS5nZXQoImpvYl9tYXhfZGF5IiwgY29uZmlnX21vZHVsZS5NQVhfSk9CU19QRVJfREFZKSwKICAgICAgICAgICAgImpvYnNfZG9uZV9pbl9zZXNzaW9uIjogYWNjb3VudF9kYXRhLmdldCgiam9ic19kb25lX2luX3Nlc3Npb24iLCAwKSwKICAgICAgICAgICAgIm1heF9qb2JzX3Blcl9zZXNzaW9uIjogYWNjb3VudF9kYXRhLmdldCgibWF4X2pvYnNfcGVyX3Nlc3Npb24iLCBjb25maWdfbW9kdWxlLk1BWF9KT0JTX1BFUl9TRVNTSU9OKSwKICAgICAgICAgICAgImxhc3Rfam9iX3RpbWUiOiBhY2NvdW50X2RhdGEuZ2V0KCJsYXN0X2pvYl90aW1lIiwgMCksCiAgICAgICAgICAgICJsYXN0X3VwZGF0ZSI6IGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICJjYXJlX3RvZGF5IjogYWNjb3VudF9kYXRhLmdldCgiY2FyZV90b2RheSIsIDApLAogICAgICAgICAgICAiaXNfZ29saWtlX2xpbmtlZCI6IDEgaWYgYWNjb3VudF9kYXRhLmdldCgiaXNfZ29saWtlX2xpbmtlZCIsIEZhbHNlKSBlbHNlIDAsCiAgICAgICAgICAgICJnb2xpa2VfaWQiOiBhY2NvdW50X2RhdGEuZ2V0KCJnb2xpa2VfaWQiLCAiIiksCiAgICAgICAgICAgICJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsCiAgICAgICAgICAgICJpc19zeW5jIjogMSBpZiBhY2NvdW50X2RhdGEuZ2V0KCJpc19zeW5jIiwgRmFsc2UpIGVsc2UgMCwKICAgICAgICAgICAgImRpc2FibGVfZm9sbG93IjogMSBpZiBhY2NvdW50X2RhdGEuZ2V0KCJkaXNhYmxlX2ZvbGxvdyIsIEZhbHNlKSBlbHNlIDAsCiAgICAgICAgICAgICJmb2xsb3dfZGlzYWJsZV91bnRpbCI6IGFjY291bnRfZGF0YS5nZXQoImZvbGxvd19kaXNhYmxlX3VudGlsIiwgMCksCiAgICAgICAgICAgICJmb2xsb3dfdG9kYXkiOiBhY2NvdW50X2RhdGEuZ2V0KCJmb2xsb3dfdG9kYXkiLCAwKSwKICAgICAgICAgICAgImZvbGxvd19pbl9zZXNzaW9uIjogYWNjb3VudF9kYXRhLmdldCgiZm9sbG93X2luX3Nlc3Npb24iLCAwKSwKICAgICAgICAgICAgImxhc3RfZm9sbG93X3RpbWUiOiBhY2NvdW50X2RhdGEuZ2V0KCJsYXN0X2ZvbGxvd190aW1lIiwgMCksCiAgICAgICAgICAgICJpbmFjdGl2ZV9mb2xsb3dfcmVhc29uIjogYWNjb3VudF9kYXRhLmdldCgiaW5hY3RpdmVfZm9sbG93X3JlYXNvbiIsICIiKSwKICAgICAgICAgICAgImxhc3RfY2FyZV90aW1lIjogYWNjb3VudF9kYXRhLmdldCgibGFzdF9jYXJlX3RpbWUiLCAwKSwKICAgICAgICAgICAgImxhc3Rfdmlld19zdG9yaWVzIjogYWNjb3VudF9kYXRhLmdldCgibGFzdF92aWV3X3N0b3JpZXMiLCAwKSwKICAgICAgICAgICAgInVzZXJfaWQiOiB1c2VyX2lkLCAgIyBUaMOqbSB1c2VyX2lkIHbDoG8gYWNjb3VudAogICAgICAgICAgICAiYWNjb3VudF91dWlkIjogYWNjb3VudF9kYXRhLmdldCgiYWNjb3VudF91dWlkIiwgc3RyKHV1aWQudXVpZDQoKSkpLCAgIyBU4bqhbyBVVUlEIG7hur91IGNoxrBhIGPDswogICAgICAgIH0KICAgICAgICAKICAgICAgICAjIEzGsHUgSUQgdOG7qyBk4buvIGxp4buHdSDEkeG6p3UgdsOgbyBu4bq/dSBjw7MKICAgICAgICBpZiAiaWQiIGluIGFjY291bnRfZGF0YToKICAgICAgICAgICAgbWFpbl9kYXRhWyJpZCJdID0gYWNjb3VudF9kYXRhWyJpZCJdCiAgICAgICAgCiAgICAgICAgIyBMxrB1IGThu68gbGnhu4d1IHBo4bulIGTGsOG7m2kgZOG6oW5nIEpTT04KICAgICAgICBleHRyYV9kYXRhID0ge2s6IHYgZm9yIGssIHYgaW4gYWNjb3VudF9kYXRhLml0ZW1zKCkgaWYgayBub3QgaW4gbWFpbl9kYXRhfQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgY29sdW1ucyA9ICIsICIuam9pbihtYWluX2RhdGEua2V5cygpKQogICAgICAgICAgICBwbGFjZWhvbGRlcnMgPSAiLCAiLmpvaW4oWyI/Il0gKiBsZW4obWFpbl9kYXRhKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhbHVlcyA9IGxpc3QobWFpbl9kYXRhLnZhbHVlcygpKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBk4buvIGxp4buHdSBwaOG7pSB2w6BvIGN14buRaQogICAgICAgICAgICBjb2x1bW5zICs9ICIsIGRhdGEiCiAgICAgICAgICAgIHBsYWNlaG9sZGVycyArPSAiLCA/IgogICAgICAgICAgICB2YWx1ZXMuYXBwZW5kKGpzb24uZHVtcHMoZXh0cmFfZGF0YSkpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFPhu60gZOG7pW5nIElOU0VSVCBPUiBJR05PUkUgxJHhu4MgdHLDoW5oIGzhu5dpIGR1cGxpY2F0ZSwgc2F1IMSRw7MgVVBEQVRFIG7hur91IGPhuqduCiAgICAgICAgICAgIGlmICJpZCIgaW4gbWFpbl9kYXRhOgogICAgICAgICAgICAgICAgIyBO4bq/dSBjw7MgSUQsIHPhu60gZOG7pW5nIElOU0VSVCBPUiBSRVBMQUNFICh1cGRhdGUgZXhpc3RpbmcgcmVjb3JkKQogICAgICAgICAgICAgICAgcXVlcnkgPSBmIklOU0VSVCBPUiBSRVBMQUNFIElOVE8gYWNjb3VudHMgKHtjb2x1bW5zfSkgVkFMVUVTICh7cGxhY2Vob2xkZXJzfSkiCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE7hur91IGtow7RuZyBjw7MgSUQsIGtp4buDbSB0cmEgZHVwbGljYXRlIGLhurFuZyB1bmlxdWUgY29uc3RyYWludAogICAgICAgICAgICAgICAgYXBwID0gbWFpbl9kYXRhLmdldCgiYXBwIikKICAgICAgICAgICAgICAgIHVuaXF1ZV91c2VybmFtZSA9IG1haW5fZGF0YS5nZXQoInVuaXF1ZV91c2VybmFtZSIpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmIGFwcCBhbmQgdW5pcXVlX3VzZXJuYW1lOgogICAgICAgICAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIMSRw6MgdOG7k24gdOG6oWkgY2jGsGEKICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIGlkIEZST00gYWNjb3VudHMgV0hFUkUgYXBwID0gPyBBTkQgdW5pcXVlX3VzZXJuYW1lID0gPyIsIChhcHAsIHVuaXF1ZV91c2VybmFtZSkpCiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBjdXJzb3IuZmV0Y2hvbmUoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGV4aXN0aW5nOgogICAgICAgICAgICAgICAgICAgICAgICAjIFTDoGkga2hv4bqjbiDEkcOjIHThu5NuIHThuqFpLCBj4bqtcCBuaOG6rXQgdGjDtG5nIHRpbgogICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ19pZCA9IGV4aXN0aW5nWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICMgTG/huqFpIGLhu48gaWQga2jhu49pIG1haW5fZGF0YSDEkeG7gyB1cGRhdGUKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7azogdiBmb3IgaywgdiBpbiBtYWluX2RhdGEuaXRlbXMoKSBpZiBrICE9ICJpZCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9kYXRhWyJkYXRhIl0gPSBqc29uLmR1bXBzKGV4dHJhX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBzZXRfY2xhdXNlID0gIiwgIi5qb2luKFtmIntrfSA9ID8iIGZvciBrIGluIHVwZGF0ZV9kYXRhLmtleXMoKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9xdWVyeSA9IGYiVVBEQVRFIGFjY291bnRzIFNFVCB7c2V0X2NsYXVzZX0gV0hFUkUgaWQgPSA/IgogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSh1cGRhdGVfcXVlcnksIGxpc3QodXBkYXRlX2RhdGEudmFsdWVzKCkpICsgW2V4aXN0aW5nX2lkXSkKICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVMOgaSBraG/huqNuIGNoxrBhIHThu5NuIHThuqFpLCB0aMOqbSBt4bubaQogICAgICAgICAgICAgICAgICAgICAgICAjIExv4bqhaSBi4buPIGlkIGto4buPaSBtYWluX2RhdGEgxJHhu4MgSU5TRVJUCiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydF9kYXRhID0ge2s6IHYgZm9yIGssIHYgaW4gbWFpbl9kYXRhLml0ZW1zKCkgaWYgayAhPSAiaWQifQogICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRfY29sdW1ucyA9ICIsICIuam9pbihpbnNlcnRfZGF0YS5rZXlzKCkpICsgIiwgZGF0YSIKICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0X3BsYWNlaG9sZGVycyA9ICIsICIuam9pbihbIj8iXSAqIGxlbihpbnNlcnRfZGF0YSkpICsgIiwgPyIKICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0X3ZhbHVlcyA9IGxpc3QoaW5zZXJ0X2RhdGEudmFsdWVzKCkpICsgW2pzb24uZHVtcHMoZXh0cmFfZGF0YSldCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IGYiSU5TRVJUIElOVE8gYWNjb3VudHMgKHtpbnNlcnRfY29sdW1uc30pIFZBTFVFUyAoe2luc2VydF9wbGFjZWhvbGRlcnN9KSIKICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksIGluc2VydF92YWx1ZXMpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBLaMO0bmcgY8OzIGFwcCBob+G6t2MgdW5pcXVlX3VzZXJuYW1lLCBz4butIGThu6VuZyBJTlNFUlQgYsOsbmggdGjGsOG7nW5nCiAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSBmIklOU0VSVCBJTlRPIGFjY291bnRzICh7Y29sdW1uc30pIFZBTFVFUyAoe3BsYWNlaG9sZGVyc30pIgogICAgICAgICAgICAKICAgICAgICAgICAgaWYgImlkIiBpbiBtYWluX2RhdGE6CiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgdmFsdWVzKQogICAgICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHRow6ptIHTDoGkga2hv4bqjbjoge2V9IikKICAgICAgICAgICAgY29ubi5yb2xsYmFjaygpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgdXBkYXRlX2FjY291bnQoc2VsZiwgYWNjb3VudF9pZDogaW50LCBkYXRhOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiJD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24iIiIKICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgTOG6pXkgdMOgaSBraG/huqNuIGhp4buHbiB04bqhaQogICAgICAgICAgICBhY2NvdW50ID0gc2VsZi5nZXRfYWNjb3VudChhY2NvdW50X2lkKQogICAgICAgICAgICBpZiBub3QgYWNjb3VudDoKICAgICAgICAgICAgICAgIHByaW50KGYiS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB24bubaSBJRCB7YWNjb3VudF9pZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBk4buvIGxp4buHdQogICAgICAgICAgICBhY2NvdW50LnVwZGF0ZShkYXRhKQogICAgICAgICAgICBhY2NvdW50WyJsYXN0X3VwZGF0ZSJdID0gaW50KHRpbWUudGltZSgpKQogICAgICAgICAgICAKICAgICAgICAgICAgIyDEkOG6o20gYuG6o28gxJHDoW5oIGThuqV1IGPhuqduIHN5bmMgdHLhu6sga2hpIGRhdGEgxJHDoyBjw7MgaXNfc3luYyDEkcaw4bujYyBzZXQgcsO1IHLDoG5nCiAgICAgICAgICAgIGlmICJpc19zeW5jIiBub3QgaW4gZGF0YToKICAgICAgICAgICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDoWNoIG1haW5fZGF0YSB2w6AgZXh0cmFfZGF0YQogICAgICAgICAgICAjIEzhuqV5IHThuqV0IGPhuqMgY8OhYyBj4buZdCBj4bunYSBi4bqjbmcgYWNjb3VudHMKICAgICAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiUFJBR01BIHRhYmxlX2luZm8oYWNjb3VudHMpIikKICAgICAgICAgICAgY29sdW1ucyA9IFtyb3dbMV0gZm9yIHJvdyBpbiBjdXJzb3IuZmV0Y2hhbGwoKV0KICAgICAgICAgICAgbWFpbl9kYXRhID0ge30KICAgICAgICAgICAgZXh0cmFfZGF0YSA9IHt9CiAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIGFjY291bnQuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGtleSBpbiBjb2x1bW5zOgogICAgICAgICAgICAgICAgICAgIG1haW5fZGF0YVtrZXldID0gdmFsdWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZXh0cmFfZGF0YVtrZXldID0gdmFsdWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU+G7rSBk4bulbmcgaMOgbSB1cGRhdGUgY2h1ecOqbiBiaeG7h3QKICAgICAgICAgICAgcmV0dXJuIHNlbGYudXBkYXRlX2FjY291bnRfYnlfaWQoYWNjb3VudF9pZCwgbWFpbl9kYXRhLCBleHRyYV9kYXRhKQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgZ2V0X2FjY291bnQoc2VsZiwgYWNjb3VudF9pZDogaW50KSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiTOG6pXkgdGjDtG5nIHRpbiBj4bunYSBt4buZdCB0w6BpIGtob+G6o24gdGhlbyBJRCIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIGFjY291bnRzIFdIRVJFIGlkID0gPyIsIChhY2NvdW50X2lkLCkpCiAgICAgICAgY29sdW1uX25hbWVzID0gW2Rlc2NyaXB0aW9uWzBdIGZvciBkZXNjcmlwdGlvbiBpbiBjdXJzb3IuZGVzY3JpcHRpb25dCiAgICAgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKICAgICAgICAKICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAjIENodXnhu4NuIMSR4buVaSBr4bq/dCBxdeG6oyB0aMOgbmggZGljdAogICAgICAgIGFjY291bnQgPSB7Y29sdW1uX25hbWVzW2ldOiByZXN1bHRbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGNvbHVtbl9uYW1lcykpfQogICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGPDoWMgdHLGsOG7nW5nIGJvb2xlYW4KICAgICAgICBhY2NvdW50WyJpc19sb2dpbiJdID0gYm9vbChhY2NvdW50WyJpc19sb2dpbiJdKQogICAgICAgIGFjY291bnRbImpvYl9lbmFibGUiXSA9IGJvb2woYWNjb3VudFsiam9iX2VuYWJsZSJdKQogICAgICAgIGFjY291bnRbImlzX2dvbGlrZV9saW5rZWQiXSA9IGJvb2woYWNjb3VudFsiaXNfZ29saWtlX2xpbmtlZCJdKQogICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IGJvb2woYWNjb3VudFsiaXNfc3luYyJdKQogICAgICAgIGFjY291bnRbImRpc2FibGVfZm9sbG93Il0gPSBib29sKGFjY291bnRbImRpc2FibGVfZm9sbG93Il0pCiAgICAgICAgCiAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgZm9sbG93IHRow6BuaCBraeG7g3UgZOG7ryBsaeG7h3UgcGjDuSBo4bujcAogICAgICAgIGlmICJmb2xsb3dfdG9kYXkiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImZvbGxvd190b2RheSJdID0gaW50KGFjY291bnRbImZvbGxvd190b2RheSJdKSBpZiBhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSBlbHNlIDAKICAgICAgICBpZiAiZm9sbG93X2luX3Nlc3Npb24iIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImZvbGxvd19pbl9zZXNzaW9uIl0gPSBpbnQoYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSkgaWYgYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSBlbHNlIDAKICAgICAgICAjIMSQw6MgbG/huqFpIGLhu48gbWF4X2ZvbGxvd19kYXkgdsOgIG1heF9mb2xsb3dfc2Vzc2lvbgogICAgICAgIGlmICJsYXN0X2ZvbGxvd190aW1lIiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gPSBpbnQoYWNjb3VudFsibGFzdF9mb2xsb3dfdGltZSJdKSBpZiBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gZWxzZSAwCiAgICAgICAgCiAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgY2FyZSB0aMOgbmgga2nhu4N1IGThu68gbGnhu4d1IHBow7kgaOG7o3AKICAgICAgICBpZiAibGFzdF9jYXJlX3RpbWUiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0gPSBpbnQoYWNjb3VudFsibGFzdF9jYXJlX3RpbWUiXSkgaWYgYWNjb3VudFsibGFzdF9jYXJlX3RpbWUiXSBlbHNlIDAKICAgICAgICBpZiAibGFzdF92aWV3X3N0b3JpZXMiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImxhc3Rfdmlld19zdG9yaWVzIl0gPSBpbnQoYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSkgaWYgYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSBlbHNlIDAKICAgICAgICAKICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IHBo4bulIHThu6sgdHLGsOG7nW5nIGRhdGEKICAgICAgICBpZiAiZGF0YSIgaW4gYWNjb3VudCBhbmQgYWNjb3VudFsiZGF0YSJdOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBleHRyYV9kYXRhID0ganNvbi5sb2FkcyhhY2NvdW50WyJkYXRhIl0pCiAgICAgICAgICAgICAgICBhY2NvdW50LnVwZGF0ZShleHRyYV9kYXRhKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIAogICAgICAgICMgWMOzYSB0csaw4budbmcgZGF0YSDEkeG7gyB0csOhbmggdHLDuW5nIGzhurdwCiAgICAgICAgaWYgImRhdGEiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGRlbCBhY2NvdW50WyJkYXRhIl0KICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnQKCiAgICBkZWYgdXBkYXRlX2FjY291bnRfYnlfaWQoc2VsZiwgYWNjb3VudF9pZCwgbWFpbl9kYXRhLCBleHRyYV9kYXRhPU5vbmUpOgogICAgICAgICIiIkPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o24gdGhlbyBJRCIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBMdcO0biBzZXQgaXNfc3luYyA9IEZhbHNlIGtoaSB1cGRhdGUKICAgICAgICAgICAgbWFpbl9kYXRhWyJpc19zeW5jIl0gPSBGYWxzZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBU4bqhbyBjw6J1IGzhu4duaCBVUERBVEUKICAgICAgICAgICAgdXBkYXRlX2ZpZWxkcyA9IFtdCiAgICAgICAgICAgIHZhbHVlcyA9IFtdCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBtYWluX2RhdGEuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIGtleSAhPSAiaWQiOiAgIyBLaMO0bmcgdXBkYXRlIElECiAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2ZpZWxkcy5hcHBlbmQoZiJ7a2V5fSA9ID8iKQogICAgICAgICAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQodmFsdWUpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBleHRyYV9kYXRhOgogICAgICAgICAgICAgICAgdXBkYXRlX2ZpZWxkcy5hcHBlbmQoImRhdGEgPSA/IikKICAgICAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQoanNvbi5kdW1wcyhleHRyYV9kYXRhKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQoYWNjb3VudF9pZCkgICMgV0hFUkUgaWQgPSA/CiAgICAgICAgICAgIAogICAgICAgICAgICBxdWVyeSA9IGYiVVBEQVRFIGFjY291bnRzIFNFVCB7JywgJy5qb2luKHVwZGF0ZV9maWVsZHMpfSBXSEVSRSBpZCA9ID8iCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCB2YWx1ZXMpCiAgICAgICAgICAgIAogICAgICAgICAgICByb3dzX2FmZmVjdGVkID0gY3Vyc29yLnJvd2NvdW50CiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJvd3NfYWZmZWN0ZWQgPiAwOgogICAgICAgICAgICAgICAgcHJpbnQoZiJD4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIElEIHthY2NvdW50X2lkfSB0aMOgbmggY8O0bmciKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYiS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiB24bubaSBJRCB7YWNjb3VudF9pZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0w6BpIGtob+G6o246IHtlfSIpCiAgICAgICAgICAgIGNvbm4ucm9sbGJhY2soKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ2V0X2FjY291bnRfYnlfdW5pcXVlX3VzZXJuYW1lKHNlbGYsIGFwcDogc3RyLCB1bmlxdWVfdXNlcm5hbWU6IHN0cikgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IHRow7RuZyB0aW4gdMOgaSBraG/huqNuIHRoZW8gYXBwIHbDoCB1bmlxdWVfdXNlcm5hbWUKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHA6IFTDqm4g4bupbmcgZOG7pW5nCiAgICAgICAgICAgIHVuaXF1ZV91c2VybmFtZTogVXNlcm5hbWUgZHV5IG5o4bqldCBj4bunYSB0w6BpIGtob+G6o24KICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdCBjaOG7qWEgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24gaG/hurdjIE5vbmUgbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5CiAgICAgICAgIiIiCiAgICAgICAgaWYgbm90IHVuaXF1ZV91c2VybmFtZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gYWNjb3VudHMgV0hFUkUgYXBwID0gPyBBTkQgdW5pcXVlX3VzZXJuYW1lID0gPyIsIChhcHAsIHVuaXF1ZV91c2VybmFtZSkpCiAgICAgICAgY29sdW1uX25hbWVzID0gW2Rlc2NyaXB0aW9uWzBdIGZvciBkZXNjcmlwdGlvbiBpbiBjdXJzb3IuZGVzY3JpcHRpb25dCiAgICAgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKICAgICAgICAKICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICAKICAgICAgICAjIENodXnhu4NuIMSR4buVaSBr4bq/dCBxdeG6oyB0aMOgbmggZGljdAogICAgICAgIGFjY291bnQgPSB7Y29sdW1uX25hbWVzW2ldOiByZXN1bHRbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGNvbHVtbl9uYW1lcykpfQogICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGPDoWMgdHLGsOG7nW5nIGJvb2xlYW4KICAgICAgICBhY2NvdW50WyJpc19sb2dpbiJdID0gYm9vbChhY2NvdW50WyJpc19sb2dpbiJdKQogICAgICAgIGFjY291bnRbImpvYl9lbmFibGUiXSA9IGJvb2woYWNjb3VudFsiam9iX2VuYWJsZSJdKQogICAgICAgIGFjY291bnRbImlzX2dvbGlrZV9saW5rZWQiXSA9IGJvb2woYWNjb3VudFsiaXNfZ29saWtlX2xpbmtlZCJdKQogICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IGJvb2woYWNjb3VudFsiaXNfc3luYyJdKQogICAgICAgIGFjY291bnRbImRpc2FibGVfZm9sbG93Il0gPSBib29sKGFjY291bnRbImRpc2FibGVfZm9sbG93Il0pCiAgICAgICAgCiAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgZm9sbG93IHRow6BuaCBraeG7g3UgZOG7ryBsaeG7h3UgcGjDuSBo4bujcAogICAgICAgIGlmICJmb2xsb3dfdG9kYXkiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImZvbGxvd190b2RheSJdID0gaW50KGFjY291bnRbImZvbGxvd190b2RheSJdKSBpZiBhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSBlbHNlIDAKICAgICAgICBpZiAiZm9sbG93X2luX3Nlc3Npb24iIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImZvbGxvd19pbl9zZXNzaW9uIl0gPSBpbnQoYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSkgaWYgYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSBlbHNlIDAKICAgICAgICAjIMSQw6MgbG/huqFpIGLhu48gbWF4X2ZvbGxvd19kYXkgdsOgIG1heF9mb2xsb3dfc2Vzc2lvbgogICAgICAgIGlmICJsYXN0X2ZvbGxvd190aW1lIiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gPSBpbnQoYWNjb3VudFsibGFzdF9mb2xsb3dfdGltZSJdKSBpZiBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gZWxzZSAwCiAgICAgICAgCiAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgY2FyZSB0aMOgbmgga2nhu4N1IGThu68gbGnhu4d1IHBow7kgaOG7o3AKICAgICAgICBpZiAibGFzdF9jYXJlX3RpbWUiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0gPSBpbnQoYWNjb3VudFsibGFzdF9jYXJlX3RpbWUiXSkgaWYgYWNjb3VudFsibGFzdF9jYXJlX3RpbWUiXSBlbHNlIDAKICAgICAgICBpZiAibGFzdF92aWV3X3N0b3JpZXMiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGFjY291bnRbImxhc3Rfdmlld19zdG9yaWVzIl0gPSBpbnQoYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSkgaWYgYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSBlbHNlIDAKICAgICAgICAKICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IHBo4bulIHThu6sgdHLGsOG7nW5nIGRhdGEKICAgICAgICBpZiAiZGF0YSIgaW4gYWNjb3VudCBhbmQgYWNjb3VudFsiZGF0YSJdOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBleHRyYV9kYXRhID0ganNvbi5sb2FkcyhhY2NvdW50WyJkYXRhIl0pCiAgICAgICAgICAgICAgICBhY2NvdW50LnVwZGF0ZShleHRyYV9kYXRhKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIAogICAgICAgICMgWMOzYSB0csaw4budbmcgZGF0YSDEkeG7gyB0csOhbmggdHLDuW5nIGzhurdwCiAgICAgICAgaWYgImRhdGEiIGluIGFjY291bnQ6CiAgICAgICAgICAgIGRlbCBhY2NvdW50WyJkYXRhIl0KICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnQKICAgIAogICAgZGVmIGdldF9hY2NvdW50X2J5X3V1aWQoc2VsZiwgYWNjb3VudF91dWlkOiBzdHIpIC0+IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXToKICAgICAgICAiIiJM4bqleSB0aMO0bmcgdGluIGPhu6dhIG3hu5l0IHTDoGkga2hv4bqjbiB0aGVvIFVVSUQiIiIKICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSBhY2NvdW50cyBXSEVSRSBhY2NvdW50X3V1aWQgPSA/IiwgKGFjY291bnRfdXVpZCwpKQogICAgICAgIGNvbHVtbl9uYW1lcyA9IFtkZXNjcmlwdGlvblswXSBmb3IgZGVzY3JpcHRpb24gaW4gY3Vyc29yLmRlc2NyaXB0aW9uXQogICAgICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCiAgICAgICAgCiAgICAgICAgaWYgbm90IHJlc3VsdDoKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgCiAgICAgICAgIyBDaHV54buDbiDEkeG7lWkga+G6v3QgcXXhuqMgdGjDoG5oIGRpY3QKICAgICAgICBhY2NvdW50ID0ge2NvbHVtbl9uYW1lc1tpXTogcmVzdWx0W2ldIGZvciBpIGluIHJhbmdlKGxlbihjb2x1bW5fbmFtZXMpKX0KICAgICAgICAKICAgICAgICAjIENodXnhu4NuIMSR4buVaSBjw6FjIHRyxrDhu51uZyBib29sZWFuCiAgICAgICAgYWNjb3VudFsiaXNfbG9naW4iXSA9IGJvb2woYWNjb3VudFsiaXNfbG9naW4iXSkKICAgICAgICBhY2NvdW50WyJqb2JfZW5hYmxlIl0gPSBib29sKGFjY291bnRbImpvYl9lbmFibGUiXSkKICAgICAgICBhY2NvdW50WyJpc19nb2xpa2VfbGlua2VkIl0gPSBib29sKGFjY291bnRbImlzX2dvbGlrZV9saW5rZWQiXSkKICAgICAgICBhY2NvdW50WyJpc19zeW5jIl0gPSBib29sKGFjY291bnRbImlzX3N5bmMiXSkKICAgICAgICBhY2NvdW50WyJkaXNhYmxlX2ZvbGxvdyJdID0gYm9vbChhY2NvdW50WyJkaXNhYmxlX2ZvbGxvdyJdKQogICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGPDoWMgdHLGsOG7nW5nIGZvbGxvdyB0aMOgbmgga2nhu4N1IGThu68gbGnhu4d1IHBow7kgaOG7o3AKICAgICAgICBpZiAiZm9sbG93X3RvZGF5IiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSA9IGludChhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSkgaWYgYWNjb3VudFsiZm9sbG93X3RvZGF5Il0gZWxzZSAwCiAgICAgICAgaWYgImZvbGxvd19pbl9zZXNzaW9uIiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJmb2xsb3dfaW5fc2Vzc2lvbiJdID0gaW50KGFjY291bnRbImZvbGxvd19pbl9zZXNzaW9uIl0pIGlmIGFjY291bnRbImZvbGxvd19pbl9zZXNzaW9uIl0gZWxzZSAwCiAgICAgICAgIyDEkMOjIGxv4bqhaSBi4buPIG1heF9mb2xsb3dfZGF5IHbDoCBtYXhfZm9sbG93X3Nlc3Npb24KICAgICAgICBpZiAibGFzdF9mb2xsb3dfdGltZSIgaW4gYWNjb3VudDoKICAgICAgICAgICAgYWNjb3VudFsibGFzdF9mb2xsb3dfdGltZSJdID0gaW50KGFjY291bnRbImxhc3RfZm9sbG93X3RpbWUiXSkgaWYgYWNjb3VudFsibGFzdF9mb2xsb3dfdGltZSJdIGVsc2UgMAogICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGPDoWMgdHLGsOG7nW5nIGNhcmUgdGjDoG5oIGtp4buDdSBk4buvIGxp4buHdSBwaMO5IGjhu6NwCiAgICAgICAgaWYgImxhc3RfY2FyZV90aW1lIiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJsYXN0X2NhcmVfdGltZSJdID0gaW50KGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0pIGlmIGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0gZWxzZSAwCiAgICAgICAgaWYgImxhc3Rfdmlld19zdG9yaWVzIiBpbiBhY2NvdW50OgogICAgICAgICAgICBhY2NvdW50WyJsYXN0X3ZpZXdfc3RvcmllcyJdID0gaW50KGFjY291bnRbImxhc3Rfdmlld19zdG9yaWVzIl0pIGlmIGFjY291bnRbImxhc3Rfdmlld19zdG9yaWVzIl0gZWxzZSAwCiAgICAgICAgCiAgICAgICAgIyBUaMOqbSBk4buvIGxp4buHdSBwaOG7pSB04burIHRyxrDhu51uZyBkYXRhCiAgICAgICAgaWYgImRhdGEiIGluIGFjY291bnQgYW5kIGFjY291bnRbImRhdGEiXToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZXh0cmFfZGF0YSA9IGpzb24ubG9hZHMoYWNjb3VudFsiZGF0YSJdKQogICAgICAgICAgICAgICAgYWNjb3VudC51cGRhdGUoZXh0cmFfZGF0YSkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAKICAgICAgICAjIFjDs2EgdHLGsOG7nW5nIGRhdGEgxJHhu4MgdHLDoW5oIHRyw7luZyBs4bq3cAogICAgICAgIGlmICJkYXRhIiBpbiBhY2NvdW50OgogICAgICAgICAgICBkZWwgYWNjb3VudFsiZGF0YSJdCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBhY2NvdW50CiAgICAKICAgIGRlZiBnZXRfYWNjb3VudHMoc2VsZiwgYXBwOiBzdHIgPSBOb25lLCBzdGF0dXM6IHN0ciA9IE5vbmUsIGpvYl9lbmFibGU6IGJvb2wgPSBOb25lLCBkZXZpY2VfaWQ6IEFueSA9IFRydWUpIC0+IExpc3RbRGljdFtzdHIsIEFueV1dOgogICAgICAgICIiIkzhuqV5IGRhbmggc8OhY2ggdMOgaSBraG/huqNuIHRoZW8gxJFp4buBdSBraeG7h24gbOG7jWMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHA6IFTDqm4g4bupbmcgZOG7pW5nIMSR4buDIGzhu41jCiAgICAgICAgICAgIHN0YXR1czogVHLhuqFuZyB0aMOhaSB0w6BpIGtob+G6o24gxJHhu4MgbOG7jWMKICAgICAgICAgICAgam9iX2VuYWJsZTogTOG7jWMgdGhlbyB0cuG6oW5nIHRow6FpIGLhuq10L3Thuq90IGpvYgogICAgICAgICAgICBkZXZpY2VfaWQ6IEzhu41jIHRoZW8gZGV2aWNlX2lkLCBjw7MgdGjhu4MgbMOgOgogICAgICAgICAgICAgICAgLSBUcnVlOiBM4buNYyB0aGVvIGRldmljZV9pZCBj4bunYSB0aGnhur90IGLhu4sgaGnhu4duIHThuqFpICht4bq3YyDEkeG7i25oKQogICAgICAgICAgICAgICAgLSBGYWxzZS9Ob25lOiBLaMO0bmcgbOG7jWMgdGhlbyBkZXZpY2VfaWQKICAgICAgICAgICAgICAgIC0gQ2h14buXaTogTOG7jWMgdGhlbyBkZXZpY2VfaWQgY+G7pSB0aOG7gyDEkcaw4bujYyB0cnV54buBbiB2w6BvCiAgICAgICAgIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSBhY2NvdW50cyIKICAgICAgICBwYXJhbXMgPSBbXQogICAgICAgIAogICAgICAgICMgVGjDqm0gxJFp4buBdSBraeG7h24gbOG7jWMKICAgICAgICBjb25kaXRpb25zID0gW10KICAgICAgICBpZiBhcHA6CiAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKCJhcHAgPSA/IikKICAgICAgICAgICAgcGFyYW1zLmFwcGVuZChhcHApCiAgICAgICAgaWYgc3RhdHVzOgogICAgICAgICAgICBjb25kaXRpb25zLmFwcGVuZCgic3RhdHVzID0gPyIpCiAgICAgICAgICAgIHBhcmFtcy5hcHBlbmQoc3RhdHVzKQogICAgICAgIGlmIGpvYl9lbmFibGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGNvbmRpdGlvbnMuYXBwZW5kKCJqb2JfZW5hYmxlID0gPyIpCiAgICAgICAgICAgIHBhcmFtcy5hcHBlbmQoMSBpZiBqb2JfZW5hYmxlIGVsc2UgMCkKICAgICAgICAgICAgCiAgICAgICAgaWYgY29uZGl0aW9uczoKICAgICAgICAgICAgcXVlcnkgKz0gIiBXSEVSRSAiICsgIiBBTkQgIi5qb2luKGNvbmRpdGlvbnMpCiAgICAgICAgICAgIAogICAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCBwYXJhbXMpCiAgICAgICAgY29sdW1uX25hbWVzID0gW2Rlc2NyaXB0aW9uWzBdIGZvciBkZXNjcmlwdGlvbiBpbiBjdXJzb3IuZGVzY3JpcHRpb25dCiAgICAgICAgcmVzdWx0cyA9IGN1cnNvci5mZXRjaGFsbCgpCiAgICAgICAgCiAgICAgICAgYWNjb3VudHMgPSBbXQogICAgICAgIGZvciByZXN1bHQgaW4gcmVzdWx0czoKICAgICAgICAgICAgIyBDaHV54buDbiDEkeG7lWkga+G6v3QgcXXhuqMgdGjDoG5oIGRpY3QKICAgICAgICAgICAgYWNjb3VudCA9IHtjb2x1bW5fbmFtZXNbaV06IHJlc3VsdFtpXSBmb3IgaSBpbiByYW5nZShsZW4oY29sdW1uX25hbWVzKSl9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIENodXnhu4NuIMSR4buVaSBjw6FjIHRyxrDhu51uZyBib29sZWFuCiAgICAgICAgICAgIGFjY291bnRbImlzX2xvZ2luIl0gPSBib29sKGFjY291bnRbImlzX2xvZ2luIl0pCiAgICAgICAgICAgIGFjY291bnRbImpvYl9lbmFibGUiXSA9IGJvb2woYWNjb3VudFsiam9iX2VuYWJsZSJdKQogICAgICAgICAgICBhY2NvdW50WyJpc19nb2xpa2VfbGlua2VkIl0gPSBib29sKGFjY291bnRbImlzX2dvbGlrZV9saW5rZWQiXSkKICAgICAgICAgICAgYWNjb3VudFsiaXNfc3luYyJdID0gYm9vbChhY2NvdW50WyJpc19zeW5jIl0pICAgICAgICAgICAgIyBGaXg6IFByZXNlcnZlIGRpc2FibGVfZm9sbG93IHN0YXR1cyBmcm9tIGRhdGFiYXNlCiAgICAgICAgICAgIGFjY291bnRbImRpc2FibGVfZm9sbG93Il0gPSBib29sKGFjY291bnRbImRpc2FibGVfZm9sbG93Il0pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENodXnhu4NuIMSR4buVaSBjw6FjIHRyxrDhu51uZyBmb2xsb3cgdGjDoG5oIGtp4buDdSBk4buvIGxp4buHdSBwaMO5IGjhu6NwCiAgICAgICAgICAgIGlmICJmb2xsb3dfdG9kYXkiIGluIGFjY291bnQ6CiAgICAgICAgICAgICAgICBhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSA9IGludChhY2NvdW50WyJmb2xsb3dfdG9kYXkiXSkgaWYgYWNjb3VudFsiZm9sbG93X3RvZGF5Il0gZWxzZSAwCiAgICAgICAgICAgIGlmICJmb2xsb3dfaW5fc2Vzc2lvbiIgaW4gYWNjb3VudDoKICAgICAgICAgICAgICAgIGFjY291bnRbImZvbGxvd19pbl9zZXNzaW9uIl0gPSBpbnQoYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSkgaWYgYWNjb3VudFsiZm9sbG93X2luX3Nlc3Npb24iXSBlbHNlIDAKICAgICAgICAgICAgIyDEkMOjIGxv4bqhaSBi4buPIG1heF9mb2xsb3dfZGF5IHbDoCBtYXhfZm9sbG93X3Nlc3Npb24KICAgICAgICAgICAgaWYgImxhc3RfZm9sbG93X3RpbWUiIGluIGFjY291bnQ6CiAgICAgICAgICAgICAgICBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gPSBpbnQoYWNjb3VudFsibGFzdF9mb2xsb3dfdGltZSJdKSBpZiBhY2NvdW50WyJsYXN0X2ZvbGxvd190aW1lIl0gZWxzZSAwCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENodXnhu4NuIMSR4buVaSBjw6FjIHRyxrDhu51uZyBjYXJlIHRow6BuaCBraeG7g3UgZOG7ryBsaeG7h3UgcGjDuSBo4bujcAogICAgICAgICAgICBpZiAibGFzdF9jYXJlX3RpbWUiIGluIGFjY291bnQ6CiAgICAgICAgICAgICAgICBhY2NvdW50WyJsYXN0X2NhcmVfdGltZSJdID0gaW50KGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0pIGlmIGFjY291bnRbImxhc3RfY2FyZV90aW1lIl0gZWxzZSAwCiAgICAgICAgICAgIGlmICJsYXN0X3ZpZXdfc3RvcmllcyIgaW4gYWNjb3VudDoKICAgICAgICAgICAgICAgIGFjY291bnRbImxhc3Rfdmlld19zdG9yaWVzIl0gPSBpbnQoYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSkgaWYgYWNjb3VudFsibGFzdF92aWV3X3N0b3JpZXMiXSBlbHNlIDAKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gZOG7ryBsaeG7h3UgcGjhu6UgdOG7qyB0csaw4budbmcgZGF0YQogICAgICAgICAgICBpZiAiZGF0YSIgaW4gYWNjb3VudCBhbmQgYWNjb3VudFsiZGF0YSJdOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGV4dHJhX2RhdGEgPSBqc29uLmxvYWRzKGFjY291bnRbImRhdGEiXSkKICAgICAgICAgICAgICAgICAgICBhY2NvdW50LnVwZGF0ZShleHRyYV9kYXRhKQogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFjDs2EgdHLGsOG7nW5nIGRhdGEgxJHhu4MgdHLDoW5oIHRyw7luZyBs4bq3cAogICAgICAgICAgICBpZiAiZGF0YSIgaW4gYWNjb3VudDoKICAgICAgICAgICAgICAgIGRlbCBhY2NvdW50WyJkYXRhIl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICBhY2NvdW50cy5hcHBlbmQoYWNjb3VudCkKICAgICAgICAKICAgICAgICAjIEzhu41jIHRoZW8gZGV2aWNlX2lkIG7hur91IGPhuqduCiAgICAgICAgaWYgZGV2aWNlX2lkIGlzIFRydWU6CiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkIGPhu6dhIHRoaeG6v3QgYuG7iyBoaeG7h24gdOG6oWkKICAgICAgICAgICAgY3VycmVudF9kZXZpY2VfaWQgPSBzZWxmLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBjdXJyZW50X2RldmljZV9pZDoKICAgICAgICAgICAgICAgICMgTOG7jWMgdMOgaSBraG/huqNuIHRoZW8gZGV2aWNlX2lkIGPhu6dhIHRoaeG6v3QgYuG7iyBoaeG7h24gdOG6oWkKICAgICAgICAgICAgICAgIGFjY291bnRzID0gW2FjYyBmb3IgYWNjIGluIGFjY291bnRzIGlmIGFjYy5nZXQoImRldmljZV9pZCIpID09IGN1cnJlbnRfZGV2aWNlX2lkXQogICAgICAgIGVsaWYgaXNpbnN0YW5jZShkZXZpY2VfaWQsIHN0cikgYW5kIGRldmljZV9pZDoKICAgICAgICAgICAgIyBM4buNYyB0aGVvIGRldmljZV9pZCBj4bulIHRo4buDIMSRxrDhu6NjIHRydXnhu4FuIHbDoG8KICAgICAgICAgICAgYWNjb3VudHMgPSBbYWNjIGZvciBhY2MgaW4gYWNjb3VudHMgaWYgYWNjLmdldCgiZGV2aWNlX2lkIikgPT0gZGV2aWNlX2lkXQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gYWNjb3VudHMKICAgIAogICAgZGVmIGRlbGV0ZV9qb2JfaGlzdG9yeV9ieV9hY2NvdW50KHNlbGYsIGFjY291bnRfdXVpZDogc3RyKSAtPiBib29sOgogICAgICAgICIiIljDs2EgdOG6pXQgY+G6oyBqb2IgaGlzdG9yeSBj4bunYSBt4buZdCB0w6BpIGtob+G6o24gdGhlbyBhY2NvdW50X3V1aWQiIiIKICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCJERUxFVEUgRlJPTSBqb2JzX2hpc3RvcnkgV0hFUkUgYWNjb3VudF91dWlkID0gPyIsIChhY2NvdW50X3V1aWQsKSkKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICBkZWxldGVkX2NvdW50ID0gY3Vyc29yLnJvd2NvdW50CiAgICAgICAgICAgIHByaW50KGYixJDDoyB4w7NhIHtkZWxldGVkX2NvdW50fSBqb2IgaGlzdG9yeSBj4bunYSB0w6BpIGtob+G6o24gVVVJRDoge2FjY291bnRfdXVpZH0iKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgeMOzYSBqb2IgaGlzdG9yeSBj4bunYSB0w6BpIGtob+G6o246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBkZWxldGVfYWNjb3VudChzZWxmLCBhY2NvdW50X2lkOiBpbnQpIC0+IGJvb2w6CiAgICAgICAgIiIiWMOzYSB0w6BpIGtob+G6o24ga2jhu49pIGRhdGFiYXNlIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiREVMRVRFIEZST00gYWNjb3VudHMgV0hFUkUgaWQgPSA/IiwgKGFjY291bnRfaWQsKSkKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICByZXR1cm4gY3Vyc29yLnJvd2NvdW50ID4gMAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgeMOzYSB0w6BpIGtob+G6o246IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgIiIixJDDs25nIGvhur90IG7hu5FpIGRhdGFiYXNlIGPhu6dhIHRocmVhZCBoaeG7h24gdOG6oWkiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VsZi5sb2NhbCwgJ2Nvbm4nKSBhbmQgc2VsZi5sb2NhbC5jb25uOgogICAgICAgICAgICAgICAgc2VsZi5sb2NhbC5jb25uLmNsb3NlKCkKICAgICAgICAgICAgICAgIHNlbGYubG9jYWwuY29ubiA9IE5vbmUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjIFjDs2EgY8OhYyB0aGFtIGNoaeG6v3UgdGhyZWFkIMSR4buDIHRyw6FuaCBs4buXaQogICAgICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICdsb2NhbCcpOgogICAgICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLmxvY2FsLCAnX2xvY2FsX19pbXBsJyk6CiAgICAgICAgICAgICAgICAgICAgIyBYw7NhIHRoYW0gY2hp4bq/dSB0cm9uZyBUaHJlYWRMb2NhbAogICAgICAgICAgICAgICAgICAgIGRlbGF0dHIoc2VsZi5sb2NhbCwgJ19sb2NhbF9faW1wbCcpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSDEkcOzbmcga+G6v3QgbuG7kWkgZGF0YWJhc2U6IHtlfSIpCiAgICAgICAgICAgIAogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgIiIiSOG7p3kgxJHhu5FpIHTGsOG7o25nIiIiCiAgICAgICAgc2VsZi5jbG9zZSgpCiAgICAKICAgIGRlZiB1cGRhdGVfb3JfaW5zZXJ0X2FjY291bnQoc2VsZiwgYXBwX25hbWU6IHN0ciwgdW5pcXVlX2lkOiBzdHIsIGRhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEPhuq1wIG5o4bqtdCBob+G6t2MgdGjDqm0gbeG7m2kgbeG7mXQgdMOgaSBraG/huqNuIHbDoG8gZGF0YWJhc2UKICAgICAgICAiIiIKICAgICAgICAjIMSQ4bqjbSBi4bqjbyBjb25uZWN0aW9uIGzDoCBj4bunYSB0aHJlYWQgaGnhu4duIHThuqFpCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gdMOgaSBraG/huqNuIMSRw6MgdOG7k24gdOG6oWkgY2jGsGEKICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoCiAgICAgICAgICAgICAgICAiIiJTRUxFQ1QgaWQgRlJPTSBhY2NvdW50cyBXSEVSRSBhcHBfbmFtZSA9ID8gQU5EIHVuaXF1ZV9pZCA9ID8iIiIsIAogICAgICAgICAgICAgICAgKGFwcF9uYW1lLCB1bmlxdWVfaWQpCiAgICAgICAgICAgICkKICAgICAgICAgICAgYWNjb3VudCA9IGN1cnNvci5mZXRjaG9uZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBhY2NvdW50OgogICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdMOgaSBraG/huqNuIGhp4buHbiBjw7MKICAgICAgICAgICAgICAgIGFjY291bnRfaWQgPSBhY2NvdW50WzBdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgTOG6pXkgZOG7ryBsaeG7h3UgaGnhu4duIHThuqFpCiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgKICAgICAgICAgICAgICAgICAgICAiIiJTRUxFQ1QgZGF0YSBGUk9NIGFjY291bnRzIFdIRVJFIGlkID0gPyIiIiwKICAgICAgICAgICAgICAgICAgICAoYWNjb3VudF9pZCwpCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBjdXJyZW50X2RhdGFfcm93ID0gY3Vyc29yLmZldGNob25lKCkKICAgICAgICAgICAgICAgIGN1cnJlbnRfZGF0YSA9IGpzb24ubG9hZHMoY3VycmVudF9kYXRhX3Jvd1swXSkgaWYgY3VycmVudF9kYXRhX3JvdyBlbHNlIHt9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgSOG7o3AgbmjhuqV0IGThu68gbGnhu4d1IGPFqSB2w6AgbeG7m2kKICAgICAgICAgICAgICAgIG1lcmdlZF9kYXRhID0geyoqY3VycmVudF9kYXRhLCAqKmRhdGF9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQ+G6rXAgbmjhuq10CiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgKICAgICAgICAgICAgICAgICAgICAiIiJVUERBVEUgYWNjb3VudHMgU0VUIAogICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSA/LAogICAgICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lID0gPywKICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSA/LAogICAgICAgICAgICAgICAgICAgICAgIGlzX2xvZ2luID0gPywKICAgICAgICAgICAgICAgICAgICAgICBqb2JfZW5hYmxlID0gPywKICAgICAgICAgICAgICAgICAgICAgICBqb2JfbWF4X2RheSA9ID8sCiAgICAgICAgICAgICAgICAgICAgICAgbGFzdF91cGRhdGUgPSA/CiAgICAgICAgICAgICAgICAgICAgICAgV0hFUkUgaWQgPSA/IiIiLAogICAgICAgICAgICAgICAgICAgICgKICAgICAgICAgICAgICAgICAgICAgICAganNvbi5kdW1wcyhtZXJnZWRfZGF0YSksCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZ2V0KCJuaWNrbmFtZSIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5nZXQoInN0YXR1cyIsICJhY3RpdmUiKSwKICAgICAgICAgICAgICAgICAgICAgICAgMSBpZiBkYXRhLmdldCgiaXNfbG9naW4iLCBGYWxzZSkgZWxzZSAwLAogICAgICAgICAgICAgICAgICAgICAgICAxIGlmIGRhdGEuZ2V0KCJqb2JfZW5hYmxlIiwgVHJ1ZSkgZWxzZSAwLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmdldCgiam9iX21heF9kYXkiLCBjb25maWcuTUFYX0pPQlNfUEVSX0RBWSksCiAgICAgICAgICAgICAgICAgICAgICAgIGludCh0aW1lLnRpbWUoKSksCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRfaWQKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFRow6ptIHTDoGkga2hv4bqjbiBt4bubaQogICAgICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoCiAgICAgICAgICAgICAgICAgICAgIiIiSU5TRVJUIElOVE8gYWNjb3VudHMgKAogICAgICAgICAgICAgICAgICAgICAgIGFwcF9uYW1lLCB1bmlxdWVfaWQsIG5pY2tuYW1lLCBkYXRhLCBzdGF0dXMsIGlzX2xvZ2luLCBqb2JfZW5hYmxlLCBqb2JfbWF4X2RheSwgaXNfZ29saWtlX2xpbmtlZCwgZ29saWtlX2lkLCBsYXN0X3VwZGF0ZQogICAgICAgICAgICAgICAgICAgICkgVkFMVUVTICg/LCA/LCA/LCA/LCA/LCA/LCA/LCA/LCA/LCA/LCA/KSIiIiwKICAgICAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcF9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZ2V0KCJuaWNrbmFtZSIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAganNvbi5kdW1wcyhkYXRhKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5nZXQoInN0YXR1cyIsICJhY3RpdmUiKSwKICAgICAgICAgICAgICAgICAgICAgICAgMSBpZiBkYXRhLmdldCgiaXNfbG9naW4iLCBGYWxzZSkgZWxzZSAwLAogICAgICAgICAgICAgICAgICAgICAgICAxIGlmIGRhdGEuZ2V0KCJqb2JfZW5hYmxlIiwgVHJ1ZSkgZWxzZSAwLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmdldCgiam9iX21heF9kYXkiLCBjb25maWcuTUFYX0pPQlNfUEVSX0RBWSksCiAgICAgICAgICAgICAgICAgICAgICAgIDAsICAjIGlzX2dvbGlrZV9saW5rZWQKICAgICAgICAgICAgICAgICAgICAgICAgIiIsICMgZ29saWtlX2lkCiAgICAgICAgICAgICAgICAgICAgICAgIGludCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICBjb25uLmNvbW1pdCgpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgY+G6rXAgbmjhuq10L3Row6ptIHTDoGkga2hv4bqjbjoge2V9IikKICAgICAgICAgICAgY29ubi5yb2xsYmFjaygpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICBkZWYgcmVzZXRfbG9naW5fc3RhdHVzX2J5X2FwcChzZWxmLCBhcHBfbmFtZTogc3RyKSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIMSQ4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIGxvZ2luIGNobyB04bqldCBj4bqjIHTDoGkga2hv4bqjbiBj4bunYSBt4buZdCDhu6luZyBk4bulbmcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhcHBfbmFtZTogVMOqbiDhu6luZyBk4bulbmcgKGFwcCwga2jDtG5nIHBo4bqjaSBhcHBfbmFtZSkKICAgICAgICAiIiIKICAgICAgICAjIMSQ4bqjbSBi4bqjbyBjb25uZWN0aW9uIGzDoCBj4bunYSB0aHJlYWQgaGnhu4duIHThuqFpCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICAKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgxJDhurd0IGzhuqFpIHRy4bqhbmcgdGjDoWkgbG9naW4gY2hvIHThuqV0IGPhuqMgdMOgaSBraG/huqNuIHbDoCDEkcOhbmggZOG6pXUgY+G6p24gxJHhu5NuZyBi4buZCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgIiIiVVBEQVRFIGFjY291bnRzIFNFVCBpc19sb2dpbiA9IDAsIGlzX3N5bmMgPSAwIFdIRVJFIGFwcCA9ID8iIiIsCiAgICAgICAgICAgICAgICAoYXBwX25hbWUsKQogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPFqW5nIGPhuq1wIG5o4bqtdCB0csaw4budbmcgaXNfbG9naW4gdHJvbmcgZGF0YSBKU09OCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgIiIiU0VMRUNUIGlkLCBkYXRhIEZST00gYWNjb3VudHMgV0hFUkUgYXBwID0gPyIiIiwKICAgICAgICAgICAgICAgIChhcHBfbmFtZSwpCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgIGFjY291bnRzID0gY3Vyc29yLmZldGNoYWxsKCkKICAgICAgICAgICAgZm9yIGFjY291bnQgaW4gYWNjb3VudHM6CiAgICAgICAgICAgICAgICBhY2NvdW50X2lkID0gYWNjb3VudFswXQogICAgICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMoYWNjb3VudFsxXSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBsb2dpbiB0cm9uZyBkYXRhCiAgICAgICAgICAgICAgICBkYXRhWyJpc19sb2dpbiJdID0gRmFsc2UKICAgICAgICAgICAgICAgICMgxJDDoW5oIGThuqV1IGNoxrBhIMSR4buTbmcgYuG7mQogICAgICAgICAgICAgICAgZGF0YVsiaXNfc3luYyJdID0gRmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBMxrB1IGzhuqFpIGRhdGEKICAgICAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgICAgICIiIlVQREFURSBhY2NvdW50cyBTRVQgZGF0YSA9ID8gV0hFUkUgaWQgPSA/IiIiLAogICAgICAgICAgICAgICAgICAgIChqc29uLmR1bXBzKGRhdGEpLCBhY2NvdW50X2lkKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIMSR4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIGxvZ2luOiB7ZX0iKQogICAgICAgICAgICBjb25uLnJvbGxiYWNrKCkKICAgICAgICAgICAgcmV0dXJuIEZhbHNlIAoKICAgIGRlZiBhZGRfam9iX2hpc3Rvcnkoc2VsZiwgam9iX2RhdGE6IERpY3Rbc3RyLCBBbnldKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgVGjDqm0gbeG7mXQgYuG6o24gZ2hpIGzhu4tjaCBz4butIGpvYiBt4bubaQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGpvYl9kYXRhOiBE4buvIGxp4buHdSBqb2IgY+G6p24gbMawdQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IFVVSUQgY+G7p2Egam9iIMSRw6MgdGjDqm0KICAgICAgICAiIiIKICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAKICAgICAgICBjdXJyZW50X3RpbWUgPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgam9iX3V1aWQgPSBqb2JfZGF0YS5nZXQoImpvYl91dWlkIiwgc3RyKHV1aWQudXVpZDQoKSkpCiAgICAgICAgCiAgICAgICAgIyBO4bq/dSBraMO0bmcgY8OzIGRldmljZV9pZCwgc+G7rSBk4bulbmcgZGV2aWNlX2lkIGhp4buHbiB04bqhaQogICAgICAgIGRldmljZV9pZCA9IGpvYl9kYXRhLmdldCgiZGV2aWNlX2lkIikKICAgICAgICBpZiBub3QgZGV2aWNlX2lkOgogICAgICAgICAgICBkZXZpY2VfaWQgPSBzZWxmLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICAKICAgICAgICAjIFTDoWNoIGThu68gbGnhu4d1IGNow61uaCB2w6AgZOG7ryBsaeG7h3UgcGjhu6UKICAgICAgICBtYWluX2RhdGEgPSB7CiAgICAgICAgICAgICJqb2JfdXVpZCI6IGpvYl91dWlkLAogICAgICAgICAgICAiYWNjb3VudF91dWlkIjogam9iX2RhdGEuZ2V0KCJhY2NvdW50X3V1aWQiLCAiIiksCiAgICAgICAgICAgICJkZXZpY2VfaWQiOiBkZXZpY2VfaWQsCiAgICAgICAgICAgICJhcHAiOiBqb2JfZGF0YS5nZXQoImFwcCIsICIiKSwKICAgICAgICAgICAgImpvYl9pZCI6IGpvYl9kYXRhLmdldCgiam9iX2lkIiwgIiIpLAogICAgICAgICAgICAiam9iX3R5cGUiOiBqb2JfZGF0YS5nZXQoImpvYl90eXBlIiwgIiIpLAogICAgICAgICAgICAib2JqZWN0X2lkIjogam9iX2RhdGEuZ2V0KCJvYmplY3RfaWQiLCAiIiksCiAgICAgICAgICAgICJsaW5rIjogam9iX2RhdGEuZ2V0KCJsaW5rIiwgIiIpLAogICAgICAgICAgICAic3RhdHVzIjogam9iX2RhdGEuZ2V0KCJzdGF0dXMiLCAwKSwKICAgICAgICAgICAgInN1Y2Nlc3MiOiAxIGlmIGpvYl9kYXRhLmdldCgic3VjY2VzcyIsIEZhbHNlKSBlbHNlIDAsCiAgICAgICAgICAgICJwcmljZSI6IGpvYl9kYXRhLmdldCgicHJpY2UiLCAwLjApLAogICAgICAgICAgICAiZXJyb3JfbWVzc2FnZSI6IGpvYl9kYXRhLmdldCgiZXJyb3JfbWVzc2FnZSIsICIiKSwKICAgICAgICAgICAgImNyZWF0ZWRfYXQiOiBqb2JfZGF0YS5nZXQoImNyZWF0ZWRfYXQiLCBjdXJyZW50X3RpbWUpLAogICAgICAgICAgICAibGFzdF91cGRhdGUiOiBjdXJyZW50X3RpbWUsCiAgICAgICAgICAgICJpc19zeW5jIjogMCAgIyBN4bq3YyDEkeG7i25oIGNoxrBhIMSR4buTbmcgYuG7mQogICAgICAgIH0KICAgICAgICAKICAgICAgICAjIEzGsHUgSUQgdOG7qyBk4buvIGxp4buHdSDEkeG6p3UgdsOgbyBu4bq/dSBjw7MKICAgICAgICBpZiAiaWQiIGluIGpvYl9kYXRhOgogICAgICAgICAgICBtYWluX2RhdGFbImlkIl0gPSBqb2JfZGF0YVsiaWQiXQogICAgICAgIAogICAgICAgICMgTMawdSBk4buvIGxp4buHdSBwaOG7pSBkxrDhu5tpIGThuqFuZyBKU09OCiAgICAgICAgZXh0cmFfZGF0YSA9IHtrOiB2IGZvciBrLCB2IGluIGpvYl9kYXRhLml0ZW1zKCkgaWYgayBub3QgaW4gbWFpbl9kYXRhIGFuZCBrICE9ICJkYXRhIn0KICAgICAgICBpZiAiZGF0YSIgaW4gam9iX2RhdGEgYW5kIGlzaW5zdGFuY2Uoam9iX2RhdGFbImRhdGEiXSwgZGljdCk6CiAgICAgICAgICAgIGV4dHJhX2RhdGEudXBkYXRlKGpvYl9kYXRhWyJkYXRhIl0pCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjb2x1bW5zID0gIiwgIi5qb2luKG1haW5fZGF0YS5rZXlzKCkpCiAgICAgICAgICAgIHBsYWNlaG9sZGVycyA9ICIsICIuam9pbihbIj8iXSAqIGxlbihtYWluX2RhdGEpKQogICAgICAgICAgICAKICAgICAgICAgICAgdmFsdWVzID0gbGlzdChtYWluX2RhdGEudmFsdWVzKCkpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IHBo4bulIHbDoG8gY3Xhu5FpCiAgICAgICAgICAgIGNvbHVtbnMgKz0gIiwgZGF0YSIKICAgICAgICAgICAgcGxhY2Vob2xkZXJzICs9ICIsID8iCiAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQoanNvbi5kdW1wcyhleHRyYV9kYXRhKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHF1ZXJ5ID0gZiJJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIGpvYnNfaGlzdG9yeSAoe2NvbHVtbnN9KSBWQUxVRVMgKHtwbGFjZWhvbGRlcnN9KSIKICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksIHZhbHVlcykKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICByZXR1cm4gam9iX3V1aWQKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHRow6ptIGzhu4tjaCBz4butIGpvYjoge2V9IikKICAgICAgICAgICAgcmV0dXJuICIiCiAgICAKICAgIGRlZiB1cGRhdGVfam9iX2hpc3Rvcnkoc2VsZiwgam9iX3V1aWQ6IHN0ciwgZGF0YTogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gbOG7i2NoIHPhu60gam9iCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX3V1aWQ6IFVVSUQgY+G7p2Egam9iIGPhuqduIGPhuq1wIG5o4bqtdAogICAgICAgICAgICBkYXRhOiBE4buvIGxp4buHdSBj4bqtcCBuaOG6rXQKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBj4bqtcCBuaOG6rXQgdGjDoG5oIGPDtG5nLCBGYWxzZSBu4bq/dSB0aOG6pXQgYuG6oWkKICAgICAgICAiIiIKICAgICAgICAjIEzhuqV5IGpvYiBoaeG7h24gdOG6oWkKICAgICAgICBqb2IgPSBzZWxmLmdldF9qb2JfaGlzdG9yeShqb2JfdXVpZCkKICAgICAgICBpZiBub3Qgam9iOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAKICAgICAgICAjIEPhuq1wIG5o4bqtdCBk4buvIGxp4buHdQogICAgICAgIGpvYi51cGRhdGUoZGF0YSkKICAgICAgICBqb2JbImxhc3RfdXBkYXRlIl0gPSBpbnQodGltZS50aW1lKCkpCiAgICAgICAgCiAgICAgICAgIyBMxrB1IGzhuqFpCiAgICAgICAgcmV0dXJuIGJvb2woc2VsZi5hZGRfam9iX2hpc3Rvcnkoam9iKSkKICAgIAogICAgZGVmIGdldF9qb2JfaGlzdG9yeShzZWxmLCBqb2JfdXVpZDogc3RyKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgdGjDtG5nIHRpbiBs4buLY2ggc+G7rSBqb2IgdGhlbyBVVUlECiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgam9iX3V1aWQ6IFVVSUQgY+G7p2Egam9iIGPhuqduIGzhuqV5CiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3QgaG/hurdjIE5vbmU6IFRow7RuZyB0aW4gam9iIG7hur91IHTDrG0gdGjhuqV5LCBOb25lIG7hur91IGtow7RuZwogICAgICAgICIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIAogICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIGpvYnNfaGlzdG9yeSBXSEVSRSBqb2JfdXVpZCA9ID8iLCAoam9iX3V1aWQsKSkKICAgICAgICBjb2x1bW5fbmFtZXMgPSBbZGVzY3JpcHRpb25bMF0gZm9yIGRlc2NyaXB0aW9uIGluIGN1cnNvci5kZXNjcmlwdGlvbl0KICAgICAgICByZXN1bHQgPSBjdXJzb3IuZmV0Y2hvbmUoKQogICAgICAgIAogICAgICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGvhur90IHF14bqjIHRow6BuaCBkaWN0CiAgICAgICAgam9iID0ge2NvbHVtbl9uYW1lc1tpXTogcmVzdWx0W2ldIGZvciBpIGluIHJhbmdlKGxlbihjb2x1bW5fbmFtZXMpKX0KICAgICAgICAKICAgICAgICAjIENodXnhu4NuIMSR4buVaSBjw6FjIHRyxrDhu51uZyBib29sZWFuCiAgICAgICAgam9iWyJzdWNjZXNzIl0gPSBib29sKGpvYlsic3VjY2VzcyJdKQogICAgICAgIGpvYlsiaXNfc3luYyJdID0gYm9vbChqb2JbImlzX3N5bmMiXSkKICAgICAgICAKICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IHBo4bulIHThu6sgdHLGsOG7nW5nIGRhdGEKICAgICAgICBpZiAiZGF0YSIgaW4gam9iIGFuZCBqb2JbImRhdGEiXToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZXh0cmFfZGF0YSA9IGpzb24ubG9hZHMoam9iWyJkYXRhIl0pCiAgICAgICAgICAgICAgICBqb2IudXBkYXRlKGV4dHJhX2RhdGEpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgCiAgICAgICAgIyBYw7NhIHRyxrDhu51uZyBkYXRhIMSR4buDIHRyw6FuaCB0csO5bmcgbOG6t3AKICAgICAgICBpZiAiZGF0YSIgaW4gam9iOgogICAgICAgICAgICBkZWwgam9iWyJkYXRhIl0KICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGpvYgogICAgCiAgICBkZWYgZ2V0X2pvYl9oaXN0b3J5X2J5X2FjY291bnQoc2VsZiwgYWNjb3VudF91dWlkOiBzdHIsIGxpbWl0OiBpbnQgPSA1MCkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgbOG7i2NoIHPhu60gam9iIGPhu6dhIG3hu5l0IHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnRfdXVpZDogVVVJRCBj4bunYSB0w6BpIGtob+G6o24KICAgICAgICAgICAgbGltaXQ6IFPhu5EgbMaw4bujbmcgYuG6o24gZ2hpIHThu5FpIMSRYSB0cuG6oyB24buBCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIExpc3RbRGljdFtzdHIsIEFueV1dOiBEYW5oIHPDoWNoIGzhu4tjaCBz4butIGpvYgogICAgICAgICIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIAogICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAiU0VMRUNUICogRlJPTSBqb2JzX2hpc3RvcnkgV0hFUkUgYWNjb3VudF91dWlkID0gPyBPUkRFUiBCWSBjcmVhdGVkX2F0IERFU0MgTElNSVQgPyIsIAogICAgICAgICAgICAoYWNjb3VudF91dWlkLCBsaW1pdCkKICAgICAgICApCiAgICAgICAgY29sdW1uX25hbWVzID0gW2Rlc2NyaXB0aW9uWzBdIGZvciBkZXNjcmlwdGlvbiBpbiBjdXJzb3IuZGVzY3JpcHRpb25dCiAgICAgICAgcmVzdWx0cyA9IGN1cnNvci5mZXRjaGFsbCgpCiAgICAgICAgCiAgICAgICAgam9icyA9IFtdCiAgICAgICAgZm9yIHJlc3VsdCBpbiByZXN1bHRzOgogICAgICAgICAgICAjIENodXnhu4NuIMSR4buVaSBr4bq/dCBxdeG6oyB0aMOgbmggZGljdAogICAgICAgICAgICBqb2IgPSB7Y29sdW1uX25hbWVzW2ldOiByZXN1bHRbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGNvbHVtbl9uYW1lcykpfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgYm9vbGVhbgogICAgICAgICAgICBqb2JbInN1Y2Nlc3MiXSA9IGJvb2woam9iWyJzdWNjZXNzIl0pCiAgICAgICAgICAgIGpvYlsiaXNfc3luYyJdID0gYm9vbChqb2JbImlzX3N5bmMiXSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVGjDqm0gZOG7ryBsaeG7h3UgcGjhu6UgdOG7qyB0csaw4budbmcgZGF0YQogICAgICAgICAgICBpZiAiZGF0YSIgaW4gam9iIGFuZCBqb2JbImRhdGEiXToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBleHRyYV9kYXRhID0ganNvbi5sb2Fkcyhqb2JbImRhdGEiXSkKICAgICAgICAgICAgICAgICAgICBqb2IudXBkYXRlKGV4dHJhX2RhdGEpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgWMOzYSB0csaw4budbmcgZGF0YSDEkeG7gyB0csOhbmggdHLDuW5nIGzhurdwCiAgICAgICAgICAgIGlmICJkYXRhIiBpbiBqb2I6CiAgICAgICAgICAgICAgICBkZWwgam9iWyJkYXRhIl0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICBqb2JzLmFwcGVuZChqb2IpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBqb2JzCiAgICAKICAgIGRlZiBnZXRfcGVuZGluZ19zeW5jX2l0ZW1zKHNlbGYsIHRhYmxlOiBzdHIsIGxpbWl0OiBpbnQgPSAxMDAsIGRldmljZV9pZDogQW55ID0gVHJ1ZSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgZGFuaCBzw6FjaCBjw6FjIGLhuqNuIGdoaSBjaMawYSDEkcaw4bujYyDEkeG7k25nIGLhu5kKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB0YWJsZTogVMOqbiBi4bqjbmcgKCdhY2NvdW50cycgaG/hurdjICdqb2JzX2hpc3RvcnknKQogICAgICAgICAgICBsaW1pdDogU+G7kSBsxrDhu6NuZyBi4bqjbiBnaGkgdOG7kWkgxJFhIHRy4bqjIHbhu4EKICAgICAgICAgICAgZGV2aWNlX2lkOiBUaGnhur90IGLhu4sgSUQgxJHhu4MgbOG7jWM6CiAgICAgICAgICAgICAgICAtIFRydWU6IEzhu41jIHRoZW8gZGV2aWNlX2lkIGhp4buHbiB04bqhaSAobeG6t2MgxJHhu4tuaCkKICAgICAgICAgICAgICAgIC0gRmFsc2UvTm9uZTogS2jDtG5nIGzhu41jIHRoZW8gZGV2aWNlX2lkCiAgICAgICAgICAgICAgICAtIENodeG7l2k6IEzhu41jIHRoZW8gZGV2aWNlX2lkIGPhu6UgdGjhu4MgxJHGsOG7o2MgdHJ1eeG7gW4gdsOgbwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBMaXN0W0RpY3Rbc3RyLCBBbnldXTogRGFuaCBzw6FjaCBi4bqjbiBnaGkgY2jGsGEgxJHhu5NuZyBi4buZCiAgICAgICAgIiIiCiAgICAgICAgaWYgdGFibGUgbm90IGluIFsnYWNjb3VudHMnLCAnam9ic19oaXN0b3J5J106CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgICAgICAKICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAKICAgICAgICB1dWlkX2ZpZWxkID0gImFjY291bnRfdXVpZCIgaWYgdGFibGUgPT0gImFjY291bnRzIiBlbHNlICJqb2JfdXVpZCIKICAgICAgICAKICAgICAgICAjIFRow6ptIMSRaeG7gXUga2nhu4duIGzhu41jIHRoZW8gZGV2aWNlX2lkCiAgICAgICAgaWYgZGV2aWNlX2lkIGlzIFRydWU6CiAgICAgICAgICAgICMgTOG6pXkgZGV2aWNlX2lkIGhp4buHbiB04bqhaQogICAgICAgICAgICBjdXJyZW50X2RldmljZV9pZCA9IHNlbGYuZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoKQogICAgICAgICAgICBxdWVyeSA9IGYiU0VMRUNUICogRlJPTSB7dGFibGV9IFdIRVJFIGlzX3N5bmMgPSAwIEFORCBkZXZpY2VfaWQgPSA/IExJTUlUID8iCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAoY3VycmVudF9kZXZpY2VfaWQsIGxpbWl0KSkKICAgICAgICBlbGlmIGRldmljZV9pZDoKICAgICAgICAgICAgIyBT4butIGThu6VuZyBkZXZpY2VfaWQgxJHGsOG7o2MgdHJ1eeG7gW4gdsOgbwogICAgICAgICAgICBxdWVyeSA9IGYiU0VMRUNUICogRlJPTSB7dGFibGV9IFdIRVJFIGlzX3N5bmMgPSAwIEFORCBkZXZpY2VfaWQgPSA/IExJTUlUID8iCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAoZGV2aWNlX2lkLCBsaW1pdCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBLaMO0bmcgbOG7jWMgdGhlbyBkZXZpY2VfaWQKICAgICAgICAgICAgcXVlcnkgPSBmIlNFTEVDVCAqIEZST00ge3RhYmxlfSBXSEVSRSBpc19zeW5jID0gMCBMSU1JVCA/IgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKGxpbWl0LCkpCiAgICAgICAgICAgIAogICAgICAgIGNvbHVtbl9uYW1lcyA9IFtkZXNjcmlwdGlvblswXSBmb3IgZGVzY3JpcHRpb24gaW4gY3Vyc29yLmRlc2NyaXB0aW9uXQogICAgICAgIHJlc3VsdHMgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgICAgIAogICAgICAgIGl0ZW1zID0gW10KICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHM6CiAgICAgICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGvhur90IHF14bqjIHRow6BuaCBkaWN0CiAgICAgICAgICAgIGl0ZW0gPSB7Y29sdW1uX25hbWVzW2ldOiByZXN1bHRbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGNvbHVtbl9uYW1lcykpfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBk4buvIGxp4buHdSBwaOG7pSB04burIHRyxrDhu51uZyBkYXRhCiAgICAgICAgICAgIGlmICJkYXRhIiBpbiBpdGVtIGFuZCBpdGVtWyJkYXRhIl06CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZXh0cmFfZGF0YSA9IGpzb24ubG9hZHMoaXRlbVsiZGF0YSJdKQogICAgICAgICAgICAgICAgICAgIGl0ZW0udXBkYXRlKGV4dHJhX2RhdGEpCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgWMOzYSB0csaw4budbmcgZGF0YSDEkeG7gyB0csOhbmggdHLDuW5nIGzhurdwCiAgICAgICAgICAgIGlmICJkYXRhIiBpbiBpdGVtOgogICAgICAgICAgICAgICAgZGVsIGl0ZW1bImRhdGEiXQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gaXRlbXMKICAgIAogICAgZGVmIG1hcmtfYXNfc3luY2VkKHNlbGYsIHRhYmxlOiBzdHIsIHV1aWRfdmFsdWU6IHN0cikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICDEkMOhbmggZOG6pXUgYuG6o24gZ2hpIMSRw6MgxJHGsOG7o2MgxJHhu5NuZyBi4buZCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGFibGU6IFTDqm4gYuG6o25nICgnYWNjb3VudHMnIGhv4bq3YyAnam9ic19oaXN0b3J5JykKICAgICAgICAgICAgdXVpZF92YWx1ZTogR2nDoSB0cuG7iyBVVUlEIGPhu6dhIGLhuqNuIGdoaQogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IGPhuq1wIG5o4bqtdCB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIGlmIHRhYmxlIG5vdCBpbiBbJ2FjY291bnRzJywgJ2pvYnNfaGlzdG9yeSddOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgdXVpZF9maWVsZCA9ICJhY2NvdW50X3V1aWQiIGlmIHRhYmxlID09ICJhY2NvdW50cyIgZWxzZSAiam9iX3V1aWQiCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgKICAgICAgICAgICAgICAgIGYiVVBEQVRFIHt0YWJsZX0gU0VUIGlzX3N5bmMgPSAxIFdIRVJFIHt1dWlkX2ZpZWxkfSA9ID8iLAogICAgICAgICAgICAgICAgKHV1aWRfdmFsdWUsKQogICAgICAgICAgICApCiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgcmV0dXJuIGN1cnNvci5yb3djb3VudCA+IDAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIMSRw6FuaCBk4bqldSDEkcOjIMSR4buTbmcgYuG7mToge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlIAoKICAgIGRlZiBtYXJrX2FsbF9hY2NvdW50c19ub3Rfc3luY2VkKHNlbGYpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICDEkMOhbmggZOG6pXUgdOG6pXQgY+G6oyB0w6BpIGtob+G6o24gbMOgIGNoxrBhIHN5bmMKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBpbnQ6IFPhu5EgdMOgaSBraG/huqNuIMSRw6MgxJHGsOG7o2MgY+G6rXAgbmjhuq10CiAgICAgICAgIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiVVBEQVRFIGFjY291bnRzIFNFVCBpc19zeW5jID0gMCIpCiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgdXBkYXRlZF9jb3VudCA9IGN1cnNvci5yb3djb3VudAogICAgICAgICAgICByZXR1cm4gdXBkYXRlZF9jb3VudAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgxJHDoW5oIGThuqV1IHThuqV0IGPhuqMgdMOgaSBraG/huqNuIGNoxrBhIHN5bmM6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiAwCgogICAgZGVmIGdldF9kZXZpY2VfY29uZmlnKHNlbGYsIGtleTogc3RyLCBkZWZhdWx0PU5vbmUpIC0+IEFueToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBj4bqldSBow6xuaCB0aGnhur90IGLhu4sKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBrZXk6IEtow7NhIGPhuqV1IGjDrG5oCiAgICAgICAgICAgIGRlZmF1bHQ6IEdpw6EgdHLhu4sgbeG6t2MgxJHhu4tuaCBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgQW55OiBHacOhIHRy4buLIGPhuqV1IGjDrG5oIGhv4bq3YyBnacOhIHRy4buLIG3hurdjIMSR4buLbmgKICAgICAgICAiIiIKICAgICAgICAjIEzhuqV5IGPhuqV1IGjDrG5oIHThu6sgZGF0YWJhc2UKICAgICAgICByZXR1cm4gc2VsZi5nZXQoa2V5LCBkZWZhdWx0KQoKICAgIGRlZiBzZXRfZGV2aWNlX2NvbmZpZyhzZWxmLCBrZXk6IHN0ciwgdmFsdWU6IEFueSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBTZXQgYSBkZXZpY2UgY29uZmlndXJhdGlvbiB2YWx1ZSBpbiB0aGUgY29uZmlnIHRhYmxlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAga2V5OiBUaGUgY29uZmlndXJhdGlvbiBrZXkKICAgICAgICAgICAgdmFsdWU6IFRoZSB2YWx1ZSB0byBzZXQKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBpZiBzdWNjZXNzZnVsLCBGYWxzZSBvdGhlcndpc2UKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5zZXQoa2V5LCB2YWx1ZSkKCiAgICBkZWYgZ2V0X2dsb2JhbF9jb25maWcoc2VsZiwgZGVmYXVsdD1Ob25lKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBnbG9iYWwgY29uZmlnIGNodW5nIGNobyB04bqldCBj4bqjIGFwcHMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBkZWZhdWx0OiBDb25maWcgbeG6t2MgxJHhu4tuaCBu4bq/dSBraMO0bmcgY8OzIHRyb25nIERCCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBHbG9iYWwgY29uZmlnIGNodW5nCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0KCJnbG9iYWxfY29uZmlnIiwgZGVmYXVsdCBvciB7fSkKICAgIAogICAgZGVmIHNldF9nbG9iYWxfY29uZmlnKHNlbGYsIGNvbmZpZzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTMawdSBnbG9iYWwgY29uZmlnIGNodW5nIGNobyB04bqldCBj4bqjIGFwcHMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBjb25maWc6IEdsb2JhbCBjb25maWcgY2h1bmcKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5zZXQoImdsb2JhbF9jb25maWciLCBjb25maWcpCiAgICAKICAgIGRlZiBnZXRfYXBwX2NvbmZpZyhzZWxmLCBhcHBfbmFtZTogc3RyLCBkZWZhdWx0PU5vbmUpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGNvbmZpZyBjaG8gbeG7mXQgYXBwIGPhu6UgdGjhu4MKICAgICAgICBQcmlvcml0eTogYXBwX2NvbmZpZyDihpIgZ2xvYmFsX2NvbmZpZyDihpIgZGVmYXVsdAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFwcF9uYW1lOiBUw6puIGFwcCAodGlrdG9rLCB0aWt0b2syLCBpbnN0YWdyYW0sIGV0Yy4pCiAgICAgICAgICAgIGRlZmF1bHQ6IENvbmZpZyBt4bq3YyDEkeG7i25oIGNobyBhcHAKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgRGljdFtzdHIsIEFueV06IENvbmZpZyBj4bunYSBhcHAgxJHDoyBtZXJnZSB0aGVvIHByaW9yaXR5CiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEzhuqV5IGNvbmZpZyByacOqbmcgY+G7p2EgYXBwCiAgICAgICAgICAgIGFwcF9jb25maWdfa2V5ID0gZiJ7YXBwX25hbWV9X2NvbmZpZyIKICAgICAgICAgICAgYXBwX2NvbmZpZyA9IHNlbGYuZ2V0KGFwcF9jb25maWdfa2V5LCB7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTOG6pXkgZ2xvYmFsIGNvbmZpZwogICAgICAgICAgICBnbG9iYWxfY29uZmlnID0gc2VsZi5nZXRfZ2xvYmFsX2NvbmZpZyh7fSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTWVyZ2UgdGhlbyBwcmlvcml0eTogZGVmYXVsdCDihpIgZ2xvYmFsIOKGkiBhcHAKICAgICAgICAgICAgbWVyZ2VkX2NvbmZpZyA9IChkZWZhdWx0IG9yIHt9KS5jb3B5KCkKICAgICAgICAgICAgbWVyZ2VkX2NvbmZpZy51cGRhdGUoZ2xvYmFsX2NvbmZpZykKICAgICAgICAgICAgbWVyZ2VkX2NvbmZpZy51cGRhdGUoYXBwX2NvbmZpZykKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBtZXJnZWRfY29uZmlnCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGdldCBhcHAgY29uZmlnIGNobyB7YXBwX25hbWV9OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdCBvciB7fQogICAgCiAgICBkZWYgc2V0X2FwcF9jb25maWcoc2VsZiwgYXBwX25hbWU6IHN0ciwgYXBwX2NvbmZpZzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTMawdSBjb25maWcgY2hvIG3hu5l0IGFwcCBj4bulIHRo4buDCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYXBwX25hbWU6IFTDqm4gYXBwCiAgICAgICAgICAgIGFwcF9jb25maWc6IENvbmZpZyBj4bunYSBhcHAKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICBhcHBfY29uZmlnX2tleSA9IGYie2FwcF9uYW1lfV9jb25maWciCiAgICAgICAgcmV0dXJuIHNlbGYuc2V0KGFwcF9jb25maWdfa2V5LCBhcHBfY29uZmlnKQogICAgCiAgICBkZWYgdXBkYXRlX2FwcF9jb25maWcoc2VsZiwgYXBwX25hbWU6IHN0ciwgdXBkYXRlczogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IG3hu5l0IHPhu5EgY29uZmlnIGNobyBhcHAgKG1lcmdlIHbhu5tpIGNvbmZpZyBoaeG7h24gdOG6oWkpCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYXBwX25hbWU6IFTDqm4gYXBwCiAgICAgICAgICAgIHVwZGF0ZXM6IERpY3QgY8OhYyBjb25maWcgY+G6p24gY+G6rXAgbmjhuq10CiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgYXBwX2NvbmZpZ19rZXkgPSBmInthcHBfbmFtZX1fY29uZmlnIgogICAgICAgIGN1cnJlbnRfY29uZmlnID0gc2VsZi5nZXQoYXBwX2NvbmZpZ19rZXksIHt9KQogICAgICAgIGN1cnJlbnRfY29uZmlnLnVwZGF0ZSh1cGRhdGVzKQogICAgICAgIHJldHVybiBzZWxmLnNldChhcHBfY29uZmlnX2tleSwgY3VycmVudF9jb25maWcpCiAgICAKICAgIGRlZiB1cGRhdGVfZ2xvYmFsX2NvbmZpZyhzZWxmLCB1cGRhdGVzOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBD4bqtcCBuaOG6rXQgZ2xvYmFsIGNvbmZpZwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHVwZGF0ZXM6IERpY3QgY8OhYyBjb25maWcgY+G6p24gY+G6rXAgbmjhuq10CiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgY3VycmVudF9jb25maWcgPSBzZWxmLmdldF9nbG9iYWxfY29uZmlnKHt9KQogICAgICAgIGN1cnJlbnRfY29uZmlnLnVwZGF0ZSh1cGRhdGVzKQogICAgICAgIHJldHVybiBzZWxmLnNldF9nbG9iYWxfY29uZmlnKGN1cnJlbnRfY29uZmlnKQoKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICMgR09MSUtFIENPTkZJRyBNRVRIT0RTCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGRlZiBnZXRfZ29saWtlX2NvbmZpZyhzZWxmLCBkZWZhdWx0PU5vbmUpIC0+IERpY3Rbc3RyLCBBbnldOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IEdvTGlrZSBjb25maWcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBkZWZhdWx0OiBDb25maWcgbeG6t2MgxJHhu4tuaCBu4bq/dSBraMO0bmcgY8OzIHRyb25nIERCCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBHb0xpa2UgY29uZmlnCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuZ2V0KCJnb2xpa2VfY29uZmlnIiwgZGVmYXVsdCBvciB7fSkKICAgIAogICAgZGVmIHNldF9nb2xpa2VfY29uZmlnKHNlbGYsIGNvbmZpZzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTMawdSBHb0xpa2UgY29uZmlnCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgY29uZmlnOiBHb0xpa2UgY29uZmlnCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IFRydWUgbuG6v3UgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuc2V0KCJnb2xpa2VfY29uZmlnIiwgY29uZmlnKQogICAgCiAgICBkZWYgdXBkYXRlX2dvbGlrZV9jb25maWcoc2VsZiwgdXBkYXRlczogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgQ+G6rXAgbmjhuq10IEdvTGlrZSBjb25maWcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICB1cGRhdGVzOiBEaWN0IGPDoWMgY29uZmlnIGPhuqduIGPhuq1wIG5o4bqtdAogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIGN1cnJlbnRfY29uZmlnID0gc2VsZi5nZXRfZ29saWtlX2NvbmZpZyh7fSkKICAgICAgICBjdXJyZW50X2NvbmZpZy51cGRhdGUodXBkYXRlcykKICAgICAgICByZXR1cm4gc2VsZi5zZXRfZ29saWtlX2NvbmZpZyhjdXJyZW50X2NvbmZpZykKCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAjIFBST1hZIENPTkZJRyBNRVRIT0RTICAKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgZGVmIGdldF9wcm94eV9jb25maWcoc2VsZiwgZGVmYXVsdD1Ob25lKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSBQcm94eSBjb25maWcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBkZWZhdWx0OiBDb25maWcgbeG6t2MgxJHhu4tuaCBu4bq/dSBraMO0bmcgY8OzIHRyb25nIERCCiAgICAgICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBQcm94eSBjb25maWcKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5nZXQoInByb3h5X2NvbmZpZyIsIGRlZmF1bHQgb3Ige30pCiAgICAKICAgIGRlZiBzZXRfcHJveHlfY29uZmlnKHNlbGYsIGNvbmZpZzogRGljdFtzdHIsIEFueV0pIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgTMawdSBQcm94eSBjb25maWcKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBjb25maWc6IFByb3h5IGNvbmZpZwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZwogICAgICAgICIiIgogICAgICAgIHJldHVybiBzZWxmLnNldCgicHJveHlfY29uZmlnIiwgY29uZmlnKQogICAgCiAgICBkZWYgdXBkYXRlX3Byb3h5X2NvbmZpZyhzZWxmLCB1cGRhdGVzOiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBD4bqtcCBuaOG6rXQgUHJveHkgY29uZmlnCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdXBkYXRlczogRGljdCBjw6FjIGNvbmZpZyBj4bqnbiBj4bqtcCBuaOG6rXQKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcKICAgICAgICAiIiIKICAgICAgICBjdXJyZW50X2NvbmZpZyA9IHNlbGYuZ2V0X3Byb3h5X2NvbmZpZyh7fSkKICAgICAgICBjdXJyZW50X2NvbmZpZy51cGRhdGUodXBkYXRlcykKICAgICAgICByZXR1cm4gc2VsZi5zZXRfcHJveHlfY29uZmlnKGN1cnJlbnRfY29uZmlnKQoKICAgIGRlZiBnZXRfYWxsX2RldmljZV9jb25maWcoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgR2V0IGFsbCBkZXZpY2UgY29uZmlndXJhdGlvbiBzZXR0aW5ncwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBEaWN0aW9uYXJ5IG9mIGFsbCBkZXZpY2UgY29uZmlndXJhdGlvbiBzZXR0aW5ncwogICAgICAgICIiIgogICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgIAogICAgICAgICMgR2V0IGFsbCBrZXlzIHN0YXJ0aW5nIHdpdGggImRldmljZV8iIGJ1dCBleGNsdWRlIGRldmljZV9pbmZvCiAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBrZXksIHZhbHVlIEZST00gY29uZmlnIFdIRVJFIGtleSAhPSAnZGV2aWNlX2luZm8nIEFORCBrZXkgIT0gJ2RldmljZV9pZCciKQogICAgICAgIHJlc3VsdHMgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgICAgIAogICAgICAgICMgQnVpbGQgY29uZmlnIGRpY3Rpb25hcnksIHJlbW92aW5nICJkZXZpY2VfIiBwcmVmaXggZnJvbSBrZXlzCiAgICAgICAgZGV2aWNlX2NvbmZpZyA9IHt9CiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gcmVzdWx0czoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGV2aWNlX2NvbmZpZ1trZXldID0ganNvbi5sb2Fkcyh2YWx1ZSkKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgZGV2aWNlX2NvbmZpZ1trZXldID0gdmFsdWUKICAgICAgICAKICAgICAgICAjIEltcG9ydCBjb25maWcgbW9kdWxlCiAgICAgICAgaW1wb3J0IGNvbmZpZyBhcyBjb25maWdfbW9kdWxlCiAgICAgICAgCiAgICAgICAgIyBBZGQgZGVmYXVsdCB2YWx1ZXMgZm9yIG1pc3NpbmcgY29uZmlnIGl0ZW1zCiAgICAgICAgZGVmYXVsdF9jb25maWdzID0gewogICAgICAgICAgICAibWF4X2pvYnNfcGVyX2RheSI6IGNvbmZpZ19tb2R1bGUuTUFYX0pPQlNfUEVSX0RBWSwKICAgICAgICAgICAgIm1heF9qb2JzX3Blcl9zZXNzaW9uIjogY29uZmlnX21vZHVsZS5NQVhfSk9CU19QRVJfU0VTU0lPTiwKICAgICAgICAgICAgImpvYl9pbnRlcnZhbF9zZWNvbmRzIjogY29uZmlnX21vZHVsZS5KT0JfQ0hFQ0tfSU5URVJWQUwsCiAgICAgICAgICAgICJyZXBvcnRfaW50ZXJ2YWwiOiBjb25maWdfbW9kdWxlLk1RVFRfUkVQT1JUX0lOVEVSVkFMLAogICAgICAgICAgICAjICJlbmFibGVfY2FyZSI6IGNvbmZpZ19tb2R1bGUuU01BUlRfQ0FSRV9FTkFCTEVELCAgIyBSRU1PVkVEOiBraMO0bmcgc+G7rSBk4bulbmcgbuG7r2EKICAgICAgICAgICAgIyAiY2FyZV9pbnRlcnZhbF9ob3VycyI6IGNvbmZpZ19tb2R1bGUuU01BUlRfQ0FSRV9JTlRFUlZBTF9IT1VSUywgICMgUkVNT1ZFRDoga2jDtG5nIHPhu60gZOG7pW5nIG7hu69hCiAgICAgICAgICAgICMgImNhcmVfY2hhbmNlX3BlcmNlbnQiOiBjb25maWdfbW9kdWxlLlNNQVJUX0NBUkVfQ0hBTkNFX1BFUkNFTlQgICMgUkVNT1ZFRDoga2jDtG5nIHPhu60gZOG7pW5nIG7hu69hCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGZvciBrZXksIGRlZmF1bHRfdmFsdWUgaW4gZGVmYXVsdF9jb25maWdzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gZGV2aWNlX2NvbmZpZzoKICAgICAgICAgICAgICAgIGRldmljZV9jb25maWdba2V5XSA9IGRlZmF1bHRfdmFsdWUKICAgICAgICAKICAgICAgICAjIExv4bqhaSBi4buPIGPDoWMgdHLGsOG7nW5nIGtow7RuZyBj4bqnbiB0aGnhur90CiAgICAgICAga2V5c190b19yZW1vdmUgPSBbImlkIiwgImdvbGlrZV9hcGlfYmFzZSJdCiAgICAgICAgZm9yIGtleSBpbiBrZXlzX3RvX3JlbW92ZToKICAgICAgICAgICAgaWYga2V5IGluIGRldmljZV9jb25maWc6CiAgICAgICAgICAgICAgICBkZWwgZGV2aWNlX2NvbmZpZ1trZXldCiAgICAgICAgCiAgICAgICAgcmV0dXJuIGRldmljZV9jb25maWcKCiAgICBkZWYgc2F2ZV9kZXZpY2VfY29uZmlnKHNlbGYsIGNvbmZpZ19kaWN0OiBEaWN0W3N0ciwgQW55XSkgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBMxrB1IG5oaeG7gXUgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLIGPDuW5nIGzDumMKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBjb25maWdfZGljdDogRGljdGlvbmFyeSBjaOG7qWEgY8OhYyBj4bq3cCBrZXktdmFsdWUgY+G6pXUgaMOsbmgKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gY29uZmlnX2RpY3QuaXRlbXMoKToKICAgICAgICAgICAgICAgIHNlbGYuc2V0X2RldmljZV9jb25maWcoa2V5LCB2YWx1ZSkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGzGsHUgY+G6pXUgaMOsbmggdGhp4bq/dCBi4buLOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIAogICAgZGVmIGluaXRfZGVmYXVsdF9jb25maWcoc2VsZikgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIiIiCiAgICAgICAgS2jhu59pIHThuqFvIGPhuqV1IGjDrG5oIG3hurdjIMSR4buLbmggY2hvIHRoaeG6v3QgYuG7iwogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIERpY3Rbc3RyLCBBbnldOiBD4bqldSBow6xuaCDEkcOjIGto4bufaSB04bqhbwogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBT4butIGThu6VuZyBERUZBVUxUX0dMT0JBTF9DT05GSUcgdOG7qyBjb25maWcucHkgdGhheSB2w6wgaGFyZGNvZGUKICAgICAgICAgICAgZGVmYXVsdF9jb25maWcgPSBjb25maWcuREVGQVVMVF9HTE9CQUxfQ09ORklHLmNvcHkoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBUaMOqbSBzeW5jX2ludGVydmFsIHbDoG8gZ2xvYmFsIGNvbmZpZwogICAgICAgICAgICBkZWZhdWx0X2NvbmZpZ1sic3luY19pbnRlcnZhbCJdID0gY29uZmlnLlNZTkNfSU5URVJWQUwKICAgICAgICAgICAgCiAgICAgICAgICAgICMgTMawdSBj4bqldSBow6xuaCBt4bq3YyDEkeG7i25oIHbDoG8gZGF0YWJhc2UKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gZGVmYXVsdF9jb25maWcuaXRlbXMoKToKICAgICAgICAgICAgICAgICMgQ2jhu4kgbMawdSBu4bq/dSBjaMawYSBjw7MgdHJvbmcgZGF0YWJhc2UKICAgICAgICAgICAgICAgIGlmIHNlbGYuZ2V0X2RldmljZV9jb25maWcoa2V5KSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0X2RldmljZV9jb25maWcoa2V5LCB2YWx1ZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KCLEkMOjIGto4bufaSB04bqhbyBj4bqldSBow6xuaCBt4bq3YyDEkeG7i25oIGNobyB0aGnhur90IGLhu4siKQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdF9jb25maWcKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGto4bufaSB04bqhbyBj4bqldSBow6xuaCBt4bq3YyDEkeG7i25oOiB7ZX0iKQogICAgICAgICAgICByZXR1cm4ge30KICAgICAgICAgICAgCiAgICBkZWYgZ2V0X29yX2NyZWF0ZV9kZXZpY2VfaWQoc2VsZikgLT4gc3RyOgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGhv4bq3YyB04bqhbyBkZXZpY2VfaWQKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IGRldmljZV9pZAogICAgICAgICIiIgogICAgICAgICMgS2nhu4NtIHRyYSB4ZW0gY8OzIGRldmljZV9pZCB0cm9uZyBkYXRhYmFzZSBraMO0bmcKICAgICAgICBkZXZpY2VfaWQgPSBzZWxmLmdldF9kZXZpY2VfY29uZmlnKCJkZXZpY2VfaWQiLCAiIikKICAgICAgICBpZiBkZXZpY2VfaWQ6CiAgICAgICAgICAgIHJldHVybiBkZXZpY2VfaWQKICAgICAgICAgICAgCiAgICAgICAgIyBUaOG7rSBs4bqleSBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmcKICAgICAgICBkZXZpY2VfaWQgPSBzZWxmLl9nZXRfZGV2aWNlX2lkX2Zyb21fc3lzdGVtKCkKICAgICAgICBpZiBkZXZpY2VfaWQ6CiAgICAgICAgICAgICMgTMawdSB2w6BvIGPhuqV1IGjDrG5oIHbDoCB0cuG6oyB24buBCiAgICAgICAgICAgIHByaW50KGYixJDDoyBs4bqleSDEkcaw4bujYyBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmc6IHtkZXZpY2VfaWR9IikKICAgICAgICAgICAgc2VsZi5zZXRfZGV2aWNlX2NvbmZpZygiZGV2aWNlX2lkIiwgZGV2aWNlX2lkKQogICAgICAgICAgICByZXR1cm4gZGV2aWNlX2lkCiAgICAgICAgICAgIAogICAgICAgICMgVGjhu60gbOG6pXkgZGV2aWNlX2lkIHThu6sgaGVscGVyIHNlcnZpY2UKICAgICAgICBkZXZpY2VfaWQgPSBzZWxmLl9nZXRfZGV2aWNlX2lkX2Zyb21faGVscGVyKCkKICAgICAgICBpZiBkZXZpY2VfaWQ6CiAgICAgICAgICAgICMgTMawdSB2w6BvIGPhuqV1IGjDrG5oIHbDoCB0cuG6oyB24buBCiAgICAgICAgICAgIHByaW50KGYixJDDoyBs4bqleSDEkcaw4bujYyBkZXZpY2VfaWQgdOG7qyBoZWxwZXIgc2VydmljZToge2RldmljZV9pZH0iKQogICAgICAgICAgICBzZWxmLnNldF9kZXZpY2VfY29uZmlnKCJkZXZpY2VfaWQiLCBkZXZpY2VfaWQpCiAgICAgICAgICAgIHJldHVybiBkZXZpY2VfaWQKICAgICAgICAgICAgCiAgICAgICAgIyBO4bq/dSBraMO0bmcgbOG6pXkgxJHGsOG7o2MsIHThuqFvIG3hu5tpCiAgICAgICAgaW1wb3J0IHJhbmRvbQogICAgICAgIGltcG9ydCBzdHJpbmcKICAgICAgICByYW5kb21faWQgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sb3dlcmNhc2UgKyBzdHJpbmcuZGlnaXRzLCBrPTEwKSkKICAgICAgICBkZXZpY2VfaWQgPSBmInJhbmRvbV97cmFuZG9tX2lkfSIKICAgICAgICBwcmludChmIktow7RuZyBs4bqleSDEkcaw4bujYyBkZXZpY2VfaWQgYuG6sW5nIGPDoWMgY8OhY2ggdHLDqm4sIHThuqFvIG3hu5tpOiB7ZGV2aWNlX2lkfSIpCiAgICAgICAgCiAgICAgICAgIyBMxrB1IHbDoG8gY+G6pXUgaMOsbmgKICAgICAgICBzZWxmLnNldF9kZXZpY2VfY29uZmlnKCJkZXZpY2VfaWQiLCBkZXZpY2VfaWQpCiAgICAgICAgcmV0dXJuIGRldmljZV9pZAogICAgICAgIAogICAgZGVmIF9nZXRfZGV2aWNlX2lkX2Zyb21fc3lzdGVtKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBkZXZpY2VfaWQgdOG7qyBo4buHIHRo4buRbmcgKHPhu60gZOG7pW5nIGzhu4duaCBnZXRwcm9wKQogICAgICAgIAogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHN0cjogZGV2aWNlX2lkIGhv4bq3YyBjaHXhu5dpIHLhu5duZyBu4bq/dSBraMO0bmcgbOG6pXkgxJHGsOG7o2MKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBzdWJwcm9jZXNzCiAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MucnVuKFsiZ2V0cHJvcCIsICJyby5zZXJpYWxubyJdLCBjYXB0dXJlX291dHB1dD1UcnVlLCB0ZXh0PVRydWUpCiAgICAgICAgICAgIGRldmljZV9pZCA9IHJlc3VsdC5zdGRvdXQuc3RyaXAoKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgZGV2aWNlX2lkIGFuZCBkZXZpY2VfaWQgIT0gInVua25vd24iOgogICAgICAgICAgICAgICAgcmV0dXJuIGRldmljZV9pZAogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGzhuqV5IGRldmljZV9pZCB04burIGjhu4cgdGjhu5FuZzoge2V9IikKICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgICAgIAogICAgZGVmIF9nZXRfZGV2aWNlX2lkX2Zyb21faGVscGVyKHNlbGYpIC0+IHN0cjoKICAgICAgICAiIiIKICAgICAgICBM4bqleSBkZXZpY2VfaWQgdOG7qyBoZWxwZXIgc2VydmljZSAoYW5kcm9pZF9pZCkKICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBzdHI6IGRldmljZV9pZCBob+G6t2MgY2h14buXaSBy4buXbmcgbuG6v3Uga2jDtG5nIGzhuqV5IMSRxrDhu6NjCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEPhuqduIGltcG9ydCBIZWxwZXJTZXJ2aWNlIHThuqFpIMSRw6J5IMSR4buDIHRyw6FuaCBpbXBvcnQgdsOybmcKICAgICAgICAgICAgZnJvbSBzZXJ2aWNlcy5oZWxwZXJfc2VydmljZSBpbXBvcnQgSGVscGVyU2VydmljZQogICAgICAgICAgICBpbXBvcnQgY29uZmlnCiAgICAgICAgICAgIAogICAgICAgICAgICBoZWxwZXIgPSBIZWxwZXJTZXJ2aWNlKGJhc2VfdXJsPWNvbmZpZy5IRUxQRVJfU0VSVklDRV9VUkwpCiAgICAgICAgICAgIGRldmljZV9pbmZvID0gaGVscGVyLmdldF9kZXZpY2VfaW5mbygpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBkZXZpY2VfaW5mbyBhbmQgInN0YXR1cyIgaW4gZGV2aWNlX2luZm8gYW5kIGRldmljZV9pbmZvWyJzdGF0dXMiXSA9PSAic3VjY2VzcyI6CiAgICAgICAgICAgICAgICBkYXRhID0gZGV2aWNlX2luZm8uZ2V0KCJkYXRhIiwge30pCiAgICAgICAgICAgICAgICBhbmRyb2lkX2lkID0gZGF0YS5nZXQoImFuZHJvaWRfaWQiLCAiIikKICAgICAgICAgICAgICAgIGlmIGFuZHJvaWRfaWQ6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZHJvaWRfaWQKICAgICAgICAgICAgcmV0dXJuICIiCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBs4bqleSBkZXZpY2VfaWQgdOG7qyBoZWxwZXI6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgICAgICAKICAgIGRlZiBtaWdyYXRlX2dvbGlrZV9jb25maWcoc2VsZikgLT4gYm9vbDoKICAgICAgICAiIiIKICAgICAgICBYw7NhIGPDoWMgY+G6pXUgaMOsbmggR29MaWtlIHRyw7luZyBs4bq3cCBraMO0bmcgY8OybiBj4bqnbiB0aGnhur90CiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSB0aMOgbmggY8O0bmcsIEZhbHNlIG7hur91IHRo4bqldCBi4bqhaQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgcHJpbnQoIsSQYW5nIHjDs2EgY+G6pXUgaMOsbmggR29MaWtlIHRyw7luZyBs4bq3cC4uLiIpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE3hu58ga+G6v3QgbuG7kWkgREIKICAgICAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBEYW5oIHPDoWNoIGPDoWMga2V5IGPhuqduIHjDs2EKICAgICAgICAgICAga2V5c190b19kZWxldGUgPSBbCiAgICAgICAgICAgICAgICAiZ29saWtlX2hlYWRlcnMiLCAKICAgICAgICAgICAgICAgICJnb2xpa2VfaGVhZGVyc191cGRhdGVkIiwKICAgICAgICAgICAgICAgICJnb2xpa2VfYXBpX2Jhc2UiCiAgICAgICAgICAgIF0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgWMOzYSBjw6FjIGtleSB0csO5bmcgbOG6t3AgY8WpCiAgICAgICAgICAgIGRlbGV0ZWRfY291bnQgPSAwCiAgICAgICAgICAgIGZvciBrZXkgaW4ga2V5c190b19kZWxldGU6CiAgICAgICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiREVMRVRFIEZST00gY29uZmlnIFdIRVJFIGtleSA9ID8iLCAoa2V5LCkpCiAgICAgICAgICAgICAgICBkZWxldGVkX2NvdW50ICs9IGN1cnNvci5yb3djb3VudAogICAgICAgICAgICAKICAgICAgICAgICAgIyBDb21taXQgdGhheSDEkeG7lWkKICAgICAgICAgICAgY29ubi5jb21taXQoKQogICAgICAgICAgICAKICAgICAgICAgICAgcHJpbnQoZiLEkMOjIHjDs2Ege2RlbGV0ZWRfY291bnR9IGPhuqV1IGjDrG5oIEdvTGlrZSB0csO5bmcgbOG6t3AiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIHjDs2EgY+G6pXUgaMOsbmggR29MaWtlIHRyw7luZyBs4bq3cDoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlIAoKICAgIGRlZiBzZXRfYWNjb3VudF9pbmFjdGl2ZV91bnRpbF9uZXh0X3Jlc2V0KHNlbGYsIGFjY291bnRfaWQ6IGludCwgaW5hY3RpdmVfcmVhc29uOiBzdHIgPSAixJDDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGpvYiBow6BuZyBuZ8OgeSIpIC0+IGJvb2w6CiAgICAgICAgIiIixJDhurd0IHTDoGkga2hv4bqjbiB2w6BvIHRy4bqhbmcgdGjDoWkgaW5hY3RpdmUgxJHhur9uIGdp4budIHJlc2V0IHRp4bq/cCB0aGVvIGhv4bq3YyBzZXNzaW9uX2Nvb2xkb3duX21pbnV0ZXMgKGNo4buNbiBuZ+G6r24gaMahbikiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBkYXRldGltZSwgY29uZmlnLCB0aW1lCiAgICAgICAgICAgICMgTOG6pXkgdGjDtG5nIHRpbiB0w6BpIGtob+G6o24KICAgICAgICAgICAgYWNjb3VudCA9IHNlbGYuZ2V0X2FjY291bnQoYWNjb3VudF9pZCkKICAgICAgICAgICAgaWYgbm90IGFjY291bnQ6CiAgICAgICAgICAgICAgICBwcmludChmIltEQl0gS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiBjw7MgSUQge2FjY291bnRfaWR9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICMgR2nhu50gcmVzZXQgdsOgIHNlc3Npb24gY29vbGRvd24gLSBz4butIGThu6VuZyBkYWlseV9yZXNldF9ob3VyIHRoYXkgdsOsIGpvYl9ob3VyCiAgICAgICAgICAgIGRhaWx5X3Jlc2V0X2hvdXIgPSBzZWxmLmdldCgiZGFpbHlfcmVzZXRfaG91ciIsIDcpICAjIE3hurdjIMSR4buLbmggN2ggc8OhbmcKICAgICAgICAgICAgc2Vzc2lvbl9jb29sZG93bl9taW51dGVzID0gc2VsZi5nZXQoInNlc3Npb25fY29vbGRvd25fbWludXRlcyIsIGNvbmZpZy5ERUZBVUxUX0NPT0xET1dOX01JTlVURVMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrW5oIHRo4budaSBnaWFuIMSR4bq/biBsw7pjIHJlc2V0IHRp4bq/cCB0aGVvCiAgICAgICAgICAgIG5vdyA9IGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpCiAgICAgICAgICAgIG5leHRfcmVzZXQgPSBub3cucmVwbGFjZShob3VyPWRhaWx5X3Jlc2V0X2hvdXIsIG1pbnV0ZT0wLCBzZWNvbmQ9MCwgbWljcm9zZWNvbmQ9MCkKICAgICAgICAgICAgaWYgbm93ID49IG5leHRfcmVzZXQ6CiAgICAgICAgICAgICAgICBuZXh0X3Jlc2V0ID0gbmV4dF9yZXNldCArIGRhdGV0aW1lLnRpbWVkZWx0YShkYXlzPTEpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFTDrW5oIHPhu5EgcGjDunQgdOG7qyBiw6J5IGdp4budIMSR4bq/biBsw7pjIHJlc2V0CiAgICAgICAgICAgIHRpbWVfdG9fcmVzZXRfbWludXRlcyA9IGludCgobmV4dF9yZXNldCAtIG5vdykudG90YWxfc2Vjb25kcygpIC8gNjApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIENo4buNbiB0aOG7nWkgZ2lhbiBuZ+G6r24gaMahbiBnaeG7r2EgdGltZV90b19yZXNldCB2w6Agc2Vzc2lvbl9jb29sZG93bl9taW51dGVzCiAgICAgICAgICAgIGRpc2FibGVfbWludXRlcyA9IG1pbih0aW1lX3RvX3Jlc2V0X21pbnV0ZXMsIHNlc3Npb25fY29vbGRvd25fbWludXRlcykKICAgICAgICAgICAgam9iX2Rpc2FibGVfdW50aWwgPSBpbnQodGltZS50aW1lKCkgKyBkaXNhYmxlX21pbnV0ZXMgKiA2MCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KGYiW0RCXSBUw6BpIGtob+G6o24ge2FjY291bnQuZ2V0KCd1bmlxdWVfdXNlcm5hbWUnLCBhY2NvdW50X2lkKX06IHRo4budaSBnaWFuIMSR4bq/biByZXNldCA9IHt0aW1lX3RvX3Jlc2V0X21pbnV0ZXN9IHBow7p0LCBjb29sZG93biA9IHtzZXNzaW9uX2Nvb2xkb3duX21pbnV0ZXN9IHBow7p0LCBjaOG7jW4gPSB7ZGlzYWJsZV9taW51dGVzfSBwaMO6dCIpCiAgICAgICAgICAgIAogICAgICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiaW5hY3RpdmUiLAogICAgICAgICAgICAgICAgImpvYl9kaXNhYmxlX3VudGlsIjogam9iX2Rpc2FibGVfdW50aWwsCiAgICAgICAgICAgICAgICAiam9ic19kb25lX2luX3Nlc3Npb24iOiAwLAogICAgICAgICAgICAgICAgImZvbGxvd19pbl9zZXNzaW9uIjogMCwKICAgICAgICAgICAgICAgICJpbmFjdGl2ZV9yZWFzb24iOiBpbmFjdGl2ZV9yZWFzb24sCiAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2VsZi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiW0RCXSBM4buXaSBzZXRfYWNjb3VudF9pbmFjdGl2ZV91bnRpbF9uZXh0X3Jlc2V0OiB7ZX0iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgc2V0X2FjY291bnRfaW5hY3RpdmUoc2VsZiwgYWNjb3VudF9pZDogaW50LCBjb29sZG93bl9taW51dGVzOiBpbnQgPSBOb25lLCBpbmFjdGl2ZV9yZWFzb246IHN0ciA9ICLEkMOjIGhvw6BuIHRow6BuaCBz4buRIGpvYiB0cm9uZyBwaGnDqm4iKSAtPiBib29sOgogICAgICAgICIiIsSQ4bq3dCB0w6BpIGtob+G6o24gdsOgbyB0cuG6oW5nIHRow6FpIGluYWN0aXZlIHRyb25nIGtob+G6o25nIHRo4budaSBnaWFuIChwaMO6dCkiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCB0aW1lLCBjb25maWcKICAgICAgICAgICAgYWNjb3VudCA9IHNlbGYuZ2V0X2FjY291bnQoYWNjb3VudF9pZCkKICAgICAgICAgICAgaWYgbm90IGFjY291bnQ6CiAgICAgICAgICAgICAgICBwcmludChmIltEQl0gS2jDtG5nIHTDrG0gdGjhuqV5IHTDoGkga2hv4bqjbiBjw7MgSUQge2FjY291bnRfaWR9IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBpZiBjb29sZG93bl9taW51dGVzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBjb29sZG93bl9taW51dGVzID0gc2VsZi5nZXQoInNlc3Npb25fY29vbGRvd25fbWludXRlcyIsIGNvbmZpZy5ERUZBVUxUX0NPT0xET1dOX01JTlVURVMpCiAgICAgICAgICAgICAgICBwcmludChmIltEQl0gU+G7rSBk4bulbmcgY29vbGRvd25fbWludXRlcyBt4bq3YyDEkeG7i25oOiB7Y29vbGRvd25fbWludXRlc30iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJbREJdIFPhu60gZOG7pW5nIGNvb2xkb3duX21pbnV0ZXMgxJHGsOG7o2MgdHJ1eeG7gW4gdsOgbzoge2Nvb2xkb3duX21pbnV0ZXN9IikKICAgICAgICAgICAgCiAgICAgICAgICAgIGpvYl9kaXNhYmxlX3VudGlsID0gaW50KHRpbWUudGltZSgpICsgY29vbGRvd25fbWludXRlcyAqIDYwKQogICAgICAgICAgICBwcmludChmIltEQl0gU2V0IGFjY291bnQgaW5hY3RpdmU6IGNvb2xkb3duX21pbnV0ZXM9e2Nvb2xkb3duX21pbnV0ZXN9LCBqb2JfZGlzYWJsZV91bnRpbD17am9iX2Rpc2FibGVfdW50aWx9LCBjdXJyZW50X3RpbWU9e2ludCh0aW1lLnRpbWUoKSl9IikKICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAic3RhdHVzIjogImluYWN0aXZlIiwKICAgICAgICAgICAgICAgICJqb2JfZGlzYWJsZV91bnRpbCI6IGpvYl9kaXNhYmxlX3VudGlsLAogICAgICAgICAgICAgICAgImpvYnNfZG9uZV9pbl9zZXNzaW9uIjogMCwKICAgICAgICAgICAgICAgICJmb2xsb3dfaW5fc2Vzc2lvbiI6IDAsCiAgICAgICAgICAgICAgICAiaW5hY3RpdmVfcmVhc29uIjogaW5hY3RpdmVfcmVhc29uLAogICAgICAgICAgICAgICAgImlzX3N5bmMiOiBGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGYudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIltEQl0gTOG7l2kgc2V0X2FjY291bnRfaW5hY3RpdmU6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZSAKCiAgICBkZWYgZGlzYWJsZV9hY2NvdW50X2ZvbGxvdyhzZWxmLCBhY2NvdW50X2lkOiBpbnQsIHBlbmFsdHlfaG91cnM6IGludCA9IE5vbmUsIHBlbmFsdHlfbWludXRlczogaW50ID0gTm9uZSwgcmVhc29uOiBzdHIgPSAixJDDoyDEkeG6oXQgZ2nhu5tpIGjhuqFuIGZvbGxvdyIpIC0+IGJvb2w6CiAgICAgICAgIiIiCiAgICAgICAgRGlzYWJsZSBmb2xsb3cgY2hvIHTDoGkga2hv4bqjbiB0cm9uZyBt4buZdCBraG/huqNuZyB0aOG7nWkgZ2lhbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnRfaWQ6IElEIGPhu6dhIHTDoGkga2hv4bqjbgogICAgICAgICAgICBwZW5hbHR5X2hvdXJzOiBT4buRIGdp4budIGRpc2FibGUgZm9sbG93ICjGsHUgdGnDqm4gdGjhuqVwIGjGoW4gcGVuYWx0eV9taW51dGVzKQogICAgICAgICAgICBwZW5hbHR5X21pbnV0ZXM6IFPhu5EgcGjDunQgZGlzYWJsZSBmb2xsb3cgKMawdSB0acOqbiBjYW8gaMahbiBwZW5hbHR5X2hvdXJzKQogICAgICAgICAgICByZWFzb246IEzDvSBkbyBkaXNhYmxlIGZvbGxvdwogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbXBvcnQgdGltZQogICAgICAgICAgICBhY2NvdW50ID0gc2VsZi5nZXRfYWNjb3VudChhY2NvdW50X2lkKQogICAgICAgICAgICBpZiBub3QgYWNjb3VudDoKICAgICAgICAgICAgICAgIHByaW50KGYiW0RCXSBLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIGPDsyBJRCB7YWNjb3VudF9pZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICAjIMavdSB0acOqbiBwZW5hbHR5X21pbnV0ZXMsIG7hur91IGtow7RuZyBjw7MgdGjDrCBkw7luZyBwZW5hbHR5X2hvdXJzCiAgICAgICAgICAgIGlmIHBlbmFsdHlfbWludXRlcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHRvdGFsX21pbnV0ZXMgPSBwZW5hbHR5X21pbnV0ZXMKICAgICAgICAgICAgICAgIGRpc3BsYXlfdW5pdCA9IGYie3BlbmFsdHlfbWludXRlc30gcGjDunQiCiAgICAgICAgICAgICAgICBwcmludChmIltEQl0gU+G7rSBk4bulbmcgcGVuYWx0eV9taW51dGVzOiB7cGVuYWx0eV9taW51dGVzfSIpCiAgICAgICAgICAgIGVsaWYgcGVuYWx0eV9ob3VycyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHRvdGFsX21pbnV0ZXMgPSBwZW5hbHR5X2hvdXJzICogNjAKICAgICAgICAgICAgICAgIGRpc3BsYXlfdW5pdCA9IGYie3BlbmFsdHlfaG91cnN9IGdp4budIgogICAgICAgICAgICAgICAgcHJpbnQoZiJbREJdIFPhu60gZOG7pW5nIHBlbmFsdHlfaG91cnM6IHtwZW5hbHR5X2hvdXJzfSAtPiB7dG90YWxfbWludXRlc30gcGjDunQiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBN4bq3YyDEkeG7i25oIDEyIGdp4budID0gNzIwIHBow7p0CiAgICAgICAgICAgICAgICB0b3RhbF9taW51dGVzID0gNzIwCiAgICAgICAgICAgICAgICBkaXNwbGF5X3VuaXQgPSAiNzIwIHBow7p0ICht4bq3YyDEkeG7i25oKSIKICAgICAgICAgICAgICAgIHByaW50KGYiW0RCXSBT4butIGThu6VuZyBt4bq3YyDEkeG7i25oOiB7dG90YWxfbWludXRlc30gcGjDunQiKQogICAgICAgICAgICAKICAgICAgICAgICAgZm9sbG93X2Rpc2FibGVfdW50aWwgPSBpbnQodGltZS50aW1lKCkpICsgdG90YWxfbWludXRlcyAqIDYwCiAgICAgICAgICAgIHByaW50KGYiW0RCXSBEaXNhYmxlIGZvbGxvdzogdG90YWxfbWludXRlcz17dG90YWxfbWludXRlc30sIGZvbGxvd19kaXNhYmxlX3VudGlsPXtmb2xsb3dfZGlzYWJsZV91bnRpbH0sIGN1cnJlbnRfdGltZT17aW50KHRpbWUudGltZSgpKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgdXBkYXRlX2RhdGEgPSB7CiAgICAgICAgICAgICAgICAiZGlzYWJsZV9mb2xsb3ciOiBUcnVlLAogICAgICAgICAgICAgICAgImZvbGxvd19kaXNhYmxlX3VudGlsIjogZm9sbG93X2Rpc2FibGVfdW50aWwsCiAgICAgICAgICAgICAgICAiaW5hY3RpdmVfZm9sbG93X3JlYXNvbiI6IHJlYXNvbiwKICAgICAgICAgICAgICAgICJpc19zeW5jIjogRmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgc2VsZi51cGRhdGVfYWNjb3VudChhY2NvdW50X2lkLCB1cGRhdGVfZGF0YSkKICAgICAgICAgICAgcHJpbnQoZiJbREJdIMSQw6MgZGlzYWJsZSBmb2xsb3cgY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsIGFjY291bnRfaWQpfSB0cm9uZyB7ZGlzcGxheV91bml0fSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJbREJdIEzhu5dpIGRpc2FibGVfYWNjb3VudF9mb2xsb3c6IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBlbmFibGVfYWNjb3VudF9mb2xsb3coc2VsZiwgYWNjb3VudF9pZDogaW50KSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEVuYWJsZSBs4bqhaSBmb2xsb3cgY2hvIHTDoGkga2hv4bqjbgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnRfaWQ6IElEIGPhu6dhIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBib29sOiBUcnVlIG7hur91IHRow6BuaCBjw7RuZywgRmFsc2UgbuG6v3UgdGjhuqV0IGLhuqFpCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY2NvdW50ID0gc2VsZi5nZXRfYWNjb3VudChhY2NvdW50X2lkKQogICAgICAgICAgICBpZiBub3QgYWNjb3VudDoKICAgICAgICAgICAgICAgIHByaW50KGYiW0RCXSBLaMO0bmcgdMOsbSB0aOG6pXkgdMOgaSBraG/huqNuIGPDsyBJRCB7YWNjb3VudF9pZH0iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICB1cGRhdGVfZGF0YSA9IHsKICAgICAgICAgICAgICAgICJkaXNhYmxlX2ZvbGxvdyI6IEZhbHNlLAogICAgICAgICAgICAgICAgImZvbGxvd19kaXNhYmxlX3VudGlsIjogMCwKICAgICAgICAgICAgICAgICJpbmFjdGl2ZV9mb2xsb3dfcmVhc29uIjogIiIsCiAgICAgICAgICAgICAgICAiaXNfc3luYyI6IEZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYudXBkYXRlX2FjY291bnQoYWNjb3VudF9pZCwgdXBkYXRlX2RhdGEpCiAgICAgICAgICAgIHByaW50KGYiW0RCXSDEkMOjIGVuYWJsZSBmb2xsb3cgY2hvIHTDoGkga2hv4bqjbiB7YWNjb3VudC5nZXQoJ3VuaXF1ZV91c2VybmFtZScsIGFjY291bnRfaWQpfSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJbREJdIEzhu5dpIGVuYWJsZV9hY2NvdW50X2ZvbGxvdzoge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlIAoKICAgIGRlZiBnZXRfYWNjb3VudHNfYnlfYXBwX2FuZF9nb2xpa2Vfc3RhdHVzKHNlbGYsIGFwcDogc3RyLCBpc19saW5rZWQ6IGJvb2wgPSBGYWxzZSkgLT4gTGlzdFtEaWN0W3N0ciwgQW55XV06CiAgICAgICAgIiIiCiAgICAgICAgTOG6pXkgZGFuaCBzw6FjaCB0w6BpIGtob+G6o24gdGhlbyBhcHAgdsOgIHRy4bqhbmcgdGjDoWkgZ29saWtlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYXBwOiBUw6puIOG7qW5nIGThu6VuZyAoaW5zdGFncmFtLCB0aWt0b2ssIC4uLikKICAgICAgICAgICAgaXNfbGlua2VkOiBUcnVlIG7hur91IGzhuqV5IHTDoGkga2hv4bqjbiDEkcOjIGxpw6puIGvhur90LCBGYWxzZSBu4bq/dSBs4bqleSB0w6BpIGtob+G6o24gY2jGsGEgbGnDqm4ga+G6v3QKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtEaWN0W3N0ciwgQW55XV06IERhbmggc8OhY2ggdMOgaSBraG/huqNuCiAgICAgICAgIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSBhY2NvdW50cyBXSEVSRSBhcHAgPSA/IEFORCBpc19nb2xpa2VfbGlua2VkID0gPyIKICAgICAgICBwYXJhbXMgPSBbYXBwLCAxIGlmIGlzX2xpbmtlZCBlbHNlIDBdCiAgICAgICAgCiAgICAgICAgIyBM4buNYyB0aGVvIGRldmljZV9pZCBj4bunYSB0aGnhur90IGLhu4sgaGnhu4duIHThuqFpCiAgICAgICAgY3VycmVudF9kZXZpY2VfaWQgPSBzZWxmLmdldF9vcl9jcmVhdGVfZGV2aWNlX2lkKCkKICAgICAgICBpZiBjdXJyZW50X2RldmljZV9pZDoKICAgICAgICAgICAgcXVlcnkgKz0gIiBBTkQgZGV2aWNlX2lkID0gPyIKICAgICAgICAgICAgcGFyYW1zLmFwcGVuZChjdXJyZW50X2RldmljZV9pZCkKICAgICAgICAKICAgICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgcGFyYW1zKQogICAgICAgIGNvbHVtbl9uYW1lcyA9IFtkZXNjcmlwdGlvblswXSBmb3IgZGVzY3JpcHRpb24gaW4gY3Vyc29yLmRlc2NyaXB0aW9uXQogICAgICAgIHJlc3VsdHMgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgICAgIAogICAgICAgIGFjY291bnRzID0gW10KICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHM6CiAgICAgICAgICAgICMgQ2h1eeG7g24gxJHhu5VpIGvhur90IHF14bqjIHRow6BuaCBkaWN0CiAgICAgICAgICAgIGFjY291bnQgPSB7Y29sdW1uX25hbWVzW2ldOiByZXN1bHRbaV0gZm9yIGkgaW4gcmFuZ2UobGVuKGNvbHVtbl9uYW1lcykpfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgYm9vbGVhbgogICAgICAgICAgICBhY2NvdW50WyJpc19sb2dpbiJdID0gYm9vbChhY2NvdW50WyJpc19sb2dpbiJdKQogICAgICAgICAgICBhY2NvdW50WyJqb2JfZW5hYmxlIl0gPSBib29sKGFjY291bnRbImpvYl9lbmFibGUiXSkKICAgICAgICAgICAgYWNjb3VudFsiaXNfZ29saWtlX2xpbmtlZCJdID0gYm9vbChhY2NvdW50WyJpc19nb2xpa2VfbGlua2VkIl0pCiAgICAgICAgICAgIGFjY291bnRbImlzX3N5bmMiXSA9IGJvb2woYWNjb3VudFsiaXNfc3luYyJdKQogICAgICAgICAgICAjIEx1w7RuIGx1w7RuIMSR4buDIGRpc2FibGVfZm9sbG93ID0gRmFsc2UgdsOsIMSRw6MgYuG7jyBnaeG7m2kgaOG6oW4gZm9sbG93CiAgICAgICAgICAgIGFjY291bnRbImRpc2FibGVfZm9sbG93Il0gPSBib29sKGFjY291bnRbImRpc2FibGVfZm9sbG93Il0pCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFRow6ptIGThu68gbGnhu4d1IHBo4bulIHThu6sgdHLGsOG7nW5nIGRhdGEKICAgICAgICAgICAgaWYgImRhdGEiIGluIGFjY291bnQgYW5kIGFjY291bnRbImRhdGEiXToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBleHRyYV9kYXRhID0ganNvbi5sb2FkcyhhY2NvdW50WyJkYXRhIl0pCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudC51cGRhdGUoZXh0cmFfZGF0YSkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBYw7NhIHRyxrDhu51uZyBkYXRhIMSR4buDIHRyw6FuaCB0csO5bmcgbOG6t3AKICAgICAgICAgICAgaWYgImRhdGEiIGluIGFjY291bnQ6CiAgICAgICAgICAgICAgICBkZWwgYWNjb3VudFsiZGF0YSJdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgYWNjb3VudHMuYXBwZW5kKGFjY291bnQpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIGFjY291bnRzCiAgICAKICAgIGRlZiBnZXRfYWNjb3VudF9jYXJlX2RhdGEoc2VsZiwgYWNjb3VudF9pZDogaW50KSAtPiBkaWN0OgogICAgICAgICIiIgogICAgICAgIEzhuqV5IGNhcmUgZGF0YSBj4bunYSB0w6BpIGtob+G6o24gZMaw4bubaSBk4bqhbmcgZGljdAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGFjY291bnRfaWQ6IElEIGPhu6dhIHTDoGkga2hv4bqjbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBkaWN0OiBDYXJlIGRhdGEgaG/hurdjIGRpY3QgcuG7l25nIG7hur91IGNoxrBhIGPDswogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdChzZWxmLmRiX3BhdGgpCiAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgY2FyZV9kYXRhIEZST00gYWNjb3VudHMgV0hFUkUgaWQgPSA/IiwgKGFjY291bnRfaWQsKSkKICAgICAgICAgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKICAgICAgICAgICAgY29ubi5jbG9zZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXN1bHQgYW5kIHJlc3VsdFswXToKICAgICAgICAgICAgICAgIGltcG9ydCBqc29uCiAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhyZXN1bHRbMF0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4ge30KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGzhuqV5IGNhcmUgZGF0YSBjaG8gYWNjb3VudCB7YWNjb3VudF9pZH06IHtlfSIpCiAgICAgICAgICAgIHJldHVybiB7fQogICAgCiAgICBkZWYgdXBkYXRlX2FjY291bnRfY2FyZV9kYXRhKHNlbGYsIGFjY291bnRfaWQ6IGludCwgY2FyZV9kYXRhOiBkaWN0KToKICAgICAgICAiIiIKICAgICAgICBD4bqtcCBuaOG6rXQgY2FyZSBkYXRhIGNobyB0w6BpIGtob+G6o24KICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBhY2NvdW50X2lkOiBJRCBj4bunYSB0w6BpIGtob+G6o24KICAgICAgICAgICAgY2FyZV9kYXRhOiBEaWN0aW9uYXJ5IGNo4bupYSB0aMO0bmcgdGluIGNhcmUKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGltcG9ydCBqc29uCiAgICAgICAgICAgIGNhcmVfanNvbiA9IGpzb24uZHVtcHMoY2FyZV9kYXRhKQogICAgICAgICAgICAKICAgICAgICAgICAgY29ubiA9IHNxbGl0ZTMuY29ubmVjdChzZWxmLmRiX3BhdGgpCiAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgIlVQREFURSBhY2NvdW50cyBTRVQgY2FyZV9kYXRhID0gPywgaXNfc3luYyA9IDAgV0hFUkUgaWQgPSA/IiwgCiAgICAgICAgICAgICAgICAoY2FyZV9qc29uLCBhY2NvdW50X2lkKQogICAgICAgICAgICApCiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgY29ubi5jbG9zZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBwcmludChmIsSQw6MgY+G6rXAgbmjhuq10IGNhcmUgZGF0YSBjaG8gYWNjb3VudCB7YWNjb3VudF9pZH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgY+G6rXAgbmjhuq10IGNhcmUgZGF0YSBjaG8gYWNjb3VudCB7YWNjb3VudF9pZH06IHtlfSIpCiAgICAKICAgIGRlZiBtZXJnZV9hY2NvdW50X2NhcmVfZGF0YShzZWxmLCBhY2NvdW50X2lkOiBpbnQsIG5ld19kYXRhOiBkaWN0KToKICAgICAgICAiIiIKICAgICAgICBNZXJnZSBk4buvIGxp4buHdSBt4bubaSB2w6BvIGNhcmUgZGF0YSBoaeG7h24gY8OzCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudF9pZDogSUQgY+G7p2EgdMOgaSBraG/huqNuCiAgICAgICAgICAgIG5ld19kYXRhOiBEaWN0aW9uYXJ5IGNo4bupYSBk4buvIGxp4buHdSBt4bubaSBj4bqnbiBtZXJnZQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgIyBM4bqleSBjYXJlIGRhdGEgaGnhu4duIHThuqFpCiAgICAgICAgICAgIGN1cnJlbnRfZGF0YSA9IHNlbGYuZ2V0X2FjY291bnRfY2FyZV9kYXRhKGFjY291bnRfaWQpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIE1lcmdlIGThu68gbGnhu4d1IG3hu5tpCiAgICAgICAgICAgIGN1cnJlbnRfZGF0YS51cGRhdGUobmV3X2RhdGEpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCBs4bqhaQogICAgICAgICAgICBzZWxmLnVwZGF0ZV9hY2NvdW50X2NhcmVfZGF0YShhY2NvdW50X2lkLCBjdXJyZW50X2RhdGEpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBtZXJnZSBjYXJlIGRhdGEgY2hvIGFjY291bnQge2FjY291bnRfaWR9OiB7ZX0iKQogICAgCiAgICBkZWYgZ2V0X2FjY291bnRfbGFzdF9wb3N0X3RpbWUoc2VsZiwgYWNjb3VudF9pZDogaW50LCBhcHA6IHN0cikgLT4gT3B0aW9uYWxbaW50XToKICAgICAgICAiIiIKICAgICAgICBM4bqleSB0aOG7nWkgZ2lhbiDEkcSDbmcgYsOgaSBn4bqnbiBuaOG6pXQgY+G7p2EgdMOgaSBraG/huqNuCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudF9pZDogSUQgY+G7p2EgdMOgaSBraG/huqNuCiAgICAgICAgICAgIGFwcDogVMOqbiBhcHAKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgT3B0aW9uYWxbaW50XTogVGltZXN0YW1wIGPhu6dhIGzhuqduIMSRxINuZyBiw6BpIGfhuqduIG5o4bqldCwgTm9uZSBu4bq/dSBjaMawYSBjw7MKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNvbm4gPSBzZWxmLl9nZXRfY29ubmVjdGlvbigpCiAgICAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgIlNFTEVDVCBsYXN0X3Bvc3RfdGltZSBGUk9NIGFjY291bnRzIFdIRVJFIGlkID0gPyBBTkQgYXBwID0gPyIsCiAgICAgICAgICAgICAgICAoYWNjb3VudF9pZCwgYXBwKQogICAgICAgICAgICApCiAgICAgICAgICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdIGlmIHJlc3VsdCBhbmQgcmVzdWx0WzBdIGVsc2UgTm9uZQogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiTOG7l2kga2hpIGzhuqV5IGxhc3RfcG9zdF90aW1lIGNobyBhY2NvdW50IHthY2NvdW50X2lkfToge2V9IikKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgZGVmIHNldF9hY2NvdW50X2xhc3RfcG9zdF90aW1lKHNlbGYsIGFjY291bnRfaWQ6IGludCwgYXBwOiBzdHIsIHBvc3RfdGltZTogaW50KSAtPiBib29sOgogICAgICAgICIiIgogICAgICAgIEPhuq1wIG5o4bqtdCB0aOG7nWkgZ2lhbiDEkcSDbmcgYsOgaSBn4bqnbiBuaOG6pXQgY+G7p2EgdMOgaSBraG/huqNuCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgYWNjb3VudF9pZDogSUQgY+G7p2EgdMOgaSBraG/huqNuCiAgICAgICAgICAgIGFwcDogVMOqbiBhcHAKICAgICAgICAgICAgcG9zdF90aW1lOiBUaW1lc3RhbXAgY+G7p2EgbOG6p24gxJHEg25nIGLDoGkKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogVHJ1ZSBu4bq/dSBj4bqtcCBuaOG6rXQgdGjDoG5oIGPDtG5nCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjb25uID0gc2VsZi5fZ2V0X2Nvbm5lY3Rpb24oKQogICAgICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgICAgIAogICAgICAgICAgICBjdXJzb3IuZXhlY3V0ZSgKICAgICAgICAgICAgICAgICJVUERBVEUgYWNjb3VudHMgU0VUIGxhc3RfcG9zdF90aW1lID0gPyBXSEVSRSBpZCA9ID8gQU5EIGFwcCA9ID8iLAogICAgICAgICAgICAgICAgKHBvc3RfdGltZSwgYWNjb3VudF9pZCwgYXBwKQogICAgICAgICAgICApCiAgICAgICAgICAgIGNvbm4uY29tbWl0KCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBjdXJzb3Iucm93Y291bnQgPiAwCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJM4buXaSBraGkgY+G6rXAgbmjhuq10IGxhc3RfcG9zdF90aW1lIGNobyBhY2NvdW50IHthY2NvdW50X2lkfToge2V9IikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHVwZGF0ZV9hbGxfYWNjb3VudHNfdXNlcl9pZChzZWxmLCB1c2VyX2lkOiBzdHIpIC0+IGludDoKICAgICAgICAiIiIKICAgICAgICBD4bqtcCBuaOG6rXQgdXNlcl9pZCBjaG8gdOG6pXQgY+G6oyBhY2NvdW50cyBoaeG7h24gY8OzIHRyb25nIGRhdGFiYXNlCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdXNlcl9pZDogVXNlciBJRCBj4bqnbiBj4bqtcCBuaOG6rXQKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgaW50OiBT4buRIGzGsOG7o25nIGFjY291bnRzIMSRw6MgxJHGsOG7o2MgY+G6rXAgbmjhuq10CiAgICAgICAgIiIiCiAgICAgICAgY29ubiA9IHNlbGYuX2dldF9jb25uZWN0aW9uKCkKICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAgICAgICAgCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIEPhuq1wIG5o4bqtdCB1c2VyX2lkIGNobyB04bqldCBj4bqjIGFjY291bnRzCiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKCIiIgogICAgICAgICAgICAgICAgVVBEQVRFIGFjY291bnRzIAogICAgICAgICAgICAgICAgU0VUIHVzZXJfaWQgPSA/LCAKICAgICAgICAgICAgICAgICAgICBsYXN0X3VwZGF0ZSA9ID8sCiAgICAgICAgICAgICAgICAgICAgaXNfc3luYyA9IDAKICAgICAgICAgICAgICAgIFdIRVJFIHVzZXJfaWQgSVMgTlVMTCBPUiB1c2VyX2lkICE9ID8KICAgICAgICAgICAgIiIiLCAodXNlcl9pZCwgaW50KHRpbWUudGltZSgpKSwgdXNlcl9pZCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBjb25uLmNvbW1pdCgpCiAgICAgICAgICAgIHVwZGF0ZWRfY291bnQgPSBjdXJzb3Iucm93Y291bnQKICAgICAgICAgICAgCiAgICAgICAgICAgIHByaW50KGYixJDDoyBj4bqtcCBuaOG6rXQgdXNlcl9pZCBjaG8ge3VwZGF0ZWRfY291bnR9IGFjY291bnRzIikKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRfY291bnQKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdXNlcl9pZCBjaG8gdOG6pXQgY+G6oyBhY2NvdW50czoge2V9IikKICAgICAgICAgICAgY29ubi5yb2xsYmFjaygpCiAgICAgICAgICAgIHJldHVybiAwCg==').decode('utf-8'))
